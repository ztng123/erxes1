[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar Mongo = Package.mongo.Mongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:schema-index\":{\"lib\":{\"indexing.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_schema-index/lib/indexing.js                                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Extend the schema options allowed by SimpleSchema                                                                // 1\nSimpleSchema.extendOptions({                                                                                        // 2\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),                                                      // 3\n  unique: Match.Optional(Boolean),                                                                                  // 4\n  sparse: Match.Optional(Boolean)                                                                                   // 5\n}); // Define validation error messages (legacy)                                                                    // 2\n                                                                                                                    //\nif (!SimpleSchema.version || SimpleSchema.version < 2) {                                                            // 9\n  SimpleSchema.messages({                                                                                           // 10\n    notUnique: '[label] must be unique'                                                                             // 11\n  });                                                                                                               // 10\n}                                                                                                                   // 13\n                                                                                                                    //\nif (Meteor.isServer) {                                                                                              // 15\n  Collection2.on('schema.attached', function (collection, ss) {                                                     // 16\n    // Define validation error messages                                                                             // 17\n    if (ss.version >= 2) {                                                                                          // 18\n      ss.messageBox.messages({                                                                                      // 19\n        notUnique: '{{label}} must be unique'                                                                       // 20\n      });                                                                                                           // 19\n    }                                                                                                               // 22\n                                                                                                                    //\n    function ensureIndex(index, indexName, unique, sparse) {                                                        // 24\n      Meteor.startup(function () {                                                                                  // 25\n        collection._collection._ensureIndex(index, {                                                                // 26\n          background: true,                                                                                         // 27\n          name: indexName,                                                                                          // 28\n          unique: unique,                                                                                           // 29\n          sparse: sparse                                                                                            // 30\n        });                                                                                                         // 26\n      });                                                                                                           // 32\n    }                                                                                                               // 33\n                                                                                                                    //\n    function dropIndex(indexName) {                                                                                 // 35\n      Meteor.startup(function () {                                                                                  // 36\n        try {                                                                                                       // 37\n          collection._collection._dropIndex(indexName);                                                             // 38\n        } catch (err) {// no index with that name, which is what we want                                            // 39\n        }                                                                                                           // 41\n      });                                                                                                           // 42\n    }                                                                                                               // 43\n                                                                                                                    //\n    var propName = ss.version === 2 ? 'mergedSchema' : 'schema'; // Loop over fields definitions and ensure collection indexes (server side only)\n                                                                                                                    //\n    _.each(ss[propName](), function (definition, fieldName) {                                                       // 48\n      if ('index' in definition || definition.unique === true) {                                                    // 49\n        var index = {},                                                                                             // 50\n            indexValue; // If they specified `unique: true` but not `index`,                                        // 50\n        // we assume `index: 1` to set up the unique index in mongo                                                 // 52\n                                                                                                                    //\n        if ('index' in definition) {                                                                                // 53\n          indexValue = definition.index;                                                                            // 54\n          if (indexValue === true) indexValue = 1;                                                                  // 55\n        } else {                                                                                                    // 56\n          indexValue = 1;                                                                                           // 57\n        }                                                                                                           // 58\n                                                                                                                    //\n        var indexName = 'c2_' + fieldName; // In the index object, we want object array keys without the \".$\" piece\n                                                                                                                    //\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");                                                       // 61\n        index[idxFieldName] = indexValue;                                                                           // 62\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);                                // 63\n        var sparse = definition.sparse || false; // If unique and optional, force sparse to prevent errors          // 64\n                                                                                                                    //\n        if (!sparse && unique && definition.optional) sparse = true;                                                // 67\n                                                                                                                    //\n        if (indexValue === false) {                                                                                 // 69\n          dropIndex(indexName);                                                                                     // 70\n        } else {                                                                                                    // 71\n          ensureIndex(index, indexName, unique, sparse);                                                            // 72\n        }                                                                                                           // 73\n      }                                                                                                             // 74\n    });                                                                                                             // 75\n  });                                                                                                               // 76\n}                                                                                                                   // 77\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/aldeed:schema-index/lib/indexing.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:schema-index'] = {};\n\n})();\n","servePath":"/packages/aldeed_schema-index.js","sourceMap":{"version":3,"sources":["/packages/aldeed:schema-index/lib/indexing.js"],"names":["SimpleSchema","extendOptions","index","Match","Optional","OneOf","Number","String","Boolean","unique","sparse","version","messages","notUnique","Meteor","isServer","Collection2","on","collection","ss","messageBox","ensureIndex","indexName","startup","_collection","_ensureIndex","background","name","dropIndex","_dropIndex","err","propName","_","each","definition","fieldName","indexValue","idxFieldName","replace","optional"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACAA,aAAaC,aAAb,CAA2B;AACzBC,SAAOC,MAAMC,QAAN,CAAeD,MAAME,KAAN,CAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,OAA5B,CAAf,CADkB;AAEzBC,UAAQN,MAAMC,QAAN,CAAeI,OAAf,CAFiB;AAGzBE,UAAQP,MAAMC,QAAN,CAAeI,OAAf;AAHiB,CAA3B,E,CAMA;;AACA,IAAI,CAACR,aAAaW,OAAd,IAAyBX,aAAaW,OAAb,GAAuB,CAApD,EAAuD;AACrDX,eAAaY,QAAb,CAAsB;AACpBC,eAAW;AADS,GAAtB;AAGD;;AAED,IAAIC,OAAOC,QAAX,EAAqB;AACnBC,cAAYC,EAAZ,CAAe,iBAAf,EAAkC,UAAUC,UAAV,EAAsBC,EAAtB,EAA0B;AAC1D;AACA,QAAIA,GAAGR,OAAH,IAAc,CAAlB,EAAqB;AACnBQ,SAAGC,UAAH,CAAcR,QAAd,CAAuB;AACrBC,mBAAW;AADU,OAAvB;AAGD;;AAED,aAASQ,WAAT,CAAqBnB,KAArB,EAA4BoB,SAA5B,EAAuCb,MAAvC,EAA+CC,MAA/C,EAAuD;AACrDI,aAAOS,OAAP,CAAe,YAAY;AACzBL,mBAAWM,WAAX,CAAuBC,YAAvB,CAAoCvB,KAApC,EAA2C;AACzCwB,sBAAY,IAD6B;AAEzCC,gBAAML,SAFmC;AAGzCb,kBAAQA,MAHiC;AAIzCC,kBAAQA;AAJiC,SAA3C;AAMD,OAPD;AAQD;;AAED,aAASkB,SAAT,CAAmBN,SAAnB,EAA8B;AAC5BR,aAAOS,OAAP,CAAe,YAAY;AACzB,YAAI;AACFL,qBAAWM,WAAX,CAAuBK,UAAvB,CAAkCP,SAAlC;AACD,SAFD,CAEE,OAAOQ,GAAP,EAAY,CACZ;AACD;AACF,OAND;AAOD;;AAED,QAAMC,WAAWZ,GAAGR,OAAH,KAAe,CAAf,GAAmB,cAAnB,GAAoC,QAArD,CA7B0D,CA+B1D;;AACAqB,MAAEC,IAAF,CAAOd,GAAGY,QAAH,GAAP,EAAuB,UAASG,UAAT,EAAqBC,SAArB,EAAgC;AACrD,UAAI,WAAWD,UAAX,IAAyBA,WAAWzB,MAAX,KAAsB,IAAnD,EAAyD;AACvD,YAAIP,QAAQ,EAAZ;AAAA,YAAgBkC,UAAhB,CADuD,CAEvD;AACA;;AACA,YAAI,WAAWF,UAAf,EAA2B;AACzBE,uBAAaF,WAAWhC,KAAxB;AACA,cAAIkC,eAAe,IAAnB,EAAyBA,aAAa,CAAb;AAC1B,SAHD,MAGO;AACLA,uBAAa,CAAb;AACD;;AACD,YAAId,YAAY,QAAQa,SAAxB,CAVuD,CAWvD;;AACA,YAAIE,eAAeF,UAAUG,OAAV,CAAkB,SAAlB,EAA6B,GAA7B,CAAnB;AACApC,cAAMmC,YAAN,IAAsBD,UAAtB;AACA,YAAI3B,SAAS,CAAC,CAACyB,WAAWzB,MAAb,KAAwB2B,eAAe,CAAf,IAAoBA,eAAe,CAAC,CAA5D,CAAb;AACA,YAAI1B,SAASwB,WAAWxB,MAAX,IAAqB,KAAlC,CAfuD,CAiBvD;;AACA,YAAI,CAACA,MAAD,IAAWD,MAAX,IAAqByB,WAAWK,QAApC,EAA8C7B,SAAS,IAAT;;AAE9C,YAAI0B,eAAe,KAAnB,EAA0B;AACxBR,oBAAUN,SAAV;AACD,SAFD,MAEO;AACLD,sBAAYnB,KAAZ,EAAmBoB,SAAnB,EAA8Bb,MAA9B,EAAsCC,MAAtC;AACD;AACF;AACF,KA3BD;AA4BD,GA5DD;AA6DD,yH","file":"/packages/aldeed_schema-index.js","sourcesContent":["// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  sparse: Match.Optional(Boolean),\n});\n\n// Define validation error messages (legacy)\nif (!SimpleSchema.version || SimpleSchema.version < 2) {\n  SimpleSchema.messages({\n    notUnique: '[label] must be unique',\n  });\n}\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    // Define validation error messages\n    if (ss.version >= 2) {\n      ss.messageBox.messages({\n        notUnique: '{{label}} must be unique',\n      });\n    }\n\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {\n          // no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    _.each(ss[propName](), function(definition, fieldName) {\n      if ('index' in definition || definition.unique === true) {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;\n\n        // If unique and optional, force sparse to prevent errors\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}"]}}]