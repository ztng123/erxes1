[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar html, chai, __coffeescriptShare, assert, expect, should;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/practicalmeteor_chai/packages/practicalmeteor_chai.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/practicalmeteor:chai/chai-2.1.0.js                                                                    //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n                                                                                                                  // 1\n;(function(){                                                                                                     // 2\n                                                                                                                  // 3\n/**                                                                                                               // 4\n * Require the module at `name`.                                                                                  // 5\n *                                                                                                                // 6\n * @param {String} name                                                                                           // 7\n * @return {Object} exports                                                                                       // 8\n * @api public                                                                                                    // 9\n */                                                                                                               // 10\n                                                                                                                  // 11\nfunction require(name) {                                                                                          // 12\n  var module = require.modules[name];                                                                             // 13\n  if (!module) throw new Error('failed to require \"' + name + '\"');                                               // 14\n                                                                                                                  // 15\n  if (!('exports' in module) && typeof module.definition === 'function') {                                        // 16\n    module.client = module.component = true;                                                                      // 17\n    module.definition.call(this, module.exports = {}, module);                                                    // 18\n    delete module.definition;                                                                                     // 19\n  }                                                                                                               // 20\n                                                                                                                  // 21\n  return module.exports;                                                                                          // 22\n}                                                                                                                 // 23\n                                                                                                                  // 24\n/**                                                                                                               // 25\n * Meta info, accessible in the global scope unless you use AMD option.                                           // 26\n */                                                                                                               // 27\n                                                                                                                  // 28\nrequire.loader = 'component';                                                                                     // 29\n                                                                                                                  // 30\n/**                                                                                                               // 31\n * Internal helper object, contains a sorting function for semantiv versioning                                    // 32\n */                                                                                                               // 33\nrequire.helper = {};                                                                                              // 34\nrequire.helper.semVerSort = function(a, b) {                                                                      // 35\n  var aArray = a.version.split('.');                                                                              // 36\n  var bArray = b.version.split('.');                                                                              // 37\n  for (var i=0; i<aArray.length; ++i) {                                                                           // 38\n    var aInt = parseInt(aArray[i], 10);                                                                           // 39\n    var bInt = parseInt(bArray[i], 10);                                                                           // 40\n    if (aInt === bInt) {                                                                                          // 41\n      var aLex = aArray[i].substr((\"\"+aInt).length);                                                              // 42\n      var bLex = bArray[i].substr((\"\"+bInt).length);                                                              // 43\n      if (aLex === '' && bLex !== '') return 1;                                                                   // 44\n      if (aLex !== '' && bLex === '') return -1;                                                                  // 45\n      if (aLex !== '' && bLex !== '') return aLex > bLex ? 1 : -1;                                                // 46\n      continue;                                                                                                   // 47\n    } else if (aInt > bInt) {                                                                                     // 48\n      return 1;                                                                                                   // 49\n    } else {                                                                                                      // 50\n      return -1;                                                                                                  // 51\n    }                                                                                                             // 52\n  }                                                                                                               // 53\n  return 0;                                                                                                       // 54\n}                                                                                                                 // 55\n                                                                                                                  // 56\n/**                                                                                                               // 57\n * Find and require a module which name starts with the provided name.                                            // 58\n * If multiple modules exists, the highest semver is used.                                                        // 59\n * This function can only be used for remote dependencies.                                                        // 60\n                                                                                                                  // 61\n * @param {String} name - module name: `user~repo`                                                                // 62\n * @param {Boolean} returnPath - returns the canonical require path if true,                                      // 63\n *                               otherwise it returns the epxorted module                                         // 64\n */                                                                                                               // 65\nrequire.latest = function (name, returnPath) {                                                                    // 66\n  function showError(name) {                                                                                      // 67\n    throw new Error('failed to find latest module of \"' + name + '\"');                                            // 68\n  }                                                                                                               // 69\n  // only remotes with semvers, ignore local files conataining a '/'                                              // 70\n  var versionRegexp = /(.*)~(.*)@v?(\\d+\\.\\d+\\.\\d+[^\\/]*)$/;                                                       // 71\n  var remoteRegexp = /(.*)~(.*)/;                                                                                 // 72\n  if (!remoteRegexp.test(name)) showError(name);                                                                  // 73\n  var moduleNames = Object.keys(require.modules);                                                                 // 74\n  var semVerCandidates = [];                                                                                      // 75\n  var otherCandidates = []; // for instance: name of the git branch                                               // 76\n  for (var i=0; i<moduleNames.length; i++) {                                                                      // 77\n    var moduleName = moduleNames[i];                                                                              // 78\n    if (new RegExp(name + '@').test(moduleName)) {                                                                // 79\n        var version = moduleName.substr(name.length+1);                                                           // 80\n        var semVerMatch = versionRegexp.exec(moduleName);                                                         // 81\n        if (semVerMatch != null) {                                                                                // 82\n          semVerCandidates.push({version: version, name: moduleName});                                            // 83\n        } else {                                                                                                  // 84\n          otherCandidates.push({version: version, name: moduleName});                                             // 85\n        }                                                                                                         // 86\n    }                                                                                                             // 87\n  }                                                                                                               // 88\n  if (semVerCandidates.concat(otherCandidates).length === 0) {                                                    // 89\n    showError(name);                                                                                              // 90\n  }                                                                                                               // 91\n  if (semVerCandidates.length > 0) {                                                                              // 92\n    var module = semVerCandidates.sort(require.helper.semVerSort).pop().name;                                     // 93\n    if (returnPath === true) {                                                                                    // 94\n      return module;                                                                                              // 95\n    }                                                                                                             // 96\n    return require(module);                                                                                       // 97\n  }                                                                                                               // 98\n  // if the build contains more than one branch of the same module                                                // 99\n  // you should not use this funciton                                                                             // 100\n  var module = otherCandidates.sort(function(a, b) {return a.name > b.name})[0].name;                             // 101\n  if (returnPath === true) {                                                                                      // 102\n    return module;                                                                                                // 103\n  }                                                                                                               // 104\n  return require(module);                                                                                         // 105\n}                                                                                                                 // 106\n                                                                                                                  // 107\n/**                                                                                                               // 108\n * Registered modules.                                                                                            // 109\n */                                                                                                               // 110\n                                                                                                                  // 111\nrequire.modules = {};                                                                                             // 112\n                                                                                                                  // 113\n/**                                                                                                               // 114\n * Register module at `name` with callback `definition`.                                                          // 115\n *                                                                                                                // 116\n * @param {String} name                                                                                           // 117\n * @param {Function} definition                                                                                   // 118\n * @api private                                                                                                   // 119\n */                                                                                                               // 120\n                                                                                                                  // 121\nrequire.register = function (name, definition) {                                                                  // 122\n  require.modules[name] = {                                                                                       // 123\n    definition: definition                                                                                        // 124\n  };                                                                                                              // 125\n};                                                                                                                // 126\n                                                                                                                  // 127\n/**                                                                                                               // 128\n * Define a module's exports immediately with `exports`.                                                          // 129\n *                                                                                                                // 130\n * @param {String} name                                                                                           // 131\n * @param {Generic} exports                                                                                       // 132\n * @api private                                                                                                   // 133\n */                                                                                                               // 134\n                                                                                                                  // 135\nrequire.define = function (name, exports) {                                                                       // 136\n  require.modules[name] = {                                                                                       // 137\n    exports: exports                                                                                              // 138\n  };                                                                                                              // 139\n};                                                                                                                // 140\nrequire.register(\"chaijs~assertion-error@1.0.0\", function (exports, module) {                                     // 141\n/*!                                                                                                               // 142\n * assertion-error                                                                                                // 143\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>                                                               // 144\n * MIT Licensed                                                                                                   // 145\n */                                                                                                               // 146\n                                                                                                                  // 147\n/*!                                                                                                               // 148\n * Return a function that will copy properties from                                                               // 149\n * one object to another excluding any originally                                                                 // 150\n * listed. Returned function will create a new `{}`.                                                              // 151\n *                                                                                                                // 152\n * @param {String} excluded properties ...                                                                        // 153\n * @return {Function}                                                                                             // 154\n */                                                                                                               // 155\n                                                                                                                  // 156\nfunction exclude () {                                                                                             // 157\n  var excludes = [].slice.call(arguments);                                                                        // 158\n                                                                                                                  // 159\n  function excludeProps (res, obj) {                                                                              // 160\n    Object.keys(obj).forEach(function (key) {                                                                     // 161\n      if (!~excludes.indexOf(key)) res[key] = obj[key];                                                           // 162\n    });                                                                                                           // 163\n  }                                                                                                               // 164\n                                                                                                                  // 165\n  return function extendExclude () {                                                                              // 166\n    var args = [].slice.call(arguments)                                                                           // 167\n      , i = 0                                                                                                     // 168\n      , res = {};                                                                                                 // 169\n                                                                                                                  // 170\n    for (; i < args.length; i++) {                                                                                // 171\n      excludeProps(res, args[i]);                                                                                 // 172\n    }                                                                                                             // 173\n                                                                                                                  // 174\n    return res;                                                                                                   // 175\n  };                                                                                                              // 176\n};                                                                                                                // 177\n                                                                                                                  // 178\n/*!                                                                                                               // 179\n * Primary Exports                                                                                                // 180\n */                                                                                                               // 181\n                                                                                                                  // 182\nmodule.exports = AssertionError;                                                                                  // 183\n                                                                                                                  // 184\n/**                                                                                                               // 185\n * ### AssertionError                                                                                             // 186\n *                                                                                                                // 187\n * An extension of the JavaScript `Error` constructor for                                                         // 188\n * assertion and validation scenarios.                                                                            // 189\n *                                                                                                                // 190\n * @param {String} message                                                                                        // 191\n * @param {Object} properties to include (optional)                                                               // 192\n * @param {callee} start stack function (optional)                                                                // 193\n */                                                                                                               // 194\n                                                                                                                  // 195\nfunction AssertionError (message, _props, ssf) {                                                                  // 196\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')                                       // 197\n    , props = extend(_props || {});                                                                               // 198\n                                                                                                                  // 199\n  // default values                                                                                               // 200\n  this.message = message || 'Unspecified AssertionError';                                                         // 201\n  this.showDiff = false;                                                                                          // 202\n                                                                                                                  // 203\n  // copy from properties                                                                                         // 204\n  for (var key in props) {                                                                                        // 205\n    this[key] = props[key];                                                                                       // 206\n  }                                                                                                               // 207\n                                                                                                                  // 208\n  // capture stack trace                                                                                          // 209\n  ssf = ssf || arguments.callee;                                                                                  // 210\n  if (ssf && Error.captureStackTrace) {                                                                           // 211\n    Error.captureStackTrace(this, ssf);                                                                           // 212\n  }                                                                                                               // 213\n}                                                                                                                 // 214\n                                                                                                                  // 215\n/*!                                                                                                               // 216\n * Inherit from Error.prototype                                                                                   // 217\n */                                                                                                               // 218\n                                                                                                                  // 219\nAssertionError.prototype = Object.create(Error.prototype);                                                        // 220\n                                                                                                                  // 221\n/*!                                                                                                               // 222\n * Statically set name                                                                                            // 223\n */                                                                                                               // 224\n                                                                                                                  // 225\nAssertionError.prototype.name = 'AssertionError';                                                                 // 226\n                                                                                                                  // 227\n/*!                                                                                                               // 228\n * Ensure correct constructor                                                                                     // 229\n */                                                                                                               // 230\n                                                                                                                  // 231\nAssertionError.prototype.constructor = AssertionError;                                                            // 232\n                                                                                                                  // 233\n/**                                                                                                               // 234\n * Allow errors to be converted to JSON for static transfer.                                                      // 235\n *                                                                                                                // 236\n * @param {Boolean} include stack (default: `true`)                                                               // 237\n * @return {Object} object that can be `JSON.stringify`                                                           // 238\n */                                                                                                               // 239\n                                                                                                                  // 240\nAssertionError.prototype.toJSON = function (stack) {                                                              // 241\n  var extend = exclude('constructor', 'toJSON', 'stack')                                                          // 242\n    , props = extend({ name: this.name }, this);                                                                  // 243\n                                                                                                                  // 244\n  // include stack if exists and not turned off                                                                   // 245\n  if (false !== stack && this.stack) {                                                                            // 246\n    props.stack = this.stack;                                                                                     // 247\n  }                                                                                                               // 248\n                                                                                                                  // 249\n  return props;                                                                                                   // 250\n};                                                                                                                // 251\n                                                                                                                  // 252\n});                                                                                                               // 253\n                                                                                                                  // 254\nrequire.register(\"chaijs~type-detect@0.1.1\", function (exports, module) {                                         // 255\n/*!                                                                                                               // 256\n * type-detect                                                                                                    // 257\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>                                                         // 258\n * MIT Licensed                                                                                                   // 259\n */                                                                                                               // 260\n                                                                                                                  // 261\n/*!                                                                                                               // 262\n * Primary Exports                                                                                                // 263\n */                                                                                                               // 264\n                                                                                                                  // 265\nvar exports = module.exports = getType;                                                                           // 266\n                                                                                                                  // 267\n/*!                                                                                                               // 268\n * Detectable javascript natives                                                                                  // 269\n */                                                                                                               // 270\n                                                                                                                  // 271\nvar natives = {                                                                                                   // 272\n    '[object Array]': 'array'                                                                                     // 273\n  , '[object RegExp]': 'regexp'                                                                                   // 274\n  , '[object Function]': 'function'                                                                               // 275\n  , '[object Arguments]': 'arguments'                                                                             // 276\n  , '[object Date]': 'date'                                                                                       // 277\n};                                                                                                                // 278\n                                                                                                                  // 279\n/**                                                                                                               // 280\n * ### typeOf (obj)                                                                                               // 281\n *                                                                                                                // 282\n * Use several different techniques to determine                                                                  // 283\n * the type of object being tested.                                                                               // 284\n *                                                                                                                // 285\n *                                                                                                                // 286\n * @param {Mixed} object                                                                                          // 287\n * @return {String} object type                                                                                   // 288\n * @api public                                                                                                    // 289\n */                                                                                                               // 290\n                                                                                                                  // 291\nfunction getType (obj) {                                                                                          // 292\n  var str = Object.prototype.toString.call(obj);                                                                  // 293\n  if (natives[str]) return natives[str];                                                                          // 294\n  if (obj === null) return 'null';                                                                                // 295\n  if (obj === undefined) return 'undefined';                                                                      // 296\n  if (obj === Object(obj)) return 'object';                                                                       // 297\n  return typeof obj;                                                                                              // 298\n}                                                                                                                 // 299\n                                                                                                                  // 300\nexports.Library = Library;                                                                                        // 301\n                                                                                                                  // 302\n/**                                                                                                               // 303\n * ### Library                                                                                                    // 304\n *                                                                                                                // 305\n * Create a repository for custom type detection.                                                                 // 306\n *                                                                                                                // 307\n * ```js                                                                                                          // 308\n * var lib = new type.Library;                                                                                    // 309\n * ```                                                                                                            // 310\n *                                                                                                                // 311\n */                                                                                                               // 312\n                                                                                                                  // 313\nfunction Library () {                                                                                             // 314\n  this.tests = {};                                                                                                // 315\n}                                                                                                                 // 316\n                                                                                                                  // 317\n/**                                                                                                               // 318\n * #### .of (obj)                                                                                                 // 319\n *                                                                                                                // 320\n * Expose replacement `typeof` detection to the library.                                                          // 321\n *                                                                                                                // 322\n * ```js                                                                                                          // 323\n * if ('string' === lib.of('hello world')) {                                                                      // 324\n *   // ...                                                                                                       // 325\n * }                                                                                                              // 326\n * ```                                                                                                            // 327\n *                                                                                                                // 328\n * @param {Mixed} object to test                                                                                  // 329\n * @return {String} type                                                                                          // 330\n */                                                                                                               // 331\n                                                                                                                  // 332\nLibrary.prototype.of = getType;                                                                                   // 333\n                                                                                                                  // 334\n/**                                                                                                               // 335\n * #### .define (type, test)                                                                                      // 336\n *                                                                                                                // 337\n * Add a test to for the `.test()` assertion.                                                                     // 338\n *                                                                                                                // 339\n * Can be defined as a regular expression:                                                                        // 340\n *                                                                                                                // 341\n * ```js                                                                                                          // 342\n * lib.define('int', /^[0-9]+$/);                                                                                 // 343\n * ```                                                                                                            // 344\n *                                                                                                                // 345\n * ... or as a function:                                                                                          // 346\n *                                                                                                                // 347\n * ```js                                                                                                          // 348\n * lib.define('bln', function (obj) {                                                                             // 349\n *   if ('boolean' === lib.of(obj)) return true;                                                                  // 350\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];                                                           // 351\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();                                                       // 352\n *   return !! ~blns.indexOf(obj);                                                                                // 353\n * });                                                                                                            // 354\n * ```                                                                                                            // 355\n *                                                                                                                // 356\n * @param {String} type                                                                                           // 357\n * @param {RegExp|Function} test                                                                                  // 358\n * @api public                                                                                                    // 359\n */                                                                                                               // 360\n                                                                                                                  // 361\nLibrary.prototype.define = function (type, test) {                                                                // 362\n  if (arguments.length === 1) return this.tests[type];                                                            // 363\n  this.tests[type] = test;                                                                                        // 364\n  return this;                                                                                                    // 365\n};                                                                                                                // 366\n                                                                                                                  // 367\n/**                                                                                                               // 368\n * #### .test (obj, test)                                                                                         // 369\n *                                                                                                                // 370\n * Assert that an object is of type. Will first                                                                   // 371\n * check natives, and if that does not pass it will                                                               // 372\n * use the user defined custom tests.                                                                             // 373\n *                                                                                                                // 374\n * ```js                                                                                                          // 375\n * assert(lib.test('1', 'int'));                                                                                  // 376\n * assert(lib.test('yes', 'bln'));                                                                                // 377\n * ```                                                                                                            // 378\n *                                                                                                                // 379\n * @param {Mixed} object                                                                                          // 380\n * @param {String} type                                                                                           // 381\n * @return {Boolean} result                                                                                       // 382\n * @api public                                                                                                    // 383\n */                                                                                                               // 384\n                                                                                                                  // 385\nLibrary.prototype.test = function (obj, type) {                                                                   // 386\n  if (type === getType(obj)) return true;                                                                         // 387\n  var test = this.tests[type];                                                                                    // 388\n                                                                                                                  // 389\n  if (test && 'regexp' === getType(test)) {                                                                       // 390\n    return test.test(obj);                                                                                        // 391\n  } else if (test && 'function' === getType(test)) {                                                              // 392\n    return test(obj);                                                                                             // 393\n  } else {                                                                                                        // 394\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');                                 // 395\n  }                                                                                                               // 396\n};                                                                                                                // 397\n                                                                                                                  // 398\n});                                                                                                               // 399\n                                                                                                                  // 400\nrequire.register(\"chaijs~deep-eql@0.1.3\", function (exports, module) {                                            // 401\n/*!                                                                                                               // 402\n * deep-eql                                                                                                       // 403\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>                                                         // 404\n * MIT Licensed                                                                                                   // 405\n */                                                                                                               // 406\n                                                                                                                  // 407\n/*!                                                                                                               // 408\n * Module dependencies                                                                                            // 409\n */                                                                                                               // 410\n                                                                                                                  // 411\nvar type = require('chaijs~type-detect@0.1.1');                                                                   // 412\n                                                                                                                  // 413\n/*!                                                                                                               // 414\n * Buffer.isBuffer browser shim                                                                                   // 415\n */                                                                                                               // 416\n                                                                                                                  // 417\nvar Buffer;                                                                                                       // 418\ntry { Buffer = require('buffer').Buffer; }                                                                        // 419\ncatch(ex) {                                                                                                       // 420\n  Buffer = {};                                                                                                    // 421\n  Buffer.isBuffer = function() { return false; }                                                                  // 422\n}                                                                                                                 // 423\n                                                                                                                  // 424\n/*!                                                                                                               // 425\n * Primary Export                                                                                                 // 426\n */                                                                                                               // 427\n                                                                                                                  // 428\nmodule.exports = deepEqual;                                                                                       // 429\n                                                                                                                  // 430\n/**                                                                                                               // 431\n * Assert super-strict (egal) equality between                                                                    // 432\n * two objects of any type.                                                                                       // 433\n *                                                                                                                // 434\n * @param {Mixed} a                                                                                               // 435\n * @param {Mixed} b                                                                                               // 436\n * @param {Array} memoised (optional)                                                                             // 437\n * @return {Boolean} equal match                                                                                  // 438\n */                                                                                                               // 439\n                                                                                                                  // 440\nfunction deepEqual(a, b, m) {                                                                                     // 441\n  if (sameValue(a, b)) {                                                                                          // 442\n    return true;                                                                                                  // 443\n  } else if ('date' === type(a)) {                                                                                // 444\n    return dateEqual(a, b);                                                                                       // 445\n  } else if ('regexp' === type(a)) {                                                                              // 446\n    return regexpEqual(a, b);                                                                                     // 447\n  } else if (Buffer.isBuffer(a)) {                                                                                // 448\n    return bufferEqual(a, b);                                                                                     // 449\n  } else if ('arguments' === type(a)) {                                                                           // 450\n    return argumentsEqual(a, b, m);                                                                               // 451\n  } else if (!typeEqual(a, b)) {                                                                                  // 452\n    return false;                                                                                                 // 453\n  } else if (('object' !== type(a) && 'object' !== type(b))                                                       // 454\n  && ('array' !== type(a) && 'array' !== type(b))) {                                                              // 455\n    return sameValue(a, b);                                                                                       // 456\n  } else {                                                                                                        // 457\n    return objectEqual(a, b, m);                                                                                  // 458\n  }                                                                                                               // 459\n}                                                                                                                 // 460\n                                                                                                                  // 461\n/*!                                                                                                               // 462\n * Strict (egal) equality test. Ensures that NaN always                                                           // 463\n * equals NaN and `-0` does not equal `+0`.                                                                       // 464\n *                                                                                                                // 465\n * @param {Mixed} a                                                                                               // 466\n * @param {Mixed} b                                                                                               // 467\n * @return {Boolean} equal match                                                                                  // 468\n */                                                                                                               // 469\n                                                                                                                  // 470\nfunction sameValue(a, b) {                                                                                        // 471\n  if (a === b) return a !== 0 || 1 / a === 1 / b;                                                                 // 472\n  return a !== a && b !== b;                                                                                      // 473\n}                                                                                                                 // 474\n                                                                                                                  // 475\n/*!                                                                                                               // 476\n * Compare the types of two given objects and                                                                     // 477\n * return if they are equal. Note that an Array                                                                   // 478\n * has a type of `array` (not `object`) and arguments                                                             // 479\n * have a type of `arguments` (not `array`/`object`).                                                             // 480\n *                                                                                                                // 481\n * @param {Mixed} a                                                                                               // 482\n * @param {Mixed} b                                                                                               // 483\n * @return {Boolean} result                                                                                       // 484\n */                                                                                                               // 485\n                                                                                                                  // 486\nfunction typeEqual(a, b) {                                                                                        // 487\n  return type(a) === type(b);                                                                                     // 488\n}                                                                                                                 // 489\n                                                                                                                  // 490\n/*!                                                                                                               // 491\n * Compare two Date objects by asserting that                                                                     // 492\n * the time values are equal using `saveValue`.                                                                   // 493\n *                                                                                                                // 494\n * @param {Date} a                                                                                                // 495\n * @param {Date} b                                                                                                // 496\n * @return {Boolean} result                                                                                       // 497\n */                                                                                                               // 498\n                                                                                                                  // 499\nfunction dateEqual(a, b) {                                                                                        // 500\n  if ('date' !== type(b)) return false;                                                                           // 501\n  return sameValue(a.getTime(), b.getTime());                                                                     // 502\n}                                                                                                                 // 503\n                                                                                                                  // 504\n/*!                                                                                                               // 505\n * Compare two regular expressions by converting them                                                             // 506\n * to string and checking for `sameValue`.                                                                        // 507\n *                                                                                                                // 508\n * @param {RegExp} a                                                                                              // 509\n * @param {RegExp} b                                                                                              // 510\n * @return {Boolean} result                                                                                       // 511\n */                                                                                                               // 512\n                                                                                                                  // 513\nfunction regexpEqual(a, b) {                                                                                      // 514\n  if ('regexp' !== type(b)) return false;                                                                         // 515\n  return sameValue(a.toString(), b.toString());                                                                   // 516\n}                                                                                                                 // 517\n                                                                                                                  // 518\n/*!                                                                                                               // 519\n * Assert deep equality of two `arguments` objects.                                                               // 520\n * Unfortunately, these must be sliced to arrays                                                                  // 521\n * prior to test to ensure no bad behavior.                                                                       // 522\n *                                                                                                                // 523\n * @param {Arguments} a                                                                                           // 524\n * @param {Arguments} b                                                                                           // 525\n * @param {Array} memoize (optional)                                                                              // 526\n * @return {Boolean} result                                                                                       // 527\n */                                                                                                               // 528\n                                                                                                                  // 529\nfunction argumentsEqual(a, b, m) {                                                                                // 530\n  if ('arguments' !== type(b)) return false;                                                                      // 531\n  a = [].slice.call(a);                                                                                           // 532\n  b = [].slice.call(b);                                                                                           // 533\n  return deepEqual(a, b, m);                                                                                      // 534\n}                                                                                                                 // 535\n                                                                                                                  // 536\n/*!                                                                                                               // 537\n * Get enumerable properties of a given object.                                                                   // 538\n *                                                                                                                // 539\n * @param {Object} a                                                                                              // 540\n * @return {Array} property names                                                                                 // 541\n */                                                                                                               // 542\n                                                                                                                  // 543\nfunction enumerable(a) {                                                                                          // 544\n  var res = [];                                                                                                   // 545\n  for (var key in a) res.push(key);                                                                               // 546\n  return res;                                                                                                     // 547\n}                                                                                                                 // 548\n                                                                                                                  // 549\n/*!                                                                                                               // 550\n * Simple equality for flat iterable objects                                                                      // 551\n * such as Arrays or Node.js buffers.                                                                             // 552\n *                                                                                                                // 553\n * @param {Iterable} a                                                                                            // 554\n * @param {Iterable} b                                                                                            // 555\n * @return {Boolean} result                                                                                       // 556\n */                                                                                                               // 557\n                                                                                                                  // 558\nfunction iterableEqual(a, b) {                                                                                    // 559\n  if (a.length !==  b.length) return false;                                                                       // 560\n                                                                                                                  // 561\n  var i = 0;                                                                                                      // 562\n  var match = true;                                                                                               // 563\n                                                                                                                  // 564\n  for (; i < a.length; i++) {                                                                                     // 565\n    if (a[i] !== b[i]) {                                                                                          // 566\n      match = false;                                                                                              // 567\n      break;                                                                                                      // 568\n    }                                                                                                             // 569\n  }                                                                                                               // 570\n                                                                                                                  // 571\n  return match;                                                                                                   // 572\n}                                                                                                                 // 573\n                                                                                                                  // 574\n/*!                                                                                                               // 575\n * Extension to `iterableEqual` specifically                                                                      // 576\n * for Node.js Buffers.                                                                                           // 577\n *                                                                                                                // 578\n * @param {Buffer} a                                                                                              // 579\n * @param {Mixed} b                                                                                               // 580\n * @return {Boolean} result                                                                                       // 581\n */                                                                                                               // 582\n                                                                                                                  // 583\nfunction bufferEqual(a, b) {                                                                                      // 584\n  if (!Buffer.isBuffer(b)) return false;                                                                          // 585\n  return iterableEqual(a, b);                                                                                     // 586\n}                                                                                                                 // 587\n                                                                                                                  // 588\n/*!                                                                                                               // 589\n * Block for `objectEqual` ensuring non-existing                                                                  // 590\n * values don't get in.                                                                                           // 591\n *                                                                                                                // 592\n * @param {Mixed} object                                                                                          // 593\n * @return {Boolean} result                                                                                       // 594\n */                                                                                                               // 595\n                                                                                                                  // 596\nfunction isValue(a) {                                                                                             // 597\n  return a !== null && a !== undefined;                                                                           // 598\n}                                                                                                                 // 599\n                                                                                                                  // 600\n/*!                                                                                                               // 601\n * Recursively check the equality of two objects.                                                                 // 602\n * Once basic sameness has been established it will                                                               // 603\n * defer to `deepEqual` for each enumerable key                                                                   // 604\n * in the object.                                                                                                 // 605\n *                                                                                                                // 606\n * @param {Mixed} a                                                                                               // 607\n * @param {Mixed} b                                                                                               // 608\n * @return {Boolean} result                                                                                       // 609\n */                                                                                                               // 610\n                                                                                                                  // 611\nfunction objectEqual(a, b, m) {                                                                                   // 612\n  if (!isValue(a) || !isValue(b)) {                                                                               // 613\n    return false;                                                                                                 // 614\n  }                                                                                                               // 615\n                                                                                                                  // 616\n  if (a.prototype !== b.prototype) {                                                                              // 617\n    return false;                                                                                                 // 618\n  }                                                                                                               // 619\n                                                                                                                  // 620\n  var i;                                                                                                          // 621\n  if (m) {                                                                                                        // 622\n    for (i = 0; i < m.length; i++) {                                                                              // 623\n      if ((m[i][0] === a && m[i][1] === b)                                                                        // 624\n      ||  (m[i][0] === b && m[i][1] === a)) {                                                                     // 625\n        return true;                                                                                              // 626\n      }                                                                                                           // 627\n    }                                                                                                             // 628\n  } else {                                                                                                        // 629\n    m = [];                                                                                                       // 630\n  }                                                                                                               // 631\n                                                                                                                  // 632\n  try {                                                                                                           // 633\n    var ka = enumerable(a);                                                                                       // 634\n    var kb = enumerable(b);                                                                                       // 635\n  } catch (ex) {                                                                                                  // 636\n    return false;                                                                                                 // 637\n  }                                                                                                               // 638\n                                                                                                                  // 639\n  ka.sort();                                                                                                      // 640\n  kb.sort();                                                                                                      // 641\n                                                                                                                  // 642\n  if (!iterableEqual(ka, kb)) {                                                                                   // 643\n    return false;                                                                                                 // 644\n  }                                                                                                               // 645\n                                                                                                                  // 646\n  m.push([ a, b ]);                                                                                               // 647\n                                                                                                                  // 648\n  var key;                                                                                                        // 649\n  for (i = ka.length - 1; i >= 0; i--) {                                                                          // 650\n    key = ka[i];                                                                                                  // 651\n    if (!deepEqual(a[key], b[key], m)) {                                                                          // 652\n      return false;                                                                                               // 653\n    }                                                                                                             // 654\n  }                                                                                                               // 655\n                                                                                                                  // 656\n  return true;                                                                                                    // 657\n}                                                                                                                 // 658\n                                                                                                                  // 659\n});                                                                                                               // 660\n                                                                                                                  // 661\nrequire.register(\"chai\", function (exports, module) {                                                             // 662\nmodule.exports = require('chai/lib/chai.js');                                                                     // 663\n                                                                                                                  // 664\n});                                                                                                               // 665\n                                                                                                                  // 666\nrequire.register(\"chai/lib/chai.js\", function (exports, module) {                                                 // 667\n/*!                                                                                                               // 668\n * chai                                                                                                           // 669\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 670\n * MIT Licensed                                                                                                   // 671\n */                                                                                                               // 672\n                                                                                                                  // 673\nvar used = []                                                                                                     // 674\n  , exports = module.exports = {};                                                                                // 675\n                                                                                                                  // 676\n/*!                                                                                                               // 677\n * Chai version                                                                                                   // 678\n */                                                                                                               // 679\n                                                                                                                  // 680\nexports.version = '2.1.0';                                                                                        // 681\n                                                                                                                  // 682\n/*!                                                                                                               // 683\n * Assertion Error                                                                                                // 684\n */                                                                                                               // 685\n                                                                                                                  // 686\nexports.AssertionError = require('chaijs~assertion-error@1.0.0');                                                 // 687\n                                                                                                                  // 688\n/*!                                                                                                               // 689\n * Utils for plugins (not exported)                                                                               // 690\n */                                                                                                               // 691\n                                                                                                                  // 692\nvar util = require('chai/lib/chai/utils/index.js');                                                               // 693\n                                                                                                                  // 694\n/**                                                                                                               // 695\n * # .use(function)                                                                                               // 696\n *                                                                                                                // 697\n * Provides a way to extend the internals of Chai                                                                 // 698\n *                                                                                                                // 699\n * @param {Function}                                                                                              // 700\n * @returns {this} for chaining                                                                                   // 701\n * @api public                                                                                                    // 702\n */                                                                                                               // 703\n                                                                                                                  // 704\nexports.use = function (fn) {                                                                                     // 705\n  if (!~used.indexOf(fn)) {                                                                                       // 706\n    fn(this, util);                                                                                               // 707\n    used.push(fn);                                                                                                // 708\n  }                                                                                                               // 709\n                                                                                                                  // 710\n  return this;                                                                                                    // 711\n};                                                                                                                // 712\n                                                                                                                  // 713\n/*!                                                                                                               // 714\n * Utility Functions                                                                                              // 715\n */                                                                                                               // 716\n                                                                                                                  // 717\nexports.util = util;                                                                                              // 718\n                                                                                                                  // 719\n/*!                                                                                                               // 720\n * Configuration                                                                                                  // 721\n */                                                                                                               // 722\n                                                                                                                  // 723\nvar config = require('chai/lib/chai/config.js');                                                                  // 724\nexports.config = config;                                                                                          // 725\n                                                                                                                  // 726\n/*!                                                                                                               // 727\n * Primary `Assertion` prototype                                                                                  // 728\n */                                                                                                               // 729\n                                                                                                                  // 730\nvar assertion = require('chai/lib/chai/assertion.js');                                                            // 731\nexports.use(assertion);                                                                                           // 732\n                                                                                                                  // 733\n/*!                                                                                                               // 734\n * Core Assertions                                                                                                // 735\n */                                                                                                               // 736\n                                                                                                                  // 737\nvar core = require('chai/lib/chai/core/assertions.js');                                                           // 738\nexports.use(core);                                                                                                // 739\n                                                                                                                  // 740\n/*!                                                                                                               // 741\n * Expect interface                                                                                               // 742\n */                                                                                                               // 743\n                                                                                                                  // 744\nvar expect = require('chai/lib/chai/interface/expect.js');                                                        // 745\nexports.use(expect);                                                                                              // 746\n                                                                                                                  // 747\n/*!                                                                                                               // 748\n * Should interface                                                                                               // 749\n */                                                                                                               // 750\n                                                                                                                  // 751\nvar should = require('chai/lib/chai/interface/should.js');                                                        // 752\nexports.use(should);                                                                                              // 753\n                                                                                                                  // 754\n/*!                                                                                                               // 755\n * Assert interface                                                                                               // 756\n */                                                                                                               // 757\n                                                                                                                  // 758\nvar assert = require('chai/lib/chai/interface/assert.js');                                                        // 759\nexports.use(assert);                                                                                              // 760\n                                                                                                                  // 761\n});                                                                                                               // 762\n                                                                                                                  // 763\nrequire.register(\"chai/lib/chai/assertion.js\", function (exports, module) {                                       // 764\n/*!                                                                                                               // 765\n * chai                                                                                                           // 766\n * http://chaijs.com                                                                                              // 767\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 768\n * MIT Licensed                                                                                                   // 769\n */                                                                                                               // 770\n                                                                                                                  // 771\nvar config = require('chai/lib/chai/config.js');                                                                  // 772\n                                                                                                                  // 773\nmodule.exports = function (_chai, util) {                                                                         // 774\n  /*!                                                                                                             // 775\n   * Module dependencies.                                                                                         // 776\n   */                                                                                                             // 777\n                                                                                                                  // 778\n  var AssertionError = _chai.AssertionError                                                                       // 779\n    , flag = util.flag;                                                                                           // 780\n                                                                                                                  // 781\n  /*!                                                                                                             // 782\n   * Module export.                                                                                               // 783\n   */                                                                                                             // 784\n                                                                                                                  // 785\n  _chai.Assertion = Assertion;                                                                                    // 786\n                                                                                                                  // 787\n  /*!                                                                                                             // 788\n   * Assertion Constructor                                                                                        // 789\n   *                                                                                                              // 790\n   * Creates object for chaining.                                                                                 // 791\n   *                                                                                                              // 792\n   * @api private                                                                                                 // 793\n   */                                                                                                             // 794\n                                                                                                                  // 795\n  function Assertion (obj, msg, stack) {                                                                          // 796\n    flag(this, 'ssfi', stack || arguments.callee);                                                                // 797\n    flag(this, 'object', obj);                                                                                    // 798\n    flag(this, 'message', msg);                                                                                   // 799\n  }                                                                                                               // 800\n                                                                                                                  // 801\n  Object.defineProperty(Assertion, 'includeStack', {                                                              // 802\n    get: function() {                                                                                             // 803\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');                // 804\n      return config.includeStack;                                                                                 // 805\n    },                                                                                                            // 806\n    set: function(value) {                                                                                        // 807\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');                // 808\n      config.includeStack = value;                                                                                // 809\n    }                                                                                                             // 810\n  });                                                                                                             // 811\n                                                                                                                  // 812\n  Object.defineProperty(Assertion, 'showDiff', {                                                                  // 813\n    get: function() {                                                                                             // 814\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');                        // 815\n      return config.showDiff;                                                                                     // 816\n    },                                                                                                            // 817\n    set: function(value) {                                                                                        // 818\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');                        // 819\n      config.showDiff = value;                                                                                    // 820\n    }                                                                                                             // 821\n  });                                                                                                             // 822\n                                                                                                                  // 823\n  Assertion.addProperty = function (name, fn) {                                                                   // 824\n    util.addProperty(this.prototype, name, fn);                                                                   // 825\n  };                                                                                                              // 826\n                                                                                                                  // 827\n  Assertion.addMethod = function (name, fn) {                                                                     // 828\n    util.addMethod(this.prototype, name, fn);                                                                     // 829\n  };                                                                                                              // 830\n                                                                                                                  // 831\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {                                          // 832\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);                                          // 833\n  };                                                                                                              // 834\n                                                                                                                  // 835\n  Assertion.overwriteProperty = function (name, fn) {                                                             // 836\n    util.overwriteProperty(this.prototype, name, fn);                                                             // 837\n  };                                                                                                              // 838\n                                                                                                                  // 839\n  Assertion.overwriteMethod = function (name, fn) {                                                               // 840\n    util.overwriteMethod(this.prototype, name, fn);                                                               // 841\n  };                                                                                                              // 842\n                                                                                                                  // 843\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {                                    // 844\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);                                    // 845\n  };                                                                                                              // 846\n                                                                                                                  // 847\n  /*!                                                                                                             // 848\n   * ### .assert(expression, message, negateMessage, expected, actual)                                            // 849\n   *                                                                                                              // 850\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.     // 851\n   *                                                                                                              // 852\n   * @name assert                                                                                                 // 853\n   * @param {Philosophical} expression to be tested                                                               // 854\n   * @param {String or Function} message or function that returns message to display if fails                     // 855\n   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)                                               // 857\n   * @param {Mixed} actual (optional) will default to `this.obj`                                                  // 858\n   * @api private                                                                                                 // 859\n   */                                                                                                             // 860\n                                                                                                                  // 861\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {                     // 862\n    var ok = util.test(this, arguments);                                                                          // 863\n    if (true !== showDiff) showDiff = false;                                                                      // 864\n    if (true !== config.showDiff) showDiff = false;                                                               // 865\n                                                                                                                  // 866\n    if (!ok) {                                                                                                    // 867\n      var msg = util.getMessage(this, arguments)                                                                  // 868\n        , actual = util.getActual(this, arguments);                                                               // 869\n      throw new AssertionError(msg, {                                                                             // 870\n          actual: actual                                                                                          // 871\n        , expected: expected                                                                                      // 872\n        , showDiff: showDiff                                                                                      // 873\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));                                               // 874\n    }                                                                                                             // 875\n  };                                                                                                              // 876\n                                                                                                                  // 877\n  /*!                                                                                                             // 878\n   * ### ._obj                                                                                                    // 879\n   *                                                                                                              // 880\n   * Quick reference to stored `actual` value for plugin developers.                                              // 881\n   *                                                                                                              // 882\n   * @api private                                                                                                 // 883\n   */                                                                                                             // 884\n                                                                                                                  // 885\n  Object.defineProperty(Assertion.prototype, '_obj',                                                              // 886\n    { get: function () {                                                                                          // 887\n        return flag(this, 'object');                                                                              // 888\n      }                                                                                                           // 889\n    , set: function (val) {                                                                                       // 890\n        flag(this, 'object', val);                                                                                // 891\n      }                                                                                                           // 892\n  });                                                                                                             // 893\n};                                                                                                                // 894\n                                                                                                                  // 895\n});                                                                                                               // 896\n                                                                                                                  // 897\nrequire.register(\"chai/lib/chai/config.js\", function (exports, module) {                                          // 898\nmodule.exports = {                                                                                                // 899\n                                                                                                                  // 900\n  /**                                                                                                             // 901\n   * ### config.includeStack                                                                                      // 902\n   *                                                                                                              // 903\n   * User configurable property, influences whether stack trace                                                   // 904\n   * is included in Assertion error message. Default of false                                                     // 905\n   * suppresses stack trace in the error message.                                                                 // 906\n   *                                                                                                              // 907\n   *     chai.config.includeStack = true;  // enable stack on error                                               // 908\n   *                                                                                                              // 909\n   * @param {Boolean}                                                                                             // 910\n   * @api public                                                                                                  // 911\n   */                                                                                                             // 912\n                                                                                                                  // 913\n   includeStack: false,                                                                                           // 914\n                                                                                                                  // 915\n  /**                                                                                                             // 916\n   * ### config.showDiff                                                                                          // 917\n   *                                                                                                              // 918\n   * User configurable property, influences whether or not                                                        // 919\n   * the `showDiff` flag should be included in the thrown                                                         // 920\n   * AssertionErrors. `false` will always be `false`; `true`                                                      // 921\n   * will be true when the assertion has requested a diff                                                         // 922\n   * be shown.                                                                                                    // 923\n   *                                                                                                              // 924\n   * @param {Boolean}                                                                                             // 925\n   * @api public                                                                                                  // 926\n   */                                                                                                             // 927\n                                                                                                                  // 928\n  showDiff: true,                                                                                                 // 929\n                                                                                                                  // 930\n  /**                                                                                                             // 931\n   * ### config.truncateThreshold                                                                                 // 932\n   *                                                                                                              // 933\n   * User configurable property, sets length threshold for actual and                                             // 934\n   * expected values in assertion errors. If this threshold is exceeded,                                          // 935\n   * the value is truncated.                                                                                      // 936\n   *                                                                                                              // 937\n   * Set it to zero if you want to disable truncating altogether.                                                 // 938\n   *                                                                                                              // 939\n   *     chai.config.truncateThreshold = 0;  // disable truncating                                                // 940\n   *                                                                                                              // 941\n   * @param {Number}                                                                                              // 942\n   * @api public                                                                                                  // 943\n   */                                                                                                             // 944\n                                                                                                                  // 945\n  truncateThreshold: 40                                                                                           // 946\n                                                                                                                  // 947\n};                                                                                                                // 948\n                                                                                                                  // 949\n});                                                                                                               // 950\n                                                                                                                  // 951\nrequire.register(\"chai/lib/chai/core/assertions.js\", function (exports, module) {                                 // 952\n/*!                                                                                                               // 953\n * chai                                                                                                           // 954\n * http://chaijs.com                                                                                              // 955\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 956\n * MIT Licensed                                                                                                   // 957\n */                                                                                                               // 958\n                                                                                                                  // 959\nmodule.exports = function (chai, _) {                                                                             // 960\n  var Assertion = chai.Assertion                                                                                  // 961\n    , toString = Object.prototype.toString                                                                        // 962\n    , flag = _.flag;                                                                                              // 963\n                                                                                                                  // 964\n  /**                                                                                                             // 965\n   * ### Language Chains                                                                                          // 966\n   *                                                                                                              // 967\n   * The following are provided as chainable getters to                                                           // 968\n   * improve the readability of your assertions. They                                                             // 969\n   * do not provide testing capabilities unless they                                                              // 970\n   * have been overwritten by a plugin.                                                                           // 971\n   *                                                                                                              // 972\n   * **Chains**                                                                                                   // 973\n   *                                                                                                              // 974\n   * - to                                                                                                         // 975\n   * - be                                                                                                         // 976\n   * - been                                                                                                       // 977\n   * - is                                                                                                         // 978\n   * - that                                                                                                       // 979\n   * - which                                                                                                      // 980\n   * - and                                                                                                        // 981\n   * - has                                                                                                        // 982\n   * - have                                                                                                       // 983\n   * - with                                                                                                       // 984\n   * - at                                                                                                         // 985\n   * - of                                                                                                         // 986\n   * - same                                                                                                       // 987\n   *                                                                                                              // 988\n   * @name language chains                                                                                        // 989\n   * @api public                                                                                                  // 990\n   */                                                                                                             // 991\n                                                                                                                  // 992\n  [ 'to', 'be', 'been'                                                                                            // 993\n  , 'is', 'and', 'has', 'have'                                                                                    // 994\n  , 'with', 'that', 'which', 'at'                                                                                 // 995\n  , 'of', 'same' ].forEach(function (chain) {                                                                     // 996\n    Assertion.addProperty(chain, function () {                                                                    // 997\n      return this;                                                                                                // 998\n    });                                                                                                           // 999\n  });                                                                                                             // 1000\n                                                                                                                  // 1001\n  /**                                                                                                             // 1002\n   * ### .not                                                                                                     // 1003\n   *                                                                                                              // 1004\n   * Negates any of assertions following in the chain.                                                            // 1005\n   *                                                                                                              // 1006\n   *     expect(foo).to.not.equal('bar');                                                                         // 1007\n   *     expect(goodFn).to.not.throw(Error);                                                                      // 1008\n   *     expect({ foo: 'baz' }).to.have.property('foo')                                                           // 1009\n   *       .and.not.equal('bar');                                                                                 // 1010\n   *                                                                                                              // 1011\n   * @name not                                                                                                    // 1012\n   * @api public                                                                                                  // 1013\n   */                                                                                                             // 1014\n                                                                                                                  // 1015\n  Assertion.addProperty('not', function () {                                                                      // 1016\n    flag(this, 'negate', true);                                                                                   // 1017\n  });                                                                                                             // 1018\n                                                                                                                  // 1019\n  /**                                                                                                             // 1020\n   * ### .deep                                                                                                    // 1021\n   *                                                                                                              // 1022\n   * Sets the `deep` flag, later used by the `equal` and                                                          // 1023\n   * `property` assertions.                                                                                       // 1024\n   *                                                                                                              // 1025\n   *     expect(foo).to.deep.equal({ bar: 'baz' });                                                               // 1026\n   *     expect({ foo: { bar: { baz: 'quux' } } })                                                                // 1027\n   *       .to.have.deep.property('foo.bar.baz', 'quux');                                                         // 1028\n   *                                                                                                              // 1029\n   * @name deep                                                                                                   // 1030\n   * @api public                                                                                                  // 1031\n   */                                                                                                             // 1032\n                                                                                                                  // 1033\n  Assertion.addProperty('deep', function () {                                                                     // 1034\n    flag(this, 'deep', true);                                                                                     // 1035\n  });                                                                                                             // 1036\n                                                                                                                  // 1037\n  /**                                                                                                             // 1038\n   * ### .any                                                                                                     // 1039\n   *                                                                                                              // 1040\n   * Sets the `any` flag, (opposite of the `all` flag)                                                            // 1041\n   * later used in the `keys` assertion.                                                                          // 1042\n   *                                                                                                              // 1043\n   *     expect(foo).to.have.any.keys('bar', 'baz');                                                              // 1044\n   *                                                                                                              // 1045\n   * @name any                                                                                                    // 1046\n   * @api public                                                                                                  // 1047\n   */                                                                                                             // 1048\n                                                                                                                  // 1049\n  Assertion.addProperty('any', function () {                                                                      // 1050\n    flag(this, 'any', true);                                                                                      // 1051\n    flag(this, 'all', false)                                                                                      // 1052\n  });                                                                                                             // 1053\n                                                                                                                  // 1054\n                                                                                                                  // 1055\n  /**                                                                                                             // 1056\n   * ### .all                                                                                                     // 1057\n   *                                                                                                              // 1058\n   * Sets the `all` flag (opposite of the `any` flag)                                                             // 1059\n   * later used by the `keys` assertion.                                                                          // 1060\n   *                                                                                                              // 1061\n   *     expect(foo).to.have.all.keys('bar', 'baz');                                                              // 1062\n   *                                                                                                              // 1063\n   * @name all                                                                                                    // 1064\n   * @api public                                                                                                  // 1065\n   */                                                                                                             // 1066\n                                                                                                                  // 1067\n  Assertion.addProperty('all', function () {                                                                      // 1068\n    flag(this, 'all', true);                                                                                      // 1069\n    flag(this, 'any', false);                                                                                     // 1070\n  });                                                                                                             // 1071\n                                                                                                                  // 1072\n  /**                                                                                                             // 1073\n   * ### .a(type)                                                                                                 // 1074\n   *                                                                                                              // 1075\n   * The `a` and `an` assertions are aliases that can be                                                          // 1076\n   * used either as language chains or to assert a value's                                                        // 1077\n   * type.                                                                                                        // 1078\n   *                                                                                                              // 1079\n   *     // typeof                                                                                                // 1080\n   *     expect('test').to.be.a('string');                                                                        // 1081\n   *     expect({ foo: 'bar' }).to.be.an('object');                                                               // 1082\n   *     expect(null).to.be.a('null');                                                                            // 1083\n   *     expect(undefined).to.be.an('undefined');                                                                 // 1084\n   *                                                                                                              // 1085\n   *     // language chain                                                                                        // 1086\n   *     expect(foo).to.be.an.instanceof(Foo);                                                                    // 1087\n   *                                                                                                              // 1088\n   * @name a                                                                                                      // 1089\n   * @alias an                                                                                                    // 1090\n   * @param {String} type                                                                                         // 1091\n   * @param {String} message _optional_                                                                           // 1092\n   * @api public                                                                                                  // 1093\n   */                                                                                                             // 1094\n                                                                                                                  // 1095\n  function an (type, msg) {                                                                                       // 1096\n    if (msg) flag(this, 'message', msg);                                                                          // 1097\n    type = type.toLowerCase();                                                                                    // 1098\n    var obj = flag(this, 'object')                                                                                // 1099\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';                            // 1100\n                                                                                                                  // 1101\n    this.assert(                                                                                                  // 1102\n        type === _.type(obj)                                                                                      // 1103\n      , 'expected #{this} to be ' + article + type                                                                // 1104\n      , 'expected #{this} not to be ' + article + type                                                            // 1105\n    );                                                                                                            // 1106\n  }                                                                                                               // 1107\n                                                                                                                  // 1108\n  Assertion.addChainableMethod('an', an);                                                                         // 1109\n  Assertion.addChainableMethod('a', an);                                                                          // 1110\n                                                                                                                  // 1111\n  /**                                                                                                             // 1112\n   * ### .include(value)                                                                                          // 1113\n   *                                                                                                              // 1114\n   * The `include` and `contain` assertions can be used as either property                                        // 1115\n   * based language chains or as methods to assert the inclusion of an object                                     // 1116\n   * in an array or a substring in a string. When used as language chains,                                        // 1117\n   * they toggle the `contains` flag for the `keys` assertion.                                                    // 1118\n   *                                                                                                              // 1119\n   *     expect([1,2,3]).to.include(2);                                                                           // 1120\n   *     expect('foobar').to.contain('foo');                                                                      // 1121\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');                                        // 1122\n   *                                                                                                              // 1123\n   * @name include                                                                                                // 1124\n   * @alias contain                                                                                               // 1125\n   * @alias includes                                                                                              // 1126\n   * @alias contains                                                                                              // 1127\n   * @param {Object|String|Number} obj                                                                            // 1128\n   * @param {String} message _optional_                                                                           // 1129\n   * @api public                                                                                                  // 1130\n   */                                                                                                             // 1131\n                                                                                                                  // 1132\n  function includeChainingBehavior () {                                                                           // 1133\n    flag(this, 'contains', true);                                                                                 // 1134\n  }                                                                                                               // 1135\n                                                                                                                  // 1136\n  function include (val, msg) {                                                                                   // 1137\n    if (msg) flag(this, 'message', msg);                                                                          // 1138\n    var obj = flag(this, 'object');                                                                               // 1139\n    var expected = false;                                                                                         // 1140\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {                                                    // 1141\n      for (var i in obj) {                                                                                        // 1142\n        if (_.eql(obj[i], val)) {                                                                                 // 1143\n          expected = true;                                                                                        // 1144\n          break;                                                                                                  // 1145\n        }                                                                                                         // 1146\n      }                                                                                                           // 1147\n    } else if (_.type(val) === 'object') {                                                                        // 1148\n      if (!flag(this, 'negate')) {                                                                                // 1149\n        for (var k in val) new Assertion(obj).property(k, val[k]);                                                // 1150\n        return;                                                                                                   // 1151\n      }                                                                                                           // 1152\n      var subset = {};                                                                                            // 1153\n      for (var k in val) subset[k] = obj[k];                                                                      // 1154\n      expected = _.eql(subset, val);                                                                              // 1155\n    } else {                                                                                                      // 1156\n      expected = obj && ~obj.indexOf(val);                                                                        // 1157\n    }                                                                                                             // 1158\n    this.assert(                                                                                                  // 1159\n        expected                                                                                                  // 1160\n      , 'expected #{this} to include ' + _.inspect(val)                                                           // 1161\n      , 'expected #{this} to not include ' + _.inspect(val));                                                     // 1162\n  }                                                                                                               // 1163\n                                                                                                                  // 1164\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);                                      // 1165\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);                                      // 1166\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);                                     // 1167\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);                                     // 1168\n                                                                                                                  // 1169\n  /**                                                                                                             // 1170\n   * ### .ok                                                                                                      // 1171\n   *                                                                                                              // 1172\n   * Asserts that the target is truthy.                                                                           // 1173\n   *                                                                                                              // 1174\n   *     expect('everthing').to.be.ok;                                                                            // 1175\n   *     expect(1).to.be.ok;                                                                                      // 1176\n   *     expect(false).to.not.be.ok;                                                                              // 1177\n   *     expect(undefined).to.not.be.ok;                                                                          // 1178\n   *     expect(null).to.not.be.ok;                                                                               // 1179\n   *                                                                                                              // 1180\n   * @name ok                                                                                                     // 1181\n   * @api public                                                                                                  // 1182\n   */                                                                                                             // 1183\n                                                                                                                  // 1184\n  Assertion.addProperty('ok', function () {                                                                       // 1185\n    this.assert(                                                                                                  // 1186\n        flag(this, 'object')                                                                                      // 1187\n      , 'expected #{this} to be truthy'                                                                           // 1188\n      , 'expected #{this} to be falsy');                                                                          // 1189\n  });                                                                                                             // 1190\n                                                                                                                  // 1191\n  /**                                                                                                             // 1192\n   * ### .true                                                                                                    // 1193\n   *                                                                                                              // 1194\n   * Asserts that the target is `true`.                                                                           // 1195\n   *                                                                                                              // 1196\n   *     expect(true).to.be.true;                                                                                 // 1197\n   *     expect(1).to.not.be.true;                                                                                // 1198\n   *                                                                                                              // 1199\n   * @name true                                                                                                   // 1200\n   * @api public                                                                                                  // 1201\n   */                                                                                                             // 1202\n                                                                                                                  // 1203\n  Assertion.addProperty('true', function () {                                                                     // 1204\n    this.assert(                                                                                                  // 1205\n        true === flag(this, 'object')                                                                             // 1206\n      , 'expected #{this} to be true'                                                                             // 1207\n      , 'expected #{this} to be false'                                                                            // 1208\n      , this.negate ? false : true                                                                                // 1209\n    );                                                                                                            // 1210\n  });                                                                                                             // 1211\n                                                                                                                  // 1212\n  /**                                                                                                             // 1213\n   * ### .false                                                                                                   // 1214\n   *                                                                                                              // 1215\n   * Asserts that the target is `false`.                                                                          // 1216\n   *                                                                                                              // 1217\n   *     expect(false).to.be.false;                                                                               // 1218\n   *     expect(0).to.not.be.false;                                                                               // 1219\n   *                                                                                                              // 1220\n   * @name false                                                                                                  // 1221\n   * @api public                                                                                                  // 1222\n   */                                                                                                             // 1223\n                                                                                                                  // 1224\n  Assertion.addProperty('false', function () {                                                                    // 1225\n    this.assert(                                                                                                  // 1226\n        false === flag(this, 'object')                                                                            // 1227\n      , 'expected #{this} to be false'                                                                            // 1228\n      , 'expected #{this} to be true'                                                                             // 1229\n      , this.negate ? true : false                                                                                // 1230\n    );                                                                                                            // 1231\n  });                                                                                                             // 1232\n                                                                                                                  // 1233\n  /**                                                                                                             // 1234\n   * ### .null                                                                                                    // 1235\n   *                                                                                                              // 1236\n   * Asserts that the target is `null`.                                                                           // 1237\n   *                                                                                                              // 1238\n   *     expect(null).to.be.null;                                                                                 // 1239\n   *     expect(undefined).not.to.be.null;                                                                        // 1240\n   *                                                                                                              // 1241\n   * @name null                                                                                                   // 1242\n   * @api public                                                                                                  // 1243\n   */                                                                                                             // 1244\n                                                                                                                  // 1245\n  Assertion.addProperty('null', function () {                                                                     // 1246\n    this.assert(                                                                                                  // 1247\n        null === flag(this, 'object')                                                                             // 1248\n      , 'expected #{this} to be null'                                                                             // 1249\n      , 'expected #{this} not to be null'                                                                         // 1250\n    );                                                                                                            // 1251\n  });                                                                                                             // 1252\n                                                                                                                  // 1253\n  /**                                                                                                             // 1254\n   * ### .undefined                                                                                               // 1255\n   *                                                                                                              // 1256\n   * Asserts that the target is `undefined`.                                                                      // 1257\n   *                                                                                                              // 1258\n   *     expect(undefined).to.be.undefined;                                                                       // 1259\n   *     expect(null).to.not.be.undefined;                                                                        // 1260\n   *                                                                                                              // 1261\n   * @name undefined                                                                                              // 1262\n   * @api public                                                                                                  // 1263\n   */                                                                                                             // 1264\n                                                                                                                  // 1265\n  Assertion.addProperty('undefined', function () {                                                                // 1266\n    this.assert(                                                                                                  // 1267\n        undefined === flag(this, 'object')                                                                        // 1268\n      , 'expected #{this} to be undefined'                                                                        // 1269\n      , 'expected #{this} not to be undefined'                                                                    // 1270\n    );                                                                                                            // 1271\n  });                                                                                                             // 1272\n                                                                                                                  // 1273\n  /**                                                                                                             // 1274\n   * ### .exist                                                                                                   // 1275\n   *                                                                                                              // 1276\n   * Asserts that the target is neither `null` nor `undefined`.                                                   // 1277\n   *                                                                                                              // 1278\n   *     var foo = 'hi'                                                                                           // 1279\n   *       , bar = null                                                                                           // 1280\n   *       , baz;                                                                                                 // 1281\n   *                                                                                                              // 1282\n   *     expect(foo).to.exist;                                                                                    // 1283\n   *     expect(bar).to.not.exist;                                                                                // 1284\n   *     expect(baz).to.not.exist;                                                                                // 1285\n   *                                                                                                              // 1286\n   * @name exist                                                                                                  // 1287\n   * @api public                                                                                                  // 1288\n   */                                                                                                             // 1289\n                                                                                                                  // 1290\n  Assertion.addProperty('exist', function () {                                                                    // 1291\n    this.assert(                                                                                                  // 1292\n        null != flag(this, 'object')                                                                              // 1293\n      , 'expected #{this} to exist'                                                                               // 1294\n      , 'expected #{this} to not exist'                                                                           // 1295\n    );                                                                                                            // 1296\n  });                                                                                                             // 1297\n                                                                                                                  // 1298\n                                                                                                                  // 1299\n  /**                                                                                                             // 1300\n   * ### .empty                                                                                                   // 1301\n   *                                                                                                              // 1302\n   * Asserts that the target's length is `0`. For arrays, it checks                                               // 1303\n   * the `length` property. For objects, it gets the count of                                                     // 1304\n   * enumerable keys.                                                                                             // 1305\n   *                                                                                                              // 1306\n   *     expect([]).to.be.empty;                                                                                  // 1307\n   *     expect('').to.be.empty;                                                                                  // 1308\n   *     expect({}).to.be.empty;                                                                                  // 1309\n   *                                                                                                              // 1310\n   * @name empty                                                                                                  // 1311\n   * @api public                                                                                                  // 1312\n   */                                                                                                             // 1313\n                                                                                                                  // 1314\n  Assertion.addProperty('empty', function () {                                                                    // 1315\n    var obj = flag(this, 'object')                                                                                // 1316\n      , expected = obj;                                                                                           // 1317\n                                                                                                                  // 1318\n    if (Array.isArray(obj) || 'string' === typeof object) {                                                       // 1319\n      expected = obj.length;                                                                                      // 1320\n    } else if (typeof obj === 'object') {                                                                         // 1321\n      expected = Object.keys(obj).length;                                                                         // 1322\n    }                                                                                                             // 1323\n                                                                                                                  // 1324\n    this.assert(                                                                                                  // 1325\n        !expected                                                                                                 // 1326\n      , 'expected #{this} to be empty'                                                                            // 1327\n      , 'expected #{this} not to be empty'                                                                        // 1328\n    );                                                                                                            // 1329\n  });                                                                                                             // 1330\n                                                                                                                  // 1331\n  /**                                                                                                             // 1332\n   * ### .arguments                                                                                               // 1333\n   *                                                                                                              // 1334\n   * Asserts that the target is an arguments object.                                                              // 1335\n   *                                                                                                              // 1336\n   *     function test () {                                                                                       // 1337\n   *       expect(arguments).to.be.arguments;                                                                     // 1338\n   *     }                                                                                                        // 1339\n   *                                                                                                              // 1340\n   * @name arguments                                                                                              // 1341\n   * @alias Arguments                                                                                             // 1342\n   * @api public                                                                                                  // 1343\n   */                                                                                                             // 1344\n                                                                                                                  // 1345\n  function checkArguments () {                                                                                    // 1346\n    var obj = flag(this, 'object')                                                                                // 1347\n      , type = Object.prototype.toString.call(obj);                                                               // 1348\n    this.assert(                                                                                                  // 1349\n        '[object Arguments]' === type                                                                             // 1350\n      , 'expected #{this} to be arguments but got ' + type                                                        // 1351\n      , 'expected #{this} to not be arguments'                                                                    // 1352\n    );                                                                                                            // 1353\n  }                                                                                                               // 1354\n                                                                                                                  // 1355\n  Assertion.addProperty('arguments', checkArguments);                                                             // 1356\n  Assertion.addProperty('Arguments', checkArguments);                                                             // 1357\n                                                                                                                  // 1358\n  /**                                                                                                             // 1359\n   * ### .equal(value)                                                                                            // 1360\n   *                                                                                                              // 1361\n   * Asserts that the target is strictly equal (`===`) to `value`.                                                // 1362\n   * Alternately, if the `deep` flag is set, asserts that                                                         // 1363\n   * the target is deeply equal to `value`.                                                                       // 1364\n   *                                                                                                              // 1365\n   *     expect('hello').to.equal('hello');                                                                       // 1366\n   *     expect(42).to.equal(42);                                                                                 // 1367\n   *     expect(1).to.not.equal(true);                                                                            // 1368\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });                                                     // 1369\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });                                                    // 1370\n   *                                                                                                              // 1371\n   * @name equal                                                                                                  // 1372\n   * @alias equals                                                                                                // 1373\n   * @alias eq                                                                                                    // 1374\n   * @alias deep.equal                                                                                            // 1375\n   * @param {Mixed} value                                                                                         // 1376\n   * @param {String} message _optional_                                                                           // 1377\n   * @api public                                                                                                  // 1378\n   */                                                                                                             // 1379\n                                                                                                                  // 1380\n  function assertEqual (val, msg) {                                                                               // 1381\n    if (msg) flag(this, 'message', msg);                                                                          // 1382\n    var obj = flag(this, 'object');                                                                               // 1383\n    if (flag(this, 'deep')) {                                                                                     // 1384\n      return this.eql(val);                                                                                       // 1385\n    } else {                                                                                                      // 1386\n      this.assert(                                                                                                // 1387\n          val === obj                                                                                             // 1388\n        , 'expected #{this} to equal #{exp}'                                                                      // 1389\n        , 'expected #{this} to not equal #{exp}'                                                                  // 1390\n        , val                                                                                                     // 1391\n        , this._obj                                                                                               // 1392\n        , true                                                                                                    // 1393\n      );                                                                                                          // 1394\n    }                                                                                                             // 1395\n  }                                                                                                               // 1396\n                                                                                                                  // 1397\n  Assertion.addMethod('equal', assertEqual);                                                                      // 1398\n  Assertion.addMethod('equals', assertEqual);                                                                     // 1399\n  Assertion.addMethod('eq', assertEqual);                                                                         // 1400\n                                                                                                                  // 1401\n  /**                                                                                                             // 1402\n   * ### .eql(value)                                                                                              // 1403\n   *                                                                                                              // 1404\n   * Asserts that the target is deeply equal to `value`.                                                          // 1405\n   *                                                                                                              // 1406\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });                                                           // 1407\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);                                                                 // 1408\n   *                                                                                                              // 1409\n   * @name eql                                                                                                    // 1410\n   * @alias eqls                                                                                                  // 1411\n   * @param {Mixed} value                                                                                         // 1412\n   * @param {String} message _optional_                                                                           // 1413\n   * @api public                                                                                                  // 1414\n   */                                                                                                             // 1415\n                                                                                                                  // 1416\n  function assertEql(obj, msg) {                                                                                  // 1417\n    if (msg) flag(this, 'message', msg);                                                                          // 1418\n    this.assert(                                                                                                  // 1419\n        _.eql(obj, flag(this, 'object'))                                                                          // 1420\n      , 'expected #{this} to deeply equal #{exp}'                                                                 // 1421\n      , 'expected #{this} to not deeply equal #{exp}'                                                             // 1422\n      , obj                                                                                                       // 1423\n      , this._obj                                                                                                 // 1424\n      , true                                                                                                      // 1425\n    );                                                                                                            // 1426\n  }                                                                                                               // 1427\n                                                                                                                  // 1428\n  Assertion.addMethod('eql', assertEql);                                                                          // 1429\n  Assertion.addMethod('eqls', assertEql);                                                                         // 1430\n                                                                                                                  // 1431\n  /**                                                                                                             // 1432\n   * ### .above(value)                                                                                            // 1433\n   *                                                                                                              // 1434\n   * Asserts that the target is greater than `value`.                                                             // 1435\n   *                                                                                                              // 1436\n   *     expect(10).to.be.above(5);                                                                               // 1437\n   *                                                                                                              // 1438\n   * Can also be used in conjunction with `length` to                                                             // 1439\n   * assert a minimum length. The benefit being a                                                                 // 1440\n   * more informative error message than if the length                                                            // 1441\n   * was supplied directly.                                                                                       // 1442\n   *                                                                                                              // 1443\n   *     expect('foo').to.have.length.above(2);                                                                   // 1444\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);                                                             // 1445\n   *                                                                                                              // 1446\n   * @name above                                                                                                  // 1447\n   * @alias gt                                                                                                    // 1448\n   * @alias greaterThan                                                                                           // 1449\n   * @param {Number} value                                                                                        // 1450\n   * @param {String} message _optional_                                                                           // 1451\n   * @api public                                                                                                  // 1452\n   */                                                                                                             // 1453\n                                                                                                                  // 1454\n  function assertAbove (n, msg) {                                                                                 // 1455\n    if (msg) flag(this, 'message', msg);                                                                          // 1456\n    var obj = flag(this, 'object');                                                                               // 1457\n    if (flag(this, 'doLength')) {                                                                                 // 1458\n      new Assertion(obj, msg).to.have.property('length');                                                         // 1459\n      var len = obj.length;                                                                                       // 1460\n      this.assert(                                                                                                // 1461\n          len > n                                                                                                 // 1462\n        , 'expected #{this} to have a length above #{exp} but got #{act}'                                         // 1463\n        , 'expected #{this} to not have a length above #{exp}'                                                    // 1464\n        , n                                                                                                       // 1465\n        , len                                                                                                     // 1466\n      );                                                                                                          // 1467\n    } else {                                                                                                      // 1468\n      this.assert(                                                                                                // 1469\n          obj > n                                                                                                 // 1470\n        , 'expected #{this} to be above ' + n                                                                     // 1471\n        , 'expected #{this} to be at most ' + n                                                                   // 1472\n      );                                                                                                          // 1473\n    }                                                                                                             // 1474\n  }                                                                                                               // 1475\n                                                                                                                  // 1476\n  Assertion.addMethod('above', assertAbove);                                                                      // 1477\n  Assertion.addMethod('gt', assertAbove);                                                                         // 1478\n  Assertion.addMethod('greaterThan', assertAbove);                                                                // 1479\n                                                                                                                  // 1480\n  /**                                                                                                             // 1481\n   * ### .least(value)                                                                                            // 1482\n   *                                                                                                              // 1483\n   * Asserts that the target is greater than or equal to `value`.                                                 // 1484\n   *                                                                                                              // 1485\n   *     expect(10).to.be.at.least(10);                                                                           // 1486\n   *                                                                                                              // 1487\n   * Can also be used in conjunction with `length` to                                                             // 1488\n   * assert a minimum length. The benefit being a                                                                 // 1489\n   * more informative error message than if the length                                                            // 1490\n   * was supplied directly.                                                                                       // 1491\n   *                                                                                                              // 1492\n   *     expect('foo').to.have.length.of.at.least(2);                                                             // 1493\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);                                                       // 1494\n   *                                                                                                              // 1495\n   * @name least                                                                                                  // 1496\n   * @alias gte                                                                                                   // 1497\n   * @param {Number} value                                                                                        // 1498\n   * @param {String} message _optional_                                                                           // 1499\n   * @api public                                                                                                  // 1500\n   */                                                                                                             // 1501\n                                                                                                                  // 1502\n  function assertLeast (n, msg) {                                                                                 // 1503\n    if (msg) flag(this, 'message', msg);                                                                          // 1504\n    var obj = flag(this, 'object');                                                                               // 1505\n    if (flag(this, 'doLength')) {                                                                                 // 1506\n      new Assertion(obj, msg).to.have.property('length');                                                         // 1507\n      var len = obj.length;                                                                                       // 1508\n      this.assert(                                                                                                // 1509\n          len >= n                                                                                                // 1510\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'                                      // 1511\n        , 'expected #{this} to have a length below #{exp}'                                                        // 1512\n        , n                                                                                                       // 1513\n        , len                                                                                                     // 1514\n      );                                                                                                          // 1515\n    } else {                                                                                                      // 1516\n      this.assert(                                                                                                // 1517\n          obj >= n                                                                                                // 1518\n        , 'expected #{this} to be at least ' + n                                                                  // 1519\n        , 'expected #{this} to be below ' + n                                                                     // 1520\n      );                                                                                                          // 1521\n    }                                                                                                             // 1522\n  }                                                                                                               // 1523\n                                                                                                                  // 1524\n  Assertion.addMethod('least', assertLeast);                                                                      // 1525\n  Assertion.addMethod('gte', assertLeast);                                                                        // 1526\n                                                                                                                  // 1527\n  /**                                                                                                             // 1528\n   * ### .below(value)                                                                                            // 1529\n   *                                                                                                              // 1530\n   * Asserts that the target is less than `value`.                                                                // 1531\n   *                                                                                                              // 1532\n   *     expect(5).to.be.below(10);                                                                               // 1533\n   *                                                                                                              // 1534\n   * Can also be used in conjunction with `length` to                                                             // 1535\n   * assert a maximum length. The benefit being a                                                                 // 1536\n   * more informative error message than if the length                                                            // 1537\n   * was supplied directly.                                                                                       // 1538\n   *                                                                                                              // 1539\n   *     expect('foo').to.have.length.below(4);                                                                   // 1540\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);                                                             // 1541\n   *                                                                                                              // 1542\n   * @name below                                                                                                  // 1543\n   * @alias lt                                                                                                    // 1544\n   * @alias lessThan                                                                                              // 1545\n   * @param {Number} value                                                                                        // 1546\n   * @param {String} message _optional_                                                                           // 1547\n   * @api public                                                                                                  // 1548\n   */                                                                                                             // 1549\n                                                                                                                  // 1550\n  function assertBelow (n, msg) {                                                                                 // 1551\n    if (msg) flag(this, 'message', msg);                                                                          // 1552\n    var obj = flag(this, 'object');                                                                               // 1553\n    if (flag(this, 'doLength')) {                                                                                 // 1554\n      new Assertion(obj, msg).to.have.property('length');                                                         // 1555\n      var len = obj.length;                                                                                       // 1556\n      this.assert(                                                                                                // 1557\n          len < n                                                                                                 // 1558\n        , 'expected #{this} to have a length below #{exp} but got #{act}'                                         // 1559\n        , 'expected #{this} to not have a length below #{exp}'                                                    // 1560\n        , n                                                                                                       // 1561\n        , len                                                                                                     // 1562\n      );                                                                                                          // 1563\n    } else {                                                                                                      // 1564\n      this.assert(                                                                                                // 1565\n          obj < n                                                                                                 // 1566\n        , 'expected #{this} to be below ' + n                                                                     // 1567\n        , 'expected #{this} to be at least ' + n                                                                  // 1568\n      );                                                                                                          // 1569\n    }                                                                                                             // 1570\n  }                                                                                                               // 1571\n                                                                                                                  // 1572\n  Assertion.addMethod('below', assertBelow);                                                                      // 1573\n  Assertion.addMethod('lt', assertBelow);                                                                         // 1574\n  Assertion.addMethod('lessThan', assertBelow);                                                                   // 1575\n                                                                                                                  // 1576\n  /**                                                                                                             // 1577\n   * ### .most(value)                                                                                             // 1578\n   *                                                                                                              // 1579\n   * Asserts that the target is less than or equal to `value`.                                                    // 1580\n   *                                                                                                              // 1581\n   *     expect(5).to.be.at.most(5);                                                                              // 1582\n   *                                                                                                              // 1583\n   * Can also be used in conjunction with `length` to                                                             // 1584\n   * assert a maximum length. The benefit being a                                                                 // 1585\n   * more informative error message than if the length                                                            // 1586\n   * was supplied directly.                                                                                       // 1587\n   *                                                                                                              // 1588\n   *     expect('foo').to.have.length.of.at.most(4);                                                              // 1589\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);                                                        // 1590\n   *                                                                                                              // 1591\n   * @name most                                                                                                   // 1592\n   * @alias lte                                                                                                   // 1593\n   * @param {Number} value                                                                                        // 1594\n   * @param {String} message _optional_                                                                           // 1595\n   * @api public                                                                                                  // 1596\n   */                                                                                                             // 1597\n                                                                                                                  // 1598\n  function assertMost (n, msg) {                                                                                  // 1599\n    if (msg) flag(this, 'message', msg);                                                                          // 1600\n    var obj = flag(this, 'object');                                                                               // 1601\n    if (flag(this, 'doLength')) {                                                                                 // 1602\n      new Assertion(obj, msg).to.have.property('length');                                                         // 1603\n      var len = obj.length;                                                                                       // 1604\n      this.assert(                                                                                                // 1605\n          len <= n                                                                                                // 1606\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'                                       // 1607\n        , 'expected #{this} to have a length above #{exp}'                                                        // 1608\n        , n                                                                                                       // 1609\n        , len                                                                                                     // 1610\n      );                                                                                                          // 1611\n    } else {                                                                                                      // 1612\n      this.assert(                                                                                                // 1613\n          obj <= n                                                                                                // 1614\n        , 'expected #{this} to be at most ' + n                                                                   // 1615\n        , 'expected #{this} to be above ' + n                                                                     // 1616\n      );                                                                                                          // 1617\n    }                                                                                                             // 1618\n  }                                                                                                               // 1619\n                                                                                                                  // 1620\n  Assertion.addMethod('most', assertMost);                                                                        // 1621\n  Assertion.addMethod('lte', assertMost);                                                                         // 1622\n                                                                                                                  // 1623\n  /**                                                                                                             // 1624\n   * ### .within(start, finish)                                                                                   // 1625\n   *                                                                                                              // 1626\n   * Asserts that the target is within a range.                                                                   // 1627\n   *                                                                                                              // 1628\n   *     expect(7).to.be.within(5,10);                                                                            // 1629\n   *                                                                                                              // 1630\n   * Can also be used in conjunction with `length` to                                                             // 1631\n   * assert a length range. The benefit being a                                                                   // 1632\n   * more informative error message than if the length                                                            // 1633\n   * was supplied directly.                                                                                       // 1634\n   *                                                                                                              // 1635\n   *     expect('foo').to.have.length.within(2,4);                                                                // 1636\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);                                                          // 1637\n   *                                                                                                              // 1638\n   * @name within                                                                                                 // 1639\n   * @param {Number} start lowerbound inclusive                                                                   // 1640\n   * @param {Number} finish upperbound inclusive                                                                  // 1641\n   * @param {String} message _optional_                                                                           // 1642\n   * @api public                                                                                                  // 1643\n   */                                                                                                             // 1644\n                                                                                                                  // 1645\n  Assertion.addMethod('within', function (start, finish, msg) {                                                   // 1646\n    if (msg) flag(this, 'message', msg);                                                                          // 1647\n    var obj = flag(this, 'object')                                                                                // 1648\n      , range = start + '..' + finish;                                                                            // 1649\n    if (flag(this, 'doLength')) {                                                                                 // 1650\n      new Assertion(obj, msg).to.have.property('length');                                                         // 1651\n      var len = obj.length;                                                                                       // 1652\n      this.assert(                                                                                                // 1653\n          len >= start && len <= finish                                                                           // 1654\n        , 'expected #{this} to have a length within ' + range                                                     // 1655\n        , 'expected #{this} to not have a length within ' + range                                                 // 1656\n      );                                                                                                          // 1657\n    } else {                                                                                                      // 1658\n      this.assert(                                                                                                // 1659\n          obj >= start && obj <= finish                                                                           // 1660\n        , 'expected #{this} to be within ' + range                                                                // 1661\n        , 'expected #{this} to not be within ' + range                                                            // 1662\n      );                                                                                                          // 1663\n    }                                                                                                             // 1664\n  });                                                                                                             // 1665\n                                                                                                                  // 1666\n  /**                                                                                                             // 1667\n   * ### .instanceof(constructor)                                                                                 // 1668\n   *                                                                                                              // 1669\n   * Asserts that the target is an instance of `constructor`.                                                     // 1670\n   *                                                                                                              // 1671\n   *     var Tea = function (name) { this.name = name; }                                                          // 1672\n   *       , Chai = new Tea('chai');                                                                              // 1673\n   *                                                                                                              // 1674\n   *     expect(Chai).to.be.an.instanceof(Tea);                                                                   // 1675\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);                                                             // 1676\n   *                                                                                                              // 1677\n   * @name instanceof                                                                                             // 1678\n   * @param {Constructor} constructor                                                                             // 1679\n   * @param {String} message _optional_                                                                           // 1680\n   * @alias instanceOf                                                                                            // 1681\n   * @api public                                                                                                  // 1682\n   */                                                                                                             // 1683\n                                                                                                                  // 1684\n  function assertInstanceOf (constructor, msg) {                                                                  // 1685\n    if (msg) flag(this, 'message', msg);                                                                          // 1686\n    var name = _.getName(constructor);                                                                            // 1687\n    this.assert(                                                                                                  // 1688\n        flag(this, 'object') instanceof constructor                                                               // 1689\n      , 'expected #{this} to be an instance of ' + name                                                           // 1690\n      , 'expected #{this} to not be an instance of ' + name                                                       // 1691\n    );                                                                                                            // 1692\n  };                                                                                                              // 1693\n                                                                                                                  // 1694\n  Assertion.addMethod('instanceof', assertInstanceOf);                                                            // 1695\n  Assertion.addMethod('instanceOf', assertInstanceOf);                                                            // 1696\n                                                                                                                  // 1697\n  /**                                                                                                             // 1698\n   * ### .property(name, [value])                                                                                 // 1699\n   *                                                                                                              // 1700\n   * Asserts that the target has a property `name`, optionally asserting that                                     // 1701\n   * the value of that property is strictly equal to  `value`.                                                    // 1702\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep                                    // 1703\n   * references into objects and arrays.                                                                          // 1704\n   *                                                                                                              // 1705\n   *     // simple referencing                                                                                    // 1706\n   *     var obj = { foo: 'bar' };                                                                                // 1707\n   *     expect(obj).to.have.property('foo');                                                                     // 1708\n   *     expect(obj).to.have.property('foo', 'bar');                                                              // 1709\n   *                                                                                                              // 1710\n   *     // deep referencing                                                                                      // 1711\n   *     var deepObj = {                                                                                          // 1712\n   *         green: { tea: 'matcha' }                                                                             // 1713\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]                                                       // 1714\n   *     };                                                                                                       // 1715\n                                                                                                                  // 1716\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');                                            // 1717\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');                                              // 1718\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');                                         // 1719\n   *                                                                                                              // 1720\n   * You can also use an array as the starting point of a `deep.property`                                         // 1721\n   * assertion, or traverse nested arrays.                                                                        // 1722\n   *                                                                                                              // 1723\n   *     var arr = [                                                                                              // 1724\n   *         [ 'chai', 'matcha', 'konacha' ]                                                                      // 1725\n   *       , [ { tea: 'chai' }                                                                                    // 1726\n   *         , { tea: 'matcha' }                                                                                  // 1727\n   *         , { tea: 'konacha' } ]                                                                               // 1728\n   *     ];                                                                                                       // 1729\n   *                                                                                                              // 1730\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');                                                   // 1731\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');                                              // 1732\n   *                                                                                                              // 1733\n   * Furthermore, `property` changes the subject of the assertion                                                 // 1734\n   * to be the value of that property from the original object. This                                              // 1735\n   * permits for further chainable assertions on that property.                                                   // 1736\n   *                                                                                                              // 1737\n   *     expect(obj).to.have.property('foo')                                                                      // 1738\n   *       .that.is.a('string');                                                                                  // 1739\n   *     expect(deepObj).to.have.property('green')                                                                // 1740\n   *       .that.is.an('object')                                                                                  // 1741\n   *       .that.deep.equals({ tea: 'matcha' });                                                                  // 1742\n   *     expect(deepObj).to.have.property('teas')                                                                 // 1743\n   *       .that.is.an('array')                                                                                   // 1744\n   *       .with.deep.property('[2]')                                                                             // 1745\n   *         .that.deep.equals({ tea: 'konacha' });                                                               // 1746\n   *                                                                                                              // 1747\n   * @name property                                                                                               // 1748\n   * @alias deep.property                                                                                         // 1749\n   * @param {String} name                                                                                         // 1750\n   * @param {Mixed} value (optional)                                                                              // 1751\n   * @param {String} message _optional_                                                                           // 1752\n   * @returns value of property for chaining                                                                      // 1753\n   * @api public                                                                                                  // 1754\n   */                                                                                                             // 1755\n                                                                                                                  // 1756\n  Assertion.addMethod('property', function (name, val, msg) {                                                     // 1757\n    if (msg) flag(this, 'message', msg);                                                                          // 1758\n                                                                                                                  // 1759\n    var isDeep = !!flag(this, 'deep')                                                                             // 1760\n      , descriptor = isDeep ? 'deep property ' : 'property '                                                      // 1761\n      , negate = flag(this, 'negate')                                                                             // 1762\n      , obj = flag(this, 'object')                                                                                // 1763\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null                                                       // 1764\n      , hasProperty = isDeep                                                                                      // 1765\n        ? pathInfo.exists                                                                                         // 1766\n        : _.hasProperty(name, obj)                                                                                // 1767\n      , value = isDeep                                                                                            // 1768\n        ? pathInfo.value                                                                                          // 1769\n        : obj[name];                                                                                              // 1770\n                                                                                                                  // 1771\n    if (negate && undefined !== val) {                                                                            // 1772\n      if (undefined === value) {                                                                                  // 1773\n        msg = (msg != null) ? msg + ': ' : '';                                                                    // 1774\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));                        // 1775\n      }                                                                                                           // 1776\n    } else {                                                                                                      // 1777\n      this.assert(                                                                                                // 1778\n          hasProperty                                                                                             // 1779\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)                                            // 1780\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));                                        // 1781\n    }                                                                                                             // 1782\n                                                                                                                  // 1783\n    if (undefined !== val) {                                                                                      // 1784\n      this.assert(                                                                                                // 1785\n          val === value                                                                                           // 1786\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'             // 1787\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'                         // 1788\n        , val                                                                                                     // 1789\n        , value                                                                                                   // 1790\n      );                                                                                                          // 1791\n    }                                                                                                             // 1792\n                                                                                                                  // 1793\n    flag(this, 'object', value);                                                                                  // 1794\n  });                                                                                                             // 1795\n                                                                                                                  // 1796\n                                                                                                                  // 1797\n  /**                                                                                                             // 1798\n   * ### .ownProperty(name)                                                                                       // 1799\n   *                                                                                                              // 1800\n   * Asserts that the target has an own property `name`.                                                          // 1801\n   *                                                                                                              // 1802\n   *     expect('test').to.have.ownProperty('length');                                                            // 1803\n   *                                                                                                              // 1804\n   * @name ownProperty                                                                                            // 1805\n   * @alias haveOwnProperty                                                                                       // 1806\n   * @param {String} name                                                                                         // 1807\n   * @param {String} message _optional_                                                                           // 1808\n   * @api public                                                                                                  // 1809\n   */                                                                                                             // 1810\n                                                                                                                  // 1811\n  function assertOwnProperty (name, msg) {                                                                        // 1812\n    if (msg) flag(this, 'message', msg);                                                                          // 1813\n    var obj = flag(this, 'object');                                                                               // 1814\n    this.assert(                                                                                                  // 1815\n        obj.hasOwnProperty(name)                                                                                  // 1816\n      , 'expected #{this} to have own property ' + _.inspect(name)                                                // 1817\n      , 'expected #{this} to not have own property ' + _.inspect(name)                                            // 1818\n    );                                                                                                            // 1819\n  }                                                                                                               // 1820\n                                                                                                                  // 1821\n  Assertion.addMethod('ownProperty', assertOwnProperty);                                                          // 1822\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);                                                      // 1823\n                                                                                                                  // 1824\n  /**                                                                                                             // 1825\n   * ### .length(value)                                                                                           // 1826\n   *                                                                                                              // 1827\n   * Asserts that the target's `length` property has                                                              // 1828\n   * the expected value.                                                                                          // 1829\n   *                                                                                                              // 1830\n   *     expect([ 1, 2, 3]).to.have.length(3);                                                                    // 1831\n   *     expect('foobar').to.have.length(6);                                                                      // 1832\n   *                                                                                                              // 1833\n   * Can also be used as a chain precursor to a value                                                             // 1834\n   * comparison for the length property.                                                                          // 1835\n   *                                                                                                              // 1836\n   *     expect('foo').to.have.length.above(2);                                                                   // 1837\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);                                                             // 1838\n   *     expect('foo').to.have.length.below(4);                                                                   // 1839\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);                                                             // 1840\n   *     expect('foo').to.have.length.within(2,4);                                                                // 1841\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);                                                          // 1842\n   *                                                                                                              // 1843\n   * @name length                                                                                                 // 1844\n   * @alias lengthOf                                                                                              // 1845\n   * @param {Number} length                                                                                       // 1846\n   * @param {String} message _optional_                                                                           // 1847\n   * @api public                                                                                                  // 1848\n   */                                                                                                             // 1849\n                                                                                                                  // 1850\n  function assertLengthChain () {                                                                                 // 1851\n    flag(this, 'doLength', true);                                                                                 // 1852\n  }                                                                                                               // 1853\n                                                                                                                  // 1854\n  function assertLength (n, msg) {                                                                                // 1855\n    if (msg) flag(this, 'message', msg);                                                                          // 1856\n    var obj = flag(this, 'object');                                                                               // 1857\n    new Assertion(obj, msg).to.have.property('length');                                                           // 1858\n    var len = obj.length;                                                                                         // 1859\n                                                                                                                  // 1860\n    this.assert(                                                                                                  // 1861\n        len == n                                                                                                  // 1862\n      , 'expected #{this} to have a length of #{exp} but got #{act}'                                              // 1863\n      , 'expected #{this} to not have a length of #{act}'                                                         // 1864\n      , n                                                                                                         // 1865\n      , len                                                                                                       // 1866\n    );                                                                                                            // 1867\n  }                                                                                                               // 1868\n                                                                                                                  // 1869\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);                                        // 1870\n  Assertion.addMethod('lengthOf', assertLength);                                                                  // 1871\n                                                                                                                  // 1872\n  /**                                                                                                             // 1873\n   * ### .match(regexp)                                                                                           // 1874\n   *                                                                                                              // 1875\n   * Asserts that the target matches a regular expression.                                                        // 1876\n   *                                                                                                              // 1877\n   *     expect('foobar').to.match(/^foo/);                                                                       // 1878\n   *                                                                                                              // 1879\n   * @name match                                                                                                  // 1880\n   * @param {RegExp} RegularExpression                                                                            // 1881\n   * @param {String} message _optional_                                                                           // 1882\n   * @api public                                                                                                  // 1883\n   */                                                                                                             // 1884\n                                                                                                                  // 1885\n  Assertion.addMethod('match', function (re, msg) {                                                               // 1886\n    if (msg) flag(this, 'message', msg);                                                                          // 1887\n    var obj = flag(this, 'object');                                                                               // 1888\n    this.assert(                                                                                                  // 1889\n        re.exec(obj)                                                                                              // 1890\n      , 'expected #{this} to match ' + re                                                                         // 1891\n      , 'expected #{this} not to match ' + re                                                                     // 1892\n    );                                                                                                            // 1893\n  });                                                                                                             // 1894\n                                                                                                                  // 1895\n  /**                                                                                                             // 1896\n   * ### .string(string)                                                                                          // 1897\n   *                                                                                                              // 1898\n   * Asserts that the string target contains another string.                                                      // 1899\n   *                                                                                                              // 1900\n   *     expect('foobar').to.have.string('bar');                                                                  // 1901\n   *                                                                                                              // 1902\n   * @name string                                                                                                 // 1903\n   * @param {String} string                                                                                       // 1904\n   * @param {String} message _optional_                                                                           // 1905\n   * @api public                                                                                                  // 1906\n   */                                                                                                             // 1907\n                                                                                                                  // 1908\n  Assertion.addMethod('string', function (str, msg) {                                                             // 1909\n    if (msg) flag(this, 'message', msg);                                                                          // 1910\n    var obj = flag(this, 'object');                                                                               // 1911\n    new Assertion(obj, msg).is.a('string');                                                                       // 1912\n                                                                                                                  // 1913\n    this.assert(                                                                                                  // 1914\n        ~obj.indexOf(str)                                                                                         // 1915\n      , 'expected #{this} to contain ' + _.inspect(str)                                                           // 1916\n      , 'expected #{this} to not contain ' + _.inspect(str)                                                       // 1917\n    );                                                                                                            // 1918\n  });                                                                                                             // 1919\n                                                                                                                  // 1920\n                                                                                                                  // 1921\n  /**                                                                                                             // 1922\n   * ### .keys(key1, [key2], [...])                                                                               // 1923\n   *                                                                                                              // 1924\n   * Asserts that the target contains any or all of the passed-in keys.                                           // 1925\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect                                      // 1926\n   * what will pass.                                                                                              // 1927\n   *                                                                                                              // 1928\n   * When used in conjunction with `any`, at least one key that is passed                                         // 1929\n   * in must exist in the target object. This is regardless whether or not                                        // 1930\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`                                     // 1931\n   * should be used in the assertion. If neither are used, the assertion is                                       // 1932\n   * defaulted to `all`.                                                                                          // 1933\n   *                                                                                                              // 1934\n   * When both `all` and `contain` are used, the target object must have at                                       // 1935\n   * least all of the passed-in keys but may have more keys not listed.                                           // 1936\n   *                                                                                                              // 1937\n   * When both `all` and `have` are used, the target object must both contain                                     // 1938\n   * all of the passed-in keys AND the number of keys in the target object must                                   // 1939\n   * match the number of keys passed in (in other words, a target object must                                     // 1940\n   * have all and only all of the passed-in keys).                                                                // 1941\n   *                                                                                                              // 1942\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');                                               // 1943\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');                                                      // 1944\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');                                            // 1945\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);                                                 // 1946\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});                                              // 1947\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);                                             // 1948\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo', 7});                                       // 1949\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);                                  // 1950\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys([{'bar': 6}}]);                                   // 1951\n   *                                                                                                              // 1952\n   *                                                                                                              // 1953\n   * @name keys                                                                                                   // 1954\n   * @alias key                                                                                                   // 1955\n   * @param {String...|Array|Object} keys                                                                         // 1956\n   * @api public                                                                                                  // 1957\n   */                                                                                                             // 1958\n                                                                                                                  // 1959\n  function assertKeys (keys) {                                                                                    // 1960\n    var obj = flag(this, 'object')                                                                                // 1961\n      , str                                                                                                       // 1962\n      , ok = true                                                                                                 // 1963\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments'; // 1964\n                                                                                                                  // 1965\n    switch (_.type(keys)) {                                                                                       // 1966\n      case \"array\":                                                                                               // 1967\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));                                                // 1968\n        break;                                                                                                    // 1969\n      case \"object\":                                                                                              // 1970\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));                                                // 1971\n        keys = Object.keys(keys);                                                                                 // 1972\n        break;                                                                                                    // 1973\n      default:                                                                                                    // 1974\n        keys = Array.prototype.slice.call(arguments);                                                             // 1975\n    }                                                                                                             // 1976\n                                                                                                                  // 1977\n    if (!keys.length) throw new Error('keys required');                                                           // 1978\n                                                                                                                  // 1979\n    var actual = Object.keys(obj)                                                                                 // 1980\n      , expected = keys                                                                                           // 1981\n      , len = keys.length                                                                                         // 1982\n      , any = flag(this, 'any')                                                                                   // 1983\n      , all = flag(this, 'all');                                                                                  // 1984\n                                                                                                                  // 1985\n    if (!any && !all) {                                                                                           // 1986\n      all = true;                                                                                                 // 1987\n    }                                                                                                             // 1988\n                                                                                                                  // 1989\n    // Has any                                                                                                    // 1990\n    if (any) {                                                                                                    // 1991\n      var intersection = expected.filter(function(key) {                                                          // 1992\n        return ~actual.indexOf(key);                                                                              // 1993\n      });                                                                                                         // 1994\n      ok = intersection.length > 0;                                                                               // 1995\n    }                                                                                                             // 1996\n                                                                                                                  // 1997\n    // Has all                                                                                                    // 1998\n    if (all) {                                                                                                    // 1999\n      ok = keys.every(function(key){                                                                              // 2000\n        return ~actual.indexOf(key);                                                                              // 2001\n      });                                                                                                         // 2002\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {                                                     // 2003\n        ok = ok && keys.length == actual.length;                                                                  // 2004\n      }                                                                                                           // 2005\n    }                                                                                                             // 2006\n                                                                                                                  // 2007\n    // Key string                                                                                                 // 2008\n    if (len > 1) {                                                                                                // 2009\n      keys = keys.map(function(key){                                                                              // 2010\n        return _.inspect(key);                                                                                    // 2011\n      });                                                                                                         // 2012\n      var last = keys.pop();                                                                                      // 2013\n      if (all) {                                                                                                  // 2014\n        str = keys.join(', ') + ', and ' + last;                                                                  // 2015\n      }                                                                                                           // 2016\n      if (any) {                                                                                                  // 2017\n        str = keys.join(', ') + ', or ' + last;                                                                   // 2018\n      }                                                                                                           // 2019\n    } else {                                                                                                      // 2020\n      str = _.inspect(keys[0]);                                                                                   // 2021\n    }                                                                                                             // 2022\n                                                                                                                  // 2023\n    // Form                                                                                                       // 2024\n    str = (len > 1 ? 'keys ' : 'key ') + str;                                                                     // 2025\n                                                                                                                  // 2026\n    // Have / include                                                                                             // 2027\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;                                                  // 2028\n                                                                                                                  // 2029\n    // Assertion                                                                                                  // 2030\n    this.assert(                                                                                                  // 2031\n        ok                                                                                                        // 2032\n      , 'expected #{this} to ' + str                                                                              // 2033\n      , 'expected #{this} to not ' + str                                                                          // 2034\n      , expected.slice(0).sort()                                                                                  // 2035\n      , actual.sort()                                                                                             // 2036\n      , true                                                                                                      // 2037\n    );                                                                                                            // 2038\n  }                                                                                                               // 2039\n                                                                                                                  // 2040\n  Assertion.addMethod('keys', assertKeys);                                                                        // 2041\n  Assertion.addMethod('key', assertKeys);                                                                         // 2042\n                                                                                                                  // 2043\n  /**                                                                                                             // 2044\n   * ### .throw(constructor)                                                                                      // 2045\n   *                                                                                                              // 2046\n   * Asserts that the function target will throw a specific error, or specific type of error                      // 2047\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test                        // 2048\n   * for the error's message.                                                                                     // 2049\n   *                                                                                                              // 2050\n   *     var err = new ReferenceError('This is a bad function.');                                                 // 2051\n   *     var fn = function () { throw err; }                                                                      // 2052\n   *     expect(fn).to.throw(ReferenceError);                                                                     // 2053\n   *     expect(fn).to.throw(Error);                                                                              // 2054\n   *     expect(fn).to.throw(/bad function/);                                                                     // 2055\n   *     expect(fn).to.not.throw('good function');                                                                // 2056\n   *     expect(fn).to.throw(ReferenceError, /bad function/);                                                     // 2057\n   *     expect(fn).to.throw(err);                                                                                // 2058\n   *     expect(fn).to.not.throw(new RangeError('Out of range.'));                                                // 2059\n   *                                                                                                              // 2060\n   * Please note that when a throw expectation is negated, it will check each                                     // 2061\n   * parameter independently, starting with error constructor type. The appropriate way                           // 2062\n   * to check for the existence of a type of error but for a message that does not match                          // 2063\n   * is to use `and`.                                                                                             // 2064\n   *                                                                                                              // 2065\n   *     expect(fn).to.throw(ReferenceError)                                                                      // 2066\n   *        .and.not.throw(/good function/);                                                                      // 2067\n   *                                                                                                              // 2068\n   * @name throw                                                                                                  // 2069\n   * @alias throws                                                                                                // 2070\n   * @alias Throw                                                                                                 // 2071\n   * @param {ErrorConstructor} constructor                                                                        // 2072\n   * @param {String|RegExp} expected error message                                                                // 2073\n   * @param {String} message _optional_                                                                           // 2074\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types                  // 2075\n   * @returns error for chaining (null if no error)                                                               // 2076\n   * @api public                                                                                                  // 2077\n   */                                                                                                             // 2078\n                                                                                                                  // 2079\n  function assertThrows (constructor, errMsg, msg) {                                                              // 2080\n    if (msg) flag(this, 'message', msg);                                                                          // 2081\n    var obj = flag(this, 'object');                                                                               // 2082\n    new Assertion(obj, msg).is.a('function');                                                                     // 2083\n                                                                                                                  // 2084\n    var thrown = false                                                                                            // 2085\n      , desiredError = null                                                                                       // 2086\n      , name = null                                                                                               // 2087\n      , thrownError = null;                                                                                       // 2088\n                                                                                                                  // 2089\n    if (arguments.length === 0) {                                                                                 // 2090\n      errMsg = null;                                                                                              // 2091\n      constructor = null;                                                                                         // 2092\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {               // 2093\n      errMsg = constructor;                                                                                       // 2094\n      constructor = null;                                                                                         // 2095\n    } else if (constructor && constructor instanceof Error) {                                                     // 2096\n      desiredError = constructor;                                                                                 // 2097\n      constructor = null;                                                                                         // 2098\n      errMsg = null;                                                                                              // 2099\n    } else if (typeof constructor === 'function') {                                                               // 2100\n      name = constructor.prototype.name || constructor.name;                                                      // 2101\n      if (name === 'Error' && constructor !== Error) {                                                            // 2102\n        name = (new constructor()).name;                                                                          // 2103\n      }                                                                                                           // 2104\n    } else {                                                                                                      // 2105\n      constructor = null;                                                                                         // 2106\n    }                                                                                                             // 2107\n                                                                                                                  // 2108\n    try {                                                                                                         // 2109\n      obj();                                                                                                      // 2110\n    } catch (err) {                                                                                               // 2111\n      // first, check desired error                                                                               // 2112\n      if (desiredError) {                                                                                         // 2113\n        this.assert(                                                                                              // 2114\n            err === desiredError                                                                                  // 2115\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'                                              // 2116\n          , 'expected #{this} to not throw #{exp}'                                                                // 2117\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)                              // 2118\n          , (err instanceof Error ? err.toString() : err)                                                         // 2119\n        );                                                                                                        // 2120\n                                                                                                                  // 2121\n        flag(this, 'object', err);                                                                                // 2122\n        return this;                                                                                              // 2123\n      }                                                                                                           // 2124\n                                                                                                                  // 2125\n      // next, check constructor                                                                                  // 2126\n      if (constructor) {                                                                                          // 2127\n        this.assert(                                                                                              // 2128\n            err instanceof constructor                                                                            // 2129\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'                                              // 2130\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'                                          // 2131\n          , name                                                                                                  // 2132\n          , (err instanceof Error ? err.toString() : err)                                                         // 2133\n        );                                                                                                        // 2134\n                                                                                                                  // 2135\n        if (!errMsg) {                                                                                            // 2136\n          flag(this, 'object', err);                                                                              // 2137\n          return this;                                                                                            // 2138\n        }                                                                                                         // 2139\n      }                                                                                                           // 2140\n                                                                                                                  // 2141\n      // next, check message                                                                                      // 2142\n      var message = 'object' === _.type(err) && \"message\" in err                                                  // 2143\n        ? err.message                                                                                             // 2144\n        : '' + err;                                                                                               // 2145\n                                                                                                                  // 2146\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {                                              // 2147\n        this.assert(                                                                                              // 2148\n            errMsg.exec(message)                                                                                  // 2149\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'                                      // 2150\n          , 'expected #{this} to throw error not matching #{exp}'                                                 // 2151\n          , errMsg                                                                                                // 2152\n          , message                                                                                               // 2153\n        );                                                                                                        // 2154\n                                                                                                                  // 2155\n        flag(this, 'object', err);                                                                                // 2156\n        return this;                                                                                              // 2157\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {                                     // 2158\n        this.assert(                                                                                              // 2159\n            ~message.indexOf(errMsg)                                                                              // 2160\n          , 'expected #{this} to throw error including #{exp} but got #{act}'                                     // 2161\n          , 'expected #{this} to throw error not including #{act}'                                                // 2162\n          , errMsg                                                                                                // 2163\n          , message                                                                                               // 2164\n        );                                                                                                        // 2165\n                                                                                                                  // 2166\n        flag(this, 'object', err);                                                                                // 2167\n        return this;                                                                                              // 2168\n      } else {                                                                                                    // 2169\n        thrown = true;                                                                                            // 2170\n        thrownError = err;                                                                                        // 2171\n      }                                                                                                           // 2172\n    }                                                                                                             // 2173\n                                                                                                                  // 2174\n    var actuallyGot = ''                                                                                          // 2175\n      , expectedThrown = name !== null                                                                            // 2176\n        ? name                                                                                                    // 2177\n        : desiredError                                                                                            // 2178\n          ? '#{exp}' //_.inspect(desiredError)                                                                    // 2179\n          : 'an error';                                                                                           // 2180\n                                                                                                                  // 2181\n    if (thrown) {                                                                                                 // 2182\n      actuallyGot = ' but #{act} was thrown'                                                                      // 2183\n    }                                                                                                             // 2184\n                                                                                                                  // 2185\n    this.assert(                                                                                                  // 2186\n        thrown === true                                                                                           // 2187\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot                                               // 2188\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot                                           // 2189\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)                                  // 2190\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)                                     // 2191\n    );                                                                                                            // 2192\n                                                                                                                  // 2193\n    flag(this, 'object', thrownError);                                                                            // 2194\n  };                                                                                                              // 2195\n                                                                                                                  // 2196\n  Assertion.addMethod('throw', assertThrows);                                                                     // 2197\n  Assertion.addMethod('throws', assertThrows);                                                                    // 2198\n  Assertion.addMethod('Throw', assertThrows);                                                                     // 2199\n                                                                                                                  // 2200\n  /**                                                                                                             // 2201\n   * ### .respondTo(method)                                                                                       // 2202\n   *                                                                                                              // 2203\n   * Asserts that the object or class target will respond to a method.                                            // 2204\n   *                                                                                                              // 2205\n   *     Klass.prototype.bar = function(){};                                                                      // 2206\n   *     expect(Klass).to.respondTo('bar');                                                                       // 2207\n   *     expect(obj).to.respondTo('bar');                                                                         // 2208\n   *                                                                                                              // 2209\n   * To check if a constructor will respond to a static function,                                                 // 2210\n   * set the `itself` flag.                                                                                       // 2211\n   *                                                                                                              // 2212\n   *     Klass.baz = function(){};                                                                                // 2213\n   *     expect(Klass).itself.to.respondTo('baz');                                                                // 2214\n   *                                                                                                              // 2215\n   * @name respondTo                                                                                              // 2216\n   * @param {String} method                                                                                       // 2217\n   * @param {String} message _optional_                                                                           // 2218\n   * @api public                                                                                                  // 2219\n   */                                                                                                             // 2220\n                                                                                                                  // 2221\n  Assertion.addMethod('respondTo', function (method, msg) {                                                       // 2222\n    if (msg) flag(this, 'message', msg);                                                                          // 2223\n    var obj = flag(this, 'object')                                                                                // 2224\n      , itself = flag(this, 'itself')                                                                             // 2225\n      , context = ('function' === _.type(obj) && !itself)                                                         // 2226\n        ? obj.prototype[method]                                                                                   // 2227\n        : obj[method];                                                                                            // 2228\n                                                                                                                  // 2229\n    this.assert(                                                                                                  // 2230\n        'function' === typeof context                                                                             // 2231\n      , 'expected #{this} to respond to ' + _.inspect(method)                                                     // 2232\n      , 'expected #{this} to not respond to ' + _.inspect(method)                                                 // 2233\n    );                                                                                                            // 2234\n  });                                                                                                             // 2235\n                                                                                                                  // 2236\n  /**                                                                                                             // 2237\n   * ### .itself                                                                                                  // 2238\n   *                                                                                                              // 2239\n   * Sets the `itself` flag, later used by the `respondTo` assertion.                                             // 2240\n   *                                                                                                              // 2241\n   *     function Foo() {}                                                                                        // 2242\n   *     Foo.bar = function() {}                                                                                  // 2243\n   *     Foo.prototype.baz = function() {}                                                                        // 2244\n   *                                                                                                              // 2245\n   *     expect(Foo).itself.to.respondTo('bar');                                                                  // 2246\n   *     expect(Foo).itself.not.to.respondTo('baz');                                                              // 2247\n   *                                                                                                              // 2248\n   * @name itself                                                                                                 // 2249\n   * @api public                                                                                                  // 2250\n   */                                                                                                             // 2251\n                                                                                                                  // 2252\n  Assertion.addProperty('itself', function () {                                                                   // 2253\n    flag(this, 'itself', true);                                                                                   // 2254\n  });                                                                                                             // 2255\n                                                                                                                  // 2256\n  /**                                                                                                             // 2257\n   * ### .satisfy(method)                                                                                         // 2258\n   *                                                                                                              // 2259\n   * Asserts that the target passes a given truth test.                                                           // 2260\n   *                                                                                                              // 2261\n   *     expect(1).to.satisfy(function(num) { return num > 0; });                                                 // 2262\n   *                                                                                                              // 2263\n   * @name satisfy                                                                                                // 2264\n   * @param {Function} matcher                                                                                    // 2265\n   * @param {String} message _optional_                                                                           // 2266\n   * @api public                                                                                                  // 2267\n   */                                                                                                             // 2268\n                                                                                                                  // 2269\n  Assertion.addMethod('satisfy', function (matcher, msg) {                                                        // 2270\n    if (msg) flag(this, 'message', msg);                                                                          // 2271\n    var obj = flag(this, 'object');                                                                               // 2272\n    var result = matcher(obj);                                                                                    // 2273\n    this.assert(                                                                                                  // 2274\n        result                                                                                                    // 2275\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)                                                    // 2276\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)                                                 // 2277\n      , this.negate ? false : true                                                                                // 2278\n      , result                                                                                                    // 2279\n    );                                                                                                            // 2280\n  });                                                                                                             // 2281\n                                                                                                                  // 2282\n  /**                                                                                                             // 2283\n   * ### .closeTo(expected, delta)                                                                                // 2284\n   *                                                                                                              // 2285\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.                                  // 2286\n   *                                                                                                              // 2287\n   *     expect(1.5).to.be.closeTo(1, 0.5);                                                                       // 2288\n   *                                                                                                              // 2289\n   * @name closeTo                                                                                                // 2290\n   * @param {Number} expected                                                                                     // 2291\n   * @param {Number} delta                                                                                        // 2292\n   * @param {String} message _optional_                                                                           // 2293\n   * @api public                                                                                                  // 2294\n   */                                                                                                             // 2295\n                                                                                                                  // 2296\n  Assertion.addMethod('closeTo', function (expected, delta, msg) {                                                // 2297\n    if (msg) flag(this, 'message', msg);                                                                          // 2298\n    var obj = flag(this, 'object');                                                                               // 2299\n                                                                                                                  // 2300\n    new Assertion(obj, msg).is.a('number');                                                                       // 2301\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {                                            // 2302\n      throw new Error('the arguments to closeTo must be numbers');                                                // 2303\n    }                                                                                                             // 2304\n                                                                                                                  // 2305\n    this.assert(                                                                                                  // 2306\n        Math.abs(obj - expected) <= delta                                                                         // 2307\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta                                           // 2308\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta                                       // 2309\n    );                                                                                                            // 2310\n  });                                                                                                             // 2311\n                                                                                                                  // 2312\n  function isSubsetOf(subset, superset, cmp) {                                                                    // 2313\n    return subset.every(function(elem) {                                                                          // 2314\n      if (!cmp) return superset.indexOf(elem) !== -1;                                                             // 2315\n                                                                                                                  // 2316\n      return superset.some(function(elem2) {                                                                      // 2317\n        return cmp(elem, elem2);                                                                                  // 2318\n      });                                                                                                         // 2319\n    })                                                                                                            // 2320\n  }                                                                                                               // 2321\n                                                                                                                  // 2322\n  /**                                                                                                             // 2323\n   * ### .members(set)                                                                                            // 2324\n   *                                                                                                              // 2325\n   * Asserts that the target is a superset of `set`,                                                              // 2326\n   * or that the target and `set` have the same strictly-equal (===) members.                                     // 2327\n   * Alternately, if the `deep` flag is set, set members are compared for deep                                    // 2328\n   * equality.                                                                                                    // 2329\n   *                                                                                                              // 2330\n   *     expect([1, 2, 3]).to.include.members([3, 2]);                                                            // 2331\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);                                                     // 2332\n   *                                                                                                              // 2333\n   *     expect([4, 2]).to.have.members([2, 4]);                                                                  // 2334\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);                                                           // 2335\n   *                                                                                                              // 2336\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);                                                // 2337\n   *                                                                                                              // 2338\n   * @name members                                                                                                // 2339\n   * @param {Array} set                                                                                           // 2340\n   * @param {String} message _optional_                                                                           // 2341\n   * @api public                                                                                                  // 2342\n   */                                                                                                             // 2343\n                                                                                                                  // 2344\n  Assertion.addMethod('members', function (subset, msg) {                                                         // 2345\n    if (msg) flag(this, 'message', msg);                                                                          // 2346\n    var obj = flag(this, 'object');                                                                               // 2347\n                                                                                                                  // 2348\n    new Assertion(obj).to.be.an('array');                                                                         // 2349\n    new Assertion(subset).to.be.an('array');                                                                      // 2350\n                                                                                                                  // 2351\n    var cmp = flag(this, 'deep') ? _.eql : undefined;                                                             // 2352\n                                                                                                                  // 2353\n    if (flag(this, 'contains')) {                                                                                 // 2354\n      return this.assert(                                                                                         // 2355\n          isSubsetOf(subset, obj, cmp)                                                                            // 2356\n        , 'expected #{this} to be a superset of #{act}'                                                           // 2357\n        , 'expected #{this} to not be a superset of #{act}'                                                       // 2358\n        , obj                                                                                                     // 2359\n        , subset                                                                                                  // 2360\n      );                                                                                                          // 2361\n    }                                                                                                             // 2362\n                                                                                                                  // 2363\n    this.assert(                                                                                                  // 2364\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)                                              // 2365\n        , 'expected #{this} to have the same members as #{act}'                                                   // 2366\n        , 'expected #{this} to not have the same members as #{act}'                                               // 2367\n        , obj                                                                                                     // 2368\n        , subset                                                                                                  // 2369\n    );                                                                                                            // 2370\n  });                                                                                                             // 2371\n                                                                                                                  // 2372\n  /**                                                                                                             // 2373\n   * ### .change(function)                                                                                        // 2374\n   *                                                                                                              // 2375\n   * Asserts that a function changes an object property                                                           // 2376\n   *                                                                                                              // 2377\n   *     var obj = { val: 10 };                                                                                   // 2378\n   *     var fn = function() { obj.val += 3 };                                                                    // 2379\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }                                                    // 2380\n   *     expect(fn).to.change(obj, 'val');                                                                        // 2381\n   *     expect(noChangFn).to.not.change(obj, 'val')                                                              // 2382\n   *                                                                                                              // 2383\n   * @name change                                                                                                 // 2384\n   * @alias changes                                                                                               // 2385\n   * @alias Change                                                                                                // 2386\n   * @param {String} object                                                                                       // 2387\n   * @param {String} property name                                                                                // 2388\n   * @param {String} message _optional_                                                                           // 2389\n   * @api public                                                                                                  // 2390\n   */                                                                                                             // 2391\n                                                                                                                  // 2392\n  function assertChanges (object, prop, msg) {                                                                    // 2393\n    if (msg) flag(this, 'message', msg);                                                                          // 2394\n    var fn = flag(this, 'object');                                                                                // 2395\n    new Assertion(object, msg).to.have.property(prop);                                                            // 2396\n    new Assertion(fn).is.a('function');                                                                           // 2397\n                                                                                                                  // 2398\n    var initial = object[prop];                                                                                   // 2399\n    fn();                                                                                                         // 2400\n                                                                                                                  // 2401\n    this.assert(                                                                                                  // 2402\n      initial !== object[prop]                                                                                    // 2403\n      , 'expected .' + prop + ' to change'                                                                        // 2404\n      , 'expected .' + prop + ' to not change'                                                                    // 2405\n    );                                                                                                            // 2406\n  }                                                                                                               // 2407\n                                                                                                                  // 2408\n  Assertion.addChainableMethod('change', assertChanges);                                                          // 2409\n  Assertion.addChainableMethod('changes', assertChanges);                                                         // 2410\n                                                                                                                  // 2411\n  /**                                                                                                             // 2412\n   * ### .increase(function)                                                                                      // 2413\n   *                                                                                                              // 2414\n   * Asserts that a function increases an object property                                                         // 2415\n   *                                                                                                              // 2416\n   *     var obj = { val: 10 };                                                                                   // 2417\n   *     var fn = function() { obj.val = 15 };                                                                    // 2418\n   *     expect(fn).to.increase(obj, 'val');                                                                      // 2419\n   *                                                                                                              // 2420\n   * @name increase                                                                                               // 2421\n   * @alias increases                                                                                             // 2422\n   * @alias Increase                                                                                              // 2423\n   * @param {String} object                                                                                       // 2424\n   * @param {String} property name                                                                                // 2425\n   * @param {String} message _optional_                                                                           // 2426\n   * @api public                                                                                                  // 2427\n   */                                                                                                             // 2428\n                                                                                                                  // 2429\n  function assertIncreases (object, prop, msg) {                                                                  // 2430\n    if (msg) flag(this, 'message', msg);                                                                          // 2431\n    var fn = flag(this, 'object');                                                                                // 2432\n    new Assertion(object, msg).to.have.property(prop);                                                            // 2433\n    new Assertion(fn).is.a('function');                                                                           // 2434\n                                                                                                                  // 2435\n    var initial = object[prop];                                                                                   // 2436\n    fn();                                                                                                         // 2437\n                                                                                                                  // 2438\n    this.assert(                                                                                                  // 2439\n      object[prop] - initial > 0                                                                                  // 2440\n      , 'expected .' + prop + ' to increase'                                                                      // 2441\n      , 'expected .' + prop + ' to not increase'                                                                  // 2442\n    );                                                                                                            // 2443\n  }                                                                                                               // 2444\n                                                                                                                  // 2445\n  Assertion.addChainableMethod('increase', assertIncreases);                                                      // 2446\n  Assertion.addChainableMethod('increases', assertIncreases);                                                     // 2447\n                                                                                                                  // 2448\n  /**                                                                                                             // 2449\n   * ### .decrease(function)                                                                                      // 2450\n   *                                                                                                              // 2451\n   * Asserts that a function decreases an object property                                                         // 2452\n   *                                                                                                              // 2453\n   *     var obj = { val: 10 };                                                                                   // 2454\n   *     var fn = function() { obj.val = 5 };                                                                     // 2455\n   *     expect(fn).to.decrease(obj, 'val');                                                                      // 2456\n   *                                                                                                              // 2457\n   * @name decrease                                                                                               // 2458\n   * @alias decreases                                                                                             // 2459\n   * @alias Decrease                                                                                              // 2460\n   * @param {String} object                                                                                       // 2461\n   * @param {String} property name                                                                                // 2462\n   * @param {String} message _optional_                                                                           // 2463\n   * @api public                                                                                                  // 2464\n   */                                                                                                             // 2465\n                                                                                                                  // 2466\n  function assertDecreases (object, prop, msg) {                                                                  // 2467\n    if (msg) flag(this, 'message', msg);                                                                          // 2468\n    var fn = flag(this, 'object');                                                                                // 2469\n    new Assertion(object, msg).to.have.property(prop);                                                            // 2470\n    new Assertion(fn).is.a('function');                                                                           // 2471\n                                                                                                                  // 2472\n    var initial = object[prop];                                                                                   // 2473\n    fn();                                                                                                         // 2474\n                                                                                                                  // 2475\n    this.assert(                                                                                                  // 2476\n      object[prop] - initial < 0                                                                                  // 2477\n      , 'expected .' + prop + ' to decrease'                                                                      // 2478\n      , 'expected .' + prop + ' to not decrease'                                                                  // 2479\n    );                                                                                                            // 2480\n  }                                                                                                               // 2481\n                                                                                                                  // 2482\n  Assertion.addChainableMethod('decrease', assertDecreases);                                                      // 2483\n  Assertion.addChainableMethod('decreases', assertDecreases);                                                     // 2484\n                                                                                                                  // 2485\n};                                                                                                                // 2486\n                                                                                                                  // 2487\n});                                                                                                               // 2488\n                                                                                                                  // 2489\nrequire.register(\"chai/lib/chai/interface/assert.js\", function (exports, module) {                                // 2490\n/*!                                                                                                               // 2491\n * chai                                                                                                           // 2492\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 2493\n * MIT Licensed                                                                                                   // 2494\n */                                                                                                               // 2495\n                                                                                                                  // 2496\n                                                                                                                  // 2497\nmodule.exports = function (chai, util) {                                                                          // 2498\n                                                                                                                  // 2499\n  /*!                                                                                                             // 2500\n   * Chai dependencies.                                                                                           // 2501\n   */                                                                                                             // 2502\n                                                                                                                  // 2503\n  var Assertion = chai.Assertion                                                                                  // 2504\n    , flag = util.flag;                                                                                           // 2505\n                                                                                                                  // 2506\n  /*!                                                                                                             // 2507\n   * Module export.                                                                                               // 2508\n   */                                                                                                             // 2509\n                                                                                                                  // 2510\n  /**                                                                                                             // 2511\n   * ### assert(expression, message)                                                                              // 2512\n   *                                                                                                              // 2513\n   * Write your own test expressions.                                                                             // 2514\n   *                                                                                                              // 2515\n   *     assert('foo' !== 'bar', 'foo is not bar');                                                               // 2516\n   *     assert(Array.isArray([]), 'empty arrays are arrays');                                                    // 2517\n   *                                                                                                              // 2518\n   * @param {Mixed} expression to test for truthiness                                                             // 2519\n   * @param {String} message to display on error                                                                  // 2520\n   * @name assert                                                                                                 // 2521\n   * @api public                                                                                                  // 2522\n   */                                                                                                             // 2523\n                                                                                                                  // 2524\n  var assert = chai.assert = function (express, errmsg) {                                                         // 2525\n    var test = new Assertion(null, null, chai.assert);                                                            // 2526\n    test.assert(                                                                                                  // 2527\n        express                                                                                                   // 2528\n      , errmsg                                                                                                    // 2529\n      , '[ negation message unavailable ]'                                                                        // 2530\n    );                                                                                                            // 2531\n  };                                                                                                              // 2532\n                                                                                                                  // 2533\n  /**                                                                                                             // 2534\n   * ### .fail(actual, expected, [message], [operator])                                                           // 2535\n   *                                                                                                              // 2536\n   * Throw a failure. Node.js `assert` module-compatible.                                                         // 2537\n   *                                                                                                              // 2538\n   * @name fail                                                                                                   // 2539\n   * @param {Mixed} actual                                                                                        // 2540\n   * @param {Mixed} expected                                                                                      // 2541\n   * @param {String} message                                                                                      // 2542\n   * @param {String} operator                                                                                     // 2543\n   * @api public                                                                                                  // 2544\n   */                                                                                                             // 2545\n                                                                                                                  // 2546\n  assert.fail = function (actual, expected, message, operator) {                                                  // 2547\n    message = message || 'assert.fail()';                                                                         // 2548\n    throw new chai.AssertionError(message, {                                                                      // 2549\n        actual: actual                                                                                            // 2550\n      , expected: expected                                                                                        // 2551\n      , operator: operator                                                                                        // 2552\n    }, assert.fail);                                                                                              // 2553\n  };                                                                                                              // 2554\n                                                                                                                  // 2555\n  /**                                                                                                             // 2556\n   * ### .ok(object, [message])                                                                                   // 2557\n   *                                                                                                              // 2558\n   * Asserts that `object` is truthy.                                                                             // 2559\n   *                                                                                                              // 2560\n   *     assert.ok('everything', 'everything is ok');                                                             // 2561\n   *     assert.ok(false, 'this will fail');                                                                      // 2562\n   *                                                                                                              // 2563\n   * @name ok                                                                                                     // 2564\n   * @param {Mixed} object to test                                                                                // 2565\n   * @param {String} message                                                                                      // 2566\n   * @api public                                                                                                  // 2567\n   */                                                                                                             // 2568\n                                                                                                                  // 2569\n  assert.ok = function (val, msg) {                                                                               // 2570\n    new Assertion(val, msg).is.ok;                                                                                // 2571\n  };                                                                                                              // 2572\n                                                                                                                  // 2573\n  /**                                                                                                             // 2574\n   * ### .notOk(object, [message])                                                                                // 2575\n   *                                                                                                              // 2576\n   * Asserts that `object` is falsy.                                                                              // 2577\n   *                                                                                                              // 2578\n   *     assert.notOk('everything', 'this will fail');                                                            // 2579\n   *     assert.notOk(false, 'this will pass');                                                                   // 2580\n   *                                                                                                              // 2581\n   * @name notOk                                                                                                  // 2582\n   * @param {Mixed} object to test                                                                                // 2583\n   * @param {String} message                                                                                      // 2584\n   * @api public                                                                                                  // 2585\n   */                                                                                                             // 2586\n                                                                                                                  // 2587\n  assert.notOk = function (val, msg) {                                                                            // 2588\n    new Assertion(val, msg).is.not.ok;                                                                            // 2589\n  };                                                                                                              // 2590\n                                                                                                                  // 2591\n  /**                                                                                                             // 2592\n   * ### .equal(actual, expected, [message])                                                                      // 2593\n   *                                                                                                              // 2594\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.                                               // 2595\n   *                                                                                                              // 2596\n   *     assert.equal(3, '3', '== coerces values to strings');                                                    // 2597\n   *                                                                                                              // 2598\n   * @name equal                                                                                                  // 2599\n   * @param {Mixed} actual                                                                                        // 2600\n   * @param {Mixed} expected                                                                                      // 2601\n   * @param {String} message                                                                                      // 2602\n   * @api public                                                                                                  // 2603\n   */                                                                                                             // 2604\n                                                                                                                  // 2605\n  assert.equal = function (act, exp, msg) {                                                                       // 2606\n    var test = new Assertion(act, msg, assert.equal);                                                             // 2607\n                                                                                                                  // 2608\n    test.assert(                                                                                                  // 2609\n        exp == flag(test, 'object')                                                                               // 2610\n      , 'expected #{this} to equal #{exp}'                                                                        // 2611\n      , 'expected #{this} to not equal #{act}'                                                                    // 2612\n      , exp                                                                                                       // 2613\n      , act                                                                                                       // 2614\n    );                                                                                                            // 2615\n  };                                                                                                              // 2616\n                                                                                                                  // 2617\n  /**                                                                                                             // 2618\n   * ### .notEqual(actual, expected, [message])                                                                   // 2619\n   *                                                                                                              // 2620\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.                                             // 2621\n   *                                                                                                              // 2622\n   *     assert.notEqual(3, 4, 'these numbers are not equal');                                                    // 2623\n   *                                                                                                              // 2624\n   * @name notEqual                                                                                               // 2625\n   * @param {Mixed} actual                                                                                        // 2626\n   * @param {Mixed} expected                                                                                      // 2627\n   * @param {String} message                                                                                      // 2628\n   * @api public                                                                                                  // 2629\n   */                                                                                                             // 2630\n                                                                                                                  // 2631\n  assert.notEqual = function (act, exp, msg) {                                                                    // 2632\n    var test = new Assertion(act, msg, assert.notEqual);                                                          // 2633\n                                                                                                                  // 2634\n    test.assert(                                                                                                  // 2635\n        exp != flag(test, 'object')                                                                               // 2636\n      , 'expected #{this} to not equal #{exp}'                                                                    // 2637\n      , 'expected #{this} to equal #{act}'                                                                        // 2638\n      , exp                                                                                                       // 2639\n      , act                                                                                                       // 2640\n    );                                                                                                            // 2641\n  };                                                                                                              // 2642\n                                                                                                                  // 2643\n  /**                                                                                                             // 2644\n   * ### .strictEqual(actual, expected, [message])                                                                // 2645\n   *                                                                                                              // 2646\n   * Asserts strict equality (`===`) of `actual` and `expected`.                                                  // 2647\n   *                                                                                                              // 2648\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');                                     // 2649\n   *                                                                                                              // 2650\n   * @name strictEqual                                                                                            // 2651\n   * @param {Mixed} actual                                                                                        // 2652\n   * @param {Mixed} expected                                                                                      // 2653\n   * @param {String} message                                                                                      // 2654\n   * @api public                                                                                                  // 2655\n   */                                                                                                             // 2656\n                                                                                                                  // 2657\n  assert.strictEqual = function (act, exp, msg) {                                                                 // 2658\n    new Assertion(act, msg).to.equal(exp);                                                                        // 2659\n  };                                                                                                              // 2660\n                                                                                                                  // 2661\n  /**                                                                                                             // 2662\n   * ### .notStrictEqual(actual, expected, [message])                                                             // 2663\n   *                                                                                                              // 2664\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.                                                // 2665\n   *                                                                                                              // 2666\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');                                        // 2667\n   *                                                                                                              // 2668\n   * @name notStrictEqual                                                                                         // 2669\n   * @param {Mixed} actual                                                                                        // 2670\n   * @param {Mixed} expected                                                                                      // 2671\n   * @param {String} message                                                                                      // 2672\n   * @api public                                                                                                  // 2673\n   */                                                                                                             // 2674\n                                                                                                                  // 2675\n  assert.notStrictEqual = function (act, exp, msg) {                                                              // 2676\n    new Assertion(act, msg).to.not.equal(exp);                                                                    // 2677\n  };                                                                                                              // 2678\n                                                                                                                  // 2679\n  /**                                                                                                             // 2680\n   * ### .deepEqual(actual, expected, [message])                                                                  // 2681\n   *                                                                                                              // 2682\n   * Asserts that `actual` is deeply equal to `expected`.                                                         // 2683\n   *                                                                                                              // 2684\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });                                                    // 2685\n   *                                                                                                              // 2686\n   * @name deepEqual                                                                                              // 2687\n   * @param {Mixed} actual                                                                                        // 2688\n   * @param {Mixed} expected                                                                                      // 2689\n   * @param {String} message                                                                                      // 2690\n   * @api public                                                                                                  // 2691\n   */                                                                                                             // 2692\n                                                                                                                  // 2693\n  assert.deepEqual = function (act, exp, msg) {                                                                   // 2694\n    new Assertion(act, msg).to.eql(exp);                                                                          // 2695\n  };                                                                                                              // 2696\n                                                                                                                  // 2697\n  /**                                                                                                             // 2698\n   * ### .notDeepEqual(actual, expected, [message])                                                               // 2699\n   *                                                                                                              // 2700\n   * Assert that `actual` is not deeply equal to `expected`.                                                      // 2701\n   *                                                                                                              // 2702\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });                                               // 2703\n   *                                                                                                              // 2704\n   * @name notDeepEqual                                                                                           // 2705\n   * @param {Mixed} actual                                                                                        // 2706\n   * @param {Mixed} expected                                                                                      // 2707\n   * @param {String} message                                                                                      // 2708\n   * @api public                                                                                                  // 2709\n   */                                                                                                             // 2710\n                                                                                                                  // 2711\n  assert.notDeepEqual = function (act, exp, msg) {                                                                // 2712\n    new Assertion(act, msg).to.not.eql(exp);                                                                      // 2713\n  };                                                                                                              // 2714\n                                                                                                                  // 2715\n  /**                                                                                                             // 2716\n   * ### .isTrue(value, [message])                                                                                // 2717\n   *                                                                                                              // 2718\n   * Asserts that `value` is true.                                                                                // 2719\n   *                                                                                                              // 2720\n   *     var teaServed = true;                                                                                    // 2721\n   *     assert.isTrue(teaServed, 'the tea has been served');                                                     // 2722\n   *                                                                                                              // 2723\n   * @name isTrue                                                                                                 // 2724\n   * @param {Mixed} value                                                                                         // 2725\n   * @param {String} message                                                                                      // 2726\n   * @api public                                                                                                  // 2727\n   */                                                                                                             // 2728\n                                                                                                                  // 2729\n  assert.isAbove = function (val, abv, msg) {                                                                     // 2730\n    new Assertion(val, msg).to.be.above(abv);                                                                     // 2731\n  };                                                                                                              // 2732\n                                                                                                                  // 2733\n   /**                                                                                                            // 2734\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])                                                        // 2735\n   *                                                                                                              // 2736\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`                                         // 2737\n   *                                                                                                              // 2738\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');                                                    // 2739\n   *                                                                                                              // 2740\n   * @name isAbove                                                                                                // 2741\n   * @param {Mixed} valueToCheck                                                                                  // 2742\n   * @param {Mixed} valueToBeAbove                                                                                // 2743\n   * @param {String} message                                                                                      // 2744\n   * @api public                                                                                                  // 2745\n   */                                                                                                             // 2746\n                                                                                                                  // 2747\n  assert.isBelow = function (val, blw, msg) {                                                                     // 2748\n    new Assertion(val, msg).to.be.below(blw);                                                                     // 2749\n  };                                                                                                              // 2750\n                                                                                                                  // 2751\n   /**                                                                                                            // 2752\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])                                                        // 2753\n   *                                                                                                              // 2754\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`                                            // 2755\n   *                                                                                                              // 2756\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');                                                       // 2757\n   *                                                                                                              // 2758\n   * @name isBelow                                                                                                // 2759\n   * @param {Mixed} valueToCheck                                                                                  // 2760\n   * @param {Mixed} valueToBeBelow                                                                                // 2761\n   * @param {String} message                                                                                      // 2762\n   * @api public                                                                                                  // 2763\n   */                                                                                                             // 2764\n                                                                                                                  // 2765\n  assert.isTrue = function (val, msg) {                                                                           // 2766\n    new Assertion(val, msg).is['true'];                                                                           // 2767\n  };                                                                                                              // 2768\n                                                                                                                  // 2769\n  /**                                                                                                             // 2770\n   * ### .isFalse(value, [message])                                                                               // 2771\n   *                                                                                                              // 2772\n   * Asserts that `value` is false.                                                                               // 2773\n   *                                                                                                              // 2774\n   *     var teaServed = false;                                                                                   // 2775\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');                                                         // 2776\n   *                                                                                                              // 2777\n   * @name isFalse                                                                                                // 2778\n   * @param {Mixed} value                                                                                         // 2779\n   * @param {String} message                                                                                      // 2780\n   * @api public                                                                                                  // 2781\n   */                                                                                                             // 2782\n                                                                                                                  // 2783\n  assert.isFalse = function (val, msg) {                                                                          // 2784\n    new Assertion(val, msg).is['false'];                                                                          // 2785\n  };                                                                                                              // 2786\n                                                                                                                  // 2787\n  /**                                                                                                             // 2788\n   * ### .isNull(value, [message])                                                                                // 2789\n   *                                                                                                              // 2790\n   * Asserts that `value` is null.                                                                                // 2791\n   *                                                                                                              // 2792\n   *     assert.isNull(err, 'there was no error');                                                                // 2793\n   *                                                                                                              // 2794\n   * @name isNull                                                                                                 // 2795\n   * @param {Mixed} value                                                                                         // 2796\n   * @param {String} message                                                                                      // 2797\n   * @api public                                                                                                  // 2798\n   */                                                                                                             // 2799\n                                                                                                                  // 2800\n  assert.isNull = function (val, msg) {                                                                           // 2801\n    new Assertion(val, msg).to.equal(null);                                                                       // 2802\n  };                                                                                                              // 2803\n                                                                                                                  // 2804\n  /**                                                                                                             // 2805\n   * ### .isNotNull(value, [message])                                                                             // 2806\n   *                                                                                                              // 2807\n   * Asserts that `value` is not null.                                                                            // 2808\n   *                                                                                                              // 2809\n   *     var tea = 'tasty chai';                                                                                  // 2810\n   *     assert.isNotNull(tea, 'great, time for tea!');                                                           // 2811\n   *                                                                                                              // 2812\n   * @name isNotNull                                                                                              // 2813\n   * @param {Mixed} value                                                                                         // 2814\n   * @param {String} message                                                                                      // 2815\n   * @api public                                                                                                  // 2816\n   */                                                                                                             // 2817\n                                                                                                                  // 2818\n  assert.isNotNull = function (val, msg) {                                                                        // 2819\n    new Assertion(val, msg).to.not.equal(null);                                                                   // 2820\n  };                                                                                                              // 2821\n                                                                                                                  // 2822\n  /**                                                                                                             // 2823\n   * ### .isUndefined(value, [message])                                                                           // 2824\n   *                                                                                                              // 2825\n   * Asserts that `value` is `undefined`.                                                                         // 2826\n   *                                                                                                              // 2827\n   *     var tea;                                                                                                 // 2828\n   *     assert.isUndefined(tea, 'no tea defined');                                                               // 2829\n   *                                                                                                              // 2830\n   * @name isUndefined                                                                                            // 2831\n   * @param {Mixed} value                                                                                         // 2832\n   * @param {String} message                                                                                      // 2833\n   * @api public                                                                                                  // 2834\n   */                                                                                                             // 2835\n                                                                                                                  // 2836\n  assert.isUndefined = function (val, msg) {                                                                      // 2837\n    new Assertion(val, msg).to.equal(undefined);                                                                  // 2838\n  };                                                                                                              // 2839\n                                                                                                                  // 2840\n  /**                                                                                                             // 2841\n   * ### .isDefined(value, [message])                                                                             // 2842\n   *                                                                                                              // 2843\n   * Asserts that `value` is not `undefined`.                                                                     // 2844\n   *                                                                                                              // 2845\n   *     var tea = 'cup of chai';                                                                                 // 2846\n   *     assert.isDefined(tea, 'tea has been defined');                                                           // 2847\n   *                                                                                                              // 2848\n   * @name isDefined                                                                                              // 2849\n   * @param {Mixed} value                                                                                         // 2850\n   * @param {String} message                                                                                      // 2851\n   * @api public                                                                                                  // 2852\n   */                                                                                                             // 2853\n                                                                                                                  // 2854\n  assert.isDefined = function (val, msg) {                                                                        // 2855\n    new Assertion(val, msg).to.not.equal(undefined);                                                              // 2856\n  };                                                                                                              // 2857\n                                                                                                                  // 2858\n  /**                                                                                                             // 2859\n   * ### .isFunction(value, [message])                                                                            // 2860\n   *                                                                                                              // 2861\n   * Asserts that `value` is a function.                                                                          // 2862\n   *                                                                                                              // 2863\n   *     function serveTea() { return 'cup of tea'; };                                                            // 2864\n   *     assert.isFunction(serveTea, 'great, we can have tea now');                                               // 2865\n   *                                                                                                              // 2866\n   * @name isFunction                                                                                             // 2867\n   * @param {Mixed} value                                                                                         // 2868\n   * @param {String} message                                                                                      // 2869\n   * @api public                                                                                                  // 2870\n   */                                                                                                             // 2871\n                                                                                                                  // 2872\n  assert.isFunction = function (val, msg) {                                                                       // 2873\n    new Assertion(val, msg).to.be.a('function');                                                                  // 2874\n  };                                                                                                              // 2875\n                                                                                                                  // 2876\n  /**                                                                                                             // 2877\n   * ### .isNotFunction(value, [message])                                                                         // 2878\n   *                                                                                                              // 2879\n   * Asserts that `value` is _not_ a function.                                                                    // 2880\n   *                                                                                                              // 2881\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];                                                                // 2882\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');                                       // 2883\n   *                                                                                                              // 2884\n   * @name isNotFunction                                                                                          // 2885\n   * @param {Mixed} value                                                                                         // 2886\n   * @param {String} message                                                                                      // 2887\n   * @api public                                                                                                  // 2888\n   */                                                                                                             // 2889\n                                                                                                                  // 2890\n  assert.isNotFunction = function (val, msg) {                                                                    // 2891\n    new Assertion(val, msg).to.not.be.a('function');                                                              // 2892\n  };                                                                                                              // 2893\n                                                                                                                  // 2894\n  /**                                                                                                             // 2895\n   * ### .isObject(value, [message])                                                                              // 2896\n   *                                                                                                              // 2897\n   * Asserts that `value` is an object (as revealed by                                                            // 2898\n   * `Object.prototype.toString`).                                                                                // 2899\n   *                                                                                                              // 2900\n   *     var selection = { name: 'Chai', serve: 'with spices' };                                                  // 2901\n   *     assert.isObject(selection, 'tea selection is an object');                                                // 2902\n   *                                                                                                              // 2903\n   * @name isObject                                                                                               // 2904\n   * @param {Mixed} value                                                                                         // 2905\n   * @param {String} message                                                                                      // 2906\n   * @api public                                                                                                  // 2907\n   */                                                                                                             // 2908\n                                                                                                                  // 2909\n  assert.isObject = function (val, msg) {                                                                         // 2910\n    new Assertion(val, msg).to.be.a('object');                                                                    // 2911\n  };                                                                                                              // 2912\n                                                                                                                  // 2913\n  /**                                                                                                             // 2914\n   * ### .isNotObject(value, [message])                                                                           // 2915\n   *                                                                                                              // 2916\n   * Asserts that `value` is _not_ an object.                                                                     // 2917\n   *                                                                                                              // 2918\n   *     var selection = 'chai'                                                                                   // 2919\n   *     assert.isNotObject(selection, 'tea selection is not an object');                                         // 2920\n   *     assert.isNotObject(null, 'null is not an object');                                                       // 2921\n   *                                                                                                              // 2922\n   * @name isNotObject                                                                                            // 2923\n   * @param {Mixed} value                                                                                         // 2924\n   * @param {String} message                                                                                      // 2925\n   * @api public                                                                                                  // 2926\n   */                                                                                                             // 2927\n                                                                                                                  // 2928\n  assert.isNotObject = function (val, msg) {                                                                      // 2929\n    new Assertion(val, msg).to.not.be.a('object');                                                                // 2930\n  };                                                                                                              // 2931\n                                                                                                                  // 2932\n  /**                                                                                                             // 2933\n   * ### .isArray(value, [message])                                                                               // 2934\n   *                                                                                                              // 2935\n   * Asserts that `value` is an array.                                                                            // 2936\n   *                                                                                                              // 2937\n   *     var menu = [ 'green', 'chai', 'oolong' ];                                                                // 2938\n   *     assert.isArray(menu, 'what kind of tea do we want?');                                                    // 2939\n   *                                                                                                              // 2940\n   * @name isArray                                                                                                // 2941\n   * @param {Mixed} value                                                                                         // 2942\n   * @param {String} message                                                                                      // 2943\n   * @api public                                                                                                  // 2944\n   */                                                                                                             // 2945\n                                                                                                                  // 2946\n  assert.isArray = function (val, msg) {                                                                          // 2947\n    new Assertion(val, msg).to.be.an('array');                                                                    // 2948\n  };                                                                                                              // 2949\n                                                                                                                  // 2950\n  /**                                                                                                             // 2951\n   * ### .isNotArray(value, [message])                                                                            // 2952\n   *                                                                                                              // 2953\n   * Asserts that `value` is _not_ an array.                                                                      // 2954\n   *                                                                                                              // 2955\n   *     var menu = 'green|chai|oolong';                                                                          // 2956\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');                                                 // 2957\n   *                                                                                                              // 2958\n   * @name isNotArray                                                                                             // 2959\n   * @param {Mixed} value                                                                                         // 2960\n   * @param {String} message                                                                                      // 2961\n   * @api public                                                                                                  // 2962\n   */                                                                                                             // 2963\n                                                                                                                  // 2964\n  assert.isNotArray = function (val, msg) {                                                                       // 2965\n    new Assertion(val, msg).to.not.be.an('array');                                                                // 2966\n  };                                                                                                              // 2967\n                                                                                                                  // 2968\n  /**                                                                                                             // 2969\n   * ### .isString(value, [message])                                                                              // 2970\n   *                                                                                                              // 2971\n   * Asserts that `value` is a string.                                                                            // 2972\n   *                                                                                                              // 2973\n   *     var teaOrder = 'chai';                                                                                   // 2974\n   *     assert.isString(teaOrder, 'order placed');                                                               // 2975\n   *                                                                                                              // 2976\n   * @name isString                                                                                               // 2977\n   * @param {Mixed} value                                                                                         // 2978\n   * @param {String} message                                                                                      // 2979\n   * @api public                                                                                                  // 2980\n   */                                                                                                             // 2981\n                                                                                                                  // 2982\n  assert.isString = function (val, msg) {                                                                         // 2983\n    new Assertion(val, msg).to.be.a('string');                                                                    // 2984\n  };                                                                                                              // 2985\n                                                                                                                  // 2986\n  /**                                                                                                             // 2987\n   * ### .isNotString(value, [message])                                                                           // 2988\n   *                                                                                                              // 2989\n   * Asserts that `value` is _not_ a string.                                                                      // 2990\n   *                                                                                                              // 2991\n   *     var teaOrder = 4;                                                                                        // 2992\n   *     assert.isNotString(teaOrder, 'order placed');                                                            // 2993\n   *                                                                                                              // 2994\n   * @name isNotString                                                                                            // 2995\n   * @param {Mixed} value                                                                                         // 2996\n   * @param {String} message                                                                                      // 2997\n   * @api public                                                                                                  // 2998\n   */                                                                                                             // 2999\n                                                                                                                  // 3000\n  assert.isNotString = function (val, msg) {                                                                      // 3001\n    new Assertion(val, msg).to.not.be.a('string');                                                                // 3002\n  };                                                                                                              // 3003\n                                                                                                                  // 3004\n  /**                                                                                                             // 3005\n   * ### .isNumber(value, [message])                                                                              // 3006\n   *                                                                                                              // 3007\n   * Asserts that `value` is a number.                                                                            // 3008\n   *                                                                                                              // 3009\n   *     var cups = 2;                                                                                            // 3010\n   *     assert.isNumber(cups, 'how many cups');                                                                  // 3011\n   *                                                                                                              // 3012\n   * @name isNumber                                                                                               // 3013\n   * @param {Number} value                                                                                        // 3014\n   * @param {String} message                                                                                      // 3015\n   * @api public                                                                                                  // 3016\n   */                                                                                                             // 3017\n                                                                                                                  // 3018\n  assert.isNumber = function (val, msg) {                                                                         // 3019\n    new Assertion(val, msg).to.be.a('number');                                                                    // 3020\n  };                                                                                                              // 3021\n                                                                                                                  // 3022\n  /**                                                                                                             // 3023\n   * ### .isNotNumber(value, [message])                                                                           // 3024\n   *                                                                                                              // 3025\n   * Asserts that `value` is _not_ a number.                                                                      // 3026\n   *                                                                                                              // 3027\n   *     var cups = '2 cups please';                                                                              // 3028\n   *     assert.isNotNumber(cups, 'how many cups');                                                               // 3029\n   *                                                                                                              // 3030\n   * @name isNotNumber                                                                                            // 3031\n   * @param {Mixed} value                                                                                         // 3032\n   * @param {String} message                                                                                      // 3033\n   * @api public                                                                                                  // 3034\n   */                                                                                                             // 3035\n                                                                                                                  // 3036\n  assert.isNotNumber = function (val, msg) {                                                                      // 3037\n    new Assertion(val, msg).to.not.be.a('number');                                                                // 3038\n  };                                                                                                              // 3039\n                                                                                                                  // 3040\n  /**                                                                                                             // 3041\n   * ### .isBoolean(value, [message])                                                                             // 3042\n   *                                                                                                              // 3043\n   * Asserts that `value` is a boolean.                                                                           // 3044\n   *                                                                                                              // 3045\n   *     var teaReady = true                                                                                      // 3046\n   *       , teaServed = false;                                                                                   // 3047\n   *                                                                                                              // 3048\n   *     assert.isBoolean(teaReady, 'is the tea ready');                                                          // 3049\n   *     assert.isBoolean(teaServed, 'has tea been served');                                                      // 3050\n   *                                                                                                              // 3051\n   * @name isBoolean                                                                                              // 3052\n   * @param {Mixed} value                                                                                         // 3053\n   * @param {String} message                                                                                      // 3054\n   * @api public                                                                                                  // 3055\n   */                                                                                                             // 3056\n                                                                                                                  // 3057\n  assert.isBoolean = function (val, msg) {                                                                        // 3058\n    new Assertion(val, msg).to.be.a('boolean');                                                                   // 3059\n  };                                                                                                              // 3060\n                                                                                                                  // 3061\n  /**                                                                                                             // 3062\n   * ### .isNotBoolean(value, [message])                                                                          // 3063\n   *                                                                                                              // 3064\n   * Asserts that `value` is _not_ a boolean.                                                                     // 3065\n   *                                                                                                              // 3066\n   *     var teaReady = 'yep'                                                                                     // 3067\n   *       , teaServed = 'nope';                                                                                  // 3068\n   *                                                                                                              // 3069\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');                                                       // 3070\n   *     assert.isNotBoolean(teaServed, 'has tea been served');                                                   // 3071\n   *                                                                                                              // 3072\n   * @name isNotBoolean                                                                                           // 3073\n   * @param {Mixed} value                                                                                         // 3074\n   * @param {String} message                                                                                      // 3075\n   * @api public                                                                                                  // 3076\n   */                                                                                                             // 3077\n                                                                                                                  // 3078\n  assert.isNotBoolean = function (val, msg) {                                                                     // 3079\n    new Assertion(val, msg).to.not.be.a('boolean');                                                               // 3080\n  };                                                                                                              // 3081\n                                                                                                                  // 3082\n  /**                                                                                                             // 3083\n   * ### .typeOf(value, name, [message])                                                                          // 3084\n   *                                                                                                              // 3085\n   * Asserts that `value`'s type is `name`, as determined by                                                      // 3086\n   * `Object.prototype.toString`.                                                                                 // 3087\n   *                                                                                                              // 3088\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');                                           // 3089\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');                                         // 3090\n   *     assert.typeOf('tea', 'string', 'we have a string');                                                      // 3091\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');                                          // 3092\n   *     assert.typeOf(null, 'null', 'we have a null');                                                           // 3093\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');                                           // 3094\n   *                                                                                                              // 3095\n   * @name typeOf                                                                                                 // 3096\n   * @param {Mixed} value                                                                                         // 3097\n   * @param {String} name                                                                                         // 3098\n   * @param {String} message                                                                                      // 3099\n   * @api public                                                                                                  // 3100\n   */                                                                                                             // 3101\n                                                                                                                  // 3102\n  assert.typeOf = function (val, type, msg) {                                                                     // 3103\n    new Assertion(val, msg).to.be.a(type);                                                                        // 3104\n  };                                                                                                              // 3105\n                                                                                                                  // 3106\n  /**                                                                                                             // 3107\n   * ### .notTypeOf(value, name, [message])                                                                       // 3108\n   *                                                                                                              // 3109\n   * Asserts that `value`'s type is _not_ `name`, as determined by                                                // 3110\n   * `Object.prototype.toString`.                                                                                 // 3111\n   *                                                                                                              // 3112\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');                                            // 3113\n   *                                                                                                              // 3114\n   * @name notTypeOf                                                                                              // 3115\n   * @param {Mixed} value                                                                                         // 3116\n   * @param {String} typeof name                                                                                  // 3117\n   * @param {String} message                                                                                      // 3118\n   * @api public                                                                                                  // 3119\n   */                                                                                                             // 3120\n                                                                                                                  // 3121\n  assert.notTypeOf = function (val, type, msg) {                                                                  // 3122\n    new Assertion(val, msg).to.not.be.a(type);                                                                    // 3123\n  };                                                                                                              // 3124\n                                                                                                                  // 3125\n  /**                                                                                                             // 3126\n   * ### .instanceOf(object, constructor, [message])                                                              // 3127\n   *                                                                                                              // 3128\n   * Asserts that `value` is an instance of `constructor`.                                                        // 3129\n   *                                                                                                              // 3130\n   *     var Tea = function (name) { this.name = name; }                                                          // 3131\n   *       , chai = new Tea('chai');                                                                              // 3132\n   *                                                                                                              // 3133\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');                                              // 3134\n   *                                                                                                              // 3135\n   * @name instanceOf                                                                                             // 3136\n   * @param {Object} object                                                                                       // 3137\n   * @param {Constructor} constructor                                                                             // 3138\n   * @param {String} message                                                                                      // 3139\n   * @api public                                                                                                  // 3140\n   */                                                                                                             // 3141\n                                                                                                                  // 3142\n  assert.instanceOf = function (val, type, msg) {                                                                 // 3143\n    new Assertion(val, msg).to.be.instanceOf(type);                                                               // 3144\n  };                                                                                                              // 3145\n                                                                                                                  // 3146\n  /**                                                                                                             // 3147\n   * ### .notInstanceOf(object, constructor, [message])                                                           // 3148\n   *                                                                                                              // 3149\n   * Asserts `value` is not an instance of `constructor`.                                                         // 3150\n   *                                                                                                              // 3151\n   *     var Tea = function (name) { this.name = name; }                                                          // 3152\n   *       , chai = new String('chai');                                                                           // 3153\n   *                                                                                                              // 3154\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');                                       // 3155\n   *                                                                                                              // 3156\n   * @name notInstanceOf                                                                                          // 3157\n   * @param {Object} object                                                                                       // 3158\n   * @param {Constructor} constructor                                                                             // 3159\n   * @param {String} message                                                                                      // 3160\n   * @api public                                                                                                  // 3161\n   */                                                                                                             // 3162\n                                                                                                                  // 3163\n  assert.notInstanceOf = function (val, type, msg) {                                                              // 3164\n    new Assertion(val, msg).to.not.be.instanceOf(type);                                                           // 3165\n  };                                                                                                              // 3166\n                                                                                                                  // 3167\n  /**                                                                                                             // 3168\n   * ### .include(haystack, needle, [message])                                                                    // 3169\n   *                                                                                                              // 3170\n   * Asserts that `haystack` includes `needle`. Works                                                             // 3171\n   * for strings and arrays.                                                                                      // 3172\n   *                                                                                                              // 3173\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');                                         // 3174\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');                                                  // 3175\n   *                                                                                                              // 3176\n   * @name include                                                                                                // 3177\n   * @param {Array|String} haystack                                                                               // 3178\n   * @param {Mixed} needle                                                                                        // 3179\n   * @param {String} message                                                                                      // 3180\n   * @api public                                                                                                  // 3181\n   */                                                                                                             // 3182\n                                                                                                                  // 3183\n  assert.include = function (exp, inc, msg) {                                                                     // 3184\n    new Assertion(exp, msg, assert.include).include(inc);                                                         // 3185\n  };                                                                                                              // 3186\n                                                                                                                  // 3187\n  /**                                                                                                             // 3188\n   * ### .notInclude(haystack, needle, [message])                                                                 // 3189\n   *                                                                                                              // 3190\n   * Asserts that `haystack` does not include `needle`. Works                                                     // 3191\n   * for strings and arrays.                                                                                      // 3192\n   *i                                                                                                             // 3193\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');                                      // 3194\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');                                    // 3195\n   *                                                                                                              // 3196\n   * @name notInclude                                                                                             // 3197\n   * @param {Array|String} haystack                                                                               // 3198\n   * @param {Mixed} needle                                                                                        // 3199\n   * @param {String} message                                                                                      // 3200\n   * @api public                                                                                                  // 3201\n   */                                                                                                             // 3202\n                                                                                                                  // 3203\n  assert.notInclude = function (exp, inc, msg) {                                                                  // 3204\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);                                                  // 3205\n  };                                                                                                              // 3206\n                                                                                                                  // 3207\n  /**                                                                                                             // 3208\n   * ### .match(value, regexp, [message])                                                                         // 3209\n   *                                                                                                              // 3210\n   * Asserts that `value` matches the regular expression `regexp`.                                                // 3211\n   *                                                                                                              // 3212\n   *     assert.match('foobar', /^foo/, 'regexp matches');                                                        // 3213\n   *                                                                                                              // 3214\n   * @name match                                                                                                  // 3215\n   * @param {Mixed} value                                                                                         // 3216\n   * @param {RegExp} regexp                                                                                       // 3217\n   * @param {String} message                                                                                      // 3218\n   * @api public                                                                                                  // 3219\n   */                                                                                                             // 3220\n                                                                                                                  // 3221\n  assert.match = function (exp, re, msg) {                                                                        // 3222\n    new Assertion(exp, msg).to.match(re);                                                                         // 3223\n  };                                                                                                              // 3224\n                                                                                                                  // 3225\n  /**                                                                                                             // 3226\n   * ### .notMatch(value, regexp, [message])                                                                      // 3227\n   *                                                                                                              // 3228\n   * Asserts that `value` does not match the regular expression `regexp`.                                         // 3229\n   *                                                                                                              // 3230\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');                                              // 3231\n   *                                                                                                              // 3232\n   * @name notMatch                                                                                               // 3233\n   * @param {Mixed} value                                                                                         // 3234\n   * @param {RegExp} regexp                                                                                       // 3235\n   * @param {String} message                                                                                      // 3236\n   * @api public                                                                                                  // 3237\n   */                                                                                                             // 3238\n                                                                                                                  // 3239\n  assert.notMatch = function (exp, re, msg) {                                                                     // 3240\n    new Assertion(exp, msg).to.not.match(re);                                                                     // 3241\n  };                                                                                                              // 3242\n                                                                                                                  // 3243\n  /**                                                                                                             // 3244\n   * ### .property(object, property, [message])                                                                   // 3245\n   *                                                                                                              // 3246\n   * Asserts that `object` has a property named by `property`.                                                    // 3247\n   *                                                                                                              // 3248\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');                                                     // 3249\n   *                                                                                                              // 3250\n   * @name property                                                                                               // 3251\n   * @param {Object} object                                                                                       // 3252\n   * @param {String} property                                                                                     // 3253\n   * @param {String} message                                                                                      // 3254\n   * @api public                                                                                                  // 3255\n   */                                                                                                             // 3256\n                                                                                                                  // 3257\n  assert.property = function (obj, prop, msg) {                                                                   // 3258\n    new Assertion(obj, msg).to.have.property(prop);                                                               // 3259\n  };                                                                                                              // 3260\n                                                                                                                  // 3261\n  /**                                                                                                             // 3262\n   * ### .notProperty(object, property, [message])                                                                // 3263\n   *                                                                                                              // 3264\n   * Asserts that `object` does _not_ have a property named by `property`.                                        // 3265\n   *                                                                                                              // 3266\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');                                               // 3267\n   *                                                                                                              // 3268\n   * @name notProperty                                                                                            // 3269\n   * @param {Object} object                                                                                       // 3270\n   * @param {String} property                                                                                     // 3271\n   * @param {String} message                                                                                      // 3272\n   * @api public                                                                                                  // 3273\n   */                                                                                                             // 3274\n                                                                                                                  // 3275\n  assert.notProperty = function (obj, prop, msg) {                                                                // 3276\n    new Assertion(obj, msg).to.not.have.property(prop);                                                           // 3277\n  };                                                                                                              // 3278\n                                                                                                                  // 3279\n  /**                                                                                                             // 3280\n   * ### .deepProperty(object, property, [message])                                                               // 3281\n   *                                                                                                              // 3282\n   * Asserts that `object` has a property named by `property`, which can be a                                     // 3283\n   * string using dot- and bracket-notation for deep reference.                                                   // 3284\n   *                                                                                                              // 3285\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');                                           // 3286\n   *                                                                                                              // 3287\n   * @name deepProperty                                                                                           // 3288\n   * @param {Object} object                                                                                       // 3289\n   * @param {String} property                                                                                     // 3290\n   * @param {String} message                                                                                      // 3291\n   * @api public                                                                                                  // 3292\n   */                                                                                                             // 3293\n                                                                                                                  // 3294\n  assert.deepProperty = function (obj, prop, msg) {                                                               // 3295\n    new Assertion(obj, msg).to.have.deep.property(prop);                                                          // 3296\n  };                                                                                                              // 3297\n                                                                                                                  // 3298\n  /**                                                                                                             // 3299\n   * ### .notDeepProperty(object, property, [message])                                                            // 3300\n   *                                                                                                              // 3301\n   * Asserts that `object` does _not_ have a property named by `property`, which                                  // 3302\n   * can be a string using dot- and bracket-notation for deep reference.                                          // 3303\n   *                                                                                                              // 3304\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');                                       // 3305\n   *                                                                                                              // 3306\n   * @name notDeepProperty                                                                                        // 3307\n   * @param {Object} object                                                                                       // 3308\n   * @param {String} property                                                                                     // 3309\n   * @param {String} message                                                                                      // 3310\n   * @api public                                                                                                  // 3311\n   */                                                                                                             // 3312\n                                                                                                                  // 3313\n  assert.notDeepProperty = function (obj, prop, msg) {                                                            // 3314\n    new Assertion(obj, msg).to.not.have.deep.property(prop);                                                      // 3315\n  };                                                                                                              // 3316\n                                                                                                                  // 3317\n  /**                                                                                                             // 3318\n   * ### .propertyVal(object, property, value, [message])                                                         // 3319\n   *                                                                                                              // 3320\n   * Asserts that `object` has a property named by `property` with value given                                    // 3321\n   * by `value`.                                                                                                  // 3322\n   *                                                                                                              // 3323\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');                                                // 3324\n   *                                                                                                              // 3325\n   * @name propertyVal                                                                                            // 3326\n   * @param {Object} object                                                                                       // 3327\n   * @param {String} property                                                                                     // 3328\n   * @param {Mixed} value                                                                                         // 3329\n   * @param {String} message                                                                                      // 3330\n   * @api public                                                                                                  // 3331\n   */                                                                                                             // 3332\n                                                                                                                  // 3333\n  assert.propertyVal = function (obj, prop, val, msg) {                                                           // 3334\n    new Assertion(obj, msg).to.have.property(prop, val);                                                          // 3335\n  };                                                                                                              // 3336\n                                                                                                                  // 3337\n  /**                                                                                                             // 3338\n   * ### .propertyNotVal(object, property, value, [message])                                                      // 3339\n   *                                                                                                              // 3340\n   * Asserts that `object` has a property named by `property`, but with a value                                   // 3341\n   * different from that given by `value`.                                                                        // 3342\n   *                                                                                                              // 3343\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');                                              // 3344\n   *                                                                                                              // 3345\n   * @name propertyNotVal                                                                                         // 3346\n   * @param {Object} object                                                                                       // 3347\n   * @param {String} property                                                                                     // 3348\n   * @param {Mixed} value                                                                                         // 3349\n   * @param {String} message                                                                                      // 3350\n   * @api public                                                                                                  // 3351\n   */                                                                                                             // 3352\n                                                                                                                  // 3353\n  assert.propertyNotVal = function (obj, prop, val, msg) {                                                        // 3354\n    new Assertion(obj, msg).to.not.have.property(prop, val);                                                      // 3355\n  };                                                                                                              // 3356\n                                                                                                                  // 3357\n  /**                                                                                                             // 3358\n   * ### .deepPropertyVal(object, property, value, [message])                                                     // 3359\n   *                                                                                                              // 3360\n   * Asserts that `object` has a property named by `property` with value given                                    // 3361\n   * by `value`. `property` can use dot- and bracket-notation for deep                                            // 3362\n   * reference.                                                                                                   // 3363\n   *                                                                                                              // 3364\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');                              // 3365\n   *                                                                                                              // 3366\n   * @name deepPropertyVal                                                                                        // 3367\n   * @param {Object} object                                                                                       // 3368\n   * @param {String} property                                                                                     // 3369\n   * @param {Mixed} value                                                                                         // 3370\n   * @param {String} message                                                                                      // 3371\n   * @api public                                                                                                  // 3372\n   */                                                                                                             // 3373\n                                                                                                                  // 3374\n  assert.deepPropertyVal = function (obj, prop, val, msg) {                                                       // 3375\n    new Assertion(obj, msg).to.have.deep.property(prop, val);                                                     // 3376\n  };                                                                                                              // 3377\n                                                                                                                  // 3378\n  /**                                                                                                             // 3379\n   * ### .deepPropertyNotVal(object, property, value, [message])                                                  // 3380\n   *                                                                                                              // 3381\n   * Asserts that `object` has a property named by `property`, but with a value                                   // 3382\n   * different from that given by `value`. `property` can use dot- and                                            // 3383\n   * bracket-notation for deep reference.                                                                         // 3384\n   *                                                                                                              // 3385\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');                          // 3386\n   *                                                                                                              // 3387\n   * @name deepPropertyNotVal                                                                                     // 3388\n   * @param {Object} object                                                                                       // 3389\n   * @param {String} property                                                                                     // 3390\n   * @param {Mixed} value                                                                                         // 3391\n   * @param {String} message                                                                                      // 3392\n   * @api public                                                                                                  // 3393\n   */                                                                                                             // 3394\n                                                                                                                  // 3395\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {                                                    // 3396\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);                                                 // 3397\n  };                                                                                                              // 3398\n                                                                                                                  // 3399\n  /**                                                                                                             // 3400\n   * ### .lengthOf(object, length, [message])                                                                     // 3401\n   *                                                                                                              // 3402\n   * Asserts that `object` has a `length` property with the expected value.                                       // 3403\n   *                                                                                                              // 3404\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');                                                    // 3405\n   *     assert.lengthOf('foobar', 5, 'string has length of 6');                                                  // 3406\n   *                                                                                                              // 3407\n   * @name lengthOf                                                                                               // 3408\n   * @param {Mixed} object                                                                                        // 3409\n   * @param {Number} length                                                                                       // 3410\n   * @param {String} message                                                                                      // 3411\n   * @api public                                                                                                  // 3412\n   */                                                                                                             // 3413\n                                                                                                                  // 3414\n  assert.lengthOf = function (exp, len, msg) {                                                                    // 3415\n    new Assertion(exp, msg).to.have.length(len);                                                                  // 3416\n  };                                                                                                              // 3417\n                                                                                                                  // 3418\n  /**                                                                                                             // 3419\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])                               // 3420\n   *                                                                                                              // 3421\n   * Asserts that `function` will throw an error that is an instance of                                           // 3422\n   * `constructor`, or alternately that it will throw an error with message                                       // 3423\n   * matching `regexp`.                                                                                           // 3424\n   *                                                                                                              // 3425\n   *     assert.throw(fn, 'function throws a reference error');                                                   // 3426\n   *     assert.throw(fn, /function throws a reference error/);                                                   // 3427\n   *     assert.throw(fn, ReferenceError);                                                                        // 3428\n   *     assert.throw(fn, ReferenceError, 'function throws a reference error');                                   // 3429\n   *     assert.throw(fn, ReferenceError, /function throws a reference error/);                                   // 3430\n   *                                                                                                              // 3431\n   * @name throws                                                                                                 // 3432\n   * @alias throw                                                                                                 // 3433\n   * @alias Throw                                                                                                 // 3434\n   * @param {Function} function                                                                                   // 3435\n   * @param {ErrorConstructor} constructor                                                                        // 3436\n   * @param {RegExp} regexp                                                                                       // 3437\n   * @param {String} message                                                                                      // 3438\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types                  // 3439\n   * @api public                                                                                                  // 3440\n   */                                                                                                             // 3441\n                                                                                                                  // 3442\n  assert.Throw = function (fn, errt, errs, msg) {                                                                 // 3443\n    if ('string' === typeof errt || errt instanceof RegExp) {                                                     // 3444\n      errs = errt;                                                                                                // 3445\n      errt = null;                                                                                                // 3446\n    }                                                                                                             // 3447\n                                                                                                                  // 3448\n    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);                                                  // 3449\n    return flag(assertErr, 'object');                                                                             // 3450\n  };                                                                                                              // 3451\n                                                                                                                  // 3452\n  /**                                                                                                             // 3453\n   * ### .doesNotThrow(function, [constructor/regexp], [message])                                                 // 3454\n   *                                                                                                              // 3455\n   * Asserts that `function` will _not_ throw an error that is an instance of                                     // 3456\n   * `constructor`, or alternately that it will not throw an error with message                                   // 3457\n   * matching `regexp`.                                                                                           // 3458\n   *                                                                                                              // 3459\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');                                               // 3460\n   *                                                                                                              // 3461\n   * @name doesNotThrow                                                                                           // 3462\n   * @param {Function} function                                                                                   // 3463\n   * @param {ErrorConstructor} constructor                                                                        // 3464\n   * @param {RegExp} regexp                                                                                       // 3465\n   * @param {String} message                                                                                      // 3466\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types                  // 3467\n   * @api public                                                                                                  // 3468\n   */                                                                                                             // 3469\n                                                                                                                  // 3470\n  assert.doesNotThrow = function (fn, type, msg) {                                                                // 3471\n    if ('string' === typeof type) {                                                                               // 3472\n      msg = type;                                                                                                 // 3473\n      type = null;                                                                                                // 3474\n    }                                                                                                             // 3475\n                                                                                                                  // 3476\n    new Assertion(fn, msg).to.not.Throw(type);                                                                    // 3477\n  };                                                                                                              // 3478\n                                                                                                                  // 3479\n  /**                                                                                                             // 3480\n   * ### .operator(val1, operator, val2, [message])                                                               // 3481\n   *                                                                                                              // 3482\n   * Compares two values using `operator`.                                                                        // 3483\n   *                                                                                                              // 3484\n   *     assert.operator(1, '<', 2, 'everything is ok');                                                          // 3485\n   *     assert.operator(1, '>', 2, 'this will fail');                                                            // 3486\n   *                                                                                                              // 3487\n   * @name operator                                                                                               // 3488\n   * @param {Mixed} val1                                                                                          // 3489\n   * @param {String} operator                                                                                     // 3490\n   * @param {Mixed} val2                                                                                          // 3491\n   * @param {String} message                                                                                      // 3492\n   * @api public                                                                                                  // 3493\n   */                                                                                                             // 3494\n                                                                                                                  // 3495\n  assert.operator = function (val, operator, val2, msg) {                                                         // 3496\n    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {                                   // 3497\n      throw new Error('Invalid operator \"' + operator + '\"');                                                     // 3498\n    }                                                                                                             // 3499\n    var test = new Assertion(eval(val + operator + val2), msg);                                                   // 3500\n    test.assert(                                                                                                  // 3501\n        true === flag(test, 'object')                                                                             // 3502\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)                         // 3503\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );                  // 3504\n  };                                                                                                              // 3505\n                                                                                                                  // 3506\n  /**                                                                                                             // 3507\n   * ### .closeTo(actual, expected, delta, [message])                                                             // 3508\n   *                                                                                                              // 3509\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.                                  // 3510\n   *                                                                                                              // 3511\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');                                                        // 3512\n   *                                                                                                              // 3513\n   * @name closeTo                                                                                                // 3514\n   * @param {Number} actual                                                                                       // 3515\n   * @param {Number} expected                                                                                     // 3516\n   * @param {Number} delta                                                                                        // 3517\n   * @param {String} message                                                                                      // 3518\n   * @api public                                                                                                  // 3519\n   */                                                                                                             // 3520\n                                                                                                                  // 3521\n  assert.closeTo = function (act, exp, delta, msg) {                                                              // 3522\n    new Assertion(act, msg).to.be.closeTo(exp, delta);                                                            // 3523\n  };                                                                                                              // 3524\n                                                                                                                  // 3525\n  /**                                                                                                             // 3526\n   * ### .sameMembers(set1, set2, [message])                                                                      // 3527\n   *                                                                                                              // 3528\n   * Asserts that `set1` and `set2` have the same members.                                                        // 3529\n   * Order is not taken into account.                                                                             // 3530\n   *                                                                                                              // 3531\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');                                            // 3532\n   *                                                                                                              // 3533\n   * @name sameMembers                                                                                            // 3534\n   * @param {Array} set1                                                                                          // 3535\n   * @param {Array} set2                                                                                          // 3536\n   * @param {String} message                                                                                      // 3537\n   * @api public                                                                                                  // 3538\n   */                                                                                                             // 3539\n                                                                                                                  // 3540\n  assert.sameMembers = function (set1, set2, msg) {                                                               // 3541\n    new Assertion(set1, msg).to.have.same.members(set2);                                                          // 3542\n  }                                                                                                               // 3543\n                                                                                                                  // 3544\n  /**                                                                                                             // 3545\n   * ### .sameDeepMembers(set1, set2, [message])                                                                  // 3546\n   *                                                                                                              // 3547\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.                       // 3548\n   * Order is not taken into account.                                                                             // 3549\n   *                                                                                                              // 3550\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');     // 3551\n   *                                                                                                              // 3552\n   * @name sameDeepMembers                                                                                        // 3553\n   * @param {Array} set1                                                                                          // 3554\n   * @param {Array} set2                                                                                          // 3555\n   * @param {String} message                                                                                      // 3556\n   * @api public                                                                                                  // 3557\n   */                                                                                                             // 3558\n                                                                                                                  // 3559\n  assert.sameDeepMembers = function (set1, set2, msg) {                                                           // 3560\n    new Assertion(set1, msg).to.have.same.deep.members(set2);                                                     // 3561\n  }                                                                                                               // 3562\n                                                                                                                  // 3563\n  /**                                                                                                             // 3564\n   * ### .includeMembers(superset, subset, [message])                                                             // 3565\n   *                                                                                                              // 3566\n   * Asserts that `subset` is included in `superset`.                                                             // 3567\n   * Order is not taken into account.                                                                             // 3568\n   *                                                                                                              // 3569\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');                                         // 3570\n   *                                                                                                              // 3571\n   * @name includeMembers                                                                                         // 3572\n   * @param {Array} superset                                                                                      // 3573\n   * @param {Array} subset                                                                                        // 3574\n   * @param {String} message                                                                                      // 3575\n   * @api public                                                                                                  // 3576\n   */                                                                                                             // 3577\n                                                                                                                  // 3578\n  assert.includeMembers = function (superset, subset, msg) {                                                      // 3579\n    new Assertion(superset, msg).to.include.members(subset);                                                      // 3580\n  }                                                                                                               // 3581\n                                                                                                                  // 3582\n   /**                                                                                                            // 3583\n   * ### .changes(function, object, property)                                                                     // 3584\n   *                                                                                                              // 3585\n   * Asserts that a function changes the value of a property                                                      // 3586\n   *                                                                                                              // 3587\n   *     var obj = { val: 10 };                                                                                   // 3588\n   *     var fn = function() { obj.val = 22 };                                                                    // 3589\n   *     assert.changes(fn, obj, 'val');                                                                          // 3590\n   *                                                                                                              // 3591\n   * @name changes                                                                                                // 3592\n   * @param {Function} modifier function                                                                          // 3593\n   * @param {Object} object                                                                                       // 3594\n   * @param {String} property name                                                                                // 3595\n   * @param {String} message _optional_                                                                           // 3596\n   * @api public                                                                                                  // 3597\n   */                                                                                                             // 3598\n                                                                                                                  // 3599\n  assert.changes = function (fn, obj, prop) {                                                                     // 3600\n    new Assertion(fn).to.change(obj, prop);                                                                       // 3601\n  }                                                                                                               // 3602\n                                                                                                                  // 3603\n   /**                                                                                                            // 3604\n   * ### .doesNotChange(function, object, property)                                                               // 3605\n   *                                                                                                              // 3606\n   * Asserts that a function does not changes the value of a property                                             // 3607\n   *                                                                                                              // 3608\n   *     var obj = { val: 10 };                                                                                   // 3609\n   *     var fn = function() { console.log('foo'); };                                                             // 3610\n   *     assert.doesNotChange(fn, obj, 'val');                                                                    // 3611\n   *                                                                                                              // 3612\n   * @name doesNotChange                                                                                          // 3613\n   * @param {Function} modifier function                                                                          // 3614\n   * @param {Object} object                                                                                       // 3615\n   * @param {String} property name                                                                                // 3616\n   * @param {String} message _optional_                                                                           // 3617\n   * @api public                                                                                                  // 3618\n   */                                                                                                             // 3619\n                                                                                                                  // 3620\n  assert.doesNotChange = function (fn, obj, prop) {                                                               // 3621\n    new Assertion(fn).to.not.change(obj, prop);                                                                   // 3622\n  }                                                                                                               // 3623\n                                                                                                                  // 3624\n   /**                                                                                                            // 3625\n   * ### .increases(function, object, property)                                                                   // 3626\n   *                                                                                                              // 3627\n   * Asserts that a function increases an object property                                                         // 3628\n   *                                                                                                              // 3629\n   *     var obj = { val: 10 };                                                                                   // 3630\n   *     var fn = function() { obj.val = 13 };                                                                    // 3631\n   *     assert.increases(fn, obj, 'val');                                                                        // 3632\n   *                                                                                                              // 3633\n   * @name increases                                                                                              // 3634\n   * @param {Function} modifier function                                                                          // 3635\n   * @param {Object} object                                                                                       // 3636\n   * @param {String} property name                                                                                // 3637\n   * @param {String} message _optional_                                                                           // 3638\n   * @api public                                                                                                  // 3639\n   */                                                                                                             // 3640\n                                                                                                                  // 3641\n  assert.increases = function (fn, obj, prop) {                                                                   // 3642\n    new Assertion(fn).to.increase(obj, prop);                                                                     // 3643\n  }                                                                                                               // 3644\n                                                                                                                  // 3645\n   /**                                                                                                            // 3646\n   * ### .doesNotIncrease(function, object, property)                                                             // 3647\n   *                                                                                                              // 3648\n   * Asserts that a function does not increase object property                                                    // 3649\n   *                                                                                                              // 3650\n   *     var obj = { val: 10 };                                                                                   // 3651\n   *     var fn = function() { obj.val = 8 };                                                                     // 3652\n   *     assert.doesNotIncrease(fn, obj, 'val');                                                                  // 3653\n   *                                                                                                              // 3654\n   * @name doesNotIncrease                                                                                        // 3655\n   * @param {Function} modifier function                                                                          // 3656\n   * @param {Object} object                                                                                       // 3657\n   * @param {String} property name                                                                                // 3658\n   * @param {String} message _optional_                                                                           // 3659\n   * @api public                                                                                                  // 3660\n   */                                                                                                             // 3661\n                                                                                                                  // 3662\n  assert.doesNotIncrease = function (fn, obj, prop) {                                                             // 3663\n    new Assertion(fn).to.not.increase(obj, prop);                                                                 // 3664\n  }                                                                                                               // 3665\n                                                                                                                  // 3666\n   /**                                                                                                            // 3667\n   * ### .decreases(function, object, property)                                                                   // 3668\n   *                                                                                                              // 3669\n   * Asserts that a function decreases an object property                                                         // 3670\n   *                                                                                                              // 3671\n   *     var obj = { val: 10 };                                                                                   // 3672\n   *     var fn = function() { obj.val = 5 };                                                                     // 3673\n   *     assert.decreases(fn, obj, 'val');                                                                        // 3674\n   *                                                                                                              // 3675\n   * @name decreases                                                                                              // 3676\n   * @param {Function} modifier function                                                                          // 3677\n   * @param {Object} object                                                                                       // 3678\n   * @param {String} property name                                                                                // 3679\n   * @param {String} message _optional_                                                                           // 3680\n   * @api public                                                                                                  // 3681\n   */                                                                                                             // 3682\n                                                                                                                  // 3683\n  assert.decreases = function (fn, obj, prop) {                                                                   // 3684\n    new Assertion(fn).to.decrease(obj, prop);                                                                     // 3685\n  }                                                                                                               // 3686\n                                                                                                                  // 3687\n   /**                                                                                                            // 3688\n   * ### .doesNotDecrease(function, object, property)                                                             // 3689\n   *                                                                                                              // 3690\n   * Asserts that a function does not decreases an object property                                                // 3691\n   *                                                                                                              // 3692\n   *     var obj = { val: 10 };                                                                                   // 3693\n   *     var fn = function() { obj.val = 15 };                                                                    // 3694\n   *     assert.doesNotDecrease(fn, obj, 'val');                                                                  // 3695\n   *                                                                                                              // 3696\n   * @name doesNotDecrease                                                                                        // 3697\n   * @param {Function} modifier function                                                                          // 3698\n   * @param {Object} object                                                                                       // 3699\n   * @param {String} property name                                                                                // 3700\n   * @param {String} message _optional_                                                                           // 3701\n   * @api public                                                                                                  // 3702\n   */                                                                                                             // 3703\n                                                                                                                  // 3704\n  assert.doesNotDecrease = function (fn, obj, prop) {                                                             // 3705\n    new Assertion(fn).to.not.decrease(obj, prop);                                                                 // 3706\n  }                                                                                                               // 3707\n                                                                                                                  // 3708\n  /*!                                                                                                             // 3709\n   * Undocumented / untested                                                                                      // 3710\n   */                                                                                                             // 3711\n                                                                                                                  // 3712\n  assert.ifError = function (val, msg) {                                                                          // 3713\n    new Assertion(val, msg).to.not.be.ok;                                                                         // 3714\n  };                                                                                                              // 3715\n                                                                                                                  // 3716\n  /*!                                                                                                             // 3717\n   * Aliases.                                                                                                     // 3718\n   */                                                                                                             // 3719\n                                                                                                                  // 3720\n  (function alias(name, as){                                                                                      // 3721\n    assert[as] = assert[name];                                                                                    // 3722\n    return alias;                                                                                                 // 3723\n  })                                                                                                              // 3724\n  ('Throw', 'throw')                                                                                              // 3725\n  ('Throw', 'throws');                                                                                            // 3726\n};                                                                                                                // 3727\n                                                                                                                  // 3728\n});                                                                                                               // 3729\n                                                                                                                  // 3730\nrequire.register(\"chai/lib/chai/interface/expect.js\", function (exports, module) {                                // 3731\n/*!                                                                                                               // 3732\n * chai                                                                                                           // 3733\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 3734\n * MIT Licensed                                                                                                   // 3735\n */                                                                                                               // 3736\n                                                                                                                  // 3737\nmodule.exports = function (chai, util) {                                                                          // 3738\n  chai.expect = function (val, message) {                                                                         // 3739\n    return new chai.Assertion(val, message);                                                                      // 3740\n  };                                                                                                              // 3741\n                                                                                                                  // 3742\n  /**                                                                                                             // 3743\n   * ### .fail(actual, expected, [message], [operator])                                                           // 3744\n   *                                                                                                              // 3745\n   * Throw a failure.                                                                                             // 3746\n   *                                                                                                              // 3747\n   * @name fail                                                                                                   // 3748\n   * @param {Mixed} actual                                                                                        // 3749\n   * @param {Mixed} expected                                                                                      // 3750\n   * @param {String} message                                                                                      // 3751\n   * @param {String} operator                                                                                     // 3752\n   * @api public                                                                                                  // 3753\n   */                                                                                                             // 3754\n                                                                                                                  // 3755\n  chai.expect.fail = function (actual, expected, message, operator) {                                             // 3756\n    message = message || 'expect.fail()';                                                                         // 3757\n    throw new chai.AssertionError(message, {                                                                      // 3758\n        actual: actual                                                                                            // 3759\n      , expected: expected                                                                                        // 3760\n      , operator: operator                                                                                        // 3761\n    }, chai.expect.fail);                                                                                         // 3762\n  };                                                                                                              // 3763\n};                                                                                                                // 3764\n                                                                                                                  // 3765\n});                                                                                                               // 3766\n                                                                                                                  // 3767\nrequire.register(\"chai/lib/chai/interface/should.js\", function (exports, module) {                                // 3768\n/*!                                                                                                               // 3769\n * chai                                                                                                           // 3770\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 3771\n * MIT Licensed                                                                                                   // 3772\n */                                                                                                               // 3773\n                                                                                                                  // 3774\nmodule.exports = function (chai, util) {                                                                          // 3775\n  var Assertion = chai.Assertion;                                                                                 // 3776\n                                                                                                                  // 3777\n  function loadShould () {                                                                                        // 3778\n    // explicitly define this method as function as to have it's name to include as `ssfi`                        // 3779\n    function shouldGetter() {                                                                                     // 3780\n      if (this instanceof String || this instanceof Number) {                                                     // 3781\n        return new Assertion(this.constructor(this), null, shouldGetter);                                         // 3782\n      } else if (this instanceof Boolean) {                                                                       // 3783\n        return new Assertion(this == true, null, shouldGetter);                                                   // 3784\n      }                                                                                                           // 3785\n      return new Assertion(this, null, shouldGetter);                                                             // 3786\n    }                                                                                                             // 3787\n    function shouldSetter(value) {                                                                                // 3788\n      // See https://github.com/chaijs/chai/issues/86: this makes                                                 // 3789\n      // `whatever.should = someValue` actually set `someValue`, which is                                         // 3790\n      // especially useful for `global.should = require('chai').should()`.                                        // 3791\n      //                                                                                                          // 3792\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]                                           // 3793\n      // since otherwise we would trigger this very setter!                                                       // 3794\n      Object.defineProperty(this, 'should', {                                                                     // 3795\n        value: value,                                                                                             // 3796\n        enumerable: true,                                                                                         // 3797\n        configurable: true,                                                                                       // 3798\n        writable: true                                                                                            // 3799\n      });                                                                                                         // 3800\n    }                                                                                                             // 3801\n    // modify Object.prototype to have `should`                                                                   // 3802\n    Object.defineProperty(Object.prototype, 'should', {                                                           // 3803\n      set: shouldSetter                                                                                           // 3804\n      , get: shouldGetter                                                                                         // 3805\n      , configurable: true                                                                                        // 3806\n    });                                                                                                           // 3807\n                                                                                                                  // 3808\n    var should = {};                                                                                              // 3809\n                                                                                                                  // 3810\n    /**                                                                                                           // 3811\n     * ### .fail(actual, expected, [message], [operator])                                                         // 3812\n     *                                                                                                            // 3813\n     * Throw a failure.                                                                                           // 3814\n     *                                                                                                            // 3815\n     * @name fail                                                                                                 // 3816\n     * @param {Mixed} actual                                                                                      // 3817\n     * @param {Mixed} expected                                                                                    // 3818\n     * @param {String} message                                                                                    // 3819\n     * @param {String} operator                                                                                   // 3820\n     * @api public                                                                                                // 3821\n     */                                                                                                           // 3822\n                                                                                                                  // 3823\n    should.fail = function (actual, expected, message, operator) {                                                // 3824\n      message = message || 'should.fail()';                                                                       // 3825\n      throw new chai.AssertionError(message, {                                                                    // 3826\n          actual: actual                                                                                          // 3827\n        , expected: expected                                                                                      // 3828\n        , operator: operator                                                                                      // 3829\n      }, should.fail);                                                                                            // 3830\n    };                                                                                                            // 3831\n                                                                                                                  // 3832\n    should.equal = function (val1, val2, msg) {                                                                   // 3833\n      new Assertion(val1, msg).to.equal(val2);                                                                    // 3834\n    };                                                                                                            // 3835\n                                                                                                                  // 3836\n    should.Throw = function (fn, errt, errs, msg) {                                                               // 3837\n      new Assertion(fn, msg).to.Throw(errt, errs);                                                                // 3838\n    };                                                                                                            // 3839\n                                                                                                                  // 3840\n    should.exist = function (val, msg) {                                                                          // 3841\n      new Assertion(val, msg).to.exist;                                                                           // 3842\n    }                                                                                                             // 3843\n                                                                                                                  // 3844\n    // negation                                                                                                   // 3845\n    should.not = {}                                                                                               // 3846\n                                                                                                                  // 3847\n    should.not.equal = function (val1, val2, msg) {                                                               // 3848\n      new Assertion(val1, msg).to.not.equal(val2);                                                                // 3849\n    };                                                                                                            // 3850\n                                                                                                                  // 3851\n    should.not.Throw = function (fn, errt, errs, msg) {                                                           // 3852\n      new Assertion(fn, msg).to.not.Throw(errt, errs);                                                            // 3853\n    };                                                                                                            // 3854\n                                                                                                                  // 3855\n    should.not.exist = function (val, msg) {                                                                      // 3856\n      new Assertion(val, msg).to.not.exist;                                                                       // 3857\n    }                                                                                                             // 3858\n                                                                                                                  // 3859\n    should['throw'] = should['Throw'];                                                                            // 3860\n    should.not['throw'] = should.not['Throw'];                                                                    // 3861\n                                                                                                                  // 3862\n    return should;                                                                                                // 3863\n  };                                                                                                              // 3864\n                                                                                                                  // 3865\n  chai.should = loadShould;                                                                                       // 3866\n  chai.Should = loadShould;                                                                                       // 3867\n};                                                                                                                // 3868\n                                                                                                                  // 3869\n});                                                                                                               // 3870\n                                                                                                                  // 3871\nrequire.register(\"chai/lib/chai/utils/addChainableMethod.js\", function (exports, module) {                        // 3872\n/*!                                                                                                               // 3873\n * Chai - addChainingMethod utility                                                                               // 3874\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 3875\n * MIT Licensed                                                                                                   // 3876\n */                                                                                                               // 3877\n                                                                                                                  // 3878\n/*!                                                                                                               // 3879\n * Module dependencies                                                                                            // 3880\n */                                                                                                               // 3881\n                                                                                                                  // 3882\nvar transferFlags = require('chai/lib/chai/utils/transferFlags.js');                                              // 3883\nvar flag = require('chai/lib/chai/utils/flag.js');                                                                // 3884\nvar config = require('chai/lib/chai/config.js');                                                                  // 3885\n                                                                                                                  // 3886\n/*!                                                                                                               // 3887\n * Module variables                                                                                               // 3888\n */                                                                                                               // 3889\n                                                                                                                  // 3890\n// Check whether `__proto__` is supported                                                                         // 3891\nvar hasProtoSupport = '__proto__' in Object;                                                                      // 3892\n                                                                                                                  // 3893\n// Without `__proto__` support, this module will need to add properties to a function.                            // 3894\n// However, some Function.prototype methods cannot be overwritten,                                                // 3895\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).                        // 3896\nvar excludeNames = /^(?:length|name|arguments|caller)$/;                                                          // 3897\n                                                                                                                  // 3898\n// Cache `Function` properties                                                                                    // 3899\nvar call  = Function.prototype.call,                                                                              // 3900\n    apply = Function.prototype.apply;                                                                             // 3901\n                                                                                                                  // 3902\n/**                                                                                                               // 3903\n * ### addChainableMethod (ctx, name, method, chainingBehavior)                                                   // 3904\n *                                                                                                                // 3905\n * Adds a method to an object, such that the method can also be chained.                                          // 3906\n *                                                                                                                // 3907\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {                                 // 3908\n *       var obj = utils.flag(this, 'object');                                                                    // 3909\n *       new chai.Assertion(obj).to.be.equal(str);                                                                // 3910\n *     });                                                                                                        // 3911\n *                                                                                                                // 3912\n * Can also be accessed directly from `chai.Assertion`.                                                           // 3913\n *                                                                                                                // 3914\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);                                            // 3915\n *                                                                                                                // 3916\n * The result can then be used as both a method assertion, executing both `method` and                            // 3917\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.                            // 3918\n *                                                                                                                // 3919\n *     expect(fooStr).to.be.foo('bar');                                                                           // 3920\n *     expect(fooStr).to.be.foo.equal('foo');                                                                     // 3921\n *                                                                                                                // 3922\n * @param {Object} ctx object to which the method is added                                                        // 3923\n * @param {String} name of method to add                                                                          // 3924\n * @param {Function} method function to be used for `name`, when called                                           // 3925\n * @param {Function} chainingBehavior function to be called every time the property is accessed                   // 3926\n * @name addChainableMethod                                                                                       // 3927\n * @api public                                                                                                    // 3928\n */                                                                                                               // 3929\n                                                                                                                  // 3930\nmodule.exports = function (ctx, name, method, chainingBehavior) {                                                 // 3931\n  if (typeof chainingBehavior !== 'function') {                                                                   // 3932\n    chainingBehavior = function () { };                                                                           // 3933\n  }                                                                                                               // 3934\n                                                                                                                  // 3935\n  var chainableBehavior = {                                                                                       // 3936\n      method: method                                                                                              // 3937\n    , chainingBehavior: chainingBehavior                                                                          // 3938\n  };                                                                                                              // 3939\n                                                                                                                  // 3940\n  // save the methods so we can overwrite them later, if we need to.                                              // 3941\n  if (!ctx.__methods) {                                                                                           // 3942\n    ctx.__methods = {};                                                                                           // 3943\n  }                                                                                                               // 3944\n  ctx.__methods[name] = chainableBehavior;                                                                        // 3945\n                                                                                                                  // 3946\n  Object.defineProperty(ctx, name,                                                                                // 3947\n    { get: function () {                                                                                          // 3948\n        chainableBehavior.chainingBehavior.call(this);                                                            // 3949\n                                                                                                                  // 3950\n        var assert = function assert() {                                                                          // 3951\n          var old_ssfi = flag(this, 'ssfi');                                                                      // 3952\n          if (old_ssfi && config.includeStack === false)                                                          // 3953\n            flag(this, 'ssfi', assert);                                                                           // 3954\n          var result = chainableBehavior.method.apply(this, arguments);                                           // 3955\n          return result === undefined ? this : result;                                                            // 3956\n        };                                                                                                        // 3957\n                                                                                                                  // 3958\n        // Use `__proto__` if available                                                                           // 3959\n        if (hasProtoSupport) {                                                                                    // 3960\n          // Inherit all properties from the object by replacing the `Function` prototype                         // 3961\n          var prototype = assert.__proto__ = Object.create(this);                                                 // 3962\n          // Restore the `call` and `apply` methods from `Function`                                               // 3963\n          prototype.call = call;                                                                                  // 3964\n          prototype.apply = apply;                                                                                // 3965\n        }                                                                                                         // 3966\n        // Otherwise, redefine all properties (slow!)                                                             // 3967\n        else {                                                                                                    // 3968\n          var asserterNames = Object.getOwnPropertyNames(ctx);                                                    // 3969\n          asserterNames.forEach(function (asserterName) {                                                         // 3970\n            if (!excludeNames.test(asserterName)) {                                                               // 3971\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);                                        // 3972\n              Object.defineProperty(assert, asserterName, pd);                                                    // 3973\n            }                                                                                                     // 3974\n          });                                                                                                     // 3975\n        }                                                                                                         // 3976\n                                                                                                                  // 3977\n        transferFlags(this, assert);                                                                              // 3978\n        return assert;                                                                                            // 3979\n      }                                                                                                           // 3980\n    , configurable: true                                                                                          // 3981\n  });                                                                                                             // 3982\n};                                                                                                                // 3983\n                                                                                                                  // 3984\n});                                                                                                               // 3985\n                                                                                                                  // 3986\nrequire.register(\"chai/lib/chai/utils/addMethod.js\", function (exports, module) {                                 // 3987\n/*!                                                                                                               // 3988\n * Chai - addMethod utility                                                                                       // 3989\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 3990\n * MIT Licensed                                                                                                   // 3991\n */                                                                                                               // 3992\n                                                                                                                  // 3993\nvar config = require('chai/lib/chai/config.js');                                                                  // 3994\n                                                                                                                  // 3995\n/**                                                                                                               // 3996\n * ### .addMethod (ctx, name, method)                                                                             // 3997\n *                                                                                                                // 3998\n * Adds a method to the prototype of an object.                                                                   // 3999\n *                                                                                                                // 4000\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {                                          // 4001\n *       var obj = utils.flag(this, 'object');                                                                    // 4002\n *       new chai.Assertion(obj).to.be.equal(str);                                                                // 4003\n *     });                                                                                                        // 4004\n *                                                                                                                // 4005\n * Can also be accessed directly from `chai.Assertion`.                                                           // 4006\n *                                                                                                                // 4007\n *     chai.Assertion.addMethod('foo', fn);                                                                       // 4008\n *                                                                                                                // 4009\n * Then can be used as any other assertion.                                                                       // 4010\n *                                                                                                                // 4011\n *     expect(fooStr).to.be.foo('bar');                                                                           // 4012\n *                                                                                                                // 4013\n * @param {Object} ctx object to which the method is added                                                        // 4014\n * @param {String} name of method to add                                                                          // 4015\n * @param {Function} method function to be used for name                                                          // 4016\n * @name addMethod                                                                                                // 4017\n * @api public                                                                                                    // 4018\n */                                                                                                               // 4019\nvar flag = require('chai/lib/chai/utils/flag.js');                                                                // 4020\n                                                                                                                  // 4021\nmodule.exports = function (ctx, name, method) {                                                                   // 4022\n  ctx[name] = function () {                                                                                       // 4023\n    var old_ssfi = flag(this, 'ssfi');                                                                            // 4024\n    if (old_ssfi && config.includeStack === false)                                                                // 4025\n      flag(this, 'ssfi', ctx[name]);                                                                              // 4026\n    var result = method.apply(this, arguments);                                                                   // 4027\n    return result === undefined ? this : result;                                                                  // 4028\n  };                                                                                                              // 4029\n};                                                                                                                // 4030\n                                                                                                                  // 4031\n});                                                                                                               // 4032\n                                                                                                                  // 4033\nrequire.register(\"chai/lib/chai/utils/addProperty.js\", function (exports, module) {                               // 4034\n/*!                                                                                                               // 4035\n * Chai - addProperty utility                                                                                     // 4036\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4037\n * MIT Licensed                                                                                                   // 4038\n */                                                                                                               // 4039\n                                                                                                                  // 4040\n/**                                                                                                               // 4041\n * ### addProperty (ctx, name, getter)                                                                            // 4042\n *                                                                                                                // 4043\n * Adds a property to the prototype of an object.                                                                 // 4044\n *                                                                                                                // 4045\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {                                           // 4046\n *       var obj = utils.flag(this, 'object');                                                                    // 4047\n *       new chai.Assertion(obj).to.be.instanceof(Foo);                                                           // 4048\n *     });                                                                                                        // 4049\n *                                                                                                                // 4050\n * Can also be accessed directly from `chai.Assertion`.                                                           // 4051\n *                                                                                                                // 4052\n *     chai.Assertion.addProperty('foo', fn);                                                                     // 4053\n *                                                                                                                // 4054\n * Then can be used as any other assertion.                                                                       // 4055\n *                                                                                                                // 4056\n *     expect(myFoo).to.be.foo;                                                                                   // 4057\n *                                                                                                                // 4058\n * @param {Object} ctx object to which the property is added                                                      // 4059\n * @param {String} name of property to add                                                                        // 4060\n * @param {Function} getter function to be used for name                                                          // 4061\n * @name addProperty                                                                                              // 4062\n * @api public                                                                                                    // 4063\n */                                                                                                               // 4064\n                                                                                                                  // 4065\nmodule.exports = function (ctx, name, getter) {                                                                   // 4066\n  Object.defineProperty(ctx, name,                                                                                // 4067\n    { get: function () {                                                                                          // 4068\n        var result = getter.call(this);                                                                           // 4069\n        return result === undefined ? this : result;                                                              // 4070\n      }                                                                                                           // 4071\n    , configurable: true                                                                                          // 4072\n  });                                                                                                             // 4073\n};                                                                                                                // 4074\n                                                                                                                  // 4075\n});                                                                                                               // 4076\n                                                                                                                  // 4077\nrequire.register(\"chai/lib/chai/utils/flag.js\", function (exports, module) {                                      // 4078\n/*!                                                                                                               // 4079\n * Chai - flag utility                                                                                            // 4080\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4081\n * MIT Licensed                                                                                                   // 4082\n */                                                                                                               // 4083\n                                                                                                                  // 4084\n/**                                                                                                               // 4085\n * ### flag(object, key, [value])                                                                                 // 4086\n *                                                                                                                // 4087\n * Get or set a flag value on an object. If a                                                                     // 4088\n * value is provided it will be set, else it will                                                                 // 4089\n * return the currently set value or `undefined` if                                                               // 4090\n * the value is not set.                                                                                          // 4091\n *                                                                                                                // 4092\n *     utils.flag(this, 'foo', 'bar'); // setter                                                                  // 4093\n *     utils.flag(this, 'foo'); // getter, returns `bar`                                                          // 4094\n *                                                                                                                // 4095\n * @param {Object} object constructed Assertion                                                                   // 4096\n * @param {String} key                                                                                            // 4097\n * @param {Mixed} value (optional)                                                                                // 4098\n * @name flag                                                                                                     // 4099\n * @api private                                                                                                   // 4100\n */                                                                                                               // 4101\n                                                                                                                  // 4102\nmodule.exports = function (obj, key, value) {                                                                     // 4103\n  var flags = obj.__flags || (obj.__flags = Object.create(null));                                                 // 4104\n  if (arguments.length === 3) {                                                                                   // 4105\n    flags[key] = value;                                                                                           // 4106\n  } else {                                                                                                        // 4107\n    return flags[key];                                                                                            // 4108\n  }                                                                                                               // 4109\n};                                                                                                                // 4110\n                                                                                                                  // 4111\n});                                                                                                               // 4112\n                                                                                                                  // 4113\nrequire.register(\"chai/lib/chai/utils/getActual.js\", function (exports, module) {                                 // 4114\n/*!                                                                                                               // 4115\n * Chai - getActual utility                                                                                       // 4116\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4117\n * MIT Licensed                                                                                                   // 4118\n */                                                                                                               // 4119\n                                                                                                                  // 4120\n/**                                                                                                               // 4121\n * # getActual(object, [actual])                                                                                  // 4122\n *                                                                                                                // 4123\n * Returns the `actual` value for an Assertion                                                                    // 4124\n *                                                                                                                // 4125\n * @param {Object} object (constructed Assertion)                                                                 // 4126\n * @param {Arguments} chai.Assertion.prototype.assert arguments                                                   // 4127\n */                                                                                                               // 4128\n                                                                                                                  // 4129\nmodule.exports = function (obj, args) {                                                                           // 4130\n  return args.length > 4 ? args[4] : obj._obj;                                                                    // 4131\n};                                                                                                                // 4132\n                                                                                                                  // 4133\n});                                                                                                               // 4134\n                                                                                                                  // 4135\nrequire.register(\"chai/lib/chai/utils/getEnumerableProperties.js\", function (exports, module) {                   // 4136\n/*!                                                                                                               // 4137\n * Chai - getEnumerableProperties utility                                                                         // 4138\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4139\n * MIT Licensed                                                                                                   // 4140\n */                                                                                                               // 4141\n                                                                                                                  // 4142\n/**                                                                                                               // 4143\n * ### .getEnumerableProperties(object)                                                                           // 4144\n *                                                                                                                // 4145\n * This allows the retrieval of enumerable property names of an object,                                           // 4146\n * inherited or not.                                                                                              // 4147\n *                                                                                                                // 4148\n * @param {Object} object                                                                                         // 4149\n * @returns {Array}                                                                                               // 4150\n * @name getEnumerableProperties                                                                                  // 4151\n * @api public                                                                                                    // 4152\n */                                                                                                               // 4153\n                                                                                                                  // 4154\nmodule.exports = function getEnumerableProperties(object) {                                                       // 4155\n  var result = [];                                                                                                // 4156\n  for (var name in object) {                                                                                      // 4157\n    result.push(name);                                                                                            // 4158\n  }                                                                                                               // 4159\n  return result;                                                                                                  // 4160\n};                                                                                                                // 4161\n                                                                                                                  // 4162\n});                                                                                                               // 4163\n                                                                                                                  // 4164\nrequire.register(\"chai/lib/chai/utils/getMessage.js\", function (exports, module) {                                // 4165\n/*!                                                                                                               // 4166\n * Chai - message composition utility                                                                             // 4167\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4168\n * MIT Licensed                                                                                                   // 4169\n */                                                                                                               // 4170\n                                                                                                                  // 4171\n/*!                                                                                                               // 4172\n * Module dependancies                                                                                            // 4173\n */                                                                                                               // 4174\n                                                                                                                  // 4175\nvar flag = require('chai/lib/chai/utils/flag.js')                                                                 // 4176\n  , getActual = require('chai/lib/chai/utils/getActual.js')                                                       // 4177\n  , inspect = require('chai/lib/chai/utils/inspect.js')                                                           // 4178\n  , objDisplay = require('chai/lib/chai/utils/objDisplay.js');                                                    // 4179\n                                                                                                                  // 4180\n/**                                                                                                               // 4181\n * ### .getMessage(object, message, negateMessage)                                                                // 4182\n *                                                                                                                // 4183\n * Construct the error message based on flags                                                                     // 4184\n * and template tags. Template tags will return                                                                   // 4185\n * a stringified inspection of the object referenced.                                                             // 4186\n *                                                                                                                // 4187\n * Message template tags:                                                                                         // 4188\n * - `#{this}` current asserted object                                                                            // 4189\n * - `#{act}` actual value                                                                                        // 4190\n * - `#{exp}` expected value                                                                                      // 4191\n *                                                                                                                // 4192\n * @param {Object} object (constructed Assertion)                                                                 // 4193\n * @param {Arguments} chai.Assertion.prototype.assert arguments                                                   // 4194\n * @name getMessage                                                                                               // 4195\n * @api public                                                                                                    // 4196\n */                                                                                                               // 4197\n                                                                                                                  // 4198\nmodule.exports = function (obj, args) {                                                                           // 4199\n  var negate = flag(obj, 'negate')                                                                                // 4200\n    , val = flag(obj, 'object')                                                                                   // 4201\n    , expected = args[3]                                                                                          // 4202\n    , actual = getActual(obj, args)                                                                               // 4203\n    , msg = negate ? args[2] : args[1]                                                                            // 4204\n    , flagMsg = flag(obj, 'message');                                                                             // 4205\n                                                                                                                  // 4206\n  if(typeof msg === \"function\") msg = msg();                                                                      // 4207\n  msg = msg || '';                                                                                                // 4208\n  msg = msg                                                                                                       // 4209\n    .replace(/#{this}/g, objDisplay(val))                                                                         // 4210\n    .replace(/#{act}/g, objDisplay(actual))                                                                       // 4211\n    .replace(/#{exp}/g, objDisplay(expected));                                                                    // 4212\n                                                                                                                  // 4213\n  return flagMsg ? flagMsg + ': ' + msg : msg;                                                                    // 4214\n};                                                                                                                // 4215\n                                                                                                                  // 4216\n});                                                                                                               // 4217\n                                                                                                                  // 4218\nrequire.register(\"chai/lib/chai/utils/getName.js\", function (exports, module) {                                   // 4219\n/*!                                                                                                               // 4220\n * Chai - getName utility                                                                                         // 4221\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4222\n * MIT Licensed                                                                                                   // 4223\n */                                                                                                               // 4224\n                                                                                                                  // 4225\n/**                                                                                                               // 4226\n * # getName(func)                                                                                                // 4227\n *                                                                                                                // 4228\n * Gets the name of a function, in a cross-browser way.                                                           // 4229\n *                                                                                                                // 4230\n * @param {Function} a function (usually a constructor)                                                           // 4231\n */                                                                                                               // 4232\n                                                                                                                  // 4233\nmodule.exports = function (func) {                                                                                // 4234\n  if (func.name) return func.name;                                                                                // 4235\n                                                                                                                  // 4236\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);                                                                // 4237\n  return match && match[1] ? match[1] : \"\";                                                                       // 4238\n};                                                                                                                // 4239\n                                                                                                                  // 4240\n});                                                                                                               // 4241\n                                                                                                                  // 4242\nrequire.register(\"chai/lib/chai/utils/getPathValue.js\", function (exports, module) {                              // 4243\n/*!                                                                                                               // 4244\n * Chai - getPathValue utility                                                                                    // 4245\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4246\n * @see https://github.com/logicalparadox/filtr                                                                   // 4247\n * MIT Licensed                                                                                                   // 4248\n */                                                                                                               // 4249\n                                                                                                                  // 4250\nvar getPathInfo = require('chai/lib/chai/utils/getPathInfo.js');                                                  // 4251\n                                                                                                                  // 4252\n/**                                                                                                               // 4253\n * ### .getPathValue(path, object)                                                                                // 4254\n *                                                                                                                // 4255\n * This allows the retrieval of values in an                                                                      // 4256\n * object given a string path.                                                                                    // 4257\n *                                                                                                                // 4258\n *     var obj = {                                                                                                // 4259\n *         prop1: {                                                                                               // 4260\n *             arr: ['a', 'b', 'c']                                                                               // 4261\n *           , str: 'Hello'                                                                                       // 4262\n *         }                                                                                                      // 4263\n *       , prop2: {                                                                                               // 4264\n *             arr: [ { nested: 'Universe' } ]                                                                    // 4265\n *           , str: 'Hello again!'                                                                                // 4266\n *         }                                                                                                      // 4267\n *     }                                                                                                          // 4268\n *                                                                                                                // 4269\n * The following would be the results.                                                                            // 4270\n *                                                                                                                // 4271\n *     getPathValue('prop1.str', obj); // Hello                                                                   // 4272\n *     getPathValue('prop1.att[2]', obj); // b                                                                    // 4273\n *     getPathValue('prop2.arr[0].nested', obj); // Universe                                                      // 4274\n *                                                                                                                // 4275\n * @param {String} path                                                                                           // 4276\n * @param {Object} object                                                                                         // 4277\n * @returns {Object} value or `undefined`                                                                         // 4278\n * @name getPathValue                                                                                             // 4279\n * @api public                                                                                                    // 4280\n */                                                                                                               // 4281\nmodule.exports = function(path, obj) {                                                                            // 4282\n  var info = getPathInfo(path, obj);                                                                              // 4283\n  return info.value;                                                                                              // 4284\n};                                                                                                                // 4285\n                                                                                                                  // 4286\n});                                                                                                               // 4287\n                                                                                                                  // 4288\nrequire.register(\"chai/lib/chai/utils/getPathInfo.js\", function (exports, module) {                               // 4289\n/*!                                                                                                               // 4290\n * Chai - getPathInfo utility                                                                                     // 4291\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4292\n * MIT Licensed                                                                                                   // 4293\n */                                                                                                               // 4294\n                                                                                                                  // 4295\nvar hasProperty = require('chai/lib/chai/utils/hasProperty.js');                                                  // 4296\n                                                                                                                  // 4297\n/**                                                                                                               // 4298\n * ### .getPathInfo(path, object)                                                                                 // 4299\n *                                                                                                                // 4300\n * This allows the retrieval of property info in an                                                               // 4301\n * object given a string path.                                                                                    // 4302\n *                                                                                                                // 4303\n * The path info consists of an object with the                                                                   // 4304\n * following properties:                                                                                          // 4305\n *                                                                                                                // 4306\n * * parent - The parent object of the property referenced by `path`                                              // 4307\n * * name - The name of the final property, a number if it was an array indexer                                   // 4308\n * * value - The value of the property, if it exists, otherwise `undefined`                                       // 4309\n * * exists - Whether the property exists or not                                                                  // 4310\n *                                                                                                                // 4311\n * @param {String} path                                                                                           // 4312\n * @param {Object} object                                                                                         // 4313\n * @returns {Object} info                                                                                         // 4314\n * @name getPathInfo                                                                                              // 4315\n * @api public                                                                                                    // 4316\n */                                                                                                               // 4317\n                                                                                                                  // 4318\nmodule.exports = function getPathInfo(path, obj) {                                                                // 4319\n  var parsed = parsePath(path),                                                                                   // 4320\n      last = parsed[parsed.length - 1];                                                                           // 4321\n                                                                                                                  // 4322\n  var info = {                                                                                                    // 4323\n    parent: _getPathValue(parsed, obj, parsed.length - 1),                                                        // 4324\n    name: last.p || last.i,                                                                                       // 4325\n    value: _getPathValue(parsed, obj),                                                                            // 4326\n  };                                                                                                              // 4327\n  info.exists = hasProperty(info.name, info.parent);                                                              // 4328\n                                                                                                                  // 4329\n  return info;                                                                                                    // 4330\n};                                                                                                                // 4331\n                                                                                                                  // 4332\n                                                                                                                  // 4333\n/*!                                                                                                               // 4334\n * ## parsePath(path)                                                                                             // 4335\n *                                                                                                                // 4336\n * Helper function used to parse string object                                                                    // 4337\n * paths. Use in conjunction with `_getPathValue`.                                                                // 4338\n *                                                                                                                // 4339\n *      var parsed = parsePath('myobject.property.subprop');                                                      // 4340\n *                                                                                                                // 4341\n * ### Paths:                                                                                                     // 4342\n *                                                                                                                // 4343\n * * Can be as near infinitely deep and nested                                                                    // 4344\n * * Arrays are also valid using the formal `myobject.document[3].property`.                                      // 4345\n *                                                                                                                // 4346\n * @param {String} path                                                                                           // 4347\n * @returns {Object} parsed                                                                                       // 4348\n * @api private                                                                                                   // 4349\n */                                                                                                               // 4350\n                                                                                                                  // 4351\nfunction parsePath (path) {                                                                                       // 4352\n  var str = path.replace(/\\[/g, '.[')                                                                             // 4353\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);                                                                       // 4354\n  return parts.map(function (value) {                                                                             // 4355\n    var re = /\\[(\\d+)\\]$/                                                                                         // 4356\n      , mArr = re.exec(value);                                                                                    // 4357\n    if (mArr) return { i: parseFloat(mArr[1]) };                                                                  // 4358\n    else return { p: value };                                                                                     // 4359\n  });                                                                                                             // 4360\n}                                                                                                                 // 4361\n                                                                                                                  // 4362\n                                                                                                                  // 4363\n/*!                                                                                                               // 4364\n * ## _getPathValue(parsed, obj)                                                                                  // 4365\n *                                                                                                                // 4366\n * Helper companion function for `.parsePath` that returns                                                        // 4367\n * the value located at the parsed address.                                                                       // 4368\n *                                                                                                                // 4369\n *      var value = getPathValue(parsed, obj);                                                                    // 4370\n *                                                                                                                // 4371\n * @param {Object} parsed definition from `parsePath`.                                                            // 4372\n * @param {Object} object to search against                                                                       // 4373\n * @param {Number} object to search against                                                                       // 4374\n * @returns {Object|Undefined} value                                                                              // 4375\n * @api private                                                                                                   // 4376\n */                                                                                                               // 4377\n                                                                                                                  // 4378\nfunction _getPathValue (parsed, obj, index) {                                                                     // 4379\n  var tmp = obj                                                                                                   // 4380\n    , res;                                                                                                        // 4381\n                                                                                                                  // 4382\n  index = (index === undefined ? parsed.length : index);                                                          // 4383\n                                                                                                                  // 4384\n  for (var i = 0, l = index; i < l; i++) {                                                                        // 4385\n    var part = parsed[i];                                                                                         // 4386\n    if (tmp) {                                                                                                    // 4387\n      if ('undefined' !== typeof part.p)                                                                          // 4388\n        tmp = tmp[part.p];                                                                                        // 4389\n      else if ('undefined' !== typeof part.i)                                                                     // 4390\n        tmp = tmp[part.i];                                                                                        // 4391\n      if (i == (l - 1)) res = tmp;                                                                                // 4392\n    } else {                                                                                                      // 4393\n      res = undefined;                                                                                            // 4394\n    }                                                                                                             // 4395\n  }                                                                                                               // 4396\n  return res;                                                                                                     // 4397\n}                                                                                                                 // 4398\n                                                                                                                  // 4399\n});                                                                                                               // 4400\n                                                                                                                  // 4401\nrequire.register(\"chai/lib/chai/utils/hasProperty.js\", function (exports, module) {                               // 4402\n/*!                                                                                                               // 4403\n * Chai - hasProperty utility                                                                                     // 4404\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4405\n * MIT Licensed                                                                                                   // 4406\n */                                                                                                               // 4407\n                                                                                                                  // 4408\nvar type = require('chai/lib/chai/utils/type.js');                                                                // 4409\n                                                                                                                  // 4410\n/**                                                                                                               // 4411\n * ### .hasProperty(object, name)                                                                                 // 4412\n *                                                                                                                // 4413\n * This allows checking whether an object has                                                                     // 4414\n * named property or numeric array index.                                                                         // 4415\n *                                                                                                                // 4416\n * Basically does the same thing as the `in`                                                                      // 4417\n * operator but works properly with natives                                                                       // 4418\n * and null/undefined values.                                                                                     // 4419\n *                                                                                                                // 4420\n *     var obj = {                                                                                                // 4421\n *         arr: ['a', 'b', 'c']                                                                                   // 4422\n *       , str: 'Hello'                                                                                           // 4423\n *     }                                                                                                          // 4424\n *                                                                                                                // 4425\n * The following would be the results.                                                                            // 4426\n *                                                                                                                // 4427\n *     hasProperty('str', obj);  // true                                                                          // 4428\n *     hasProperty('constructor', obj);  // true                                                                  // 4429\n *     hasProperty('bar', obj);  // false                                                                         // 4430\n *                                                                                                                // 4431\n *     hasProperty('length', obj.str); // true                                                                    // 4432\n *     hasProperty(1, obj.str);  // true                                                                          // 4433\n *     hasProperty(5, obj.str);  // false                                                                         // 4434\n *                                                                                                                // 4435\n *     hasProperty('length', obj.arr);  // true                                                                   // 4436\n *     hasProperty(2, obj.arr);  // true                                                                          // 4437\n *     hasProperty(3, obj.arr);  // false                                                                         // 4438\n *                                                                                                                // 4439\n * @param {Objuect} object                                                                                        // 4440\n * @param {String|Number} name                                                                                    // 4441\n * @returns {Boolean} whether it exists                                                                           // 4442\n * @name getPathInfo                                                                                              // 4443\n * @api public                                                                                                    // 4444\n */                                                                                                               // 4445\n                                                                                                                  // 4446\nvar literals = {                                                                                                  // 4447\n    'number': Number                                                                                              // 4448\n  , 'string': String                                                                                              // 4449\n};                                                                                                                // 4450\n                                                                                                                  // 4451\nmodule.exports = function hasProperty(name, obj) {                                                                // 4452\n  var ot = type(obj);                                                                                             // 4453\n                                                                                                                  // 4454\n  // Bad Object, obviously no props at all                                                                        // 4455\n  if(ot === 'null' || ot === 'undefined')                                                                         // 4456\n    return false;                                                                                                 // 4457\n                                                                                                                  // 4458\n  // The `in` operator does not work with certain literals                                                        // 4459\n  // box these before the check                                                                                   // 4460\n  if(literals[ot] && typeof obj !== 'object')                                                                     // 4461\n    obj = new literals[ot](obj);                                                                                  // 4462\n                                                                                                                  // 4463\n  return name in obj;                                                                                             // 4464\n};                                                                                                                // 4465\n                                                                                                                  // 4466\n});                                                                                                               // 4467\n                                                                                                                  // 4468\nrequire.register(\"chai/lib/chai/utils/getProperties.js\", function (exports, module) {                             // 4469\n/*!                                                                                                               // 4470\n * Chai - getProperties utility                                                                                   // 4471\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4472\n * MIT Licensed                                                                                                   // 4473\n */                                                                                                               // 4474\n                                                                                                                  // 4475\n/**                                                                                                               // 4476\n * ### .getProperties(object)                                                                                     // 4477\n *                                                                                                                // 4478\n * This allows the retrieval of property names of an object, enumerable or not,                                   // 4479\n * inherited or not.                                                                                              // 4480\n *                                                                                                                // 4481\n * @param {Object} object                                                                                         // 4482\n * @returns {Array}                                                                                               // 4483\n * @name getProperties                                                                                            // 4484\n * @api public                                                                                                    // 4485\n */                                                                                                               // 4486\n                                                                                                                  // 4487\nmodule.exports = function getProperties(object) {                                                                 // 4488\n  var result = Object.getOwnPropertyNames(subject);                                                               // 4489\n                                                                                                                  // 4490\n  function addProperty(property) {                                                                                // 4491\n    if (result.indexOf(property) === -1) {                                                                        // 4492\n      result.push(property);                                                                                      // 4493\n    }                                                                                                             // 4494\n  }                                                                                                               // 4495\n                                                                                                                  // 4496\n  var proto = Object.getPrototypeOf(subject);                                                                     // 4497\n  while (proto !== null) {                                                                                        // 4498\n    Object.getOwnPropertyNames(proto).forEach(addProperty);                                                       // 4499\n    proto = Object.getPrototypeOf(proto);                                                                         // 4500\n  }                                                                                                               // 4501\n                                                                                                                  // 4502\n  return result;                                                                                                  // 4503\n};                                                                                                                // 4504\n                                                                                                                  // 4505\n});                                                                                                               // 4506\n                                                                                                                  // 4507\nrequire.register(\"chai/lib/chai/utils/index.js\", function (exports, module) {                                     // 4508\n/*!                                                                                                               // 4509\n * chai                                                                                                           // 4510\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>                                                         // 4511\n * MIT Licensed                                                                                                   // 4512\n */                                                                                                               // 4513\n                                                                                                                  // 4514\n/*!                                                                                                               // 4515\n * Main exports                                                                                                   // 4516\n */                                                                                                               // 4517\n                                                                                                                  // 4518\nvar exports = module.exports = {};                                                                                // 4519\n                                                                                                                  // 4520\n/*!                                                                                                               // 4521\n * test utility                                                                                                   // 4522\n */                                                                                                               // 4523\n                                                                                                                  // 4524\nexports.test = require('chai/lib/chai/utils/test.js');                                                            // 4525\n                                                                                                                  // 4526\n/*!                                                                                                               // 4527\n * type utility                                                                                                   // 4528\n */                                                                                                               // 4529\n                                                                                                                  // 4530\nexports.type = require('chai/lib/chai/utils/type.js');                                                            // 4531\n                                                                                                                  // 4532\n/*!                                                                                                               // 4533\n * message utility                                                                                                // 4534\n */                                                                                                               // 4535\n                                                                                                                  // 4536\nexports.getMessage = require('chai/lib/chai/utils/getMessage.js');                                                // 4537\n                                                                                                                  // 4538\n/*!                                                                                                               // 4539\n * actual utility                                                                                                 // 4540\n */                                                                                                               // 4541\n                                                                                                                  // 4542\nexports.getActual = require('chai/lib/chai/utils/getActual.js');                                                  // 4543\n                                                                                                                  // 4544\n/*!                                                                                                               // 4545\n * Inspect util                                                                                                   // 4546\n */                                                                                                               // 4547\n                                                                                                                  // 4548\nexports.inspect = require('chai/lib/chai/utils/inspect.js');                                                      // 4549\n                                                                                                                  // 4550\n/*!                                                                                                               // 4551\n * Object Display util                                                                                            // 4552\n */                                                                                                               // 4553\n                                                                                                                  // 4554\nexports.objDisplay = require('chai/lib/chai/utils/objDisplay.js');                                                // 4555\n                                                                                                                  // 4556\n/*!                                                                                                               // 4557\n * Flag utility                                                                                                   // 4558\n */                                                                                                               // 4559\n                                                                                                                  // 4560\nexports.flag = require('chai/lib/chai/utils/flag.js');                                                            // 4561\n                                                                                                                  // 4562\n/*!                                                                                                               // 4563\n * Flag transferring utility                                                                                      // 4564\n */                                                                                                               // 4565\n                                                                                                                  // 4566\nexports.transferFlags = require('chai/lib/chai/utils/transferFlags.js');                                          // 4567\n                                                                                                                  // 4568\n/*!                                                                                                               // 4569\n * Deep equal utility                                                                                             // 4570\n */                                                                                                               // 4571\n                                                                                                                  // 4572\nexports.eql = require('chaijs~deep-eql@0.1.3');                                                                   // 4573\n                                                                                                                  // 4574\n/*!                                                                                                               // 4575\n * Deep path value                                                                                                // 4576\n */                                                                                                               // 4577\n                                                                                                                  // 4578\nexports.getPathValue = require('chai/lib/chai/utils/getPathValue.js');                                            // 4579\n                                                                                                                  // 4580\n/*!                                                                                                               // 4581\n * Deep path info                                                                                                 // 4582\n */                                                                                                               // 4583\n                                                                                                                  // 4584\nexports.getPathInfo = require('chai/lib/chai/utils/getPathInfo.js');                                              // 4585\n                                                                                                                  // 4586\n/*!                                                                                                               // 4587\n * Check if a property exists                                                                                     // 4588\n */                                                                                                               // 4589\n                                                                                                                  // 4590\nexports.hasProperty = require('chai/lib/chai/utils/hasProperty.js');                                              // 4591\n                                                                                                                  // 4592\n/*!                                                                                                               // 4593\n * Function name                                                                                                  // 4594\n */                                                                                                               // 4595\n                                                                                                                  // 4596\nexports.getName = require('chai/lib/chai/utils/getName.js');                                                      // 4597\n                                                                                                                  // 4598\n/*!                                                                                                               // 4599\n * add Property                                                                                                   // 4600\n */                                                                                                               // 4601\n                                                                                                                  // 4602\nexports.addProperty = require('chai/lib/chai/utils/addProperty.js');                                              // 4603\n                                                                                                                  // 4604\n/*!                                                                                                               // 4605\n * add Method                                                                                                     // 4606\n */                                                                                                               // 4607\n                                                                                                                  // 4608\nexports.addMethod = require('chai/lib/chai/utils/addMethod.js');                                                  // 4609\n                                                                                                                  // 4610\n/*!                                                                                                               // 4611\n * overwrite Property                                                                                             // 4612\n */                                                                                                               // 4613\n                                                                                                                  // 4614\nexports.overwriteProperty = require('chai/lib/chai/utils/overwriteProperty.js');                                  // 4615\n                                                                                                                  // 4616\n/*!                                                                                                               // 4617\n * overwrite Method                                                                                               // 4618\n */                                                                                                               // 4619\n                                                                                                                  // 4620\nexports.overwriteMethod = require('chai/lib/chai/utils/overwriteMethod.js');                                      // 4621\n                                                                                                                  // 4622\n/*!                                                                                                               // 4623\n * Add a chainable method                                                                                         // 4624\n */                                                                                                               // 4625\n                                                                                                                  // 4626\nexports.addChainableMethod = require('chai/lib/chai/utils/addChainableMethod.js');                                // 4627\n                                                                                                                  // 4628\n/*!                                                                                                               // 4629\n * Overwrite chainable method                                                                                     // 4630\n */                                                                                                               // 4631\n                                                                                                                  // 4632\nexports.overwriteChainableMethod = require('chai/lib/chai/utils/overwriteChainableMethod.js');                    // 4633\n                                                                                                                  // 4634\n                                                                                                                  // 4635\n});                                                                                                               // 4636\n                                                                                                                  // 4637\nrequire.register(\"chai/lib/chai/utils/inspect.js\", function (exports, module) {                                   // 4638\n// This is (almost) directly from Node.js utils                                                                   // 4639\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js                       // 4640\n                                                                                                                  // 4641\nvar getName = require('chai/lib/chai/utils/getName.js');                                                          // 4642\nvar getProperties = require('chai/lib/chai/utils/getProperties.js');                                              // 4643\nvar getEnumerableProperties = require('chai/lib/chai/utils/getEnumerableProperties.js');                          // 4644\n                                                                                                                  // 4645\nmodule.exports = inspect;                                                                                         // 4646\n                                                                                                                  // 4647\n/**                                                                                                               // 4648\n * Echos the value of a value. Trys to print the value out                                                        // 4649\n * in the best way possible given the different types.                                                            // 4650\n *                                                                                                                // 4651\n * @param {Object} obj The object to print out.                                                                   // 4652\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)                                            // 4653\n *    properties of objects.                                                                                      // 4654\n * @param {Number} depth Depth in which to descend in object. Default is 2.                                       // 4655\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the                                         // 4656\n *    output. Default is false (no coloring).                                                                     // 4657\n */                                                                                                               // 4658\nfunction inspect(obj, showHidden, depth, colors) {                                                                // 4659\n  var ctx = {                                                                                                     // 4660\n    showHidden: showHidden,                                                                                       // 4661\n    seen: [],                                                                                                     // 4662\n    stylize: function (str) { return str; }                                                                       // 4663\n  };                                                                                                              // 4664\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));                                       // 4665\n}                                                                                                                 // 4666\n                                                                                                                  // 4667\n// Returns true if object is a DOM element.                                                                       // 4668\nvar isDOMElement = function (object) {                                                                            // 4669\n  if (typeof HTMLElement === 'object') {                                                                          // 4670\n    return object instanceof HTMLElement;                                                                         // 4671\n  } else {                                                                                                        // 4672\n    return object &&                                                                                              // 4673\n      typeof object === 'object' &&                                                                               // 4674\n      object.nodeType === 1 &&                                                                                    // 4675\n      typeof object.nodeName === 'string';                                                                        // 4676\n  }                                                                                                               // 4677\n};                                                                                                                // 4678\n                                                                                                                  // 4679\nfunction formatValue(ctx, value, recurseTimes) {                                                                  // 4680\n  // Provide a hook for user-specified inspect functions.                                                         // 4681\n  // Check that value is an object with an inspect function on it                                                 // 4682\n  if (value && typeof value.inspect === 'function' &&                                                             // 4683\n      // Filter out the util module, it's inspect function is special                                             // 4684\n      value.inspect !== exports.inspect &&                                                                        // 4685\n      // Also filter out any prototype objects using the circular check.                                          // 4686\n      !(value.constructor && value.constructor.prototype === value)) {                                            // 4687\n    var ret = value.inspect(recurseTimes);                                                                        // 4688\n    if (typeof ret !== 'string') {                                                                                // 4689\n      ret = formatValue(ctx, ret, recurseTimes);                                                                  // 4690\n    }                                                                                                             // 4691\n    return ret;                                                                                                   // 4692\n  }                                                                                                               // 4693\n                                                                                                                  // 4694\n  // Primitive types cannot have properties                                                                       // 4695\n  var primitive = formatPrimitive(ctx, value);                                                                    // 4696\n  if (primitive) {                                                                                                // 4697\n    return primitive;                                                                                             // 4698\n  }                                                                                                               // 4699\n                                                                                                                  // 4700\n  // If this is a DOM element, try to get the outer HTML.                                                         // 4701\n  if (isDOMElement(value)) {                                                                                      // 4702\n    if ('outerHTML' in value) {                                                                                   // 4703\n      return value.outerHTML;                                                                                     // 4704\n      // This value does not have an outerHTML attribute,                                                         // 4705\n      //   it could still be an XML element                                                                       // 4706\n    } else {                                                                                                      // 4707\n      // Attempt to serialize it                                                                                  // 4708\n      try {                                                                                                       // 4709\n        if (document.xmlVersion) {                                                                                // 4710\n          var xmlSerializer = new XMLSerializer();                                                                // 4711\n          return xmlSerializer.serializeToString(value);                                                          // 4712\n        } else {                                                                                                  // 4713\n          // Firefox 11- do not support outerHTML                                                                 // 4714\n          //   It does, however, support innerHTML                                                                // 4715\n          //   Use the following to render the element                                                            // 4716\n          var ns = \"http://www.w3.org/1999/xhtml\";                                                                // 4717\n          var container = document.createElementNS(ns, '_');                                                      // 4718\n                                                                                                                  // 4719\n          container.appendChild(value.cloneNode(false));                                                          // 4720\n          html = container.innerHTML                                                                              // 4721\n            .replace('><', '>' + value.innerHTML + '<');                                                          // 4722\n          container.innerHTML = '';                                                                               // 4723\n          return html;                                                                                            // 4724\n        }                                                                                                         // 4725\n      } catch (err) {                                                                                             // 4726\n        // This could be a non-native DOM implementation,                                                         // 4727\n        //   continue with the normal flow:                                                                       // 4728\n        //   printing the element as if it is an object.                                                          // 4729\n      }                                                                                                           // 4730\n    }                                                                                                             // 4731\n  }                                                                                                               // 4732\n                                                                                                                  // 4733\n  // Look up the keys of the object.                                                                              // 4734\n  var visibleKeys = getEnumerableProperties(value);                                                               // 4735\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;                                                 // 4736\n                                                                                                                  // 4737\n  // Some type of object without properties can be shortcutted.                                                   // 4738\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,                                // 4739\n  // a `stack` plus `description` property; ignore those for consistency.                                         // 4740\n  if (keys.length === 0 || (isError(value) && (                                                                   // 4741\n      (keys.length === 1 && keys[0] === 'stack') ||                                                               // 4742\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')                                     // 4743\n     ))) {                                                                                                        // 4744\n    if (typeof value === 'function') {                                                                            // 4745\n      var name = getName(value);                                                                                  // 4746\n      var nameSuffix = name ? ': ' + name : '';                                                                   // 4747\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');                                              // 4748\n    }                                                                                                             // 4749\n    if (isRegExp(value)) {                                                                                        // 4750\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                        // 4751\n    }                                                                                                             // 4752\n    if (isDate(value)) {                                                                                          // 4753\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');                                         // 4754\n    }                                                                                                             // 4755\n    if (isError(value)) {                                                                                         // 4756\n      return formatError(value);                                                                                  // 4757\n    }                                                                                                             // 4758\n  }                                                                                                               // 4759\n                                                                                                                  // 4760\n  var base = '', array = false, braces = ['{', '}'];                                                              // 4761\n                                                                                                                  // 4762\n  // Make Array say that they are Array                                                                           // 4763\n  if (isArray(value)) {                                                                                           // 4764\n    array = true;                                                                                                 // 4765\n    braces = ['[', ']'];                                                                                          // 4766\n  }                                                                                                               // 4767\n                                                                                                                  // 4768\n  // Make functions say that they are functions                                                                   // 4769\n  if (typeof value === 'function') {                                                                              // 4770\n    var name = getName(value);                                                                                    // 4771\n    var nameSuffix = name ? ': ' + name : '';                                                                     // 4772\n    base = ' [Function' + nameSuffix + ']';                                                                       // 4773\n  }                                                                                                               // 4774\n                                                                                                                  // 4775\n  // Make RegExps say that they are RegExps                                                                       // 4776\n  if (isRegExp(value)) {                                                                                          // 4777\n    base = ' ' + RegExp.prototype.toString.call(value);                                                           // 4778\n  }                                                                                                               // 4779\n                                                                                                                  // 4780\n  // Make dates with properties first say the date                                                                // 4781\n  if (isDate(value)) {                                                                                            // 4782\n    base = ' ' + Date.prototype.toUTCString.call(value);                                                          // 4783\n  }                                                                                                               // 4784\n                                                                                                                  // 4785\n  // Make error with message first say the error                                                                  // 4786\n  if (isError(value)) {                                                                                           // 4787\n    return formatError(value);                                                                                    // 4788\n  }                                                                                                               // 4789\n                                                                                                                  // 4790\n  if (keys.length === 0 && (!array || value.length == 0)) {                                                       // 4791\n    return braces[0] + base + braces[1];                                                                          // 4792\n  }                                                                                                               // 4793\n                                                                                                                  // 4794\n  if (recurseTimes < 0) {                                                                                         // 4795\n    if (isRegExp(value)) {                                                                                        // 4796\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                        // 4797\n    } else {                                                                                                      // 4798\n      return ctx.stylize('[Object]', 'special');                                                                  // 4799\n    }                                                                                                             // 4800\n  }                                                                                                               // 4801\n                                                                                                                  // 4802\n  ctx.seen.push(value);                                                                                           // 4803\n                                                                                                                  // 4804\n  var output;                                                                                                     // 4805\n  if (array) {                                                                                                    // 4806\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);                                            // 4807\n  } else {                                                                                                        // 4808\n    output = keys.map(function(key) {                                                                             // 4809\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);                                   // 4810\n    });                                                                                                           // 4811\n  }                                                                                                               // 4812\n                                                                                                                  // 4813\n  ctx.seen.pop();                                                                                                 // 4814\n                                                                                                                  // 4815\n  return reduceToSingleString(output, base, braces);                                                              // 4816\n}                                                                                                                 // 4817\n                                                                                                                  // 4818\n                                                                                                                  // 4819\nfunction formatPrimitive(ctx, value) {                                                                            // 4820\n  switch (typeof value) {                                                                                         // 4821\n    case 'undefined':                                                                                             // 4822\n      return ctx.stylize('undefined', 'undefined');                                                               // 4823\n                                                                                                                  // 4824\n    case 'string':                                                                                                // 4825\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')                                             // 4826\n                                               .replace(/'/g, \"\\\\'\")                                              // 4827\n                                               .replace(/\\\\\"/g, '\"') + '\\'';                                      // 4828\n      return ctx.stylize(simple, 'string');                                                                       // 4829\n                                                                                                                  // 4830\n    case 'number':                                                                                                // 4831\n      if (value === 0 && (1/value) === -Infinity) {                                                               // 4832\n        return ctx.stylize('-0', 'number');                                                                       // 4833\n      }                                                                                                           // 4834\n      return ctx.stylize('' + value, 'number');                                                                   // 4835\n                                                                                                                  // 4836\n    case 'boolean':                                                                                               // 4837\n      return ctx.stylize('' + value, 'boolean');                                                                  // 4838\n  }                                                                                                               // 4839\n  // For some reason typeof null is \"object\", so special case here.                                               // 4840\n  if (value === null) {                                                                                           // 4841\n    return ctx.stylize('null', 'null');                                                                           // 4842\n  }                                                                                                               // 4843\n}                                                                                                                 // 4844\n                                                                                                                  // 4845\n                                                                                                                  // 4846\nfunction formatError(value) {                                                                                     // 4847\n  return '[' + Error.prototype.toString.call(value) + ']';                                                        // 4848\n}                                                                                                                 // 4849\n                                                                                                                  // 4850\n                                                                                                                  // 4851\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {                                               // 4852\n  var output = [];                                                                                                // 4853\n  for (var i = 0, l = value.length; i < l; ++i) {                                                                 // 4854\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {                                                 // 4855\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                           // 4856\n          String(i), true));                                                                                      // 4857\n    } else {                                                                                                      // 4858\n      output.push('');                                                                                            // 4859\n    }                                                                                                             // 4860\n  }                                                                                                               // 4861\n  keys.forEach(function(key) {                                                                                    // 4862\n    if (!key.match(/^\\d+$/)) {                                                                                    // 4863\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                           // 4864\n          key, true));                                                                                            // 4865\n    }                                                                                                             // 4866\n  });                                                                                                             // 4867\n  return output;                                                                                                  // 4868\n}                                                                                                                 // 4869\n                                                                                                                  // 4870\n                                                                                                                  // 4871\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {                                      // 4872\n  var name, str;                                                                                                  // 4873\n  if (value.__lookupGetter__) {                                                                                   // 4874\n    if (value.__lookupGetter__(key)) {                                                                            // 4875\n      if (value.__lookupSetter__(key)) {                                                                          // 4876\n        str = ctx.stylize('[Getter/Setter]', 'special');                                                          // 4877\n      } else {                                                                                                    // 4878\n        str = ctx.stylize('[Getter]', 'special');                                                                 // 4879\n      }                                                                                                           // 4880\n    } else {                                                                                                      // 4881\n      if (value.__lookupSetter__(key)) {                                                                          // 4882\n        str = ctx.stylize('[Setter]', 'special');                                                                 // 4883\n      }                                                                                                           // 4884\n    }                                                                                                             // 4885\n  }                                                                                                               // 4886\n  if (visibleKeys.indexOf(key) < 0) {                                                                             // 4887\n    name = '[' + key + ']';                                                                                       // 4888\n  }                                                                                                               // 4889\n  if (!str) {                                                                                                     // 4890\n    if (ctx.seen.indexOf(value[key]) < 0) {                                                                       // 4891\n      if (recurseTimes === null) {                                                                                // 4892\n        str = formatValue(ctx, value[key], null);                                                                 // 4893\n      } else {                                                                                                    // 4894\n        str = formatValue(ctx, value[key], recurseTimes - 1);                                                     // 4895\n      }                                                                                                           // 4896\n      if (str.indexOf('\\n') > -1) {                                                                               // 4897\n        if (array) {                                                                                              // 4898\n          str = str.split('\\n').map(function(line) {                                                              // 4899\n            return '  ' + line;                                                                                   // 4900\n          }).join('\\n').substr(2);                                                                                // 4901\n        } else {                                                                                                  // 4902\n          str = '\\n' + str.split('\\n').map(function(line) {                                                       // 4903\n            return '   ' + line;                                                                                  // 4904\n          }).join('\\n');                                                                                          // 4905\n        }                                                                                                         // 4906\n      }                                                                                                           // 4907\n    } else {                                                                                                      // 4908\n      str = ctx.stylize('[Circular]', 'special');                                                                 // 4909\n    }                                                                                                             // 4910\n  }                                                                                                               // 4911\n  if (typeof name === 'undefined') {                                                                              // 4912\n    if (array && key.match(/^\\d+$/)) {                                                                            // 4913\n      return str;                                                                                                 // 4914\n    }                                                                                                             // 4915\n    name = JSON.stringify('' + key);                                                                              // 4916\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {                                                             // 4917\n      name = name.substr(1, name.length - 2);                                                                     // 4918\n      name = ctx.stylize(name, 'name');                                                                           // 4919\n    } else {                                                                                                      // 4920\n      name = name.replace(/'/g, \"\\\\'\")                                                                            // 4921\n                 .replace(/\\\\\"/g, '\"')                                                                            // 4922\n                 .replace(/(^\"|\"$)/g, \"'\");                                                                       // 4923\n      name = ctx.stylize(name, 'string');                                                                         // 4924\n    }                                                                                                             // 4925\n  }                                                                                                               // 4926\n                                                                                                                  // 4927\n  return name + ': ' + str;                                                                                       // 4928\n}                                                                                                                 // 4929\n                                                                                                                  // 4930\n                                                                                                                  // 4931\nfunction reduceToSingleString(output, base, braces) {                                                             // 4932\n  var numLinesEst = 0;                                                                                            // 4933\n  var length = output.reduce(function(prev, cur) {                                                                // 4934\n    numLinesEst++;                                                                                                // 4935\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;                                                                    // 4936\n    return prev + cur.length + 1;                                                                                 // 4937\n  }, 0);                                                                                                          // 4938\n                                                                                                                  // 4939\n  if (length > 60) {                                                                                              // 4940\n    return braces[0] +                                                                                            // 4941\n           (base === '' ? '' : base + '\\n ') +                                                                    // 4942\n           ' ' +                                                                                                  // 4943\n           output.join(',\\n  ') +                                                                                 // 4944\n           ' ' +                                                                                                  // 4945\n           braces[1];                                                                                             // 4946\n  }                                                                                                               // 4947\n                                                                                                                  // 4948\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];                                            // 4949\n}                                                                                                                 // 4950\n                                                                                                                  // 4951\nfunction isArray(ar) {                                                                                            // 4952\n  return Array.isArray(ar) ||                                                                                     // 4953\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');                                     // 4954\n}                                                                                                                 // 4955\n                                                                                                                  // 4956\nfunction isRegExp(re) {                                                                                           // 4957\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';                                      // 4958\n}                                                                                                                 // 4959\n                                                                                                                  // 4960\nfunction isDate(d) {                                                                                              // 4961\n  return typeof d === 'object' && objectToString(d) === '[object Date]';                                          // 4962\n}                                                                                                                 // 4963\n                                                                                                                  // 4964\nfunction isError(e) {                                                                                             // 4965\n  return typeof e === 'object' && objectToString(e) === '[object Error]';                                         // 4966\n}                                                                                                                 // 4967\n                                                                                                                  // 4968\nfunction objectToString(o) {                                                                                      // 4969\n  return Object.prototype.toString.call(o);                                                                       // 4970\n}                                                                                                                 // 4971\n                                                                                                                  // 4972\n});                                                                                                               // 4973\n                                                                                                                  // 4974\nrequire.register(\"chai/lib/chai/utils/objDisplay.js\", function (exports, module) {                                // 4975\n/*!                                                                                                               // 4976\n * Chai - flag utility                                                                                            // 4977\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 4978\n * MIT Licensed                                                                                                   // 4979\n */                                                                                                               // 4980\n                                                                                                                  // 4981\n/*!                                                                                                               // 4982\n * Module dependancies                                                                                            // 4983\n */                                                                                                               // 4984\n                                                                                                                  // 4985\nvar inspect = require('chai/lib/chai/utils/inspect.js');                                                          // 4986\nvar config = require('chai/lib/chai/config.js');                                                                  // 4987\n                                                                                                                  // 4988\n/**                                                                                                               // 4989\n * ### .objDisplay (object)                                                                                       // 4990\n *                                                                                                                // 4991\n * Determines if an object or an array matches                                                                    // 4992\n * criteria to be inspected in-line for error                                                                     // 4993\n * messages or should be truncated.                                                                               // 4994\n *                                                                                                                // 4995\n * @param {Mixed} javascript object to inspect                                                                    // 4996\n * @name objDisplay                                                                                               // 4997\n * @api public                                                                                                    // 4998\n */                                                                                                               // 4999\n                                                                                                                  // 5000\nmodule.exports = function (obj) {                                                                                 // 5001\n  var str = inspect(obj)                                                                                          // 5002\n    , type = Object.prototype.toString.call(obj);                                                                 // 5003\n                                                                                                                  // 5004\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {                                       // 5005\n    if (type === '[object Function]') {                                                                           // 5006\n      return !obj.name || obj.name === ''                                                                         // 5007\n        ? '[Function]'                                                                                            // 5008\n        : '[Function: ' + obj.name + ']';                                                                         // 5009\n    } else if (type === '[object Array]') {                                                                       // 5010\n      return '[ Array(' + obj.length + ') ]';                                                                     // 5011\n    } else if (type === '[object Object]') {                                                                      // 5012\n      var keys = Object.keys(obj)                                                                                 // 5013\n        , kstr = keys.length > 2                                                                                  // 5014\n          ? keys.splice(0, 2).join(', ') + ', ...'                                                                // 5015\n          : keys.join(', ');                                                                                      // 5016\n      return '{ Object (' + kstr + ') }';                                                                         // 5017\n    } else {                                                                                                      // 5018\n      return str;                                                                                                 // 5019\n    }                                                                                                             // 5020\n  } else {                                                                                                        // 5021\n    return str;                                                                                                   // 5022\n  }                                                                                                               // 5023\n};                                                                                                                // 5024\n                                                                                                                  // 5025\n});                                                                                                               // 5026\n                                                                                                                  // 5027\nrequire.register(\"chai/lib/chai/utils/overwriteMethod.js\", function (exports, module) {                           // 5028\n/*!                                                                                                               // 5029\n * Chai - overwriteMethod utility                                                                                 // 5030\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 5031\n * MIT Licensed                                                                                                   // 5032\n */                                                                                                               // 5033\n                                                                                                                  // 5034\n/**                                                                                                               // 5035\n * ### overwriteMethod (ctx, name, fn)                                                                            // 5036\n *                                                                                                                // 5037\n * Overwites an already existing method and provides                                                              // 5038\n * access to previous function. Must return function                                                              // 5039\n * to be used for name.                                                                                           // 5040\n *                                                                                                                // 5041\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {                               // 5042\n *       return function (str) {                                                                                  // 5043\n *         var obj = utils.flag(this, 'object');                                                                  // 5044\n *         if (obj instanceof Foo) {                                                                              // 5045\n *           new chai.Assertion(obj.value).to.equal(str);                                                         // 5046\n *         } else {                                                                                               // 5047\n *           _super.apply(this, arguments);                                                                       // 5048\n *         }                                                                                                      // 5049\n *       }                                                                                                        // 5050\n *     });                                                                                                        // 5051\n *                                                                                                                // 5052\n * Can also be accessed directly from `chai.Assertion`.                                                           // 5053\n *                                                                                                                // 5054\n *     chai.Assertion.overwriteMethod('foo', fn);                                                                 // 5055\n *                                                                                                                // 5056\n * Then can be used as any other assertion.                                                                       // 5057\n *                                                                                                                // 5058\n *     expect(myFoo).to.equal('bar');                                                                             // 5059\n *                                                                                                                // 5060\n * @param {Object} ctx object whose method is to be overwritten                                                   // 5061\n * @param {String} name of method to overwrite                                                                    // 5062\n * @param {Function} method function that returns a function to be used for name                                  // 5063\n * @name overwriteMethod                                                                                          // 5064\n * @api public                                                                                                    // 5065\n */                                                                                                               // 5066\n                                                                                                                  // 5067\nmodule.exports = function (ctx, name, method) {                                                                   // 5068\n  var _method = ctx[name]                                                                                         // 5069\n    , _super = function () { return this; };                                                                      // 5070\n                                                                                                                  // 5071\n  if (_method && 'function' === typeof _method)                                                                   // 5072\n    _super = _method;                                                                                             // 5073\n                                                                                                                  // 5074\n  ctx[name] = function () {                                                                                       // 5075\n    var result = method(_super).apply(this, arguments);                                                           // 5076\n    return result === undefined ? this : result;                                                                  // 5077\n  }                                                                                                               // 5078\n};                                                                                                                // 5079\n                                                                                                                  // 5080\n});                                                                                                               // 5081\n                                                                                                                  // 5082\nrequire.register(\"chai/lib/chai/utils/overwriteProperty.js\", function (exports, module) {                         // 5083\n/*!                                                                                                               // 5084\n * Chai - overwriteProperty utility                                                                               // 5085\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 5086\n * MIT Licensed                                                                                                   // 5087\n */                                                                                                               // 5088\n                                                                                                                  // 5089\n/**                                                                                                               // 5090\n * ### overwriteProperty (ctx, name, fn)                                                                          // 5091\n *                                                                                                                // 5092\n * Overwites an already existing property getter and provides                                                     // 5093\n * access to previous value. Must return function to use as getter.                                               // 5094\n *                                                                                                                // 5095\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {                                // 5096\n *       return function () {                                                                                     // 5097\n *         var obj = utils.flag(this, 'object');                                                                  // 5098\n *         if (obj instanceof Foo) {                                                                              // 5099\n *           new chai.Assertion(obj.name).to.equal('bar');                                                        // 5100\n *         } else {                                                                                               // 5101\n *           _super.call(this);                                                                                   // 5102\n *         }                                                                                                      // 5103\n *       }                                                                                                        // 5104\n *     });                                                                                                        // 5105\n *                                                                                                                // 5106\n *                                                                                                                // 5107\n * Can also be accessed directly from `chai.Assertion`.                                                           // 5108\n *                                                                                                                // 5109\n *     chai.Assertion.overwriteProperty('foo', fn);                                                               // 5110\n *                                                                                                                // 5111\n * Then can be used as any other assertion.                                                                       // 5112\n *                                                                                                                // 5113\n *     expect(myFoo).to.be.ok;                                                                                    // 5114\n *                                                                                                                // 5115\n * @param {Object} ctx object whose property is to be overwritten                                                 // 5116\n * @param {String} name of property to overwrite                                                                  // 5117\n * @param {Function} getter function that returns a getter function to be used for name                           // 5118\n * @name overwriteProperty                                                                                        // 5119\n * @api public                                                                                                    // 5120\n */                                                                                                               // 5121\n                                                                                                                  // 5122\nmodule.exports = function (ctx, name, getter) {                                                                   // 5123\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)                                                           // 5124\n    , _super = function () {};                                                                                    // 5125\n                                                                                                                  // 5126\n  if (_get && 'function' === typeof _get.get)                                                                     // 5127\n    _super = _get.get                                                                                             // 5128\n                                                                                                                  // 5129\n  Object.defineProperty(ctx, name,                                                                                // 5130\n    { get: function () {                                                                                          // 5131\n        var result = getter(_super).call(this);                                                                   // 5132\n        return result === undefined ? this : result;                                                              // 5133\n      }                                                                                                           // 5134\n    , configurable: true                                                                                          // 5135\n  });                                                                                                             // 5136\n};                                                                                                                // 5137\n                                                                                                                  // 5138\n});                                                                                                               // 5139\n                                                                                                                  // 5140\nrequire.register(\"chai/lib/chai/utils/overwriteChainableMethod.js\", function (exports, module) {                  // 5141\n/*!                                                                                                               // 5142\n * Chai - overwriteChainableMethod utility                                                                        // 5143\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 5144\n * MIT Licensed                                                                                                   // 5145\n */                                                                                                               // 5146\n                                                                                                                  // 5147\n/**                                                                                                               // 5148\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)                                             // 5149\n *                                                                                                                // 5150\n * Overwites an already existing chainable method                                                                 // 5151\n * and provides access to the previous function or                                                                // 5152\n * property.  Must return functions to be used for                                                                // 5153\n * name.                                                                                                          // 5154\n *                                                                                                                // 5155\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',                                         // 5156\n *       function (_super) {                                                                                      // 5157\n *       }                                                                                                        // 5158\n *     , function (_super) {                                                                                      // 5159\n *       }                                                                                                        // 5160\n *     );                                                                                                         // 5161\n *                                                                                                                // 5162\n * Can also be accessed directly from `chai.Assertion`.                                                           // 5163\n *                                                                                                                // 5164\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);                                                    // 5165\n *                                                                                                                // 5166\n * Then can be used as any other assertion.                                                                       // 5167\n *                                                                                                                // 5168\n *     expect(myFoo).to.have.length(3);                                                                           // 5169\n *     expect(myFoo).to.have.length.above(3);                                                                     // 5170\n *                                                                                                                // 5171\n * @param {Object} ctx object whose method / property is to be overwritten                                        // 5172\n * @param {String} name of method / property to overwrite                                                         // 5173\n * @param {Function} method function that returns a function to be used for name                                  // 5174\n * @param {Function} chainingBehavior function that returns a function to be used for property                    // 5175\n * @name overwriteChainableMethod                                                                                 // 5176\n * @api public                                                                                                    // 5177\n */                                                                                                               // 5178\n                                                                                                                  // 5179\nmodule.exports = function (ctx, name, method, chainingBehavior) {                                                 // 5180\n  var chainableBehavior = ctx.__methods[name];                                                                    // 5181\n                                                                                                                  // 5182\n  var _chainingBehavior = chainableBehavior.chainingBehavior;                                                     // 5183\n  chainableBehavior.chainingBehavior = function () {                                                              // 5184\n    var result = chainingBehavior(_chainingBehavior).call(this);                                                  // 5185\n    return result === undefined ? this : result;                                                                  // 5186\n  };                                                                                                              // 5187\n                                                                                                                  // 5188\n  var _method = chainableBehavior.method;                                                                         // 5189\n  chainableBehavior.method = function () {                                                                        // 5190\n    var result = method(_method).apply(this, arguments);                                                          // 5191\n    return result === undefined ? this : result;                                                                  // 5192\n  };                                                                                                              // 5193\n};                                                                                                                // 5194\n                                                                                                                  // 5195\n});                                                                                                               // 5196\n                                                                                                                  // 5197\nrequire.register(\"chai/lib/chai/utils/test.js\", function (exports, module) {                                      // 5198\n/*!                                                                                                               // 5199\n * Chai - test utility                                                                                            // 5200\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 5201\n * MIT Licensed                                                                                                   // 5202\n */                                                                                                               // 5203\n                                                                                                                  // 5204\n/*!                                                                                                               // 5205\n * Module dependancies                                                                                            // 5206\n */                                                                                                               // 5207\n                                                                                                                  // 5208\nvar flag = require('chai/lib/chai/utils/flag.js');                                                                // 5209\n                                                                                                                  // 5210\n/**                                                                                                               // 5211\n * # test(object, expression)                                                                                     // 5212\n *                                                                                                                // 5213\n * Test and object for expression.                                                                                // 5214\n *                                                                                                                // 5215\n * @param {Object} object (constructed Assertion)                                                                 // 5216\n * @param {Arguments} chai.Assertion.prototype.assert arguments                                                   // 5217\n */                                                                                                               // 5218\n                                                                                                                  // 5219\nmodule.exports = function (obj, args) {                                                                           // 5220\n  var negate = flag(obj, 'negate')                                                                                // 5221\n    , expr = args[0];                                                                                             // 5222\n  return negate ? !expr : expr;                                                                                   // 5223\n};                                                                                                                // 5224\n                                                                                                                  // 5225\n});                                                                                                               // 5226\n                                                                                                                  // 5227\nrequire.register(\"chai/lib/chai/utils/transferFlags.js\", function (exports, module) {                             // 5228\n/*!                                                                                                               // 5229\n * Chai - transferFlags utility                                                                                   // 5230\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 5231\n * MIT Licensed                                                                                                   // 5232\n */                                                                                                               // 5233\n                                                                                                                  // 5234\n/**                                                                                                               // 5235\n * ### transferFlags(assertion, object, includeAll = true)                                                        // 5236\n *                                                                                                                // 5237\n * Transfer all the flags for `assertion` to `object`. If                                                         // 5238\n * `includeAll` is set to `false`, then the base Chai                                                             // 5239\n * assertion flags (namely `object`, `ssfi`, and `message`)                                                       // 5240\n * will not be transferred.                                                                                       // 5241\n *                                                                                                                // 5242\n *                                                                                                                // 5243\n *     var newAssertion = new Assertion();                                                                        // 5244\n *     utils.transferFlags(assertion, newAssertion);                                                              // 5245\n *                                                                                                                // 5246\n *     var anotherAsseriton = new Assertion(myObj);                                                               // 5247\n *     utils.transferFlags(assertion, anotherAssertion, false);                                                   // 5248\n *                                                                                                                // 5249\n * @param {Assertion} assertion the assertion to transfer the flags from                                          // 5250\n * @param {Object} object the object to transfer the flags to; usually a new assertion                            // 5251\n * @param {Boolean} includeAll                                                                                    // 5252\n * @name transferFlags                                                                                            // 5253\n * @api private                                                                                                   // 5254\n */                                                                                                               // 5255\n                                                                                                                  // 5256\nmodule.exports = function (assertion, object, includeAll) {                                                       // 5257\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));                                     // 5258\n                                                                                                                  // 5259\n  if (!object.__flags) {                                                                                          // 5260\n    object.__flags = Object.create(null);                                                                         // 5261\n  }                                                                                                               // 5262\n                                                                                                                  // 5263\n  includeAll = arguments.length === 3 ? includeAll : true;                                                        // 5264\n                                                                                                                  // 5265\n  for (var flag in flags) {                                                                                       // 5266\n    if (includeAll ||                                                                                             // 5267\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {                                            // 5268\n      object.__flags[flag] = flags[flag];                                                                         // 5269\n    }                                                                                                             // 5270\n  }                                                                                                               // 5271\n};                                                                                                                // 5272\n                                                                                                                  // 5273\n});                                                                                                               // 5274\n                                                                                                                  // 5275\nrequire.register(\"chai/lib/chai/utils/type.js\", function (exports, module) {                                      // 5276\n/*!                                                                                                               // 5277\n * Chai - type utility                                                                                            // 5278\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>                                                    // 5279\n * MIT Licensed                                                                                                   // 5280\n */                                                                                                               // 5281\n                                                                                                                  // 5282\n/*!                                                                                                               // 5283\n * Detectable javascript natives                                                                                  // 5284\n */                                                                                                               // 5285\n                                                                                                                  // 5286\nvar natives = {                                                                                                   // 5287\n    '[object Arguments]': 'arguments'                                                                             // 5288\n  , '[object Array]': 'array'                                                                                     // 5289\n  , '[object Date]': 'date'                                                                                       // 5290\n  , '[object Function]': 'function'                                                                               // 5291\n  , '[object Number]': 'number'                                                                                   // 5292\n  , '[object RegExp]': 'regexp'                                                                                   // 5293\n  , '[object String]': 'string'                                                                                   // 5294\n};                                                                                                                // 5295\n                                                                                                                  // 5296\n/**                                                                                                               // 5297\n * ### type(object)                                                                                               // 5298\n *                                                                                                                // 5299\n * Better implementation of `typeof` detection that can                                                           // 5300\n * be used cross-browser. Handles the inconsistencies of                                                          // 5301\n * Array, `null`, and `undefined` detection.                                                                      // 5302\n *                                                                                                                // 5303\n *     utils.type({}) // 'object'                                                                                 // 5304\n *     utils.type(null) // `null'                                                                                 // 5305\n *     utils.type(undefined) // `undefined`                                                                       // 5306\n *     utils.type([]) // `array`                                                                                  // 5307\n *                                                                                                                // 5308\n * @param {Mixed} object to detect type of                                                                        // 5309\n * @name type                                                                                                     // 5310\n * @api private                                                                                                   // 5311\n */                                                                                                               // 5312\n                                                                                                                  // 5313\nmodule.exports = function (obj) {                                                                                 // 5314\n  var str = Object.prototype.toString.call(obj);                                                                  // 5315\n  if (natives[str]) return natives[str];                                                                          // 5316\n  if (obj === null) return 'null';                                                                                // 5317\n  if (obj === undefined) return 'undefined';                                                                      // 5318\n  if (obj === Object(obj)) return 'object';                                                                       // 5319\n  return typeof obj;                                                                                              // 5320\n};                                                                                                                // 5321\n                                                                                                                  // 5322\n});                                                                                                               // 5323\n                                                                                                                  // 5324\nchai = require(\"chai\");                                                                                           // 5325\n})()                                                                                                              // 5326\n                                                                                                                  // 5327\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/practicalmeteor:chai/chai-string-1.1.1.js                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n(function (plugin) {                                                                                              // 1\n  chai.use(plugin);                                                                                               // 2\n}(function (chai, utils) {                                                                                        // 3\n  chai.string = chai.string || {};                                                                                // 4\n                                                                                                                  // 5\n                                                                                                                  // 6\n  chai.string.startsWith = function (str, prefix) {                                                               // 7\n    return str.indexOf(prefix) === 0;                                                                             // 8\n  };                                                                                                              // 9\n                                                                                                                  // 10\n  chai.string.endsWith = function (str, suffix) {                                                                 // 11\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;                                                // 12\n  };                                                                                                              // 13\n                                                                                                                  // 14\n  chai.string.equalIgnoreCase = function (str1, str2) {                                                           // 15\n    return str1.toLowerCase() === str2.toLowerCase();                                                             // 16\n  };                                                                                                              // 17\n                                                                                                                  // 18\n  chai.string.singleLine = function(str) {                                                                        // 19\n    return str.trim().indexOf(\"\\n\") === -1;                                                                       // 20\n  };                                                                                                              // 21\n                                                                                                                  // 22\n  chai.string.reverseOf = function(str, reversed) {                                                               // 23\n    return str.split('').reverse().join('') === reversed;                                                         // 24\n  };                                                                                                              // 25\n                                                                                                                  // 26\n  chai.string.palindrome = function(str) {                                                                        // 27\n    var len = str.length;                                                                                         // 28\n    for ( var i = 0; i < Math.floor(len/2); i++ ) {                                                               // 29\n      if (str[i] !== str[len - 1 - i]) {                                                                          // 30\n        return false;                                                                                             // 31\n      }                                                                                                           // 32\n    }                                                                                                             // 33\n    return true;                                                                                                  // 34\n  };                                                                                                              // 35\n                                                                                                                  // 36\n  chai.string.entriesCount = function(str, substr, count) {                                                       // 37\n    var i = 0,                                                                                                    // 38\n      len = str.length,                                                                                           // 39\n      matches = 0;                                                                                                // 40\n    while (i < len) {                                                                                             // 41\n      var indx = str.indexOf(substr, i);                                                                          // 42\n      if (indx === -1) {                                                                                          // 43\n        break;                                                                                                    // 44\n      }                                                                                                           // 45\n      else {                                                                                                      // 46\n        matches++;                                                                                                // 47\n        i = indx + 1;                                                                                             // 48\n      }                                                                                                           // 49\n    }                                                                                                             // 50\n    return matches === count;                                                                                     // 51\n  };                                                                                                              // 52\n                                                                                                                  // 53\n  var startsWithMethodWrapper = function (expected) {                                                             // 54\n    var actual = this._obj;                                                                                       // 55\n                                                                                                                  // 56\n    return this.assert(                                                                                           // 57\n      chai.string.startsWith(actual, expected),                                                                   // 58\n      'expected ' + this._obj + ' to starts with ' + expected,                                                    // 59\n      'expected ' + this._obj + ' to not starts with ' + expected                                                 // 60\n    );                                                                                                            // 61\n  };                                                                                                              // 62\n                                                                                                                  // 63\n  chai.Assertion.addChainableMethod('startsWith', startsWithMethodWrapper);                                       // 64\n  chai.Assertion.addChainableMethod('startWith', startsWithMethodWrapper);                                        // 65\n                                                                                                                  // 66\n  var endsWithMethodWrapper = function (expected) {                                                               // 67\n    var actual = this._obj;                                                                                       // 68\n                                                                                                                  // 69\n    return this.assert(                                                                                           // 70\n      chai.string.endsWith(actual, expected),                                                                     // 71\n      'expected ' + this._obj + ' to ends with ' + expected,                                                      // 72\n      'expected ' + this._obj + ' to not ends with ' + expected                                                   // 73\n    );                                                                                                            // 74\n  };                                                                                                              // 75\n                                                                                                                  // 76\n  chai.Assertion.addChainableMethod('endsWith', endsWithMethodWrapper);                                           // 77\n  chai.Assertion.addChainableMethod('endWith', endsWithMethodWrapper);                                            // 78\n                                                                                                                  // 79\n  chai.Assertion.addChainableMethod('equalIgnoreCase', function (expected) {                                      // 80\n    var actual = this._obj;                                                                                       // 81\n                                                                                                                  // 82\n    return this.assert(                                                                                           // 83\n      chai.string.equalIgnoreCase(actual, expected),                                                              // 84\n      'expected ' + this._obj + ' to be equal to ' + expected + ' ignoring case',                                 // 85\n      'expected ' + this._obj + ' to be not equal to ' + expected + ' ignoring case'                              // 86\n    );                                                                                                            // 87\n  });                                                                                                             // 88\n                                                                                                                  // 89\n  chai.Assertion.addChainableMethod('singleLine', function () {                                                   // 90\n    var actual = this._obj;                                                                                       // 91\n                                                                                                                  // 92\n    return this.assert(                                                                                           // 93\n      chai.string.singleLine(actual),                                                                             // 94\n      'expected ' + this._obj + ' to be single line',                                                             // 95\n      'expected ' + this._obj + ' to be not single line'                                                          // 96\n    );                                                                                                            // 97\n  });                                                                                                             // 98\n                                                                                                                  // 99\n  chai.Assertion.addChainableMethod('reverseOf', function(expected) {                                             // 100\n    var actual = this._obj;                                                                                       // 101\n                                                                                                                  // 102\n    return this.assert(                                                                                           // 103\n      chai.string.reverseOf(actual, expected),                                                                    // 104\n      'expected ' + this._obj + ' to be reverse of ' + expected,                                                  // 105\n      'expected ' + this._obj + ' to be not reverse of ' + expected                                               // 106\n    );                                                                                                            // 107\n  });                                                                                                             // 108\n                                                                                                                  // 109\n  chai.Assertion.addChainableMethod('palindrome', function () {                                                   // 110\n    var actual = this._obj;                                                                                       // 111\n                                                                                                                  // 112\n    return this.assert(                                                                                           // 113\n      chai.string.palindrome(actual),                                                                             // 114\n      'expected ' + this._obj + ' to be palindrome',                                                              // 115\n      'expected ' + this._obj + ' to be not palindrome'                                                           // 116\n    );                                                                                                            // 117\n  });                                                                                                             // 118\n                                                                                                                  // 119\n  chai.Assertion.addChainableMethod('entriesCount', function(substr, expected) {                                  // 120\n    var actual = this._obj;                                                                                       // 121\n                                                                                                                  // 122\n    return this.assert(                                                                                           // 123\n      chai.string.entriesCount(actual, substr, expected),                                                         // 124\n      'expected ' + this._obj + ' to have ' + substr + ' ' + expected + ' time(s)',                               // 125\n      'expected ' + this._obj + ' to not have ' + substr + ' ' + expected + ' time(s)'                            // 126\n    );                                                                                                            // 127\n  });                                                                                                             // 128\n                                                                                                                  // 129\n  // Asserts                                                                                                      // 130\n  var assert = chai.assert;                                                                                       // 131\n                                                                                                                  // 132\n  assert.startsWith = function (val, exp, msg) {                                                                  // 133\n    new chai.Assertion(val, msg).to.startsWith(exp);                                                              // 134\n  };                                                                                                              // 135\n                                                                                                                  // 136\n  assert.notStartsWith = function (val, exp, msg) {                                                               // 137\n    new chai.Assertion(val, msg).to.not.startsWith(exp);                                                          // 138\n  };                                                                                                              // 139\n                                                                                                                  // 140\n  assert.endsWith = function (val, exp, msg) {                                                                    // 141\n    new chai.Assertion(val, msg).to.endsWith(exp);                                                                // 142\n  };                                                                                                              // 143\n                                                                                                                  // 144\n  assert.notEndsWith = function (val, exp, msg) {                                                                 // 145\n    new chai.Assertion(val, msg).to.not.endsWith(exp);                                                            // 146\n  };                                                                                                              // 147\n                                                                                                                  // 148\n  assert.equalIgnoreCase = function (val, exp, msg) {                                                             // 149\n    new chai.Assertion(val, msg).to.be.equalIgnoreCase(exp);                                                      // 150\n  };                                                                                                              // 151\n                                                                                                                  // 152\n  assert.notEqualIgnoreCase = function (val, exp, msg) {                                                          // 153\n    new chai.Assertion(val, msg).to.not.be.equalIgnoreCase(exp);                                                  // 154\n  };                                                                                                              // 155\n                                                                                                                  // 156\n  assert.singleLine = function(val, exp, msg) {                                                                   // 157\n    new chai.Assertion(val, msg).to.be.singleLine();                                                              // 158\n  };                                                                                                              // 159\n                                                                                                                  // 160\n  assert.notSingleLine = function(val, exp, msg) {                                                                // 161\n    new chai.Assertion(val, msg).to.not.be.singleLine();                                                          // 162\n  };                                                                                                              // 163\n                                                                                                                  // 164\n  assert.reverseOf = function(val, exp, msg) {                                                                    // 165\n    new chai.Assertion(val, msg).to.be.reverseOf(exp);                                                            // 166\n  };                                                                                                              // 167\n                                                                                                                  // 168\n  assert.notReverseOf = function(val, exp, msg) {                                                                 // 169\n    new chai.Assertion(val, msg).to.not.be.reverseOf(exp);                                                        // 170\n  };                                                                                                              // 171\n                                                                                                                  // 172\n  assert.palindrome = function(val, exp, msg) {                                                                   // 173\n    new chai.Assertion(val, msg).to.be.palindrome();                                                              // 174\n  };                                                                                                              // 175\n                                                                                                                  // 176\n  assert.notPalindrome = function(val, exp, msg) {                                                                // 177\n    new chai.Assertion(val, msg).to.not.be.palindrome();                                                          // 178\n  };                                                                                                              // 179\n                                                                                                                  // 180\n  assert.entriesCount = function(str, substr, count, msg) {                                                       // 181\n    new chai.Assertion(str, msg).to.have.entriesCount(substr, count);                                             // 182\n  }                                                                                                               // 183\n                                                                                                                  // 184\n}));                                                                                                              // 185\n                                                                                                                  // 186\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/practicalmeteor:chai/config.coffee.js                                                                 //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar _ref, _ref1, _ref2, _ref3, _ref4;\n\nif (Meteor.isServer) {\n  chai.config.includeStack = ((_ref = Meteor.settings) != null ? (_ref1 = _ref.chai) != null ? _ref1.includeStack : void 0 : void 0) || true;\n} else {\n  chai.config.includeStack = ((_ref2 = Meteor.settings) != null ? (_ref3 = _ref2[\"public\"]) != null ? (_ref4 = _ref3.chai) != null ? _ref4.includeStack : void 0 : void 0 : void 0) || true;\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/practicalmeteor:chai/exports.js                                                                       //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nassert = chai.assert;                                                                                             // 1\nexpect = chai.expect;                                                                                             // 2\nshould = chai.should;                                                                                             // 3\n                                                                                                                  // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['practicalmeteor:chai'] = {}, {\n  chai: chai,\n  assert: assert,\n  expect: expect,\n  should: should\n});\n\n})();\n","servePath":"/packages/practicalmeteor_chai.js"}]