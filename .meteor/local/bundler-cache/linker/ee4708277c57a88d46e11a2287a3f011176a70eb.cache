[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\n\n/* Package-scope variables */\nvar Log, exports;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"logging\":{\"logging.js\":[\"cli-color\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/logging/logging.js                                                         //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nLog = function () {                                                                    // 1\n  return Log.info.apply(this, arguments);                                              // 2\n};                                                                                     // 3\n                                                                                       // 4\n/// FOR TESTING                                                                        // 5\nvar intercept = 0;                                                                     // 6\nvar interceptedLines = [];                                                             // 7\nvar suppress = 0;                                                                      // 8\n                                                                                       // 9\n// Intercept the next 'count' calls to a Log function. The actual                      // 10\n// lines printed to the console can be cleared and read by calling                     // 11\n// Log._intercepted().                                                                 // 12\nLog._intercept = function (count) {                                                    // 13\n  intercept += count;                                                                  // 14\n};                                                                                     // 15\n                                                                                       // 16\n// Suppress the next 'count' calls to a Log function. Use this to stop                 // 17\n// tests from spamming the console, especially with red errors that                    // 18\n// might look like a failing test.                                                     // 19\nLog._suppress = function (count) {                                                     // 20\n  suppress += count;                                                                   // 21\n};                                                                                     // 22\n                                                                                       // 23\n// Returns intercepted lines and resets the intercept counter.                         // 24\nLog._intercepted = function () {                                                       // 25\n  var lines = interceptedLines;                                                        // 26\n  interceptedLines = [];                                                               // 27\n  intercept = 0;                                                                       // 28\n  return lines;                                                                        // 29\n};                                                                                     // 30\n                                                                                       // 31\n// Either 'json' or 'colored-text'.                                                    // 32\n//                                                                                     // 33\n// When this is set to 'json', print JSON documents that are parsed by another         // 34\n// process ('satellite' or 'meteor run'). This other process should call               // 35\n// 'Log.format' for nice output.                                                       // 36\n//                                                                                     // 37\n// When this is set to 'colored-text', call 'Log.format' before printing.              // 38\n// This should be used for logging from within satellite, since there is no            // 39\n// other process that will be reading its standard output.                             // 40\nLog.outputFormat = 'json';                                                             // 41\n                                                                                       // 42\nvar LEVEL_COLORS = {                                                                   // 43\n  debug: 'green',                                                                      // 44\n  // leave info as the default color                                                   // 45\n  warn: 'magenta',                                                                     // 46\n  error: 'red'                                                                         // 47\n};                                                                                     // 48\n                                                                                       // 49\nvar META_COLOR = 'blue';                                                               // 50\n                                                                                       // 51\n// XXX package                                                                         // 52\nvar RESTRICTED_KEYS = ['time', 'timeInexact', 'level', 'file', 'line',                 // 53\n                        'program', 'originApp', 'satellite', 'stderr'];                // 54\n                                                                                       // 55\nvar FORMATTED_KEYS = RESTRICTED_KEYS.concat(['app', 'message']);                       // 56\n                                                                                       // 57\nvar logInBrowser = function (obj) {                                                    // 58\n  var str = Log.format(obj);                                                           // 59\n                                                                                       // 60\n  // XXX Some levels should be probably be sent to the server                          // 61\n  var level = obj.level;                                                               // 62\n                                                                                       // 63\n  if ((typeof console !== 'undefined') && console[level]) {                            // 64\n    console[level](str);                                                               // 65\n  } else {                                                                             // 66\n    // XXX Uses of Meteor._debug should probably be replaced by Log.debug or           // 67\n    //     Log.info, and we should have another name for \"do your best to              // 68\n    //     call call console.log\".                                                     // 69\n    Meteor._debug(str);                                                                // 70\n  }                                                                                    // 71\n};                                                                                     // 72\n                                                                                       // 73\n// @returns {Object: { line: Number, file: String }}                                   // 74\nLog._getCallerDetails = function () {                                                  // 75\n  var getStack = function () {                                                         // 76\n    // We do NOT use Error.prepareStackTrace here (a V8 extension that gets us a       // 77\n    // pre-parsed stack) since it's impossible to compose it with the use of           // 78\n    // Error.prepareStackTrace used on the server for source maps.                     // 79\n    var err = new Error;                                                               // 80\n    var stack = err.stack;                                                             // 81\n    return stack;                                                                      // 82\n  };                                                                                   // 83\n                                                                                       // 84\n  var stack = getStack();                                                              // 85\n                                                                                       // 86\n  if (!stack) return {};                                                               // 87\n                                                                                       // 88\n  var lines = stack.split('\\n');                                                       // 89\n                                                                                       // 90\n  // looking for the first line outside the logging package (or an                     // 91\n  // eval if we find that first)                                                       // 92\n  var line;                                                                            // 93\n  for (var i = 1; i < lines.length; ++i) {                                             // 94\n    line = lines[i];                                                                   // 95\n    if (line.match(/^\\s*at eval \\(eval/)) {                                            // 96\n      return {file: \"eval\"};                                                           // 97\n    }                                                                                  // 98\n                                                                                       // 99\n    if (!line.match(/packages\\/(?:local-test[:_])?logging(?:\\/|\\.js)/))                // 100\n      break;                                                                           // 101\n  }                                                                                    // 102\n                                                                                       // 103\n  var details = {};                                                                    // 104\n                                                                                       // 105\n  // The format for FF is 'functionName@filePath:lineNumber'                           // 106\n  // The format for V8 is 'functionName (packages/logging/logging.js:81)' or           // 107\n  //                      'packages/logging/logging.js:81'                             // 108\n  var match = /(?:[@(]| at )([^(]+?):([0-9:]+)(?:\\)|$)/.exec(line);                    // 109\n  if (!match)                                                                          // 110\n    return details;                                                                    // 111\n  // in case the matched block here is line:column                                     // 112\n  details.line = match[2].split(':')[0];                                               // 113\n                                                                                       // 114\n  // Possible format: https://foo.bar.com/scripts/file.js?random=foobar                // 115\n  // XXX: if you can write the following in better way, please do it                   // 116\n  // XXX: what about evals?                                                            // 117\n  details.file = match[1].split('/').slice(-1)[0].split('?')[0];                       // 118\n                                                                                       // 119\n  return details;                                                                      // 120\n};                                                                                     // 121\n                                                                                       // 122\n_.each(['debug', 'info', 'warn', 'error'], function (level) {                          // 123\n  // @param arg {String|Object}                                                        // 124\n  Log[level] = function (arg) {                                                        // 125\n    if (suppress) {                                                                    // 126\n      suppress--;                                                                      // 127\n      return;                                                                          // 128\n    }                                                                                  // 129\n                                                                                       // 130\n    var intercepted = false;                                                           // 131\n    if (intercept) {                                                                   // 132\n      intercept--;                                                                     // 133\n      intercepted = true;                                                              // 134\n    }                                                                                  // 135\n                                                                                       // 136\n    var obj = (_.isObject(arg) && !_.isRegExp(arg) && !_.isDate(arg) ) ?               // 137\n              arg : {message: new String(arg).toString() };                            // 138\n                                                                                       // 139\n    _.each(RESTRICTED_KEYS, function (key) {                                           // 140\n      if (obj[key])                                                                    // 141\n        throw new Error(\"Can't set '\" + key + \"' in log message\");                     // 142\n    });                                                                                // 143\n                                                                                       // 144\n    if (_.has(obj, 'message') && !_.isString(obj.message))                             // 145\n      throw new Error(\"The 'message' field in log objects must be a string\");          // 146\n    if (!obj.omitCallerDetails)                                                        // 147\n      obj = _.extend(Log._getCallerDetails(), obj);                                    // 148\n    obj.time = new Date();                                                             // 149\n    obj.level = level;                                                                 // 150\n                                                                                       // 151\n    // XXX allow you to enable 'debug', probably per-package                           // 152\n    if (level === 'debug')                                                             // 153\n      return;                                                                          // 154\n                                                                                       // 155\n    if (intercepted) {                                                                 // 156\n      interceptedLines.push(EJSON.stringify(obj));                                     // 157\n    } else if (Meteor.isServer) {                                                      // 158\n      if (Log.outputFormat === 'colored-text') {                                       // 159\n        console.log(Log.format(obj, {color: true}));                                   // 160\n      } else if (Log.outputFormat === 'json') {                                        // 161\n        console.log(EJSON.stringify(obj));                                             // 162\n      } else {                                                                         // 163\n        throw new Error(\"Unknown logging output format: \" + Log.outputFormat);         // 164\n      }                                                                                // 165\n    } else {                                                                           // 166\n      logInBrowser(obj);                                                               // 167\n    }                                                                                  // 168\n  };                                                                                   // 169\n});                                                                                    // 170\n                                                                                       // 171\n// tries to parse line as EJSON. returns object if parse is successful, or null if not\nLog.parse = function (line) {                                                          // 173\n  var obj = null;                                                                      // 174\n  if (line && line.charAt(0) === '{') { // might be json generated from calling 'Log'  // 175\n    try { obj = EJSON.parse(line); } catch (e) {}                                      // 176\n  }                                                                                    // 177\n                                                                                       // 178\n  // XXX should probably check fields other than 'time'                                // 179\n  if (obj && obj.time && (obj.time instanceof Date))                                   // 180\n    return obj;                                                                        // 181\n  else                                                                                 // 182\n    return null;                                                                       // 183\n};                                                                                     // 184\n                                                                                       // 185\n// formats a log object into colored human and machine-readable text                   // 186\nLog.format = function (obj, options) {                                                 // 187\n  obj = EJSON.clone(obj); // don't mutate the argument                                 // 188\n  options = options || {};                                                             // 189\n                                                                                       // 190\n  var time = obj.time;                                                                 // 191\n  if (!(time instanceof Date))                                                         // 192\n    throw new Error(\"'time' must be a Date object\");                                   // 193\n  var timeInexact = obj.timeInexact;                                                   // 194\n                                                                                       // 195\n  // store fields that are in FORMATTED_KEYS since we strip them                       // 196\n  var level = obj.level || 'info';                                                     // 197\n  var file = obj.file;                                                                 // 198\n  var lineNumber = obj.line;                                                           // 199\n  var appName = obj.app || '';                                                         // 200\n  var originApp = obj.originApp;                                                       // 201\n  var message = obj.message || '';                                                     // 202\n  var program = obj.program || '';                                                     // 203\n  var satellite = obj.satellite;                                                       // 204\n  var stderr = obj.stderr || '';                                                       // 205\n                                                                                       // 206\n  _.each(FORMATTED_KEYS, function(key) {                                               // 207\n    delete obj[key];                                                                   // 208\n  });                                                                                  // 209\n                                                                                       // 210\n  if (!_.isEmpty(obj)) {                                                               // 211\n    if (message) message += \" \";                                                       // 212\n    message += EJSON.stringify(obj);                                                   // 213\n  }                                                                                    // 214\n                                                                                       // 215\n  var pad2 = function(n) { return n < 10 ? '0' + n : n.toString(); };                  // 216\n  var pad3 = function(n) { return n < 100 ? '0' + pad2(n) : n.toString(); };           // 217\n                                                                                       // 218\n  var dateStamp = time.getFullYear().toString() +                                      // 219\n    pad2(time.getMonth() + 1 /*0-based*/) +                                            // 220\n    pad2(time.getDate());                                                              // 221\n  var timeStamp = pad2(time.getHours()) +                                              // 222\n        ':' +                                                                          // 223\n        pad2(time.getMinutes()) +                                                      // 224\n        ':' +                                                                          // 225\n        pad2(time.getSeconds()) +                                                      // 226\n        '.' +                                                                          // 227\n        pad3(time.getMilliseconds());                                                  // 228\n                                                                                       // 229\n  // eg in San Francisco in June this will be '(-7)'                                   // 230\n  var utcOffsetStr = '(' + (-(new Date().getTimezoneOffset() / 60)) + ')';             // 231\n                                                                                       // 232\n  var appInfo = '';                                                                    // 233\n  if (appName) appInfo += appName;                                                     // 234\n  if (originApp && originApp !== appName) appInfo += ' via ' + originApp;              // 235\n  if (appInfo) appInfo = '[' + appInfo + '] ';                                         // 236\n                                                                                       // 237\n  var sourceInfoParts = [];                                                            // 238\n  if (program) sourceInfoParts.push(program);                                          // 239\n  if (file) sourceInfoParts.push(file);                                                // 240\n  if (lineNumber) sourceInfoParts.push(lineNumber);                                    // 241\n  var sourceInfo = _.isEmpty(sourceInfoParts) ?                                        // 242\n    '' : '(' + sourceInfoParts.join(':') + ') ';                                       // 243\n                                                                                       // 244\n  if (satellite)                                                                       // 245\n    sourceInfo += ['[', satellite, ']'].join('');                                      // 246\n                                                                                       // 247\n  var stderrIndicator = stderr ? '(STDERR) ' : '';                                     // 248\n                                                                                       // 249\n  var metaPrefix = [                                                                   // 250\n    level.charAt(0).toUpperCase(),                                                     // 251\n    dateStamp,                                                                         // 252\n    '-',                                                                               // 253\n    timeStamp,                                                                         // 254\n    utcOffsetStr,                                                                      // 255\n    timeInexact ? '? ' : ' ',                                                          // 256\n    appInfo,                                                                           // 257\n    sourceInfo,                                                                        // 258\n    stderrIndicator].join('');                                                         // 259\n                                                                                       // 260\n  var prettify = function (line, color) {                                              // 261\n    return (options.color && Meteor.isServer && color) ?                               // 262\n      require('cli-color')[color](line) : line;                                        // 263\n  };                                                                                   // 264\n                                                                                       // 265\n  return prettify(metaPrefix, options.metaColor || META_COLOR) +                       // 266\n    prettify(message, LEVEL_COLORS[level]);                                            // 267\n};                                                                                     // 268\n                                                                                       // 269\n// Turn a line of text into a loggable object.                                         // 270\n// @param line {String}                                                                // 271\n// @param override {Object}                                                            // 272\nLog.objFromText = function (line, override) {                                          // 273\n  var obj = {message: line, level: \"info\", time: new Date(), timeInexact: true};       // 274\n  return _.extend(obj, override);                                                      // 275\n};                                                                                     // 276\n                                                                                       // 277\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"cli-color\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// ../../.1.1.17.6xtim6++os+web.browser+web.cordova/npm/node_modules/cli-color/package //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nexports.name = \"cli-color\";                                                            // 1\nexports.version = \"0.2.3\";                                                             // 2\nexports.main = \"lib\";                                                                  // 3\n                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"index.js\":[\"es5-ext/lib/Object/descriptor\",\"es5-ext/lib/Object/extend\",\"es5-ext/lib/Object/map\",\"es5-ext/lib/Object/reduce\",\"es5-ext/lib/String/prototype/repeat\",\"memoizee\",\"tty\",\"./_xterm-match\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/lib/index.js                     //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar d       = require('es5-ext/lib/Object/descriptor')                                 // 3\n  , extend  = require('es5-ext/lib/Object/extend')                                     // 4\n  , map     = require('es5-ext/lib/Object/map')                                        // 5\n  , reduce  = require('es5-ext/lib/Object/reduce')                                     // 6\n  , repeat  = require('es5-ext/lib/String/prototype/repeat')                           // 7\n  , memoize = require('memoizee')                                                      // 8\n  , tty     = require('tty')                                                           // 9\n                                                                                       // 10\n  , join = Array.prototype.join, defineProperty = Object.defineProperty                // 11\n  , defineProperties = Object.defineProperties, abs = Math.abs                         // 12\n  , floor = Math.floor, max = Math.max, min = Math.min                                 // 13\n                                                                                       // 14\n  , mods, proto, getFn, getMove, xtermMatch                                            // 15\n  , up, down, right, left, getHeight, memoized;                                        // 16\n                                                                                       // 17\nmods = extend({                                                                        // 18\n\t// Style                                                                              // 19\n\tbold:      { _bold: [1, 22] },                                                        // 20\n\titalic:    { _italic: [3, 23] },                                                      // 21\n\tunderline: { _underline: [4, 24] },                                                   // 22\n\tblink:     { _blink: [5, 25] },                                                       // 23\n\tinverse:   { _inverse: [7, 27] },                                                     // 24\n\tstrike:    { _strike: [9, 29] }                                                       // 25\n},                                                                                     // 26\n                                                                                       // 27\n\t// Color                                                                              // 28\n\t['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']               // 29\n\t\t.reduce(function (obj, color, index) {                                               // 30\n\t\t// foreground                                                                        // 31\n\t\tobj[color] = { _fg: [30 + index, 39] };                                              // 32\n\t\tobj[color + 'Bright'] = { _fg: [90 + index, 39] };                                   // 33\n                                                                                       // 34\n\t\t// background                                                                        // 35\n\t\tobj['bg' + color[0].toUpperCase() + color.slice(1)] =                                // 36\n\t\t\t{ _bg: [40 + index, 49] };                                                          // 37\n\t\tobj['bg' + color[0].toUpperCase() + color.slice(1) + 'Bright'] =                     // 38\n\t\t\t{ _bg: [100 + index, 49] };                                                         // 39\n                                                                                       // 40\n\t\treturn obj;                                                                          // 41\n\t}, {}));                                                                              // 42\n                                                                                       // 43\n// Some use cli-color as: console.log(clc.red('Error!'));                              // 44\n// Which is inefficient as on each call it configures new clc object                   // 45\n// with memoization we reuse once created object                                       // 46\nmemoized = memoize(function (scope, mod) {                                             // 47\n\treturn defineProperty(getFn(), '_cliColorData',                                       // 48\n\t\td(extend({}, scope._cliColorData, mod)));                                            // 49\n});                                                                                    // 50\n                                                                                       // 51\nproto = Object.create(Function.prototype, extend(map(mods, function (mod) {            // 52\n\treturn d.gs(function () { return memoized(this, mod); });                             // 53\n}), {                                                                                  // 54\n\t// xterm (255) color                                                                  // 55\n\txterm: d(memoize(function (code) {                                                    // 56\n\t\tcode = isNaN(code) ? 255 : min(max(code, 0), 255);                                   // 57\n\t\treturn defineProperty(getFn(), '_cliColorData',                                      // 58\n\t\t\td(extend({}, this._cliColorData, {                                                  // 59\n\t\t\t\t_fg: [xtermMatch ? xtermMatch[code] : ('38;5;' + code), 39]                        // 60\n\t\t\t})));                                                                               // 61\n\t}, { method: 'xterm' })),                                                             // 62\n\tbgXterm: d(memoize(function (code) {                                                  // 63\n\t\tcode = isNaN(code) ? 255 : min(max(code, 0), 255);                                   // 64\n\t\treturn defineProperty(getFn(), '_cliColorData',                                      // 65\n\t\t\td(extend({}, this._cliColorData, {                                                  // 66\n\t\t\t\t_bg: [xtermMatch ? (xtermMatch[code] + 10) : ('48;5;' + code), 49]                 // 67\n\t\t\t})));                                                                               // 68\n\t}, { method: 'bgXterm' }))                                                            // 69\n}));                                                                                   // 70\n                                                                                       // 71\nif (process.platform === 'win32') {                                                    // 72\n\txtermMatch = require('./_xterm-match');                                               // 73\n}                                                                                      // 74\n                                                                                       // 75\ngetFn = function () {                                                                  // 76\n\tvar fn = function (/*…msg*/) {                                                        // 77\n\t\tvar data = fn._cliColorData, close = '';                                             // 78\n\t\treturn reduce(data, function (str, mod) {                                            // 79\n\t\t\tclose = '\\x1b[' + mod[1] + 'm' + close;                                             // 80\n\t\t\treturn str + '\\x1b[' + mod[0] + 'm';                                                // 81\n\t\t}, '', true) + join.call(arguments, ' ') + close;                                    // 82\n\t};                                                                                    // 83\n\tfn.__proto__ = proto;                                                                 // 84\n\treturn fn;                                                                            // 85\n};                                                                                     // 86\n                                                                                       // 87\ngetMove = function (control) {                                                         // 88\n\treturn function (num) {                                                               // 89\n\t\tnum = isNaN(num) ? 0 : max(floor(num), 0);                                           // 90\n\t\treturn num ? ('\\x1b[' + num + control) : '';                                         // 91\n\t};                                                                                    // 92\n};                                                                                     // 93\n                                                                                       // 94\nmodule.exports = defineProperties(getFn(), {                                           // 95\n\twidth: d.gs(process.stdout.getWindowSize ? function () {                              // 96\n\t\treturn process.stdout.getWindowSize()[0];                                            // 97\n\t} : function () {                                                                     // 98\n\t\treturn tty.getWindowSize ? tty.getWindowSize()[1] : 0;                               // 99\n\t}),                                                                                   // 100\n\theight: d.gs(getHeight = process.stdout.getWindowSize ? function () {                 // 101\n\t\treturn process.stdout.getWindowSize()[1];                                            // 102\n\t} : function () {                                                                     // 103\n\t\treturn tty.getWindowSize ? tty.getWindowSize()[0] : 0;                               // 104\n\t}),                                                                                   // 105\n\treset: d.gs(function () {                                                             // 106\n\t\treturn repeat.call('\\n', getHeight() - 1) + '\\x1bc';                                 // 107\n\t}),                                                                                   // 108\n\tup: d(up = getMove('A')),                                                             // 109\n\tdown: d(down = getMove('B')),                                                         // 110\n\tright: d(right = getMove('C')),                                                       // 111\n\tleft: d(left = getMove('D')),                                                         // 112\n\tmove: d(function (x, y) {                                                             // 113\n\t\tx = isNaN(x) ? 0 : floor(x);                                                         // 114\n\t\ty = isNaN(y) ? 0 : floor(y);                                                         // 115\n\t\treturn ((x > 0) ? right(x) : left(-x)) + ((y > 0) ? down(y) : up(-y));               // 116\n\t}),                                                                                   // 117\n\tmoveTo: d(function (x, y) {                                                           // 118\n\t\tx = isNaN(x) ? 1 : (max(floor(x), 0) + 1);                                           // 119\n\t\ty = isNaN(y) ? 1 : (max(floor(y), 0) + 1);                                           // 120\n\t\treturn '\\x1b[' + y + ';' + x + 'H';                                                  // 121\n\t}),                                                                                   // 122\n\tbol: d(function (n/*, erase*/) {                                                      // 123\n\t\tvar dir;                                                                             // 124\n\t\tn = isNaN(n) ? 0 : Number(n);                                                        // 125\n\t\tdir = (n >= 0) ? 'E' : 'F';                                                          // 126\n\t\tn = floor(abs(n));                                                                   // 127\n\t\treturn arguments[1] ?                                                                // 128\n\t\t\t\t(((!n || (dir === 'F')) ? '\\x1b[0E\\x1bK' : '') +                                   // 129\n\t\t\t\t\trepeat.call('\\x1b[1' + dir + '\\x1b[K', n)) : '\\x1b[' + n + dir;                   // 130\n\t}),                                                                                   // 131\n\tbeep: d('\\x07'),                                                                      // 132\n\txtermSupported: d(!xtermMatch),                                                       // 133\n\t_cliColorData: d({})                                                                  // 134\n});                                                                                    // 135\n                                                                                       // 136\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_xterm-match.js\":[\"./_xterm-colors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/lib/_xterm-match.js              //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar push = Array.prototype.push, reduce = Array.prototype.reduce, abs = Math.abs       // 3\n  , colors, match, result, i;                                                          // 4\n                                                                                       // 5\ncolors = require('./_xterm-colors').map(function (color) {                             // 6\n\treturn {                                                                              // 7\n\t\tr: parseInt(color.slice(0, 2), 16),                                                  // 8\n\t\tg: parseInt(color.slice(2, 4), 16),                                                  // 9\n\t\tb: parseInt(color.slice(4), 16)                                                      // 10\n\t};                                                                                    // 11\n});                                                                                    // 12\n                                                                                       // 13\nmatch = colors.slice(0, 16);                                                           // 14\n                                                                                       // 15\nmodule.exports = result = [];                                                          // 16\n                                                                                       // 17\ni = 0;                                                                                 // 18\nwhile (i < 8) {                                                                        // 19\n\tresult.push(30 + i++);                                                                // 20\n}                                                                                      // 21\ni = 0;                                                                                 // 22\nwhile (i < 8) {                                                                        // 23\n\tresult.push(90 + i++);                                                                // 24\n}                                                                                      // 25\npush.apply(result, colors.slice(16).map(function (data) {                              // 26\n\tvar index, diff = Infinity;                                                           // 27\n\tmatch.every(function (match, i) {                                                     // 28\n\t\tvar ndiff = reduce.call('rgb', function (diff, channel) {                            // 29\n\t\t\treturn (diff += abs(match[channel] - data[channel]));                               // 30\n\t\t}, 0);                                                                               // 31\n\t\tif (ndiff < diff) {                                                                  // 32\n\t\t\tindex = i;                                                                          // 33\n\t\t\tdiff = ndiff;                                                                       // 34\n\t\t}                                                                                    // 35\n\t\treturn ndiff;                                                                        // 36\n\t});                                                                                   // 37\n\treturn result[index];                                                                 // 38\n}));                                                                                   // 39\n                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_xterm-colors.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/lib/_xterm-colors.js             //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nmodule.exports = [                                                                     // 3\n\t\"000000\", \"800000\", \"008000\", \"808000\", \"000080\", \"800080\", \"008080\", \"c0c0c0\",       // 4\n\t\"808080\", \"ff0000\", \"00ff00\", \"ffff00\", \"0000ff\", \"ff00ff\", \"00ffff\", \"ffffff\",       // 5\n                                                                                       // 6\n\t\"000000\", \"00005f\", \"000087\", \"0000af\", \"0000d7\", \"0000ff\",                           // 7\n\t\"005f00\", \"005f5f\", \"005f87\", \"005faf\", \"005fd7\", \"005fff\",                           // 8\n\t\"008700\", \"00875f\", \"008787\", \"0087af\", \"0087d7\", \"0087ff\",                           // 9\n\t\"00af00\", \"00af5f\", \"00af87\", \"00afaf\", \"00afd7\", \"00afff\",                           // 10\n\t\"00d700\", \"00d75f\", \"00d787\", \"00d7af\", \"00d7d7\", \"00d7ff\",                           // 11\n\t\"00ff00\", \"00ff5f\", \"00ff87\", \"00ffaf\", \"00ffd7\", \"00ffff\",                           // 12\n                                                                                       // 13\n\t\"5f0000\", \"5f005f\", \"5f0087\", \"5f00af\", \"5f00d7\", \"5f00ff\",                           // 14\n\t\"5f5f00\", \"5f5f5f\", \"5f5f87\", \"5f5faf\", \"5f5fd7\", \"5f5fff\",                           // 15\n\t\"5f8700\", \"5f875f\", \"5f8787\", \"5f87af\", \"5f87d7\", \"5f87ff\",                           // 16\n\t\"5faf00\", \"5faf5f\", \"5faf87\", \"5fafaf\", \"5fafd7\", \"5fafff\",                           // 17\n\t\"5fd700\", \"5fd75f\", \"5fd787\", \"5fd7af\", \"5fd7d7\", \"5fd7ff\",                           // 18\n\t\"5fff00\", \"5fff5f\", \"5fff87\", \"5fffaf\", \"5fffd7\", \"5fffff\",                           // 19\n                                                                                       // 20\n\t\"870000\", \"87005f\", \"870087\", \"8700af\", \"8700d7\", \"8700ff\",                           // 21\n\t\"875f00\", \"875f5f\", \"875f87\", \"875faf\", \"875fd7\", \"875fff\",                           // 22\n\t\"878700\", \"87875f\", \"878787\", \"8787af\", \"8787d7\", \"8787ff\",                           // 23\n\t\"87af00\", \"87af5f\", \"87af87\", \"87afaf\", \"87afd7\", \"87afff\",                           // 24\n\t\"87d700\", \"87d75f\", \"87d787\", \"87d7af\", \"87d7d7\", \"87d7ff\",                           // 25\n\t\"87ff00\", \"87ff5f\", \"87ff87\", \"87ffaf\", \"87ffd7\", \"87ffff\",                           // 26\n                                                                                       // 27\n\t\"af0000\", \"af005f\", \"af0087\", \"af00af\", \"af00d7\", \"af00ff\",                           // 28\n\t\"af5f00\", \"af5f5f\", \"af5f87\", \"af5faf\", \"af5fd7\", \"af5fff\",                           // 29\n\t\"af8700\", \"af875f\", \"af8787\", \"af87af\", \"af87d7\", \"af87ff\",                           // 30\n\t\"afaf00\", \"afaf5f\", \"afaf87\", \"afafaf\", \"afafd7\", \"afafff\",                           // 31\n\t\"afd700\", \"afd75f\", \"afd787\", \"afd7af\", \"afd7d7\", \"afd7ff\",                           // 32\n\t\"afff00\", \"afff5f\", \"afff87\", \"afffaf\", \"afffd7\", \"afffff\",                           // 33\n                                                                                       // 34\n\t\"d70000\", \"d7005f\", \"d70087\", \"d700af\", \"d700d7\", \"d700ff\",                           // 35\n\t\"d75f00\", \"d75f5f\", \"d75f87\", \"d75faf\", \"d75fd7\", \"d75fff\",                           // 36\n\t\"d78700\", \"d7875f\", \"d78787\", \"d787af\", \"d787d7\", \"d787ff\",                           // 37\n\t\"d7af00\", \"d7af5f\", \"d7af87\", \"d7afaf\", \"d7afd7\", \"d7afff\",                           // 38\n\t\"d7d700\", \"d7d75f\", \"d7d787\", \"d7d7af\", \"d7d7d7\", \"d7d7ff\",                           // 39\n\t\"d7ff00\", \"d7ff5f\", \"d7ff87\", \"d7ffaf\", \"d7ffd7\", \"d7ffff\",                           // 40\n                                                                                       // 41\n\t\"ff0000\", \"ff005f\", \"ff0087\", \"ff00af\", \"ff00d7\", \"ff00ff\",                           // 42\n\t\"ff5f00\", \"ff5f5f\", \"ff5f87\", \"ff5faf\", \"ff5fd7\", \"ff5fff\",                           // 43\n\t\"ff8700\", \"ff875f\", \"ff8787\", \"ff87af\", \"ff87d7\", \"ff87ff\",                           // 44\n\t\"ffaf00\", \"ffaf5f\", \"ffaf87\", \"ffafaf\", \"ffafd7\", \"ffafff\",                           // 45\n\t\"ffd700\", \"ffd75f\", \"ffd787\", \"ffd7af\", \"ffd7d7\", \"ffd7ff\",                           // 46\n\t\"ffff00\", \"ffff5f\", \"ffff87\", \"ffffaf\", \"ffffd7\", \"ffffff\",                           // 47\n                                                                                       // 48\n\t\"080808\", \"121212\", \"1c1c1c\", \"262626\", \"303030\", \"3a3a3a\",                           // 49\n\t\"444444\", \"4e4e4e\", \"585858\", \"626262\", \"6c6c6c\", \"767676\",                           // 50\n\t\"808080\", \"8a8a8a\", \"949494\", \"9e9e9e\", \"a8a8a8\", \"b2b2b2\",                           // 51\n\t\"bcbcbc\", \"c6c6c6\", \"d0d0d0\", \"dadada\", \"e4e4e4\", \"eeeeee\"                            // 52\n];                                                                                     // 53\n                                                                                       // 54\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"es5-ext\":{\"lib\":{\"Object\":{\"descriptor.js\":[\"./is-callable\",\"./valid-callable\",\"./valid-value\",\"./copy\",\"./map\",\"../String/is-string\",\"../String/prototype/contains\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar isCallable = require('./is-callable')                                              // 3\n  , callable   = require('./valid-callable')                                           // 4\n  , validValue = require('./valid-value')                                              // 5\n  , copy       = require('./copy')                                                     // 6\n  , map        = require('./map')                                                      // 7\n  , isString   = require('../String/is-string')                                        // 8\n  , contains   = require('../String/prototype/contains')                               // 9\n                                                                                       // 10\n  , bind = Function.prototype.bind                                                     // 11\n  , defineProperty = Object.defineProperty                                             // 12\n  , d;                                                                                 // 13\n                                                                                       // 14\nd = module.exports = function (dscr, value) {                                          // 15\n\tvar c, e, w;                                                                          // 16\n\tif (arguments.length < 2) {                                                           // 17\n\t\tvalue = dscr;                                                                        // 18\n\t\tdscr = null;                                                                         // 19\n\t}                                                                                     // 20\n\tif (dscr == null) {                                                                   // 21\n\t\tc = w = true;                                                                        // 22\n\t\te = false;                                                                           // 23\n\t} else {                                                                              // 24\n\t\tc = contains.call(dscr, 'c');                                                        // 25\n\t\te = contains.call(dscr, 'e');                                                        // 26\n\t\tw = contains.call(dscr, 'w');                                                        // 27\n\t}                                                                                     // 28\n                                                                                       // 29\n\treturn { value: value, configurable: c, enumerable: e, writable: w };                 // 30\n};                                                                                     // 31\n                                                                                       // 32\nd.gs = function (dscr, get, set) {                                                     // 33\n\tvar c, e;                                                                             // 34\n\tif (isCallable(dscr)) {                                                               // 35\n\t\tset = (get == null) ? undefined : callable(get);                                     // 36\n\t\tget = dscr;                                                                          // 37\n\t\tdscr = null;                                                                         // 38\n\t} else {                                                                              // 39\n\t\tget = (get == null) ? undefined : callable(get);                                     // 40\n\t\tset = (set == null) ? undefined : callable(set);                                     // 41\n\t}                                                                                     // 42\n\tif (dscr == null) {                                                                   // 43\n\t\tc = true;                                                                            // 44\n\t\te = false;                                                                           // 45\n\t} else {                                                                              // 46\n\t\tc = contains.call(dscr, 'c');                                                        // 47\n\t\te = contains.call(dscr, 'e');                                                        // 48\n\t}                                                                                     // 49\n                                                                                       // 50\n\treturn { get: get, set: set, configurable: c, enumerable: e };                        // 51\n};                                                                                     // 52\n                                                                                       // 53\nd.binder = function self(name, dv) {                                                   // 54\n\tvar value, dgs;                                                                       // 55\n\tif (!isString(name)) {                                                                // 56\n\t\treturn map(name, function (dv, name) { return self(name, dv); });                    // 57\n\t}                                                                                     // 58\n\tvalue = validValue(dv) && callable(dv.value);                                         // 59\n\tdgs = copy(dv);                                                                       // 60\n\tdelete dgs.writable;                                                                  // 61\n\tdelete dgs.value;                                                                     // 62\n\tdgs.get = function () {                                                               // 63\n\t\tdv.value = bind.call(value, this);                                                   // 64\n\t\tdefineProperty(this, name, dv);                                                      // 65\n\t\treturn this[name];                                                                   // 66\n\t};                                                                                    // 67\n\treturn dgs;                                                                           // 68\n};                                                                                     // 69\n                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is-callable.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Inspired by: http://www.davidflanagan.com/2009/08/typeof-isfuncti.html              // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar forEach = Array.prototype.forEach.bind([]);                                        // 5\n                                                                                       // 6\nmodule.exports = function (obj) {                                                      // 7\n\tvar type;                                                                             // 8\n\tif (!obj) {                                                                           // 9\n\t\treturn false;                                                                        // 10\n\t}                                                                                     // 11\n\ttype = typeof obj;                                                                    // 12\n\tif (type === 'function') {                                                            // 13\n\t\treturn true;                                                                         // 14\n\t}                                                                                     // 15\n\tif (type !== 'object') {                                                              // 16\n\t\treturn false;                                                                        // 17\n\t}                                                                                     // 18\n                                                                                       // 19\n\ttry {                                                                                 // 20\n\t\tforEach(obj);                                                                        // 21\n\t\treturn true;                                                                         // 22\n\t} catch (e) {                                                                         // 23\n\t\tif (e instanceof TypeError) {                                                        // 24\n\t\t\treturn false;                                                                       // 25\n\t\t}                                                                                    // 26\n\t\tthrow e;                                                                             // 27\n\t}                                                                                     // 28\n};                                                                                     // 29\n                                                                                       // 30\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"valid-callable.js\":[\"./is-callable\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar isCallable = require('./is-callable');                                             // 3\n                                                                                       // 4\nmodule.exports = function (fn) {                                                       // 5\n\tif (!isCallable(fn)) {                                                                // 6\n\t\tthrow new TypeError(fn + \" is not a function\");                                      // 7\n\t}                                                                                     // 8\n\treturn fn;                                                                            // 9\n};                                                                                     // 10\n                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"valid-value.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nmodule.exports = function (value) {                                                    // 3\n\tif (value == null) {                                                                  // 4\n\t\tthrow new TypeError(\"Cannot use null or undefined\");                                 // 5\n\t}                                                                                     // 6\n\treturn value;                                                                         // 7\n};                                                                                     // 8\n                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"copy.js\":[\"./is-plain-object\",\"./for-each\",\"./extend\",\"./valid-value\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar isPlainObject = require('./is-plain-object')                                       // 3\n  , forEach       = require('./for-each')                                              // 4\n  , extend        = require('./extend')                                                // 5\n  , value         = require('./valid-value')                                           // 6\n                                                                                       // 7\n  , recursive;                                                                         // 8\n                                                                                       // 9\nrecursive = function (to, from, cloned) {                                              // 10\n\tforEach(from, function (value, key) {                                                 // 11\n\t\tvar index;                                                                           // 12\n\t\tif (isPlainObject(value)) {                                                          // 13\n\t\t\tif ((index = cloned[0].indexOf(value)) === -1) {                                    // 14\n\t\t\t\tcloned[0].push(value);                                                             // 15\n\t\t\t\tcloned[1].push(to[key] = extend({}, value));                                       // 16\n\t\t\t\trecursive(to[key], value, cloned);                                                 // 17\n\t\t\t} else {                                                                            // 18\n\t\t\t\tto[key] = cloned[1][index];                                                        // 19\n\t\t\t}                                                                                   // 20\n\t\t}                                                                                    // 21\n\t}, from);                                                                             // 22\n};                                                                                     // 23\n                                                                                       // 24\nmodule.exports = function (obj/*, deep*/) {                                            // 25\n\tvar copy;                                                                             // 26\n\tif ((copy = Object(value(obj))) === obj) {                                            // 27\n\t\tcopy = extend({}, obj);                                                              // 28\n\t\tif (arguments[1]) {                                                                  // 29\n\t\t\trecursive(copy, obj, [[obj], [copy]]);                                              // 30\n\t\t}                                                                                    // 31\n\t}                                                                                     // 32\n\treturn copy;                                                                          // 33\n};                                                                                     // 34\n                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is-plain-object.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar getPrototypeOf = Object.getPrototypeOf, prototype = Object.prototype               // 3\n  , toString = prototype.toString                                                      // 4\n                                                                                       // 5\n  , id = {}.toString();                                                                // 6\n                                                                                       // 7\nmodule.exports = function (value) {                                                    // 8\n\tvar proto;                                                                            // 9\n\tif (!value || (typeof value !== 'object') || (toString.call(value) !== id)) {         // 10\n\t\treturn false;                                                                        // 11\n\t}                                                                                     // 12\n\tproto = getPrototypeOf(value);                                                        // 13\n\treturn (proto === prototype) || (getPrototypeOf(proto) === null);                     // 14\n};                                                                                     // 15\n                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"for-each.js\":[\"./_iterate\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nmodule.exports = require('./_iterate')('forEach');                                     // 3\n                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_iterate.js\":[\"./is-callable\",\"./valid-callable\",\"./valid-value\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Internal method, used by iteration functions.                                       // 1\n// Calls a function for each key-value pair found in object                            // 2\n// Optionally takes compareFn to iterate object in specific order                      // 3\n                                                                                       // 4\n'use strict';                                                                          // 5\n                                                                                       // 6\nvar isCallable = require('./is-callable')                                              // 7\n  , callable   = require('./valid-callable')                                           // 8\n  , value      = require('./valid-value')                                              // 9\n                                                                                       // 10\n  , call = Function.prototype.call, keys = Object.keys;                                // 11\n                                                                                       // 12\nmodule.exports = function (method) {                                                   // 13\n\treturn function (obj, cb/*, thisArg, compareFn*/) {                                   // 14\n\t\tvar list, thisArg = arguments[2], compareFn = arguments[3];                          // 15\n\t\tobj = Object(value(obj));                                                            // 16\n\t\tcallable(cb);                                                                        // 17\n                                                                                       // 18\n\t\tlist = keys(obj);                                                                    // 19\n\t\tif (compareFn) {                                                                     // 20\n\t\t\tlist.sort(isCallable(compareFn) ? compareFn.bind(obj) : undefined);                 // 21\n\t\t}                                                                                    // 22\n\t\treturn list[method](function (key, index) {                                          // 23\n\t\t\treturn call.call(cb, thisArg, obj[key], key, obj, index);                           // 24\n\t\t});                                                                                  // 25\n\t};                                                                                    // 26\n};                                                                                     // 27\n                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"extend.js\":[\"./valid-value\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar value = require('./valid-value')                                                   // 3\n                                                                                       // 4\n  , forEach = Array.prototype.forEach, slice = Array.prototype.slice                   // 5\n  , keys = Object.keys                                                                 // 6\n                                                                                       // 7\n  , extend;                                                                            // 8\n                                                                                       // 9\nextend = function (src) {                                                              // 10\n\tkeys(Object(src)).forEach(function (key) {                                            // 11\n\t\tthis[key] = src[key];                                                                // 12\n\t}, this);                                                                             // 13\n};                                                                                     // 14\n                                                                                       // 15\nmodule.exports = function (dest/*, …src*/) {                                           // 16\n\tforEach.call(arguments, value);                                                       // 17\n\tslice.call(arguments, 1).forEach(extend, dest);                                       // 18\n\treturn dest;                                                                          // 19\n};                                                                                     // 20\n                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"map.js\":[\"./valid-callable\",\"./for-each\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar callable = require('./valid-callable')                                             // 3\n  , forEach  = require('./for-each')                                                   // 4\n                                                                                       // 5\n  , call = Function.prototype.call;                                                    // 6\n                                                                                       // 7\nmodule.exports = function (obj, cb/*, thisArg*/) {                                     // 8\n\tvar o = {}, thisArg = arguments[2];                                                   // 9\n\tcallable(cb);                                                                         // 10\n\tforEach(obj, function (value, key, obj, index) {                                      // 11\n\t\to[key] = call.call(cb, thisArg, value, key, obj, index);                             // 12\n\t});                                                                                   // 13\n\treturn o;                                                                             // 14\n};                                                                                     // 15\n                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reduce.js\":[\"./is-callable\",\"./valid-callable\",\"./valid-value\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar isCallable = require('./is-callable')                                              // 3\n  , callable   = require('./valid-callable')                                           // 4\n  , value      = require('./valid-value')                                              // 5\n                                                                                       // 6\n  , call = Function.prototype.call, keys = Object.keys;                                // 7\n                                                                                       // 8\nmodule.exports = exports = function self(obj, cb/*, initial, compareFn*/) {            // 9\n\tvar list, fn, initial, compareFn, initialized;                                        // 10\n\tvalue(obj) && callable(cb);                                                           // 11\n                                                                                       // 12\n\tobj = Object(obj);                                                                    // 13\n\tinitial = arguments[2];                                                               // 14\n\tcompareFn = arguments[3];                                                             // 15\n                                                                                       // 16\n\tlist = keys(obj);                                                                     // 17\n\tif (compareFn) {                                                                      // 18\n\t\tlist.sort(isCallable(compareFn) ? compareFn.bind(obj) : undefined);                  // 19\n\t}                                                                                     // 20\n                                                                                       // 21\n\tfn = function (value, key, index) {                                                   // 22\n\t\tif (initialized) {                                                                   // 23\n\t\t\treturn call.call(cb, undefined, value, obj[key], key, obj, index);                  // 24\n\t\t} else {                                                                             // 25\n\t\t\tinitialized = true;                                                                 // 26\n\t\t\treturn call.call(cb, undefined, obj[value], obj[key], key, obj, index,              // 27\n\t\t\t\tvalue);                                                                            // 28\n\t\t}                                                                                    // 29\n\t};                                                                                    // 30\n                                                                                       // 31\n\tif ((arguments.length < 3) || (initial === self.NO_INITIAL)) {                        // 32\n\t\treturn list.reduce(fn);                                                              // 33\n\t} else {                                                                              // 34\n\t\tinitialized = true;                                                                  // 35\n\t\treturn list.reduce(fn, initial);                                                     // 36\n\t}                                                                                     // 37\n};                                                                                     // 38\nexports.NO_INITIAL = {};                                                               // 39\n                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Implementation credits go to:                                                       // 1\n// http://wiki.ecmascript.org/doku.php?id=harmony:egal                                 // 2\n                                                                                       // 3\n'use strict';                                                                          // 4\n                                                                                       // 5\nmodule.exports = function (x, y) {                                                     // 6\n\treturn (x === y) ?                                                                    // 7\n\t\t\t((x !== 0) || ((1 / x) === (1 / y))) :                                              // 8\n\t\t\t((x !== x) && (y !== y)); //jslint: skip                                            // 9\n};                                                                                     // 10\n                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"is-empty.js\":[\"./valid-value\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Object/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar value = require('./valid-value');                                                  // 3\n                                                                                       // 4\nmodule.exports = function (obj) {                                                      // 5\n\tvar i;                                                                                // 6\n\tvalue(obj);                                                                           // 7\n\tfor (i in obj) { //jslint: skip                                                       // 8\n\t\tif (obj.propertyIsEnumerable(i)) return false;                                       // 9\n\t}                                                                                     // 10\n\treturn true;                                                                          // 11\n};                                                                                     // 12\n                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"String\":{\"is-string.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/String/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar toString = Object.prototype.toString                                               // 3\n                                                                                       // 4\n  , id = toString.call('');                                                            // 5\n                                                                                       // 6\nmodule.exports = function (x) {                                                        // 7\n\treturn (typeof x === 'string') || (x && (typeof x === 'object') &&                    // 8\n\t\t((x instanceof String) || (toString.call(x) === id))) || false;                      // 9\n};                                                                                     // 10\n                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"prototype\":{\"contains.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/String/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar indexOf = String.prototype.indexOf;                                                // 3\n                                                                                       // 4\nmodule.exports = function (searchString/*, position*/) {                               // 5\n\treturn indexOf.call(this, searchString, arguments[1]) > -1;                           // 6\n};                                                                                     // 7\n                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"repeat.js\":[\"../../Object/valid-value\",\"../../Number/to-uint\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/String/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Not rocket science but taken from:                                                  // 1\n// http://closure-library.googlecode.com/svn/trunk/closure/goog/string/string.js       // 2\n                                                                                       // 3\n'use strict';                                                                          // 4\n                                                                                       // 5\nvar value  = require('../../Object/valid-value')                                       // 6\n  , toUint = require('../../Number/to-uint');                                          // 7\n                                                                                       // 8\nmodule.exports = function (n) {                                                        // 9\n\treturn new Array((isNaN(n) ? 1 : toUint(n)) + 1).join(String(value(this)));           // 10\n};                                                                                     // 11\n                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"Number\":{\"to-uint.js\":[\"./to-int\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Number/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar toInt = require('./to-int')                                                        // 3\n                                                                                       // 4\n  , max = Math.max;                                                                    // 5\n                                                                                       // 6\nmodule.exports = function (value) { return max(0, toInt(value)); };                    // 7\n                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"to-int.js\":[\"../Math/sign\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Number/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar sign = require('../Math/sign')                                                     // 3\n                                                                                       // 4\n  , abs = Math.abs, floor = Math.floor;                                                // 5\n                                                                                       // 6\nmodule.exports = function (value) {                                                    // 7\n\tif (isNaN(value)) {                                                                   // 8\n\t\treturn 0;                                                                            // 9\n\t}                                                                                     // 10\n\tvalue = Number(value);                                                                // 11\n\tif ((value === 0) || !isFinite(value)) {                                              // 12\n\t\treturn value;                                                                        // 13\n\t}                                                                                     // 14\n                                                                                       // 15\n\treturn sign(value) * floor(abs(value));                                               // 16\n};                                                                                     // 17\n                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"is-nan.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Number/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nmodule.exports = function (value) {                                                    // 3\n\treturn (value !== value); //jslint: skip                                              // 4\n};                                                                                     // 5\n                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"is-number.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Number/ //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar toString = Object.prototype.toString                                               // 3\n                                                                                       // 4\n  , id = toString.call(1);                                                             // 5\n                                                                                       // 6\nmodule.exports = function (x) {                                                        // 7\n\treturn ((typeof x === 'number') ||                                                    // 8\n\t\t((x instanceof Number) ||                                                            // 9\n\t\t\t((typeof x === 'object') && (toString.call(x) === id))));                           // 10\n};                                                                                     // 11\n                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"Math\":{\"sign.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Math/si //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nmodule.exports = function (value) {                                                    // 3\n\tvalue = Number(value);                                                                // 4\n\tif (isNaN(value) || (value === 0)) {                                                  // 5\n\t\treturn value;                                                                        // 6\n\t}                                                                                     // 7\n\treturn (value > 0) ? 1 : -1;                                                          // 8\n};                                                                                     // 9\n                                                                                       // 10\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"Error\":{\"custom.js\":[\"../Object/descriptor\",\"../Object/extend\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Error/c //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar d      = require('../Object/descriptor')                                           // 3\n  , extend = require('../Object/extend')                                               // 4\n                                                                                       // 5\n  , captureStackTrace = Error.captureStackTrace                                        // 6\n  , CustomError;                                                                       // 7\n                                                                                       // 8\nCustomError = module.exports = function CustomError(message, code/*, ext*/) {          // 9\n\tvar ext = arguments[2];                                                               // 10\n\tif (ext != null) extend(this, ext);                                                   // 11\n\tthis.message = String(message);                                                       // 12\n\tif (code != null) this.code = String(code);                                           // 13\n\tif (captureStackTrace) captureStackTrace(this, CustomError);                          // 14\n};                                                                                     // 15\n                                                                                       // 16\nCustomError.prototype = Object.create(Error.prototype, {                               // 17\n\tconstructor: d(CustomError),                                                          // 18\n\tname: d('CustomError')                                                                // 19\n});                                                                                    // 20\n                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"Array\":{\"prototype\":{\"e-index-of.js\":[\"../../Number/is-nan\",\"../../Object/is\",\"../../Object/valid-value\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Array/p //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar numIsNaN = require('../../Number/is-nan')                                          // 3\n  , ois      = require('../../Object/is')                                              // 4\n  , value    = require('../../Object/valid-value')                                     // 5\n                                                                                       // 6\n  , indexOf = Array.prototype.indexOf;                                                 // 7\n                                                                                       // 8\nmodule.exports = function (searchElement/*, fromIndex*/) {                             // 9\n\tvar i;                                                                                // 10\n\tif (!numIsNaN(searchElement) && (searchElement !== 0)) {                              // 11\n\t\treturn indexOf.apply(this, arguments);                                               // 12\n\t}                                                                                     // 13\n                                                                                       // 14\n\tfor (i = (arguments[1] >>> 0); i < (value(this).length >>> 0); ++i) {                 // 15\n\t\tif (this.hasOwnProperty(i) && ois(searchElement, this[i])) {                         // 16\n\t\t\treturn i;                                                                           // 17\n\t\t}                                                                                    // 18\n\t}                                                                                     // 19\n\treturn -1;                                                                            // 20\n};                                                                                     // 21\n                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"last.js\":[\"./last-index\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Array/p //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar lastIndex = require('./last-index');                                               // 3\n                                                                                       // 4\nmodule.exports = function () {                                                         // 5\n\tvar i;                                                                                // 6\n\tif ((i = lastIndex.call(this)) !== null) {                                            // 7\n\t\treturn this[i];                                                                      // 8\n\t}                                                                                     // 9\n\treturn undefined;                                                                     // 10\n};                                                                                     // 11\n                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"last-index.js\":[\"../../Object/valid-value\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Array/p //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar value = require('../../Object/valid-value');                                       // 3\n                                                                                       // 4\nmodule.exports = function () {                                                         // 5\n\tvar i, l;                                                                             // 6\n\tif (!(l = (value(this).length >>> 0))) {                                              // 7\n\t\treturn null;                                                                         // 8\n\t}                                                                                     // 9\n\ti = l - 1;                                                                            // 10\n\twhile (!this.hasOwnProperty(i)) {                                                     // 11\n\t\tif (--i === -1) {                                                                    // 12\n\t\t\treturn null;                                                                        // 13\n\t\t}                                                                                    // 14\n\t}                                                                                     // 15\n\treturn i;                                                                             // 16\n};                                                                                     // 17\n                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"from.js\":[\"../Function/is-arguments\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Array/f //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar isArguments   = require('../Function/is-arguments')                                // 3\n                                                                                       // 4\n  , isArray = Array.isArray, slice = Array.prototype.slice;                            // 5\n                                                                                       // 6\nmodule.exports = function (obj) {                                                      // 7\n\tif (isArray(obj)) {                                                                   // 8\n\t\treturn obj;                                                                          // 9\n\t} else if (isArguments(obj)) {                                                        // 10\n\t\treturn (obj.length === 1) ? [obj[0]] : Array.apply(null, obj);                       // 11\n\t} else {                                                                              // 12\n\t\treturn slice.call(obj);                                                              // 13\n\t}                                                                                     // 14\n};                                                                                     // 15\n                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"Function\":{\"is-arguments.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/Functio //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar toString = Object.prototype.toString                                               // 3\n                                                                                       // 4\n  , id = toString.call((function () { return arguments; }()));                         // 5\n                                                                                       // 6\nmodule.exports = function (x) {                                                        // 7\n\treturn toString.call(x) === id;                                                       // 8\n};                                                                                     // 9\n                                                                                       // 10\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"global.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/es5-ext/lib/global. //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nmodule.exports = new Function(\"return this\")();                                        // 3\n                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"memoizee\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// ../../.1.1.17.6xtim6++os+web.browser+web.cordova/npm/node_modules/cli-color/node_mo //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nexports.name = \"memoizee\";                                                             // 1\nexports.version = \"0.2.5\";                                                             // 2\nexports.main = \"lib\";                                                                  // 3\n                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"index.js\":[\"./regular\",\"./primitive\",\"./ext/dispose\",\"./ext/resolvers\",\"./ext/async\",\"./ext/ref-counter\",\"./ext/method\",\"./ext/max-age\",\"./ext/max\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/index. //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Provides memoize with all options                                                   // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar regular   = require('./regular')                                                   // 5\n  , primitive = require('./primitive')                                                 // 6\n                                                                                       // 7\n  , call = Function.prototype.call;                                                    // 8\n                                                                                       // 9\n// Order is significant!                                                               // 10\nrequire('./ext/dispose');                                                              // 11\nrequire('./ext/resolvers');                                                            // 12\nrequire('./ext/async');                                                                // 13\nrequire('./ext/ref-counter');                                                          // 14\nrequire('./ext/method');                                                               // 15\nrequire('./ext/max-age');                                                              // 16\nrequire('./ext/max');                                                                  // 17\n                                                                                       // 18\nmodule.exports = function (fn/* options */) {                                          // 19\n\tvar options = Object(arguments[1]);                                                   // 20\n\treturn call.call(options.primitive ? primitive : regular, this, fn, options);         // 21\n};                                                                                     // 22\n                                                                                       // 23\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"regular.js\":[\"es5-ext/lib/Error/custom\",\"es5-ext/lib/Array/prototype/e-index-of\",\"event-emitter/lib/has-listeners\",\"./_base\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/regula //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Memoize working in object mode (supports any type of arguments)                     // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar CustomError  = require('es5-ext/lib/Error/custom')                                 // 5\n  , indexOf      = require('es5-ext/lib/Array/prototype/e-index-of')                   // 6\n  , hasListeners = require('event-emitter/lib/has-listeners')                          // 7\n                                                                                       // 8\n  , apply = Function.prototype.apply;                                                  // 9\n                                                                                       // 10\n// Results are saved internally within array matrix:                                   // 11\n// [0] -> Result of calling function with no arguments                                 // 12\n// [1] -> Matrix that keeps results when function is called with one argument          // 13\n//        [1][0] -> Array of arguments with which                                      // 14\n//                 function have been called                                           // 15\n//        [1][1] -> Array of results that matches [1][0] array                         // 16\n// [2] -> Matrix that keeps results when function is called with two arguments         // 17\n//        [2][0] -> Array of first (of two) arguments with which                       // 18\n//                function have been called                                            // 19\n//        [2][1] -> Matrixes that keeps results for two arguments function calls       // 20\n//                  Each matrix matches first argument found in [2][0]                 // 21\n//                  [2][1][x][0] -> Array of second arguments with which               // 22\n//                                  function have been called.                         // 23\n//                  [2][1][x][1] -> Array of results that matches [2][1][x][0]         // 24\n//                                   arguments array                                   // 25\n// ...and so on                                                                        // 26\nmodule.exports = require('./_base')(function (conf, length) {                          // 27\n\tvar map, map1, map2, get, set, clear, count, fn                                       // 28\n\t  , hitListeners, initListeners, purgeListeners                                       // 29\n\t  , cache = conf.cache = {}, argsCache;                                               // 30\n                                                                                       // 31\n\tif (length === 0) {                                                                   // 32\n\t\tmap = null;                                                                          // 33\n\t\tget = conf.get = function () { return map; };                                        // 34\n\t\tset = function () { return ((map = 1)); };                                           // 35\n\t\tclear = function () { map = null; };                                                 // 36\n\t\tconf.clearAll = function () {                                                        // 37\n\t\t\tmap = null;                                                                         // 38\n\t\t\tcache = conf.cache = {};                                                            // 39\n\t\t};                                                                                   // 40\n\t} else {                                                                              // 41\n\t\tcount = 0;                                                                           // 42\n\t\tif (length === 1) {                                                                  // 43\n\t\t\tmap1 = [];                                                                          // 44\n\t\t\tmap2 = [];                                                                          // 45\n\t\t\tget = conf.get = function (args) {                                                  // 46\n\t\t\t\tvar index = indexOf.call(map1, args[0]);                                           // 47\n\t\t\t\treturn (index === -1) ? null : map2[index];                                        // 48\n\t\t\t};                                                                                  // 49\n\t\t\tset = function (args) {                                                             // 50\n\t\t\t\tmap1.push(args[0]);                                                                // 51\n\t\t\t\tmap2.push(++count);                                                                // 52\n\t\t\t\treturn count;                                                                      // 53\n\t\t\t};                                                                                  // 54\n\t\t\tclear = function (id) {                                                             // 55\n\t\t\t\tvar index = indexOf.call(map2, id);                                                // 56\n\t\t\t\tif (index !== -1) {                                                                // 57\n\t\t\t\t\tmap1.splice(index, 1);                                                            // 58\n\t\t\t\t\tmap2.splice(index, 1);                                                            // 59\n\t\t\t\t}                                                                                  // 60\n\t\t\t};                                                                                  // 61\n\t\t\tconf.clearAll = function () {                                                       // 62\n\t\t\t\tmap1 = [];                                                                         // 63\n\t\t\t\tmap2 = [];                                                                         // 64\n\t\t\t\tcache = conf.cache = {};                                                           // 65\n\t\t\t};                                                                                  // 66\n\t\t} else if (length === false) {                                                       // 67\n\t\t\tmap = [];                                                                           // 68\n\t\t\targsCache = {};                                                                     // 69\n\t\t\tget = conf.get = function (args) {                                                  // 70\n\t\t\t\tvar index = 0, set = map, i, length = args.length;                                 // 71\n\t\t\t\tif (length === 0) {                                                                // 72\n\t\t\t\t\treturn set[length] || null;                                                       // 73\n\t\t\t\t} else if ((set = set[length])) {                                                  // 74\n\t\t\t\t\twhile (index < (length - 1)) {                                                    // 75\n\t\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                           // 76\n\t\t\t\t\t\tif (i === -1) return null;                                                       // 77\n\t\t\t\t\t\tset = set[1][i];                                                                 // 78\n\t\t\t\t\t\t++index;                                                                         // 79\n\t\t\t\t\t}                                                                                 // 80\n\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                            // 81\n\t\t\t\t\tif (i === -1) return null;                                                        // 82\n\t\t\t\t\treturn set[1][i] || null;                                                         // 83\n\t\t\t\t}                                                                                  // 84\n\t\t\t\treturn null;                                                                       // 85\n\t\t\t};                                                                                  // 86\n\t\t\tset = function (args) {                                                             // 87\n\t\t\t\tvar index = 0, set = map, i, length = args.length;                                 // 88\n\t\t\t\tif (length === 0) {                                                                // 89\n\t\t\t\t\tset[length] = ++count;                                                            // 90\n\t\t\t\t} else {                                                                           // 91\n\t\t\t\t\tif (!set[length]) {                                                               // 92\n\t\t\t\t\t\tset[length] = [[], []];                                                          // 93\n\t\t\t\t\t}                                                                                 // 94\n\t\t\t\t\tset = set[length];                                                                // 95\n\t\t\t\t\twhile (index < (length - 1)) {                                                    // 96\n\t\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                           // 97\n\t\t\t\t\t\tif (i === -1) {                                                                  // 98\n\t\t\t\t\t\t\ti = set[0].push(args[index]) - 1;                                               // 99\n\t\t\t\t\t\t\tset[1].push([[], []]);                                                          // 100\n\t\t\t\t\t\t}                                                                                // 101\n\t\t\t\t\t\tset = set[1][i];                                                                 // 102\n\t\t\t\t\t\t++index;                                                                         // 103\n\t\t\t\t\t}                                                                                 // 104\n\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                            // 105\n\t\t\t\t\tif (i === -1) {                                                                   // 106\n\t\t\t\t\t\ti = set[0].push(args[index]) - 1;                                                // 107\n\t\t\t\t\t}                                                                                 // 108\n\t\t\t\t\tset[1][i] = ++count;                                                              // 109\n\t\t\t\t}                                                                                  // 110\n\t\t\t\targsCache[count] = args;                                                           // 111\n\t\t\t\treturn count;                                                                      // 112\n\t\t\t};                                                                                  // 113\n\t\t\tclear = function (id) {                                                             // 114\n\t\t\t\tvar index = 0, set = map, i, args = argsCache[id], length = args.length            // 115\n\t\t\t\t  , path = [];                                                                     // 116\n\t\t\t\tif (length === 0) {                                                                // 117\n\t\t\t\t\tdelete set[length];                                                               // 118\n\t\t\t\t} else if ((set = set[length])) {                                                  // 119\n\t\t\t\t\twhile (index < (length - 1)) {                                                    // 120\n\t\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                           // 121\n\t\t\t\t\t\tif (i === -1) {                                                                  // 122\n\t\t\t\t\t\t\treturn;                                                                         // 123\n\t\t\t\t\t\t}                                                                                // 124\n\t\t\t\t\t\tpath.push(set, i);                                                               // 125\n\t\t\t\t\t\tset = set[1][i];                                                                 // 126\n\t\t\t\t\t\t++index;                                                                         // 127\n\t\t\t\t\t}                                                                                 // 128\n\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                            // 129\n\t\t\t\t\tif (i === -1) {                                                                   // 130\n\t\t\t\t\t\treturn;                                                                          // 131\n\t\t\t\t\t}                                                                                 // 132\n\t\t\t\t\tid = set[1][i];                                                                   // 133\n\t\t\t\t\tset[0].splice(i, 1);                                                              // 134\n\t\t\t\t\tset[1].splice(i, 1);                                                              // 135\n\t\t\t\t\twhile (!set[0].length && path.length) {                                           // 136\n\t\t\t\t\t\ti = path.pop();                                                                  // 137\n\t\t\t\t\t\tset = path.pop();                                                                // 138\n\t\t\t\t\t\tset[0].splice(i, 1);                                                             // 139\n\t\t\t\t\t\tset[1].splice(i, 1);                                                             // 140\n\t\t\t\t\t}                                                                                 // 141\n\t\t\t\t}                                                                                  // 142\n\t\t\t\tdelete argsCache[id];                                                              // 143\n\t\t\t};                                                                                  // 144\n\t\t\tconf.clearAll = function () {                                                       // 145\n\t\t\t\tmap = [];                                                                          // 146\n\t\t\t\tcache = conf.cache = {};                                                           // 147\n\t\t\t\targsCache = {};                                                                    // 148\n\t\t\t};                                                                                  // 149\n\t\t} else {                                                                             // 150\n\t\t\tmap = [[], []];                                                                     // 151\n\t\t\targsCache = {};                                                                     // 152\n\t\t\tget = conf.get = function (args) {                                                  // 153\n\t\t\t\tvar index = 0, set = map, i;                                                       // 154\n\t\t\t\twhile (index < (length - 1)) {                                                     // 155\n\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                            // 156\n\t\t\t\t\tif (i === -1) return null;                                                        // 157\n\t\t\t\t\tset = set[1][i];                                                                  // 158\n\t\t\t\t\t++index;                                                                          // 159\n\t\t\t\t}                                                                                  // 160\n\t\t\t\ti = indexOf.call(set[0], args[index]);                                             // 161\n\t\t\t\tif (i === -1) return null;                                                         // 162\n\t\t\t\treturn set[1][i] || null;                                                          // 163\n\t\t\t};                                                                                  // 164\n\t\t\tset = function (args) {                                                             // 165\n\t\t\t\tvar index = 0, set = map, i;                                                       // 166\n\t\t\t\twhile (index < (length - 1)) {                                                     // 167\n\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                            // 168\n\t\t\t\t\tif (i === -1) {                                                                   // 169\n\t\t\t\t\t\ti = set[0].push(args[index]) - 1;                                                // 170\n\t\t\t\t\t\tset[1].push([[], []]);                                                           // 171\n\t\t\t\t\t}                                                                                 // 172\n\t\t\t\t\tset = set[1][i];                                                                  // 173\n\t\t\t\t\t++index;                                                                          // 174\n\t\t\t\t}                                                                                  // 175\n\t\t\t\ti = indexOf.call(set[0], args[index]);                                             // 176\n\t\t\t\tif (i === -1) {                                                                    // 177\n\t\t\t\t\ti = set[0].push(args[index]) - 1;                                                 // 178\n\t\t\t\t}                                                                                  // 179\n\t\t\t\tset[1][i] = ++count;                                                               // 180\n\t\t\t\targsCache[count] = args;                                                           // 181\n\t\t\t\treturn count;                                                                      // 182\n\t\t\t};                                                                                  // 183\n\t\t\tclear = function (id) {                                                             // 184\n\t\t\t\tvar index = 0, set = map, i, path = [], args = argsCache[id];                      // 185\n\t\t\t\twhile (index < (length - 1)) {                                                     // 186\n\t\t\t\t\ti = indexOf.call(set[0], args[index]);                                            // 187\n\t\t\t\t\tif (i === -1) {                                                                   // 188\n\t\t\t\t\t\treturn;                                                                          // 189\n\t\t\t\t\t}                                                                                 // 190\n\t\t\t\t\tpath.push(set, i);                                                                // 191\n\t\t\t\t\tset = set[1][i];                                                                  // 192\n\t\t\t\t\t++index;                                                                          // 193\n\t\t\t\t}                                                                                  // 194\n\t\t\t\ti = indexOf.call(set[0], args[index]);                                             // 195\n\t\t\t\tif (i === -1) {                                                                    // 196\n\t\t\t\t\treturn;                                                                           // 197\n\t\t\t\t}                                                                                  // 198\n\t\t\t\tid = set[1][i];                                                                    // 199\n\t\t\t\tset[0].splice(i, 1);                                                               // 200\n\t\t\t\tset[1].splice(i, 1);                                                               // 201\n\t\t\t\twhile (!set[0].length && path.length) {                                            // 202\n\t\t\t\t\ti = path.pop();                                                                   // 203\n\t\t\t\t\tset = path.pop();                                                                 // 204\n\t\t\t\t\tset[0].splice(i, 1);                                                              // 205\n\t\t\t\t\tset[1].splice(i, 1);                                                              // 206\n\t\t\t\t}                                                                                  // 207\n\t\t\t\tdelete argsCache[id];                                                              // 208\n\t\t\t};                                                                                  // 209\n\t\t\tconf.clearAll = function () {                                                       // 210\n\t\t\t\tmap = [[], []];                                                                    // 211\n\t\t\t\tcache = conf.cache = {};                                                           // 212\n\t\t\t\targsCache = {};                                                                    // 213\n\t\t\t};                                                                                  // 214\n\t\t}                                                                                    // 215\n\t}                                                                                     // 216\n\tconf.memoized = function () {                                                         // 217\n\t\tvar id = get(arguments), value;                                                      // 218\n\t\tif (id != null) {                                                                    // 219\n\t\t\thitListeners && conf.emit('hit', id, arguments, this);                              // 220\n\t\t\treturn cache[id];                                                                   // 221\n\t\t} else {                                                                             // 222\n\t\t\tvalue = apply.call(fn, this, arguments);                                            // 223\n\t\t\tid = get(arguments);                                                                // 224\n\t\t\tif (id != null) {                                                                   // 225\n\t\t\t\tthrow new CustomError(\"Circular invocation\", 'CIRCULAR_INVOCATION');               // 226\n\t\t\t}                                                                                   // 227\n\t\t\tid = set(arguments);                                                                // 228\n\t\t\tcache[id] = value;                                                                  // 229\n\t\t\tinitListeners && conf.emit('init', id);                                             // 230\n\t\t\treturn value;                                                                       // 231\n\t\t}                                                                                    // 232\n\t};                                                                                    // 233\n\tconf.clear = function (id) {                                                          // 234\n\t\tif (cache.hasOwnProperty(id)) {                                                      // 235\n\t\t\tpurgeListeners && conf.emit('purge', id);                                           // 236\n\t\t\tclear(id);                                                                          // 237\n\t\t\tdelete cache[id];                                                                   // 238\n\t\t}                                                                                    // 239\n\t};                                                                                    // 240\n                                                                                       // 241\n\tconf.once('ready', function () {                                                      // 242\n\t\tfn = conf.fn;                                                                        // 243\n\t\thitListeners = hasListeners(conf, 'hit');                                            // 244\n\t\tinitListeners = hasListeners(conf, 'init');                                          // 245\n\t\tpurgeListeners = hasListeners(conf, 'purge');                                        // 246\n\t});                                                                                   // 247\n});                                                                                    // 248\n                                                                                       // 249\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_base.js\":[\"es5-ext/lib/Object/valid-callable\",\"es5-ext/lib/Object/for-each\",\"event-emitter/lib/core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/_base. //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// To be used internally, memoize factory                                              // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar callable = require('es5-ext/lib/Object/valid-callable')                            // 5\n  , forEach  = require('es5-ext/lib/Object/for-each')                                  // 6\n  , ee       = require('event-emitter/lib/core')                                       // 7\n                                                                                       // 8\n  , ext;                                                                               // 9\n                                                                                       // 10\nmodule.exports = exports = function (core) {                                           // 11\n\treturn function self(fn/*, options */) {                                              // 12\n\t\tvar options, length, get, clear, conf;                                               // 13\n                                                                                       // 14\n\t\tcallable(fn);                                                                        // 15\n\t\tif (fn.memoized) {                                                                   // 16\n\t\t\t// Do not memoize already memoized function                                         // 17\n\t\t\treturn fn;                                                                          // 18\n\t\t}                                                                                    // 19\n                                                                                       // 20\n\t\toptions = Object(arguments[1]);                                                      // 21\n\t\tconf = ee({ memoize: self, fn: fn });                                                // 22\n                                                                                       // 23\n\t\t// Normalize length                                                                  // 24\n\t\tif (isNaN(options.length)) {                                                         // 25\n\t\t\tlength = fn.length;                                                                 // 26\n\t\t\t// Special case                                                                     // 27\n\t\t\tif (options.async && ext.async) {                                                   // 28\n\t\t\t\t--length;                                                                          // 29\n\t\t\t}                                                                                   // 30\n\t\t} else {                                                                             // 31\n\t\t\tlength = (options.length === false) ? false : (options.length >>> 0);               // 32\n\t\t}                                                                                    // 33\n                                                                                       // 34\n\t\tcore(conf, length);                                                                  // 35\n                                                                                       // 36\n\t\tforEach(ext, function (fn, name) {                                                   // 37\n\t\t\tif (fn.force) {                                                                     // 38\n\t\t\t\tfn(conf, options);                                                                 // 39\n\t\t\t} else if (options[name]) {                                                         // 40\n\t\t\t\tfn(options[name], conf, options);                                                  // 41\n\t\t\t}                                                                                   // 42\n\t\t});                                                                                  // 43\n                                                                                       // 44\n\t\tfn = conf.fn;                                                                        // 45\n\t\tget = conf.get;                                                                      // 46\n\t\tclear = conf.clear;                                                                  // 47\n                                                                                       // 48\n\t\tconf.memoized.clear = function () { clear(get(arguments)); };                        // 49\n\t\tconf.memoized.clearAll = function () {                                               // 50\n\t\t\tconf.emit('purgeall');                                                              // 51\n\t\t\tconf.clearAll();                                                                    // 52\n\t\t};                                                                                   // 53\n\t\tconf.memoized.memoized = true;                                                       // 54\n\t\tconf.emit('ready');                                                                  // 55\n\t\treturn conf.memoized;                                                                // 56\n\t};                                                                                    // 57\n};                                                                                     // 58\next = exports.ext = {};                                                                // 59\n                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"primitive.js\":[\"es5-ext/lib/Error/custom\",\"event-emitter/lib/has-listeners\",\"./_base\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/primit //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Memoize working in primitive mode                                                   // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar CustomError  = require('es5-ext/lib/Error/custom')                                 // 5\n  , hasListeners = require('event-emitter/lib/has-listeners')                          // 6\n                                                                                       // 7\n  , getId0 = function () { return ''; }                                                // 8\n  , getId1 = function (args) { return args[0]; }                                       // 9\n                                                                                       // 10\n  , apply = Function.prototype.apply, call = Function.prototype.call;                  // 11\n                                                                                       // 12\nmodule.exports = require('./_base')(function (conf, length) {                          // 13\n\tvar get, cache = conf.cache = {}, fn                                                  // 14\n\t  , hitListeners, initListeners, purgeListeners;                                      // 15\n                                                                                       // 16\n\tif (length === 1) {                                                                   // 17\n\t\tget = conf.get = getId1;                                                             // 18\n\t} else if (length === false) {                                                        // 19\n\t\tget = conf.get = function (args) {                                                   // 20\n\t\t\tvar id = '', i, length = args.length;                                               // 21\n\t\t\tif (length) {                                                                       // 22\n\t\t\t\tid += args[i = 0];                                                                 // 23\n\t\t\t\twhile (--length) {                                                                 // 24\n\t\t\t\t\tid += '\\u0001' + args[++i];                                                       // 25\n\t\t\t\t}                                                                                  // 26\n\t\t\t} else {                                                                            // 27\n\t\t\t\tid = '\\u0002';                                                                     // 28\n\t\t\t}                                                                                   // 29\n\t\t\treturn id;                                                                          // 30\n\t\t};                                                                                   // 31\n\t} else if (length) {                                                                  // 32\n\t\tget = conf.get = function (args) {                                                   // 33\n\t\t\tvar id = String(args[0]), i = 0, l = length;                                        // 34\n\t\t\twhile (--l) { id += '\\u0001' + args[++i]; }                                         // 35\n\t\t\treturn id;                                                                          // 36\n\t\t};                                                                                   // 37\n\t} else {                                                                              // 38\n\t\tget = conf.get = getId0;                                                             // 39\n\t}                                                                                     // 40\n                                                                                       // 41\n\tconf.memoized = (length === 1) ? function (id) {                                      // 42\n\t\tvar value;                                                                           // 43\n\t\tif (cache.hasOwnProperty(id)) {                                                      // 44\n\t\t\thitListeners && conf.emit('hit', id, arguments, this);                              // 45\n\t\t\treturn cache[id];                                                                   // 46\n\t\t} else {                                                                             // 47\n\t\t\tif (arguments.length === 1) {                                                       // 48\n\t\t\t\tvalue = call.call(fn, this, id);                                                   // 49\n\t\t\t} else {                                                                            // 50\n\t\t\t\tvalue = apply.call(fn, this, arguments);                                           // 51\n\t\t\t}                                                                                   // 52\n\t\t\tif (cache.hasOwnProperty(id)) {                                                     // 53\n\t\t\t\tthrow new CustomError(\"Circular invocation\", 'CIRCULAR_INVOCATION');               // 54\n\t\t\t}                                                                                   // 55\n\t\t\tcache[id] = value;                                                                  // 56\n\t\t\tinitListeners && conf.emit('init', id);                                             // 57\n\t\t\treturn value;                                                                       // 58\n\t\t}                                                                                    // 59\n\t} : function () {                                                                     // 60\n\t\tvar id = get(arguments), value;                                                      // 61\n\t\tif (cache.hasOwnProperty(id)) {                                                      // 62\n\t\t\thitListeners && conf.emit('hit', id, arguments, this);                              // 63\n\t\t\treturn cache[id];                                                                   // 64\n\t\t} else {                                                                             // 65\n\t\t\tvalue = apply.call(conf.fn, this, arguments);                                       // 66\n\t\t\tif (cache.hasOwnProperty(id)) {                                                     // 67\n\t\t\t\tthrow new CustomError(\"Circular invocation\", 'CIRCULAR_INVOCATION');               // 68\n\t\t\t}                                                                                   // 69\n\t\t\tcache[id] = value;                                                                  // 70\n\t\t\tinitListeners && conf.emit('init', id);                                             // 71\n\t\t\treturn value;                                                                       // 72\n\t\t}                                                                                    // 73\n\t};                                                                                    // 74\n                                                                                       // 75\n\tconf.clear = function (id) {                                                          // 76\n\t\tif (cache.hasOwnProperty(id)) {                                                      // 77\n\t\t\tpurgeListeners && conf.emit('purge', id);                                           // 78\n\t\t\tdelete cache[id];                                                                   // 79\n\t\t}                                                                                    // 80\n\t};                                                                                    // 81\n\tconf.clearAll = function () { cache = conf.cache = {}; };                             // 82\n                                                                                       // 83\n\tconf.once('ready', function () {                                                      // 84\n\t\tfn = conf.fn;                                                                        // 85\n\t\thitListeners = hasListeners(conf, 'hit');                                            // 86\n\t\tinitListeners = hasListeners(conf, 'init');                                          // 87\n\t\tpurgeListeners = hasListeners(conf, 'purge');                                        // 88\n\t});                                                                                   // 89\n});                                                                                    // 90\n                                                                                       // 91\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ext\":{\"dispose.js\":[\"es5-ext/lib/Object/valid-callable\",\"es5-ext/lib/Object/for-each\",\"../_base\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/ext/di //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Call dispose callback on each cache purge                                           // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar callable = require('es5-ext/lib/Object/valid-callable')                            // 5\n  , forEach  = require('es5-ext/lib/Object/for-each')                                  // 6\n  , ext      = require('../_base').ext                                                 // 7\n                                                                                       // 8\n  , slice = Array.prototype.slice;                                                     // 9\n                                                                                       // 10\next.dispose = function (dispose, conf, options) {                                      // 11\n\tvar clear, async;                                                                     // 12\n                                                                                       // 13\n\tcallable(dispose);                                                                    // 14\n                                                                                       // 15\n\tasync = (options.async && ext.async);                                                 // 16\n\tconf.on('purge' + (async ? 'async' : ''), clear =  async ? function (id) {            // 17\n\t\tvar value = conf.async[id];                                                          // 18\n\t\tdelete conf.cache[id];                                                               // 19\n\t\tdispose.apply(conf.memoized['_memoize:context_'], slice.call(value, 1));             // 20\n\t} : function (id) {                                                                   // 21\n\t\tvar value = conf.cache[id];                                                          // 22\n\t\tdelete conf.cache[id];                                                               // 23\n\t\tdispose.call(conf.memoized['_memoize:context_'], value);                             // 24\n\t});                                                                                   // 25\n                                                                                       // 26\n\tif (!async) {                                                                         // 27\n\t\tconf.on('purgeall', function () {                                                    // 28\n\t\t\tforEach(conf.cache, function (value, id) { clear(id); });                           // 29\n\t\t});                                                                                  // 30\n\t}                                                                                     // 31\n};                                                                                     // 32\n                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"resolvers.js\":[\"es5-ext/lib/Array/from\",\"es5-ext/lib/Object/for-each\",\"es5-ext/lib/Object/valid-callable\",\"../_base\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/ext/re //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Normalize arguments before passing them to underlying function                      // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar toArray    = require('es5-ext/lib/Array/from')                                     // 5\n  , forEach    = require('es5-ext/lib/Object/for-each')                                // 6\n  , callable   = require('es5-ext/lib/Object/valid-callable')                          // 7\n                                                                                       // 8\n  , slice = Array.prototype.slice                                                      // 9\n                                                                                       // 10\n  , resolve;                                                                           // 11\n                                                                                       // 12\nresolve = function (args) {                                                            // 13\n\treturn this.map(function (r, i) {                                                     // 14\n\t\treturn r ? r(args[i]) : args[i];                                                     // 15\n\t}).concat(slice.call(args, this.length));                                             // 16\n};                                                                                     // 17\n                                                                                       // 18\nrequire('../_base').ext.resolvers = function (resolvers, conf) {                       // 19\n\tvar resolver;                                                                         // 20\n                                                                                       // 21\n\tresolver = toArray(resolvers);                                                        // 22\n\tresolver.forEach(function (r) { (r == null) || callable(r); });                       // 23\n\tresolver = resolve.bind(resolver);                                                    // 24\n                                                                                       // 25\n\t(function (fn) {                                                                      // 26\n\t\tconf.memoized = function () {                                                        // 27\n\t\t\tvar value;                                                                          // 28\n\t\t\tconf.memoized.args = arguments;                                                     // 29\n\t\t\tvalue = fn.apply(this, resolver(arguments));                                        // 30\n\t\t\tdelete conf.memoized.args;                                                          // 31\n\t\t\treturn value;                                                                       // 32\n\t\t};                                                                                   // 33\n\t\tforEach(fn, function (value, name) {                                                 // 34\n\t\t\tconf.memoized[name] = function () {                                                 // 35\n\t\t\t\treturn fn[name].apply(this, resolver(arguments));                                  // 36\n\t\t\t};                                                                                  // 37\n\t\t});                                                                                  // 38\n\t}(conf.memoized));                                                                    // 39\n};                                                                                     // 40\n                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"async.js\":[\"es5-ext/lib/Array/from\",\"es5-ext/lib/Array/prototype/last\",\"es5-ext/lib/Object/for-each\",\"es5-ext/lib/Object/is-callable\",\"next-tick\",\"../_base\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/ext/as //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Support for asynchronous functions                                                  // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar toArray    = require('es5-ext/lib/Array/from')                                     // 5\n  , last       = require('es5-ext/lib/Array/prototype/last')                           // 6\n  , forEach    = require('es5-ext/lib/Object/for-each')                                // 7\n  , isCallable = require('es5-ext/lib/Object/is-callable')                             // 8\n  , nextTick   = require('next-tick')                                                  // 9\n                                                                                       // 10\n  , isArray = Array.isArray, slice = Array.prototype.slice                             // 11\n  , apply = Function.prototype.apply;                                                  // 12\n                                                                                       // 13\nrequire('../_base').ext.async = function (ignore, conf) {                              // 14\n\tvar cache, purge;                                                                     // 15\n                                                                                       // 16\n\tcache = conf.async = {};                                                              // 17\n                                                                                       // 18\n\t(function (org) {                                                                     // 19\n\t\tvar value, cb, initContext, initArgs, fn, resolver;                                  // 20\n                                                                                       // 21\n\t\tconf.on('init', function (id) {                                                      // 22\n\t\t\tvalue.id = id;                                                                      // 23\n\t\t\tcache[id] = cb ? [cb] : [];                                                         // 24\n\t\t});                                                                                  // 25\n                                                                                       // 26\n\t\tconf.on('hit', function (id, syncArgs, syncCtx) {                                    // 27\n\t\t\tif (!cb) {                                                                          // 28\n\t\t\t\treturn;                                                                            // 29\n\t\t\t}                                                                                   // 30\n                                                                                       // 31\n\t\t\tif (isArray(cache[id])) {                                                           // 32\n\t\t\t\tcache[id].push(cb);                                                                // 33\n\t\t\t} else {                                                                            // 34\n\t\t\t\tnextTick(function (cb, id, ctx, args) {                                            // 35\n\t\t\t\t\tif (cache[id]) {                                                                  // 36\n\t\t\t\t\t\tconf.emit('hitasync', id, syncArgs, syncCtx);                                    // 37\n\t\t\t\t\t\tapply.call(cb, this.context, this);                                              // 38\n\t\t\t\t\t} else {                                                                          // 39\n\t\t\t\t\t\t// Purged in a meantime, we shouldn't rely on cached value, recall               // 40\n\t\t\t\t\t\tfn.apply(ctx, args);                                                             // 41\n\t\t\t\t\t}                                                                                 // 42\n\t\t\t\t}.bind(cache[id], cb, id, initContext, initArgs));                                 // 43\n\t\t\t\tinitContext = initArgs = null;                                                     // 44\n\t\t\t}                                                                                   // 45\n\t\t});                                                                                  // 46\n\t\tconf.fn = function () {                                                              // 47\n\t\t\tvar args, asyncArgs;                                                                // 48\n\t\t\targs = arguments;                                                                   // 49\n\t\t\tasyncArgs = toArray(args);                                                          // 50\n\t\t\tasyncArgs.push(value = function self(err) {                                         // 51\n\t\t\t\tvar i, cb, waiting, res;                                                           // 52\n\t\t\t\tif (self.id == null) {                                                             // 53\n\t\t\t\t\t// Shouldn't happen, means async callback was called sync way                     // 54\n\t\t\t\t\tnextTick(apply.bind(self, this, arguments));                                      // 55\n\t\t\t\t\treturn;                                                                           // 56\n\t\t\t\t}                                                                                  // 57\n\t\t\t\twaiting = cache[self.id];                                                          // 58\n\t\t\t\tif (conf.cache.hasOwnProperty(self.id)) {                                          // 59\n\t\t\t\t\tif (err) {                                                                        // 60\n\t\t\t\t\t\tdelete cache[self.id];                                                           // 61\n\t\t\t\t\t\tconf.clear(self.id);                                                             // 62\n\t\t\t\t\t} else {                                                                          // 63\n\t\t\t\t\t\targuments.context = this;                                                        // 64\n\t\t\t\t\t\tcache[self.id] = arguments;                                                      // 65\n\t\t\t\t\t\tconf.emit('initasync', self.id, waiting.length);                                 // 66\n\t\t\t\t\t}                                                                                 // 67\n\t\t\t\t} else {                                                                           // 68\n\t\t\t\t\tdelete cache[self.id];                                                            // 69\n\t\t\t\t}                                                                                  // 70\n\t\t\t\tfor (i = 0; (cb = waiting[i]); ++i) {                                              // 71\n\t\t\t\t\tres = apply.call(cb, this, arguments);                                            // 72\n\t\t\t\t}                                                                                  // 73\n\t\t\t\treturn res;                                                                        // 74\n\t\t\t});                                                                                 // 75\n\t\t\treturn apply.call(org, this, asyncArgs);                                            // 76\n\t\t};                                                                                   // 77\n                                                                                       // 78\n\t\tfn = conf.memoized;                                                                  // 79\n\t\tresolver = function (args) {                                                         // 80\n\t\t\tcb = last.call(args);                                                               // 81\n\t\t\tif (isCallable(cb)) {                                                               // 82\n\t\t\t\treturn slice.call(args, 0, -1);                                                    // 83\n\t\t\t} else {                                                                            // 84\n\t\t\t\tcb = null;                                                                         // 85\n\t\t\t\treturn args;                                                                       // 86\n\t\t\t}                                                                                   // 87\n\t\t};                                                                                   // 88\n\t\tconf.memoized = function () {                                                        // 89\n\t\t\treturn fn.apply(initContext = this, initArgs = resolver(arguments));                // 90\n\t\t};                                                                                   // 91\n\t\tforEach(fn, function (value, name) {                                                 // 92\n\t\t\tconf.memoized[name] = function () {                                                 // 93\n\t\t\t\treturn fn[name].apply(this, resolver(arguments));                                  // 94\n\t\t\t};                                                                                  // 95\n\t\t});                                                                                  // 96\n                                                                                       // 97\n\t}(conf.fn));                                                                          // 98\n                                                                                       // 99\n\tconf.on('purge', purge = function (id) {                                              // 100\n\t\t// If false, we don't have value yet, so we assume that intention is not             // 101\n\t\t// to memoize this call. After value is obtained we don't cache it but               // 102\n\t\t// gracefully pass to callback                                                       // 103\n\t\tif (!isArray(cache[id])) {                                                           // 104\n\t\t\tconf.emit('purgeasync', id);                                                        // 105\n\t\t\tdelete cache[id];                                                                   // 106\n\t\t}                                                                                    // 107\n\t});                                                                                   // 108\n                                                                                       // 109\n\tconf.on('purgeall', function () {                                                     // 110\n\t\tforEach(conf.async, function (value, id) { purge(id); });                            // 111\n\t});                                                                                   // 112\n};                                                                                     // 113\n                                                                                       // 114\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ref-counter.js\":[\"../_base\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/ext/re //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Reference counter, useful for garbage collector like functionality                  // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar ext = require('../_base').ext;                                                     // 5\n                                                                                       // 6\next.refCounter = function (ignore, conf, options) {                                    // 7\n\tvar cache, async;                                                                     // 8\n                                                                                       // 9\n\tcache = {};                                                                           // 10\n\tasync = options.async && ext.async;                                                   // 11\n                                                                                       // 12\n\tconf.on('init' + (async ? 'async' : ''), async ? function (id, length) {              // 13\n\t\tcache[id] = length;                                                                  // 14\n\t} : function (id) { cache[id] = 1; });                                                // 15\n\tconf.on('hit' + (async ? 'async' : ''), function (id) { ++cache[id]; });              // 16\n\tconf.on('purge' + (async ? 'async' : ''), function (id) {                             // 17\n\t\tdelete cache[id];                                                                    // 18\n\t});                                                                                   // 19\n\tif (!async) {                                                                         // 20\n\t\tconf.on('purgeall', function () { cache = {}; });                                    // 21\n\t}                                                                                     // 22\n                                                                                       // 23\n\tconf.memoized.clearRef = function () {                                                // 24\n\t\tvar id = conf.get(arguments);                                                        // 25\n\t\tif (cache.hasOwnProperty(id)) {                                                      // 26\n\t\t\tif (!--cache[id]) {                                                                 // 27\n\t\t\t\tconf.clear(id);                                                                    // 28\n\t\t\t\treturn true;                                                                       // 29\n\t\t\t}                                                                                   // 30\n\t\t\treturn false;                                                                       // 31\n\t\t}                                                                                    // 32\n\t\treturn null;                                                                         // 33\n\t};                                                                                    // 34\n};                                                                                     // 35\n                                                                                       // 36\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"method.js\":[\"es5-ext/lib/Object/descriptor\",\"es5-ext/lib/global\",\"es5-ext/lib/Object/extend\",\"es5-ext/lib/String/is-string\",\"../_base\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/ext/me //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Memoized methods factory                                                            // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar d        = require('es5-ext/lib/Object/descriptor')                                // 5\n  , global   = require('es5-ext/lib/global')                                           // 6\n  , extend   = require('es5-ext/lib/Object/extend')                                    // 7\n  , isString = require('es5-ext/lib/String/is-string')                                 // 8\n                                                                                       // 9\n  , create = Object.create, defineProperty = Object.defineProperty;                    // 10\n                                                                                       // 11\nrequire('../_base').ext.method = function (method, conf, options) {                    // 12\n\tif (isString(options.method)) {                                                       // 13\n\t\tmethod = { name: String(options.method),                                             // 14\n\t\t\tdescriptor: { configurable: true, writable: true } };                               // 15\n\t} else {                                                                              // 16\n\t\tmethod = options.method;                                                             // 17\n\t\tmethod.name = String(method.name);                                                   // 18\n\t\tmethod.descriptor = (method.descriptor == null) ?                                    // 19\n\t\t\t\t{ configurable: true, writable: true } : Object(method.descriptor);                // 20\n\t}                                                                                     // 21\n\toptions = create(options);                                                            // 22\n\toptions.method = undefined;                                                           // 23\n                                                                                       // 24\n\t(function (fn) {                                                                      // 25\n\t\tconf.memoized = function () {                                                        // 26\n\t\t\tvar memoized;                                                                       // 27\n\t\t\tif (this && (this !== global)) {                                                    // 28\n\t\t\t\tmemoized = method.descriptor.value =                                               // 29\n\t\t\t\t\tconf.memoize(conf.fn.bind(this), options);                                        // 30\n\t\t\t\tdefineProperty(this, method.name, method.descriptor);                              // 31\n\t\t\t\tdefineProperty(memoized, '_memoize:context_', d(this));                            // 32\n\t\t\t\treturn memoized.apply(this, arguments);                                            // 33\n\t\t\t}                                                                                   // 34\n\t\t\treturn fn.apply(this, arguments);                                                   // 35\n\t\t};                                                                                   // 36\n\t\textend(conf.memoized, fn);                                                           // 37\n\t}(conf.memoized));                                                                    // 38\n};                                                                                     // 39\n                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"max-age.js\":[\"es5-ext/lib/Number/is-number\",\"es5-ext/lib/Object/for-each\",\"next-tick\",\"../_base\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/ext/ma //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Timeout cached values                                                               // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar isNumber = require('es5-ext/lib/Number/is-number')                                 // 5\n  , forEach  = require('es5-ext/lib/Object/for-each')                                  // 6\n  , nextTick = require('next-tick')                                                    // 7\n  , ext      = require('../_base').ext                                                 // 8\n                                                                                       // 9\n  , max = Math.max, min = Math.min;                                                    // 10\n                                                                                       // 11\next.maxAge = function (maxAge, conf, options) {                                        // 12\n\tvar cache, async, preFetchAge, preFetchCache;                                         // 13\n                                                                                       // 14\n\tmaxAge = maxAge >>> 0;                                                                // 15\n\tif (!maxAge) {                                                                        // 16\n\t\treturn;                                                                              // 17\n\t}                                                                                     // 18\n                                                                                       // 19\n\tcache = {};                                                                           // 20\n\tasync = options.async && ext.async;                                                   // 21\n\tconf.on('init' + (async ? 'async' : ''), function (id) {                              // 22\n\t\tcache[id] = setTimeout(function () { conf.clear(id); }, maxAge);                     // 23\n\t\tif (preFetchCache) {                                                                 // 24\n\t\t\tpreFetchCache[id] = setTimeout(function () { delete preFetchCache[id]; },           // 25\n\t\t\t\tpreFetchAge);                                                                      // 26\n\t\t}                                                                                    // 27\n\t});                                                                                   // 28\n\tconf.on('purge' + (async ? 'async' : ''), function (id) {                             // 29\n\t\tclearTimeout(cache[id]);                                                             // 30\n\t\tif (preFetchCache && preFetchCache[id]) {                                            // 31\n\t\t\tclearTimeout(preFetchCache[id]);                                                    // 32\n\t\t\tdelete preFetchCache[id];                                                           // 33\n\t\t}                                                                                    // 34\n\t\tdelete cache[id];                                                                    // 35\n\t});                                                                                   // 36\n                                                                                       // 37\n\tif (options.preFetch) {                                                               // 38\n\t\tif (isNumber(options.preFetch)) {                                                    // 39\n\t\t\tpreFetchAge = max(min(Number(options.preFetch), 1), 0);                             // 40\n\t\t} else {                                                                             // 41\n\t\t\tpreFetchAge = 0.333;                                                                // 42\n\t\t}                                                                                    // 43\n\t\tif (preFetchAge) {                                                                   // 44\n\t\t\tpreFetchCache = {};                                                                 // 45\n\t\t\tpreFetchAge = (1 - preFetchAge) * maxAge;                                           // 46\n\t\t\tconf.on('hit' + (async ? 'async' : ''), function (id, args, ctx) {                  // 47\n\t\t\t\tif (!preFetchCache[id]) {                                                          // 48\n\t\t\t\t\tpreFetchCache[id] = true;                                                         // 49\n\t\t\t\t\tnextTick(function () {                                                            // 50\n\t\t\t\t\t\tif (preFetchCache[id] === true) {                                                // 51\n\t\t\t\t\t\t\tdelete preFetchCache[id];                                                       // 52\n\t\t\t\t\t\t\tconf.clear(id);                                                                 // 53\n\t\t\t\t\t\t\tconf.memoized.apply(ctx, args);                                                 // 54\n\t\t\t\t\t\t}                                                                                // 55\n\t\t\t\t\t});                                                                               // 56\n\t\t\t\t}                                                                                  // 57\n\t\t\t});                                                                                 // 58\n\t\t}                                                                                    // 59\n\t}                                                                                     // 60\n                                                                                       // 61\n\tif (!async) {                                                                         // 62\n\t\tconf.on('purgeall', function () {                                                    // 63\n\t\t\tforEach(cache, function (id) {                                                      // 64\n\t\t\t\tclearTimeout(id);                                                                  // 65\n\t\t\t});                                                                                 // 66\n\t\t\tcache = {};                                                                         // 67\n\t\t\tif (preFetchCache) {                                                                // 68\n\t\t\t\tforEach(preFetchCache, function (id) {                                             // 69\n\t\t\t\t\tclearTimeout(id);                                                                 // 70\n\t\t\t\t});                                                                                // 71\n\t\t\t\tpreFetchCache = {};                                                                // 72\n\t\t\t}                                                                                   // 73\n\t\t});                                                                                  // 74\n\t}                                                                                     // 75\n};                                                                                     // 76\n                                                                                       // 77\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"max.js\":[\"../_base\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/lib/ext/ma //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n// Limit cache size, LRU (least recently used) algorithm.                              // 1\n                                                                                       // 2\n'use strict';                                                                          // 3\n                                                                                       // 4\nvar ext = require('../_base').ext;                                                     // 5\n                                                                                       // 6\next.max = function (max, conf, options) {                                              // 7\n\tvar index, base, size, queue, map, async;                                             // 8\n                                                                                       // 9\n\tmax = max >>> 0;                                                                      // 10\n\tif (!max) {                                                                           // 11\n\t\treturn;                                                                              // 12\n\t}                                                                                     // 13\n                                                                                       // 14\n\tindex = -1;                                                                           // 15\n\tbase = size = 0;                                                                      // 16\n\tqueue = {};                                                                           // 17\n\tmap = {};                                                                             // 18\n\tasync = options.async && ext.async;                                                   // 19\n                                                                                       // 20\n\tconf.on('init' + (async ? 'async' : ''), function (id) {                              // 21\n\t\tqueue[++index] = id;                                                                 // 22\n\t\tmap[id] = index;                                                                     // 23\n\t\t++size;                                                                              // 24\n\t\tif (size > max) {                                                                    // 25\n\t\t\tconf.clear(queue[base]);                                                            // 26\n\t\t}                                                                                    // 27\n\t});                                                                                   // 28\n                                                                                       // 29\n\tconf.on('hit' + (async ? 'async' : ''), function (id) {                               // 30\n\t\tvar oldIndex = map[id];                                                              // 31\n\t\tqueue[++index] = id;                                                                 // 32\n\t\tmap[id] = index;                                                                     // 33\n\t\tdelete queue[oldIndex];                                                              // 34\n\t\tif (base === oldIndex) {                                                             // 35\n\t\t\twhile (!queue.hasOwnProperty(++base)) continue; //jslint: skip                      // 36\n\t\t}                                                                                    // 37\n\t});                                                                                   // 38\n                                                                                       // 39\n\tconf.on('purge' + (async ? 'async' : ''), function (id) {                             // 40\n\t\tvar oldIndex = map[id];                                                              // 41\n\t\tdelete queue[oldIndex];                                                              // 42\n\t\t--size;                                                                              // 43\n\t\tif (base === oldIndex) {                                                             // 44\n\t\t\tif (!size) {                                                                        // 45\n\t\t\t\tindex = -1;                                                                        // 46\n\t\t\t\tbase = 0;                                                                          // 47\n\t\t\t} else {                                                                            // 48\n\t\t\t\twhile (!queue.hasOwnProperty(++base)) continue; //jslint: skip                     // 49\n\t\t\t}                                                                                   // 50\n\t\t}                                                                                    // 51\n\t});                                                                                   // 52\n                                                                                       // 53\n\tif (!async) {                                                                         // 54\n\t\tconf.on('purgeall', function () {                                                    // 55\n\t\t\tindex = -1;                                                                         // 56\n\t\t\tbase = size = 0;                                                                    // 57\n\t\t\tqueue = {};                                                                         // 58\n\t\t\tmap = {};                                                                           // 59\n\t\t});                                                                                  // 60\n\t}                                                                                     // 61\n};                                                                                     // 62\n                                                                                       // 63\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"node_modules\":{\"event-emitter\":{\"lib\":{\"has-listeners.js\":[\"es5-ext/lib/Object/is-empty\",\"es5-ext/lib/Object/valid-value\",\"./_id\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/node_modul //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar isEmpty = require('es5-ext/lib/Object/is-empty')                                   // 3\n  , value   = require('es5-ext/lib/Object/valid-value')                                // 4\n  , id      = require('./_id');                                                        // 5\n                                                                                       // 6\nmodule.exports = function (obj/*, type*/) {                                            // 7\n\tvar type;                                                                             // 8\n\tvalue(obj);                                                                           // 9\n\ttype = arguments[1];                                                                  // 10\n\tif (arguments.length > 1) {                                                           // 11\n\t\treturn obj.hasOwnProperty(id) && obj[id].hasOwnProperty(type);                       // 12\n\t} else {                                                                              // 13\n\t\treturn obj.hasOwnProperty(id) && !isEmpty(obj[id]);                                  // 14\n\t}                                                                                     // 15\n};                                                                                     // 16\n                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_id.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/node_modul //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nmodule.exports = '_ee2_';                                                              // 3\n                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"core.js\":[\"es5-ext/lib/Object/descriptor\",\"es5-ext/lib/Object/valid-callable\",\"./_id\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/node_modul //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nvar d        = require('es5-ext/lib/Object/descriptor')                                // 3\n  , callable = require('es5-ext/lib/Object/valid-callable')                            // 4\n  , id       = require('./_id')                                                        // 5\n                                                                                       // 6\n  , apply = Function.prototype.apply, call = Function.prototype.call                   // 7\n  , create = Object.create, defineProperty = Object.defineProperty                     // 8\n  , defineProperties = Object.defineProperties                                         // 9\n  , descriptor = { configurable: true, enumerable: false, writable: true }             // 10\n                                                                                       // 11\n  , on, once, off, emit                                                                // 12\n  , colId, methods, descriptors, base;                                                 // 13\n                                                                                       // 14\ncolId = id + 'l_';                                                                     // 15\n                                                                                       // 16\non = function (type, listener) {                                                       // 17\n\tvar data;                                                                             // 18\n                                                                                       // 19\n\tcallable(listener);                                                                   // 20\n                                                                                       // 21\n\tif (!this.hasOwnProperty(id)) {                                                       // 22\n\t\tdata = descriptor.value = {};                                                        // 23\n\t\tdefineProperty(this, id, descriptor);                                                // 24\n\t\tdescriptor.value = null;                                                             // 25\n\t} else {                                                                              // 26\n\t\tdata = this[id];                                                                     // 27\n\t}                                                                                     // 28\n\tif (!data.hasOwnProperty(type)) data[type] = listener;                                // 29\n\telse if (data[type].hasOwnProperty(colId)) data[type].push(listener);                 // 30\n\telse (data[type] = [data[type], listener])[colId] = true;                             // 31\n                                                                                       // 32\n\treturn this;                                                                          // 33\n};                                                                                     // 34\n                                                                                       // 35\nonce = function (type, listener) {                                                     // 36\n\tvar once, self;                                                                       // 37\n                                                                                       // 38\n\tcallable(listener);                                                                   // 39\n\tself = this;                                                                          // 40\n\ton.call(this, type, once = function () {                                              // 41\n\t\toff.call(self, type, once);                                                          // 42\n\t\tapply.call(listener, this, arguments);                                               // 43\n\t});                                                                                   // 44\n                                                                                       // 45\n\tonce._listener = listener;                                                            // 46\n\treturn this;                                                                          // 47\n};                                                                                     // 48\n                                                                                       // 49\noff = function (type, listener) {                                                      // 50\n\tvar data, listeners, candidate, i;                                                    // 51\n                                                                                       // 52\n\tcallable(listener);                                                                   // 53\n                                                                                       // 54\n\tif (!this.hasOwnProperty(id)) return this;                                            // 55\n\tdata = this[id];                                                                      // 56\n\tif (!data.hasOwnProperty(type)) return this;                                          // 57\n\tlisteners = data[type];                                                               // 58\n                                                                                       // 59\n\tif (listeners.hasOwnProperty(colId)) {                                                // 60\n\t\tfor (i = 0; (candidate = listeners[i]); ++i) {                                       // 61\n\t\t\tif ((candidate === listener) || (candidate._listener === listener)) {               // 62\n\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];                     // 63\n\t\t\t\telse listeners.splice(i, 1);                                                       // 64\n\t\t\t}                                                                                   // 65\n\t\t}                                                                                    // 66\n\t} else {                                                                              // 67\n\t\tif ((listeners === listener) || (listeners._listener === listener)) {                // 68\n\t\t\tdelete data[type];                                                                  // 69\n\t\t}                                                                                    // 70\n\t}                                                                                     // 71\n                                                                                       // 72\n\treturn this;                                                                          // 73\n};                                                                                     // 74\n                                                                                       // 75\nemit = function (type) {                                                               // 76\n\tvar data, i, l, listener, listeners, args;                                            // 77\n                                                                                       // 78\n\tif (!this.hasOwnProperty(id)) return;                                                 // 79\n\tdata = this[id];                                                                      // 80\n\tif (!data.hasOwnProperty(type)) return;                                               // 81\n\tlisteners = data[type];                                                               // 82\n                                                                                       // 83\n\tif (listeners.hasOwnProperty(colId)) {                                                // 84\n\t\tl = arguments.length;                                                                // 85\n\t\targs = new Array(l - 1);                                                             // 86\n\t\tfor (i = 1; i < l; ++i) {                                                            // 87\n\t\t\targs[i - 1] = arguments[i];                                                         // 88\n\t\t}                                                                                    // 89\n                                                                                       // 90\n\t\tlisteners = listeners.slice();                                                       // 91\n\t\tfor (i = 0; (listener = listeners[i]); ++i) {                                        // 92\n\t\t\tapply.call(listener, this, args);                                                   // 93\n\t\t}                                                                                    // 94\n\t} else {                                                                              // 95\n\t\tswitch (arguments.length) {                                                          // 96\n\t\tcase 1:                                                                              // 97\n\t\t\tcall.call(listeners, this);                                                         // 98\n\t\t\tbreak;                                                                              // 99\n\t\tcase 2:                                                                              // 100\n\t\t\tcall.call(listeners, this, arguments[1]);                                           // 101\n\t\t\tbreak;                                                                              // 102\n\t\tcase 3:                                                                              // 103\n\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);                             // 104\n\t\t\tbreak;                                                                              // 105\n\t\tdefault:                                                                             // 106\n\t\t\tl = arguments.length;                                                               // 107\n\t\t\targs = new Array(l - 1);                                                            // 108\n\t\t\tfor (i = 1; i < l; ++i) {                                                           // 109\n\t\t\t\targs[i - 1] = arguments[i];                                                        // 110\n\t\t\t}                                                                                   // 111\n\t\t\tapply.call(listeners, this, args);                                                  // 112\n\t\t}                                                                                    // 113\n\t}                                                                                     // 114\n};                                                                                     // 115\n                                                                                       // 116\nmethods = {                                                                            // 117\n\ton: on,                                                                               // 118\n\tonce: once,                                                                           // 119\n\toff: off,                                                                             // 120\n\temit: emit                                                                            // 121\n};                                                                                     // 122\n                                                                                       // 123\ndescriptors = {                                                                        // 124\n\ton: d(on),                                                                            // 125\n\tonce: d(once),                                                                        // 126\n\toff: d(off),                                                                          // 127\n\temit: d(emit)                                                                         // 128\n};                                                                                     // 129\n                                                                                       // 130\nbase = defineProperties({}, descriptors);                                              // 131\n                                                                                       // 132\nmodule.exports = exports = function (o) {                                              // 133\n\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);         // 134\n};                                                                                     // 135\nexports.methods = methods;                                                             // 136\n                                                                                       // 137\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"next-tick\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// ../../.1.1.17.6xtim6++os+web.browser+web.cordova/npm/node_modules/cli-color/node_mo //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nexports.name = \"next-tick\";                                                            // 1\nexports.version = \"0.1.0\";                                                             // 2\nexports.main = \"lib/next-tick\";                                                        // 3\n                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"next-tick.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// node_modules/meteor/logging/node_modules/cli-color/node_modules/memoizee/node_modul //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n'use strict';                                                                          // 1\n                                                                                       // 2\nif ((typeof process !== 'undefined') && process &&                                     // 3\n\t\t(typeof process.nextTick === 'function')) {                                          // 4\n                                                                                       // 5\n\t// Node.js                                                                            // 6\n\tmodule.exports = process.nextTick;                                                    // 7\n                                                                                       // 8\n} else if (typeof setImmediate === 'function') {                                       // 9\n                                                                                       // 10\n\t// W3C Draft                                                                          // 11\n\t// https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html       // 12\n\tmodule.exports = function (cb) { setImmediate(cb); };                                 // 13\n                                                                                       // 14\n} else {                                                                               // 15\n                                                                                       // 16\n\t// Wide available standard                                                            // 17\n\tmodule.exports = function (cb) { setTimeout(cb, 0); };                                // 18\n}                                                                                      // 19\n                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/logging/logging.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.logging = {}, {\n  Log: Log\n});\n\n})();\n","servePath":"/packages/logging.js"}]