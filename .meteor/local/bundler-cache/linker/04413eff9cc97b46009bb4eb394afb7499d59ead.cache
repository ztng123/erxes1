[{"type":"js","data":"/* Imports for global scope */\n\nLog = Package.logging.Log;\nECMAScript = Package.ecmascript.ECMAScript;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nEJSON = Package.ejson.EJSON;\ncheck = Package.check.check;\nMatch = Package.check.Match;\n_ = Package.underscore._;\nValidatedMethod = Package['mdg:validated-method'].ValidatedMethod;\nValidationError = Package['mdg:validation-error'].ValidationError;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nFactory = Package['dburles:factory'].Factory;\nSyncedCron = Package['percolate:synced-cron'].SyncedCron;\nchai = Package['practicalmeteor:chai'].chai;\nassert = Package['practicalmeteor:chai'].assert;\nexpect = Package['practicalmeteor:chai'].expect;\nshould = Package['practicalmeteor:chai'].should;\nRoles = Package['alanning:roles'].Roles;\nPicker = Package['meteorhacks:picker'].Picker;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"integrations\":{\"social\":{\"server\":{\"facebook.js\":[\"babel-runtime/helpers/extends\",\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/toConsumableArray\",\"fbgraph\",\"meteor/meteorhacks:picker\",\"meteor/meteor\",\"/imports/api/server/utils\",\"/imports/api/conversations/conversations\",\"/imports/api/conversations/messages\",\"/imports/api/customers/customers\",\"/imports/api/integrations/integrations\",\"/imports/api/integrations/constants\",\"/imports/api/conversations/constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/social/server/facebook.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  graphRequest: function () {                                                                                          // 1\n    return graphRequest;                                                                                               // 1\n  },                                                                                                                   // 1\n  getPageList: function () {                                                                                           // 1\n    return getPageList;                                                                                                // 1\n  },                                                                                                                   // 1\n  SaveWebhookResponse: function () {                                                                                   // 1\n    return SaveWebhookResponse;                                                                                        // 1\n  },                                                                                                                   // 1\n  receiveWebhookResponse: function () {                                                                                // 1\n    return receiveWebhookResponse;                                                                                     // 1\n  },                                                                                                                   // 1\n  facebookReply: function () {                                                                                         // 1\n    return facebookReply;                                                                                              // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar graph = void 0;                                                                                                    // 1\nmodule.importSync(\"fbgraph\", {                                                                                         // 1\n  \"default\": function (v) {                                                                                            // 1\n    graph = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Picker = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteorhacks:picker\", {                                                                       // 1\n  Picker: function (v) {                                                                                               // 1\n    Picker = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar apolloNotifyNewMessage = void 0;                                                                                   // 1\nmodule.importSync(\"/imports/api/server/utils\", {                                                                       // 1\n  apolloNotifyNewMessage: function (v) {                                                                               // 1\n    apolloNotifyNewMessage = v;                                                                                        // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Conversations = void 0;                                                                                            // 1\nmodule.importSync(\"/imports/api/conversations/conversations\", {                                                        // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/conversations/messages\", {                                                             // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/integrations\", {                                                          // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar KIND_CHOICES = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/constants\", {                                                             // 1\n  KIND_CHOICES: function (v) {                                                                                         // 1\n    KIND_CHOICES = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar CONVERSATION_STATUSES = void 0,                                                                                    // 1\n    FACEBOOK_DATA_KINDS = void 0;                                                                                      // 1\nmodule.importSync(\"/imports/api/conversations/constants\", {                                                            // 1\n  CONVERSATION_STATUSES: function (v) {                                                                                // 1\n    CONVERSATION_STATUSES = v;                                                                                         // 1\n  },                                                                                                                   // 1\n  FACEBOOK_DATA_KINDS: function (v) {                                                                                  // 1\n    FACEBOOK_DATA_KINDS = v;                                                                                           // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\nvar graphRequest = {                                                                                                   // 16\n  base: function (method, path, accessToken) {                                                                         // 17\n    // set access token                                                                                                // 18\n    graph.setAccessToken(accessToken);                                                                                 // 19\n    var wrappedGraph = Meteor.wrapAsync(graph[method], graph);                                                         // 21\n                                                                                                                       //\n    try {                                                                                                              // 23\n      for (var _len = arguments.length, otherParams = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        otherParams[_key - 3] = arguments[_key];                                                                       // 17\n      }                                                                                                                // 23\n                                                                                                                       //\n      return wrappedGraph.apply(undefined, [path].concat((0, _toConsumableArray3.default)(otherParams))); // catch session expired or some other error\n    } catch (e) {                                                                                                      // 27\n      console.log(e.message); // eslint-disable-line no-console                                                        // 28\n                                                                                                                       //\n      return e.message;                                                                                                // 29\n    }                                                                                                                  // 30\n  },                                                                                                                   // 31\n  get: function () {                                                                                                   // 33\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {                       // 33\n      args[_key2] = arguments[_key2];                                                                                  // 33\n    }                                                                                                                  // 33\n                                                                                                                       //\n    return this.base.apply(this, ['get'].concat((0, _toConsumableArray3.default)(args)));                              // 34\n  },                                                                                                                   // 35\n  post: function () {                                                                                                  // 37\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {                       // 37\n      args[_key3] = arguments[_key3];                                                                                  // 37\n    }                                                                                                                  // 37\n                                                                                                                       //\n    return this.base.apply(this, ['post'].concat((0, _toConsumableArray3.default)(args)));                             // 38\n  }                                                                                                                    // 39\n};                                                                                                                     // 16\n                                                                                                                       //\nvar getPageList = function (accessToken) {                                                                             // 45\n  var response = graphRequest.get('/me/accounts?limit=100', accessToken);                                              // 46\n  return response.data.map(function (page) {                                                                           // 48\n    return {                                                                                                           // 48\n      id: page.id,                                                                                                     // 49\n      name: page.name                                                                                                  // 50\n    };                                                                                                                 // 48\n  });                                                                                                                  // 48\n};                                                                                                                     // 52\n                                                                                                                       //\nvar SaveWebhookResponse = function () {                                                                                //\n  function SaveWebhookResponse(userAccessToken, integration, data) {                                                   // 60\n    (0, _classCallCheck3.default)(this, SaveWebhookResponse);                                                          // 60\n    this.userAccessToken = userAccessToken;                                                                            // 61\n    this.integration = integration; // received facebook data                                                          // 63\n                                                                                                                       //\n    this.data = data;                                                                                                  // 66\n    this.currentPageId = null;                                                                                         // 68\n  }                                                                                                                    // 69\n                                                                                                                       //\n  SaveWebhookResponse.prototype.start = function () {                                                                  //\n    function start() {                                                                                                 //\n      var _this = this;                                                                                                // 71\n                                                                                                                       //\n      var data = this.data;                                                                                            // 72\n      var integration = this.integration;                                                                              // 73\n                                                                                                                       //\n      if (data.object === 'page') {                                                                                    // 75\n        data.entry.forEach(function (entry) {                                                                          // 76\n          // check receiving page is in integration's page list                                                        // 77\n          if (!integration.facebookData.pageIds.includes(entry.id)) {                                                  // 78\n            return;                                                                                                    // 79\n          } // set current page                                                                                        // 80\n                                                                                                                       //\n                                                                                                                       //\n          _this.currentPageId = entry.id; // receive new messenger message                                             // 83\n                                                                                                                       //\n          if (entry.messaging) {                                                                                       // 86\n            _this.viaMessengerEvent(entry);                                                                            // 87\n          } // receive new feed                                                                                        // 88\n                                                                                                                       //\n                                                                                                                       //\n          if (entry.changes) {                                                                                         // 91\n            _this.viaFeedEvent(entry);                                                                                 // 92\n          }                                                                                                            // 93\n        });                                                                                                            // 94\n      }                                                                                                                // 95\n    }                                                                                                                  // 96\n                                                                                                                       //\n    return start;                                                                                                      //\n  }(); // via page messenger                                                                                           //\n                                                                                                                       //\n                                                                                                                       //\n  SaveWebhookResponse.prototype.viaMessengerEvent = function () {                                                      //\n    function viaMessengerEvent(entry) {                                                                                //\n      var _this2 = this;                                                                                               // 99\n                                                                                                                       //\n      entry.messaging.forEach(function (messagingEvent) {                                                              // 100\n        // someone sent us a message                                                                                   // 101\n        if (messagingEvent.message) {                                                                                  // 102\n          _this2.getOrCreateConversationByMessenger(messagingEvent);                                                   // 103\n        }                                                                                                              // 104\n      });                                                                                                              // 105\n    }                                                                                                                  // 106\n                                                                                                                       //\n    return viaMessengerEvent;                                                                                          //\n  }(); // wall post                                                                                                    //\n                                                                                                                       //\n                                                                                                                       //\n  SaveWebhookResponse.prototype.viaFeedEvent = function () {                                                           //\n    function viaFeedEvent(entry) {                                                                                     //\n      var _this3 = this;                                                                                               // 109\n                                                                                                                       //\n      entry.changes.forEach(function (event) {                                                                         // 110\n        // someone posted on our wall                                                                                  // 111\n        _this3.getOrCreateConversationByFeed(event.value);                                                             // 112\n      });                                                                                                              // 113\n    }                                                                                                                  // 114\n                                                                                                                       //\n    return viaFeedEvent;                                                                                               //\n  }(); // common get or create conversation helper using both in messenger and feed                                    //\n                                                                                                                       //\n                                                                                                                       //\n  SaveWebhookResponse.prototype.getOrCreateConversation = function () {                                                //\n    function getOrCreateConversation(params) {                                                                         //\n      // extract params                                                                                                // 118\n      var findSelector = params.findSelector,                                                                          // 117\n          status = params.status,                                                                                      // 117\n          senderId = params.senderId,                                                                                  // 117\n          facebookData = params.facebookData,                                                                          // 117\n          content = params.content,                                                                                    // 117\n          attachments = params.attachments,                                                                            // 117\n          msgFacebookData = params.msgFacebookData;                                                                    // 117\n      var conversation = Conversations.findOne((0, _extends3.default)({}, findSelector)); // create new conversation   // 129\n                                                                                                                       //\n      if (!conversation) {                                                                                             // 134\n        var conversationId = Conversations.insert({                                                                    // 135\n          integrationId: this.integration._id,                                                                         // 136\n          customerId: this.getOrCreateCustomer(senderId),                                                              // 137\n          status: status,                                                                                              // 138\n          content: content,                                                                                            // 139\n          // save facebook infos                                                                                       // 141\n          facebookData: (0, _extends3.default)({}, facebookData, {                                                     // 142\n            pageId: this.currentPageId                                                                                 // 144\n          })                                                                                                           // 142\n        });                                                                                                            // 135\n        conversation = Conversations.findOne(conversationId); // update conversation                                   // 147\n      } else {                                                                                                         // 150\n        Conversations.update({                                                                                         // 151\n          _id: conversation._id                                                                                        // 152\n        }, {                                                                                                           // 152\n          $set: {                                                                                                      // 154\n            // reset read history                                                                                      // 155\n            readUserIds: [],                                                                                           // 156\n            // if closed, reopen it                                                                                    // 158\n            status: CONVERSATION_STATUSES.OPEN                                                                         // 159\n          }                                                                                                            // 154\n        });                                                                                                            // 153\n      } // create new message                                                                                          // 163\n                                                                                                                       //\n                                                                                                                       //\n      this.createMessage({                                                                                             // 166\n        conversation: conversation,                                                                                    // 167\n        userId: senderId,                                                                                              // 168\n        content: content,                                                                                              // 169\n        attachments: attachments,                                                                                      // 170\n        facebookData: msgFacebookData                                                                                  // 171\n      });                                                                                                              // 166\n    }                                                                                                                  // 173\n                                                                                                                       //\n    return getOrCreateConversation;                                                                                    //\n  }(); // get or create new conversation by feed info                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  SaveWebhookResponse.prototype.getOrCreateConversationByFeed = function () {                                          //\n    function getOrCreateConversationByFeed(value) {                                                                    //\n      var commentId = value.comment_id; // collect only added actions                                                  // 177\n                                                                                                                       //\n      if (value.verb !== 'add') {                                                                                      // 180\n        return;                                                                                                        // 181\n      } // ignore duplicated action when like                                                                          // 182\n                                                                                                                       //\n                                                                                                                       //\n      if (value.verb === 'add' && value.item === 'like') {                                                             // 185\n        return;                                                                                                        // 186\n      } // if this is already saved then ignore it                                                                     // 187\n                                                                                                                       //\n                                                                                                                       //\n      if (commentId && Messages.findOne({                                                                              // 190\n        'facebookData.commentId': commentId                                                                            // 190\n      })) {                                                                                                            // 190\n        return;                                                                                                        // 191\n      }                                                                                                                // 192\n                                                                                                                       //\n      var senderName = value.sender_name; // sender_id is giving number values when feed and giving string value       // 194\n      // when messenger. customer.facebookData.senderId has type of string so                                          // 197\n      // convert it to string                                                                                          // 198\n                                                                                                                       //\n      var senderId = value.sender_id.toString();                                                                       // 199\n      var messageText = value.message; // when photo, video share, there will be no text, so link instead              // 201\n                                                                                                                       //\n      if (!messageText && value.link) {                                                                                // 204\n        messageText = value.link;                                                                                      // 205\n      } // when situations like checkin, there will be no text and no link                                             // 206\n      // if so ignore it                                                                                               // 209\n                                                                                                                       //\n                                                                                                                       //\n      if (!messageText) {                                                                                              // 210\n        return;                                                                                                        // 211\n      } // value.post_id is returning different value even though same post                                            // 212\n      // with the previous one. So fetch post info via graph api and                                                   // 215\n      // save returned value. This value will always be the same                                                       // 216\n                                                                                                                       //\n                                                                                                                       //\n      var postId = value.post_id; // get page access token                                                             // 217\n                                                                                                                       //\n      var response = graphRequest.get(this.currentPageId + \"/?fields=access_token\", this.userAccessToken); // acess token expired\n                                                                                                                       //\n      if (response === 'Error processing https request') {                                                             // 226\n        return;                                                                                                        // 227\n      } // get post object                                                                                             // 228\n                                                                                                                       //\n                                                                                                                       //\n      response = graphRequest.get(postId, response.access_token);                                                      // 231\n      postId = response.id;                                                                                            // 233\n      var status = CONVERSATION_STATUSES.NEW; // if we are posting from our page, close it automatically               // 235\n                                                                                                                       //\n      if (this.integration.facebookData.pageIds.includes(senderId)) {                                                  // 238\n        status = CONVERSATION_STATUSES.CLOSED;                                                                         // 239\n      }                                                                                                                // 240\n                                                                                                                       //\n      this.getOrCreateConversation({                                                                                   // 242\n        findSelector: {                                                                                                // 243\n          'facebookData.kind': FACEBOOK_DATA_KINDS.FEED,                                                               // 244\n          'facebookData.postId': postId                                                                                // 245\n        },                                                                                                             // 243\n        status: status,                                                                                                // 247\n        senderId: senderId,                                                                                            // 248\n        facebookData: {                                                                                                // 249\n          kind: FACEBOOK_DATA_KINDS.FEED,                                                                              // 250\n          senderId: senderId,                                                                                          // 251\n          senderName: senderName,                                                                                      // 252\n          postId: postId                                                                                               // 253\n        },                                                                                                             // 249\n        // message data                                                                                                // 256\n        content: messageText,                                                                                          // 257\n        msgFacebookData: {                                                                                             // 258\n          senderId: senderId,                                                                                          // 259\n          senderName: senderName,                                                                                      // 260\n          item: value.item,                                                                                            // 261\n          reactionType: value.reaction_type,                                                                           // 262\n          photoId: value.photo_id,                                                                                     // 263\n          videoId: value.video_id,                                                                                     // 264\n          link: value.link                                                                                             // 265\n        }                                                                                                              // 258\n      });                                                                                                              // 242\n    }                                                                                                                  // 268\n                                                                                                                       //\n    return getOrCreateConversationByFeed;                                                                              //\n  }(); // get or create new conversation by page messenger                                                             //\n                                                                                                                       //\n                                                                                                                       //\n  SaveWebhookResponse.prototype.getOrCreateConversationByMessenger = function () {                                     //\n    function getOrCreateConversationByMessenger(event) {                                                               //\n      var senderId = event.sender.id;                                                                                  // 272\n      var senderName = event.sender.name;                                                                              // 273\n      var recipientId = event.recipient.id;                                                                            // 274\n      var messageText = event.message.text || 'attachment'; // collect attachment's url, type fields                   // 275\n                                                                                                                       //\n      var attachments = (event.message.attachments || []).map(function (attachment) {                                  // 278\n        return {                                                                                                       // 278\n          type: attachment.type,                                                                                       // 279\n          url: attachment.payload ? attachment.payload.url : ''                                                        // 280\n        };                                                                                                             // 278\n      });                                                                                                              // 278\n      this.getOrCreateConversation({                                                                                   // 283\n        // try to find conversation by senderId, recipientId keys                                                      // 284\n        findSelector: {                                                                                                // 285\n          'facebookData.kind': FACEBOOK_DATA_KINDS.MESSENGER,                                                          // 286\n          $or: [{                                                                                                      // 287\n            'facebookData.senderId': senderId,                                                                         // 289\n            'facebookData.recipientId': recipientId                                                                    // 290\n          }, {                                                                                                         // 288\n            'facebookData.senderId': recipientId,                                                                      // 293\n            'facebookData.recipientId': senderId                                                                       // 294\n          }]                                                                                                           // 292\n        },                                                                                                             // 285\n        status: CONVERSATION_STATUSES.NEW,                                                                             // 298\n        senderId: senderId,                                                                                            // 299\n        facebookData: {                                                                                                // 300\n          kind: FACEBOOK_DATA_KINDS.MESSENGER,                                                                         // 301\n          senderId: senderId,                                                                                          // 302\n          senderName: senderName,                                                                                      // 303\n          recipientId: recipientId                                                                                     // 304\n        },                                                                                                             // 300\n        // message data                                                                                                // 307\n        content: messageText,                                                                                          // 308\n        attachments: attachments,                                                                                      // 309\n        msgFacebookData: {}                                                                                            // 310\n      });                                                                                                              // 283\n    }                                                                                                                  // 312\n                                                                                                                       //\n    return getOrCreateConversationByMessenger;                                                                         //\n  }(); // get or create customer using facebook data                                                                   //\n                                                                                                                       //\n                                                                                                                       //\n  SaveWebhookResponse.prototype.getOrCreateCustomer = function () {                                                    //\n    function getOrCreateCustomer(fbUserId) {                                                                           //\n      var integrationId = this.integration._id;                                                                        // 316\n      var customer = Customers.findOne({                                                                               // 318\n        integrationId: integrationId,                                                                                  // 319\n        'facebookData.id': fbUserId                                                                                    // 320\n      });                                                                                                              // 318\n                                                                                                                       //\n      if (customer) {                                                                                                  // 323\n        return customer._id;                                                                                           // 324\n      } // get page access token                                                                                       // 325\n                                                                                                                       //\n                                                                                                                       //\n      var res = graphRequest.get(this.currentPageId + \"/?fields=access_token\", this.userAccessToken); // get user info\n                                                                                                                       //\n      res = graphRequest.get(\"/\" + fbUserId, res.access_token); // when feed response will contain name field          // 331\n      // when messeger response will not contain name field                                                            // 334\n                                                                                                                       //\n      var name = res.name || res.first_name + \" \" + res.last_name; // create customer                                  // 335\n                                                                                                                       //\n      return Customers.insert({                                                                                        // 338\n        name: name,                                                                                                    // 339\n        integrationId: integrationId,                                                                                  // 340\n        facebookData: {                                                                                                // 341\n          id: fbUserId,                                                                                                // 342\n          profilePic: res.profile_pic                                                                                  // 343\n        }                                                                                                              // 341\n      });                                                                                                              // 338\n    }                                                                                                                  // 346\n                                                                                                                       //\n    return getOrCreateCustomer;                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  SaveWebhookResponse.prototype.createMessage = function () {                                                          //\n    function createMessage(_ref) {                                                                                     //\n      var conversation = _ref.conversation,                                                                            // 348\n          userId = _ref.userId,                                                                                        // 348\n          content = _ref.content,                                                                                      // 348\n          attachments = _ref.attachments,                                                                              // 348\n          facebookData = _ref.facebookData;                                                                            // 348\n                                                                                                                       //\n      if (conversation) {                                                                                              // 349\n        // create new message                                                                                          // 350\n        var messageId = Messages.insert({                                                                              // 351\n          conversationId: conversation._id,                                                                            // 352\n          customerId: this.getOrCreateCustomer(userId),                                                                // 353\n          content: content,                                                                                            // 354\n          attachments: attachments,                                                                                    // 355\n          facebookData: facebookData,                                                                                  // 356\n          internal: false                                                                                              // 357\n        }); // notify subscription server new message                                                                  // 351\n                                                                                                                       //\n        apolloNotifyNewMessage(messageId);                                                                             // 361\n        return messageId;                                                                                              // 363\n      }                                                                                                                // 364\n    }                                                                                                                  // 365\n                                                                                                                       //\n    return createMessage;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return SaveWebhookResponse;                                                                                          //\n}();                                                                                                                   //\n                                                                                                                       //\nvar receiveWebhookResponse = function (app, data) {                                                                    // 371\n  var selector = {                                                                                                     // 372\n    kind: KIND_CHOICES.FACEBOOK,                                                                                       // 373\n    'facebookData.appId': app.id                                                                                       // 374\n  };                                                                                                                   // 372\n  Integrations.find(selector).forEach(function (integration) {                                                         // 377\n    // when new message or other kind of activity in page                                                              // 378\n    var saveWebhookResponse = new SaveWebhookResponse(app.accessToken, integration, data);                             // 379\n    saveWebhookResponse.start();                                                                                       // 381\n  });                                                                                                                  // 382\n};                                                                                                                     // 383\n                                                                                                                       //\nMeteor.settings.services.facebook.forEach(function (app) {                                                             // 385\n  Picker.route(\"/service/facebook/\" + app.id + \"/webhook-callback\", function (params, req, res) {                      // 386\n    var query = params.query; // when the endpoint is registered as a webhook, it must echo back                       // 387\n    // the 'hub.challenge' value it receives in the query arguments                                                    // 390\n                                                                                                                       //\n    if (query['hub.mode'] === 'subscribe' && query['hub.challenge']) {                                                 // 391\n      if (query['hub.verify_token'] !== app.verifyToken) {                                                             // 392\n        res.end('Verification token mismatch');                                                                        // 393\n      }                                                                                                                // 394\n                                                                                                                       //\n      res.end(query['hub.challenge']);                                                                                 // 396\n    }                                                                                                                  // 397\n                                                                                                                       //\n    res.statusCode = 200; // receive per app webhook response                                                          // 399\n                                                                                                                       //\n    receiveWebhookResponse(app, req.body);                                                                             // 402\n    res.end('success');                                                                                                // 404\n  });                                                                                                                  // 405\n}); /*                                                                                                                 // 406\n     * post reply to page conversation or comment to wall post                                                         //\n     */                                                                                                                //\n                                                                                                                       //\nvar facebookReply = function (conversation, text, messageId) {                                                         // 411\n  var app = Meteor.settings.services.facebook.find(function (a) {                                                      // 412\n    return a.id === conversation.integration().facebookData.appId;                                                     // 413\n  }); // page access token                                                                                             // 413\n                                                                                                                       //\n  var response = graphRequest.get(conversation.facebookData.pageId + \"/?fields=access_token\", app.accessToken); // messenger reply\n                                                                                                                       //\n  if (conversation.facebookData.kind === FACEBOOK_DATA_KINDS.MESSENGER) {                                              // 423\n    return graphRequest.post('me/messages', response.access_token, {                                                   // 424\n      recipient: {                                                                                                     // 428\n        id: conversation.facebookData.senderId                                                                         // 428\n      },                                                                                                               // 428\n      message: {                                                                                                       // 429\n        text: text                                                                                                     // 429\n      }                                                                                                                // 429\n    }, function () {});                                                                                                // 427\n  } // feed reply                                                                                                      // 433\n                                                                                                                       //\n                                                                                                                       //\n  if (conversation.facebookData.kind === FACEBOOK_DATA_KINDS.FEED) {                                                   // 436\n    var postId = conversation.facebookData.postId; // post reply                                                       // 437\n                                                                                                                       //\n    var commentResponse = graphRequest.post(postId + \"/comments\", response.access_token, {                             // 440\n      message: text                                                                                                    // 441\n    }); // save commentId in message object                                                                            // 440\n                                                                                                                       //\n    Messages.update({                                                                                                  // 445\n      _id: messageId                                                                                                   // 445\n    }, {                                                                                                               // 445\n      $set: {                                                                                                          // 445\n        'facebookData.commentId': commentResponse.id                                                                   // 445\n      }                                                                                                                // 445\n    });                                                                                                                // 445\n  }                                                                                                                    // 446\n                                                                                                                       //\n  return null;                                                                                                         // 448\n};                                                                                                                     // 449\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"index.js\":[\"./routes\",\"./twitter\",\"./facebook\",\"./methods\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/social/server/index.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.importSync(\"./routes\");                                                                                         // 1\nmodule.importSync(\"./twitter\");                                                                                        // 1\nmodule.importSync(\"./facebook\");                                                                                       // 1\nmodule.importSync(\"./methods\");                                                                                        // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/mdg:validated-method\",\"meteor/underscore\",\"/imports/api/utils\",\"../../integrations\",\"../../constants\",\"./twitter\",\"./facebook\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/social/server/methods.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  addTwitter: function () {                                                                                            // 1\n    return addTwitter;                                                                                                 // 1\n  },                                                                                                                   // 1\n  addFacebook: function () {                                                                                           // 1\n    return addFacebook;                                                                                                // 1\n  },                                                                                                                   // 1\n  getFacebookAppList: function () {                                                                                    // 1\n    return getFacebookAppList;                                                                                         // 1\n  },                                                                                                                   // 1\n  getFacebookPageList: function () {                                                                                   // 1\n    return getFacebookPageList;                                                                                        // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"../../integrations\", {                                                                              // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar KIND_CHOICES = void 0;                                                                                             // 1\nmodule.importSync(\"../../constants\", {                                                                                 // 1\n  KIND_CHOICES: function (v) {                                                                                         // 1\n    KIND_CHOICES = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar twitter = void 0;                                                                                                  // 1\nmodule.importSync(\"./twitter\", {                                                                                       // 1\n  \"default\": function (v) {                                                                                            // 1\n    twitter = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar getPageList = void 0;                                                                                              // 1\nmodule.importSync(\"./facebook\", {                                                                                      // 1\n  getPageList: function (v) {                                                                                          // 1\n    getPageList = v;                                                                                                   // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar addTwitter = new ValidatedMethod({                                                                                 // 12\n  name: 'integrations.addTwitter',                                                                                     // 13\n  mixins: [ErxesMixin],                                                                                                // 14\n  validate: function (doc) {                                                                                           // 16\n    check(doc, {                                                                                                       // 17\n      brandId: String,                                                                                                 // 17\n      queryParams: Object                                                                                              // 17\n    });                                                                                                                // 17\n  },                                                                                                                   // 18\n  run: function (_ref) {                                                                                               // 20\n    var brandId = _ref.brandId,                                                                                        // 20\n        queryParams = _ref.queryParams;                                                                                // 20\n    // authenticate via twitter and get logged in user's infos                                                         // 21\n    twitter.authenticate(queryParams, function (doc) {                                                                 // 22\n      var id = Integrations.insert(Object.assign(doc, {                                                                // 23\n        brandId: brandId,                                                                                              // 23\n        kind: KIND_CHOICES.TWITTER                                                                                     // 23\n      })); // start tracking newly created twitter integration                                                         // 23\n                                                                                                                       //\n      var integration = Integrations.findOne({                                                                         // 26\n        _id: id                                                                                                        // 26\n      });                                                                                                              // 26\n      twitter.trackIntegration(integration);                                                                           // 27\n    });                                                                                                                // 28\n  }                                                                                                                    // 29\n});                                                                                                                    // 12\nvar addFacebook = new ValidatedMethod({                                                                                // 33\n  name: 'integrations.addFacebook',                                                                                    // 34\n  mixins: [ErxesMixin],                                                                                                // 35\n  validate: function (doc) {                                                                                           // 37\n    check(doc, {                                                                                                       // 38\n      name: String,                                                                                                    // 39\n      appId: String,                                                                                                   // 40\n      brandId: String,                                                                                                 // 41\n      pageIds: [String]                                                                                                // 42\n    });                                                                                                                // 38\n  },                                                                                                                   // 44\n  run: function (_ref2) {                                                                                              // 46\n    var name = _ref2.name,                                                                                             // 46\n        appId = _ref2.appId,                                                                                           // 46\n        brandId = _ref2.brandId,                                                                                       // 46\n        pageIds = _ref2.pageIds;                                                                                       // 46\n    return Integrations.insert({                                                                                       // 47\n      name: name,                                                                                                      // 48\n      kind: KIND_CHOICES.FACEBOOK,                                                                                     // 49\n      brandId: brandId,                                                                                                // 50\n      facebookData: {                                                                                                  // 51\n        appId: appId,                                                                                                  // 52\n        pageIds: pageIds                                                                                               // 53\n      }                                                                                                                // 51\n    });                                                                                                                // 47\n  }                                                                                                                    // 56\n});                                                                                                                    // 33\nvar getFacebookAppList = new ValidatedMethod({                                                                         // 60\n  name: 'integrations.getFacebookAppList',                                                                             // 61\n  mixins: [ErxesMixin],                                                                                                // 62\n  validate: function () {},                                                                                            // 64\n  run: function () {                                                                                                   // 66\n    return _.map(Meteor.settings.services.facebook, function (app) {                                                   // 67\n      return {                                                                                                         // 67\n        id: app.id,                                                                                                    // 68\n        name: app.name                                                                                                 // 69\n      };                                                                                                               // 67\n    });                                                                                                                // 67\n  }                                                                                                                    // 71\n});                                                                                                                    // 60\nvar getFacebookPageList = new ValidatedMethod({                                                                        // 75\n  name: 'integrations.getFacebookPageList',                                                                            // 76\n  mixins: [ErxesMixin],                                                                                                // 77\n  validate: function (_ref3) {                                                                                         // 79\n    var appId = _ref3.appId;                                                                                           // 79\n    check(appId, String);                                                                                              // 80\n  },                                                                                                                   // 81\n  run: function (_ref4) {                                                                                              // 83\n    var appId = _ref4.appId;                                                                                           // 83\n                                                                                                                       //\n    var app = _.find(Meteor.settings.services.facebook, function (a) {                                                 // 84\n      return a.id === appId;                                                                                           // 84\n    });                                                                                                                // 84\n                                                                                                                       //\n    if (!app) {                                                                                                        // 86\n      return [];                                                                                                       // 87\n    }                                                                                                                  // 88\n                                                                                                                       //\n    return getPageList(app.accessToken);                                                                               // 90\n  }                                                                                                                    // 91\n});                                                                                                                    // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"routes.js\":[\"body-parser\",\"meteor/meteorhacks:picker\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/social/server/routes.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar bodyParser = void 0;                                                                                               // 1\nmodule.importSync(\"body-parser\", {                                                                                     // 1\n  \"default\": function (v) {                                                                                            // 1\n    bodyParser = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Picker = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteorhacks:picker\", {                                                                       // 1\n  Picker: function (v) {                                                                                               // 1\n    Picker = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nPicker.route('/service/oauth/twitter_callback', function (params, req, res) {                                          // 4\n  var url = req.url.replace('service/', '');                                                                           // 5\n  res.writeHead(301, {                                                                                                 // 7\n    Location: \"/settings/integrations\" + url                                                                           // 7\n  });                                                                                                                  // 7\n  res.end();                                                                                                           // 8\n});                                                                                                                    // 9\nPicker.middleware(bodyParser.json());                                                                                  // 11\nPicker.middleware(bodyParser.urlencoded({                                                                              // 12\n  extended: false                                                                                                      // 12\n}));                                                                                                                   // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"twitter.js\":[\"twit\",\"social-oauth-client\",\"meteor/meteor\",\"/imports/api/server/utils\",\"/imports/api/integrations/integrations\",\"/imports/api/integrations/constants\",\"/imports/api/conversations/conversations\",\"/imports/api/conversations/messages\",\"/imports/api/customers/customers\",\"/imports/api/conversations/constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/social/server/twitter.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  getOrCreateCommonConversation: function () {                                                                         // 1\n    return getOrCreateCommonConversation;                                                                              // 1\n  },                                                                                                                   // 1\n  getOrCreateDirectMessageConversation: function () {                                                                  // 1\n    return getOrCreateDirectMessageConversation;                                                                       // 1\n  },                                                                                                                   // 1\n  TwitMap: function () {                                                                                               // 1\n    return TwitMap;                                                                                                    // 1\n  },                                                                                                                   // 1\n  tweetReply: function () {                                                                                            // 1\n    return tweetReply;                                                                                                 // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Twit = void 0;                                                                                                     // 1\nmodule.importSync(\"twit\", {                                                                                            // 1\n  \"default\": function (v) {                                                                                            // 1\n    Twit = v;                                                                                                          // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar soc = void 0;                                                                                                      // 1\nmodule.importSync(\"social-oauth-client\", {                                                                             // 1\n  \"default\": function (v) {                                                                                            // 1\n    soc = v;                                                                                                           // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar apolloNotifyNewMessage = void 0;                                                                                   // 1\nmodule.importSync(\"/imports/api/server/utils\", {                                                                       // 1\n  apolloNotifyNewMessage: function (v) {                                                                               // 1\n    apolloNotifyNewMessage = v;                                                                                        // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/integrations\", {                                                          // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar KIND_CHOICES = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/constants\", {                                                             // 1\n  KIND_CHOICES: function (v) {                                                                                         // 1\n    KIND_CHOICES = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Conversations = void 0;                                                                                            // 1\nmodule.importSync(\"/imports/api/conversations/conversations\", {                                                        // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/conversations/messages\", {                                                             // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar CONVERSATION_STATUSES = void 0;                                                                                    // 1\nmodule.importSync(\"/imports/api/conversations/constants\", {                                                            // 1\n  CONVERSATION_STATUSES: function (v) {                                                                                // 1\n    CONVERSATION_STATUSES = v;                                                                                         // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\n                                                                                                                       //\n/*                                                                                                                     // 12\n * get or create customer using twitter data                                                                           //\n */var getOrCreateCustomer = function (integrationId, user) {                                                          //\n  var customer = Customers.findOne({                                                                                   // 16\n    integrationId: integrationId,                                                                                      // 17\n    'twitterData.id': user.id                                                                                          // 18\n  });                                                                                                                  // 16\n                                                                                                                       //\n  if (customer) {                                                                                                      // 21\n    return customer._id;                                                                                               // 22\n  } // create customer                                                                                                 // 23\n                                                                                                                       //\n                                                                                                                       //\n  return Customers.insert({                                                                                            // 26\n    name: user.name,                                                                                                   // 27\n    integrationId: integrationId,                                                                                      // 28\n    twitterData: {                                                                                                     // 29\n      id: user.id,                                                                                                     // 30\n      idStr: user.id_str,                                                                                              // 31\n      name: user.name,                                                                                                 // 32\n      screenName: user.screen_name,                                                                                    // 33\n      profileImageUrl: user.profile_image_url                                                                          // 34\n    }                                                                                                                  // 29\n  });                                                                                                                  // 26\n}; /*                                                                                                                  // 37\n    * create new message                                                                                               //\n    */                                                                                                                 //\n                                                                                                                       //\nvar createMessage = function (conversation, content, user) {                                                           // 42\n  if (conversation) {                                                                                                  // 43\n    // create new message                                                                                              // 44\n    var messageId = Messages.insert({                                                                                  // 45\n      conversationId: conversation._id,                                                                                // 46\n      customerId: getOrCreateCustomer(conversation.integrationId, user),                                               // 47\n      content: content,                                                                                                // 48\n      internal: false                                                                                                  // 49\n    }); // notify subscription server new message                                                                      // 45\n                                                                                                                       //\n    apolloNotifyNewMessage(messageId);                                                                                 // 53\n    return messageId;                                                                                                  // 55\n  }                                                                                                                    // 56\n}; /*                                                                                                                  // 57\n    * new message received in old converation, update status adn readUsers                                             //\n    */                                                                                                                 //\n                                                                                                                       //\nvar updateConversation = function (_id) {                                                                              // 62\n  Conversations.update({                                                                                               // 63\n    _id: _id                                                                                                           // 64\n  }, {                                                                                                                 // 64\n    $set: {                                                                                                            // 66\n      // reset read state                                                                                              // 67\n      readUserIds: [],                                                                                                 // 68\n      // if closed, reopen                                                                                             // 70\n      status: CONVERSATION_STATUSES.OPEN                                                                               // 71\n    }                                                                                                                  // 66\n  });                                                                                                                  // 65\n}; /*                                                                                                                  // 75\n    * create new conversation by regular tweet                                                                         //\n    */                                                                                                                 //\n                                                                                                                       //\nvar getOrCreateCommonConversation = function (data, integration) {                                                     // 80\n  var conversation = void 0;                                                                                           // 81\n                                                                                                                       //\n  if (data.in_reply_to_status_id) {                                                                                    // 83\n    // find conversation by tweet id                                                                                   // 84\n    conversation = Conversations.findOne({                                                                             // 85\n      'twitterData.id': data.in_reply_to_status_id                                                                     // 86\n    }); // if closed, reopen it                                                                                        // 85\n                                                                                                                       //\n    updateConversation(conversation._id); // create new conversation                                                   // 90\n  } else {                                                                                                             // 93\n    var conversationId = Conversations.insert({                                                                        // 94\n      content: data.text,                                                                                              // 95\n      integrationId: integration._id,                                                                                  // 96\n      customerId: getOrCreateCustomer(integration._id, data.user),                                                     // 97\n      status: CONVERSATION_STATUSES.NEW,                                                                               // 98\n      // save tweet id                                                                                                 // 100\n      twitterData: {                                                                                                   // 101\n        id: data.id,                                                                                                   // 102\n        idStr: data.id_str,                                                                                            // 103\n        screenName: data.user.screen_name,                                                                             // 104\n        isDirectMessage: false                                                                                         // 105\n      }                                                                                                                // 101\n    });                                                                                                                // 94\n    conversation = Conversations.findOne(conversationId);                                                              // 109\n  } // create new message                                                                                              // 110\n                                                                                                                       //\n                                                                                                                       //\n  return createMessage(conversation, data.text, data.user);                                                            // 113\n};                                                                                                                     // 114\n                                                                                                                       //\nvar getOrCreateDirectMessageConversation = function (data, integration) {                                              // 119\n  var conversation = Conversations.findOne({                                                                           // 120\n    'twitterData.isDirectMessage': true,                                                                               // 121\n    $or: [{                                                                                                            // 122\n      'twitterData.directMessage.senderId': data.sender_id,                                                            // 124\n      'twitterData.directMessage.recipientId': data.recipient_id                                                       // 125\n    }, {                                                                                                               // 123\n      'twitterData.directMessage.senderId': data.recipient_id,                                                         // 128\n      'twitterData.directMessage.recipientId': data.sender_id                                                          // 129\n    }]                                                                                                                 // 127\n  });                                                                                                                  // 120\n                                                                                                                       //\n  if (conversation) {                                                                                                  // 134\n    // if closed, reopen it                                                                                            // 135\n    updateConversation(conversation._id); // create new conversation                                                   // 136\n  } else {                                                                                                             // 139\n    var conversationId = Conversations.insert({                                                                        // 140\n      content: data.text,                                                                                              // 141\n      integrationId: integration._id,                                                                                  // 142\n      customerId: getOrCreateCustomer(integration._id, data.sender),                                                   // 143\n      status: CONVERSATION_STATUSES.NEW,                                                                               // 144\n      // save tweet id                                                                                                 // 146\n      twitterData: {                                                                                                   // 147\n        id: data.id,                                                                                                   // 148\n        idStr: data.id_str,                                                                                            // 149\n        screenName: data.sender.screen_name,                                                                           // 150\n        isDirectMessage: true,                                                                                         // 151\n        directMessage: {                                                                                               // 152\n          senderId: data.sender_id,                                                                                    // 153\n          senderIdStr: data.sender_id_str,                                                                             // 154\n          recipientId: data.recipient_id,                                                                              // 155\n          recipientIdStr: data.recipient_id_str                                                                        // 156\n        }                                                                                                              // 152\n      }                                                                                                                // 147\n    });                                                                                                                // 140\n    conversation = Conversations.findOne(conversationId);                                                              // 160\n  } // create new message                                                                                              // 161\n                                                                                                                       //\n                                                                                                                       //\n  return createMessage(conversation, data.text, data.sender);                                                          // 164\n};                                                                                                                     // 165\n                                                                                                                       //\nvar TwitMap = {};                                                                                                      // 168\n                                                                                                                       //\nvar trackIntegration = function (integration) {                                                                        // 170\n  var integrationUserId = integration.twitterData.id;                                                                  // 171\n  var _Meteor$settings$serv = Meteor.settings.services.twitter,                                                        // 170\n      consumerKey = _Meteor$settings$serv.consumerKey,                                                                 // 170\n      consumerSecret = _Meteor$settings$serv.consumerSecret; // Twit instance                                          // 170\n                                                                                                                       //\n  var twit = new Twit({                                                                                                // 176\n    consumer_key: consumerKey,                                                                                         // 177\n    consumer_secret: consumerSecret,                                                                                   // 178\n    access_token: integration.twitterData.token,                                                                       // 179\n    access_token_secret: integration.twitterData.tokenSecret                                                           // 180\n  }); // save twit instance                                                                                            // 176\n                                                                                                                       //\n  TwitMap[integration._id] = twit; // create stream                                                                    // 184\n                                                                                                                       //\n  var stream = twit.stream('user'); // listen for timeline                                                             // 187\n                                                                                                                       //\n  stream.on('tweet', Meteor.bindEnvironment(function (data) {                                                          // 190\n    // When situations like integration is deleted but trackIntegration                                                // 193\n    // version of that integration is still running, new conversations being                                           // 194\n    // created using non existing integrationId                                                                        // 195\n    if (!Integrations.findOne({                                                                                        // 196\n      _id: integration._id                                                                                             // 196\n    })) {                                                                                                              // 196\n      return null;                                                                                                     // 197\n    } // if user is replying to some tweet                                                                             // 198\n                                                                                                                       //\n                                                                                                                       //\n    if (data.in_reply_to_status_id) {                                                                                  // 201\n      var conversation = Conversations.findOne({                                                                       // 202\n        'twitterData.id': data.in_reply_to_status_id                                                                   // 203\n      }); // and that tweet must exists                                                                                // 202\n                                                                                                                       //\n      if (conversation) {                                                                                              // 207\n        return getOrCreateCommonConversation(data, integration);                                                       // 208\n      }                                                                                                                // 209\n    }                                                                                                                  // 210\n                                                                                                                       //\n    data.entities.user_mentions.forEach(function (mention) {                                                           // 212\n      // listen for only mentioned tweets                                                                              // 213\n      if (mention.id === integrationUserId) {                                                                          // 214\n        getOrCreateCommonConversation(data, integration);                                                              // 215\n      }                                                                                                                // 216\n    });                                                                                                                // 217\n    return null;                                                                                                       // 219\n  })); // listen for direct messages                                                                                   // 220\n                                                                                                                       //\n  stream.on('direct_message', Meteor.bindEnvironment(function (data) {                                                 // 224\n    // When situations like integration is deleted but trackIntegration                                                // 227\n    // version of that integration is still running, new conversations being                                           // 228\n    // created using non existing integrationId                                                                        // 229\n    if (!Integrations.findOne({                                                                                        // 230\n      _id: integration._id                                                                                             // 230\n    })) {                                                                                                              // 230\n      return;                                                                                                          // 231\n    }                                                                                                                  // 232\n                                                                                                                       //\n    getOrCreateDirectMessageConversation(data.direct_message, integration);                                            // 234\n  }));                                                                                                                 // 235\n}; // track all twitter integrations for the first time                                                                // 237\n                                                                                                                       //\n                                                                                                                       //\nIntegrations.find({                                                                                                    // 240\n  kind: KIND_CHOICES.TWITTER                                                                                           // 240\n}).forEach(function (integration) {                                                                                    // 240\n  trackIntegration(integration);                                                                                       // 241\n});                                                                                                                    // 242\n                                                                                                                       //\nvar postCallback = function (error) {                                                                                  // 244\n  if (error) {                                                                                                         // 245\n    throw Error(error.message);                                                                                        // 246\n  }                                                                                                                    // 247\n}; /*                                                                                                                  // 248\n    * post reply to twitter                                                                                            //\n    */                                                                                                                 //\n                                                                                                                       //\nvar tweetReply = function (conversation, text) {                                                                       // 253\n  var twit = TwitMap[conversation.integrationId];                                                                      // 254\n  var twitterData = conversation.twitterData; // send direct message                                                   // 255\n                                                                                                                       //\n  if (conversation.twitterData.isDirectMessage) {                                                                      // 258\n    return twit.post('direct_messages/new', {                                                                          // 259\n      user_id: twitterData.directMessage.senderIdStr,                                                                  // 262\n      text: text                                                                                                       // 263\n    }, Meteor.bindEnvironment(postCallback));                                                                          // 261\n  } // send reply                                                                                                      // 267\n                                                                                                                       //\n                                                                                                                       //\n  return twit.post('statuses/update', {                                                                                // 270\n    status: \"@\" + twitterData.screenName + \" \" + text,                                                                 // 273\n    // replying tweet id                                                                                               // 275\n    in_reply_to_status_id: twitterData.idStr                                                                           // 276\n  }, Meteor.bindEnvironment(postCallback));                                                                            // 272\n};                                                                                                                     // 280\n                                                                                                                       //\n// twitter oauth ===============                                                                                       // 282\nvar _Meteor$settings$serv2 = Meteor.settings.services.twitter,                                                         //\n    consumerKey = _Meteor$settings$serv2.consumerKey,                                                                  //\n    consumerSecret = _Meteor$settings$serv2.consumerSecret,                                                            //\n    redirectUrl = _Meteor$settings$serv2.redirectUrl;                                                                  //\nvar socTwitter = new soc.Twitter({                                                                                     // 284\n  CONSUMER_KEY: consumerKey,                                                                                           // 285\n  CONSUMER_SECRET: consumerSecret,                                                                                     // 286\n  REDIRECT_URL: redirectUrl                                                                                            // 287\n});                                                                                                                    // 284\nMeteor.methods({                                                                                                       // 290\n  'integrations.getTwitterAuthorizeUrl': function () {                                                                 // 291\n    return socTwitter.getAuthorizeUrl();                                                                               // 291\n  }                                                                                                                    // 291\n});                                                                                                                    // 290\nmodule.export(\"default\", exports.default = {                                                                           // 1\n  trackIntegration: trackIntegration,                                                                                  // 295\n  tweetReply: tweetReply,                                                                                              // 296\n  soc: socTwitter,                                                                                                     // 297\n  authenticate: function (queryParams, callback) {                                                                     // 299\n    // after user clicked authenticate button                                                                          // 300\n    socTwitter.callback({                                                                                              // 301\n      query: queryParams                                                                                               // 301\n    }).then(Meteor.bindEnvironment(function (data) {                                                                   // 301\n      // return integration info                                                                                       // 303\n      callback({                                                                                                       // 304\n        name: data.info.name,                                                                                          // 305\n        twitterData: {                                                                                                 // 306\n          id: data.info.id,                                                                                            // 307\n          token: data.tokens.auth.token,                                                                               // 308\n          tokenSecret: data.tokens.auth.token_secret                                                                   // 309\n        }                                                                                                              // 306\n      });                                                                                                              // 304\n    }));                                                                                                               // 312\n  }                                                                                                                    // 314\n});                                                                                                                    // 294\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"social.js\":[\"meteor/aldeed:simple-schema\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/social/social.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  twitterSchema: function () {                                                                                         // 1\n    return twitterSchema;                                                                                              // 1\n  },                                                                                                                   // 1\n  facebookSchema: function () {                                                                                        // 1\n    return facebookSchema;                                                                                             // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar twitterSchema = new SimpleSchema({                                                                                 // 4\n  id: {                                                                                                                // 5\n    type: Number                                                                                                       // 6\n  },                                                                                                                   // 5\n  token: {                                                                                                             // 8\n    type: String                                                                                                       // 9\n  },                                                                                                                   // 8\n  tokenSecret: {                                                                                                       // 11\n    type: String                                                                                                       // 12\n  }                                                                                                                    // 11\n});                                                                                                                    // 4\nvar facebookSchema = new SimpleSchema({                                                                                // 17\n  appId: {                                                                                                             // 18\n    type: String                                                                                                       // 19\n  },                                                                                                                   // 18\n  pageIds: {                                                                                                           // 21\n    type: [String]                                                                                                     // 22\n  }                                                                                                                    // 21\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"server\":{\"methods.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/utils\",\"/imports/api/conversations/conversations\",\"/imports/api/conversations/messages\",\"/imports/api/customers/customers\",\"/imports/api/channels/channels\",\"../integrations\",\"../constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/server/methods.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  addMessenger: function () {                                                                                          // 1\n    return addMessenger;                                                                                               // 1\n  },                                                                                                                   // 1\n  editMessenger: function () {                                                                                         // 1\n    return editMessenger;                                                                                              // 1\n  },                                                                                                                   // 1\n  addForm: function () {                                                                                               // 1\n    return addForm;                                                                                                    // 1\n  },                                                                                                                   // 1\n  editForm: function () {                                                                                              // 1\n    return editForm;                                                                                                   // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  },                                                                                                                   // 1\n  saveMessengerApperance: function () {                                                                                // 1\n    return saveMessengerApperance;                                                                                     // 1\n  },                                                                                                                   // 1\n  saveMessengerConfigs: function () {                                                                                  // 1\n    return saveMessengerConfigs;                                                                                       // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Match = void 0,                                                                                                    // 1\n    check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  Match: function (v) {                                                                                                // 1\n    Match = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Conversations = void 0;                                                                                            // 1\nmodule.importSync(\"/imports/api/conversations/conversations\", {                                                        // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/conversations/messages\", {                                                             // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Channels = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/channels/channels\", {                                                                  // 1\n  Channels: function (v) {                                                                                             // 1\n    Channels = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar Integrations = void 0,                                                                                             // 1\n    messengerSchema = void 0,                                                                                          // 1\n    formSchema = void 0;                                                                                               // 1\nmodule.importSync(\"../integrations\", {                                                                                 // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  },                                                                                                                   // 1\n  messengerSchema: function (v) {                                                                                      // 1\n    messengerSchema = v;                                                                                               // 1\n  },                                                                                                                   // 1\n  formSchema: function (v) {                                                                                           // 1\n    formSchema = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar KIND_CHOICES = void 0;                                                                                             // 1\nmodule.importSync(\"../constants\", {                                                                                    // 1\n  KIND_CHOICES: function (v) {                                                                                         // 1\n    KIND_CHOICES = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\nvar addMessenger = new ValidatedMethod({                                                                               // 13\n  name: 'integrations.addMessenger',                                                                                   // 14\n  mixins: [ErxesMixin],                                                                                                // 15\n  validate: function (_ref) {                                                                                          // 17\n    var doc = _ref.doc;                                                                                                // 17\n    check(doc, {                                                                                                       // 18\n      name: String,                                                                                                    // 18\n      brandId: String                                                                                                  // 18\n    });                                                                                                                // 18\n  },                                                                                                                   // 19\n  run: function (_ref2) {                                                                                              // 21\n    var doc = _ref2.doc;                                                                                               // 21\n    return Integrations.insert(Object.assign(doc, {                                                                    // 22\n      kind: KIND_CHOICES.MESSENGER                                                                                     // 22\n    }));                                                                                                               // 22\n  }                                                                                                                    // 23\n});                                                                                                                    // 13\nvar editMessenger = new ValidatedMethod({                                                                              // 27\n  name: 'integrations.editMessenger',                                                                                  // 28\n  mixins: [ErxesMixin],                                                                                                // 29\n  validate: function (_ref3) {                                                                                         // 31\n    var _id = _ref3._id,                                                                                               // 31\n        doc = _ref3.doc;                                                                                               // 31\n    check(_id, String);                                                                                                // 32\n    check(doc, {                                                                                                       // 33\n      name: String,                                                                                                    // 33\n      brandId: String                                                                                                  // 33\n    });                                                                                                                // 33\n  },                                                                                                                   // 34\n  run: function (_ref4) {                                                                                              // 36\n    var _id = _ref4._id,                                                                                               // 36\n        doc = _ref4.doc;                                                                                               // 36\n    return Integrations.update({                                                                                       // 37\n      _id: _id                                                                                                         // 37\n    }, {                                                                                                               // 37\n      $set: doc                                                                                                        // 37\n    });                                                                                                                // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 27\n                                                                                                                       //\nvar generateFormDoc = function (mainDoc, formDoc) {                                                                    // 41\n  return Object.assign(mainDoc, {                                                                                      // 41\n    kind: KIND_CHOICES.FORM,                                                                                           // 43\n    formData: formDoc                                                                                                  // 44\n  });                                                                                                                  // 42\n}; // add form                                                                                                         // 41\n                                                                                                                       //\n                                                                                                                       //\nvar addForm = new ValidatedMethod({                                                                                    // 48\n  name: 'integrations.addForm',                                                                                        // 49\n  mixins: [ErxesMixin],                                                                                                // 50\n  validate: function (_ref5) {                                                                                         // 52\n    var mainDoc = _ref5.mainDoc,                                                                                       // 52\n        formDoc = _ref5.formDoc;                                                                                       // 52\n    check(mainDoc, {                                                                                                   // 53\n      name: String,                                                                                                    // 53\n      brandId: String,                                                                                                 // 53\n      formId: String                                                                                                   // 53\n    });                                                                                                                // 53\n    check(formDoc, formSchema);                                                                                        // 54\n  },                                                                                                                   // 55\n  run: function (_ref6) {                                                                                              // 57\n    var mainDoc = _ref6.mainDoc,                                                                                       // 57\n        formDoc = _ref6.formDoc;                                                                                       // 57\n    return Integrations.insert(generateFormDoc(mainDoc, formDoc));                                                     // 58\n  }                                                                                                                    // 59\n});                                                                                                                    // 48\nvar editForm = new ValidatedMethod({                                                                                   // 63\n  name: 'integrations.editForm',                                                                                       // 64\n  mixins: [ErxesMixin],                                                                                                // 65\n  validate: function (_ref7) {                                                                                         // 67\n    var _id = _ref7._id,                                                                                               // 67\n        mainDoc = _ref7.mainDoc,                                                                                       // 67\n        formDoc = _ref7.formDoc;                                                                                       // 67\n    check(_id, String);                                                                                                // 68\n    check(mainDoc, {                                                                                                   // 69\n      name: String,                                                                                                    // 69\n      brandId: String,                                                                                                 // 69\n      formId: String                                                                                                   // 69\n    });                                                                                                                // 69\n    check(formDoc, formSchema);                                                                                        // 70\n  },                                                                                                                   // 71\n  run: function (_ref8) {                                                                                              // 73\n    var _id = _ref8._id,                                                                                               // 73\n        mainDoc = _ref8.mainDoc,                                                                                       // 73\n        formDoc = _ref8.formDoc;                                                                                       // 73\n    return Integrations.update({                                                                                       // 74\n      _id: _id                                                                                                         // 74\n    }, {                                                                                                               // 74\n      $set: generateFormDoc(mainDoc, formDoc)                                                                          // 74\n    });                                                                                                                // 74\n  }                                                                                                                    // 75\n});                                                                                                                    // 63\nvar remove = new ValidatedMethod({                                                                                     // 79\n  name: 'integrations.remove',                                                                                         // 80\n  mixins: [ErxesMixin],                                                                                                // 81\n  validate: function (id) {                                                                                            // 83\n    check(id, String);                                                                                                 // 84\n  },                                                                                                                   // 85\n  run: function (id) {                                                                                                 // 87\n    // check whether or not used in channels                                                                           // 88\n    if (Channels.find({                                                                                                // 89\n      integrationIds: {                                                                                                // 89\n        $in: [id]                                                                                                      // 89\n      }                                                                                                                // 89\n    }).count() > 0) {                                                                                                  // 89\n      throw new Meteor.Error('integrations.remove.usedInChannel', 'You cannot delete this integration. It belongs to other channel.');\n    } // conversations                                                                                                 // 94\n                                                                                                                       //\n                                                                                                                       //\n    var conversations = Conversations.find({                                                                           // 97\n      integrationId: id                                                                                                // 97\n    }).fetch();                                                                                                        // 97\n    var conversationIds = conversations.map(function (c) {                                                             // 98\n      return c._id;                                                                                                    // 98\n    }); // remove messages                                                                                             // 98\n                                                                                                                       //\n    Messages.remove({                                                                                                  // 101\n      conversationId: {                                                                                                // 101\n        $in: conversationIds                                                                                           // 101\n      }                                                                                                                // 101\n    }); // remove conversations                                                                                        // 101\n                                                                                                                       //\n    Conversations.remove({                                                                                             // 104\n      integrationId: id                                                                                                // 104\n    }); // remove customers                                                                                            // 104\n                                                                                                                       //\n    Customers.remove({                                                                                                 // 107\n      integrationId: id                                                                                                // 107\n    });                                                                                                                // 107\n    return Integrations.remove(id);                                                                                    // 109\n  }                                                                                                                    // 110\n});                                                                                                                    // 79\nvar saveMessengerApperance = new ValidatedMethod({                                                                     // 113\n  name: 'integrations.saveMessengerApperance',                                                                         // 114\n  mixins: [ErxesMixin],                                                                                                // 115\n  validate: function (_ref9) {                                                                                         // 117\n    var _id = _ref9._id,                                                                                               // 117\n        doc = _ref9.doc;                                                                                               // 117\n    check(_id, String);                                                                                                // 118\n    check(doc, {                                                                                                       // 119\n      color: String,                                                                                                   // 120\n      wallpaper: Match.Optional(String),                                                                               // 121\n      logo: Match.Optional(String)                                                                                     // 122\n    });                                                                                                                // 119\n  },                                                                                                                   // 124\n  run: function (_ref10) {                                                                                             // 126\n    var _id = _ref10._id,                                                                                              // 126\n        doc = _ref10.doc;                                                                                              // 126\n    return Integrations.update({                                                                                       // 127\n      _id: _id                                                                                                         // 127\n    }, {                                                                                                               // 127\n      $set: {                                                                                                          // 127\n        uiOptions: doc                                                                                                 // 127\n      }                                                                                                                // 127\n    });                                                                                                                // 127\n  }                                                                                                                    // 128\n});                                                                                                                    // 113\nvar saveMessengerConfigs = new ValidatedMethod({                                                                       // 131\n  name: 'integrations.saveMessengerConfigs',                                                                           // 132\n  mixins: [ErxesMixin],                                                                                                // 133\n  validate: function (_ref11) {                                                                                        // 135\n    var _id = _ref11._id,                                                                                              // 135\n        doc = _ref11.doc;                                                                                              // 135\n    check(_id, String);                                                                                                // 136\n    check(doc, messengerSchema);                                                                                       // 137\n  },                                                                                                                   // 138\n  run: function (_ref12) {                                                                                             // 140\n    var _id = _ref12._id,                                                                                              // 140\n        doc = _ref12.doc;                                                                                              // 140\n    return Integrations.update({                                                                                       // 141\n      _id: _id                                                                                                         // 141\n    }, {                                                                                                               // 141\n      $set: {                                                                                                          // 141\n        messengerData: doc                                                                                             // 141\n      }                                                                                                                // 141\n    });                                                                                                                // 141\n  }                                                                                                                    // 142\n});                                                                                                                    // 131\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/constants.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  KIND_CHOICES: function () {                                                                                          // 1\n    return KIND_CHOICES;                                                                                               // 1\n  },                                                                                                                   // 1\n  FORM_LOAD_TYPES: function () {                                                                                       // 1\n    return FORM_LOAD_TYPES;                                                                                            // 1\n  },                                                                                                                   // 1\n  FORM_SUCCESS_ACTIONS: function () {                                                                                  // 1\n    return FORM_SUCCESS_ACTIONS;                                                                                       // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar KIND_CHOICES = {                                                                                                   // 1\n  MESSENGER: 'messenger',                                                                                              // 2\n  FORM: 'form',                                                                                                        // 3\n  TWITTER: 'twitter',                                                                                                  // 4\n  FACEBOOK: 'facebook',                                                                                                // 5\n  ALL_LIST: ['messenger', 'form', 'twitter', 'facebook']                                                               // 6\n};                                                                                                                     // 1\nvar FORM_LOAD_TYPES = {                                                                                                // 9\n  SHOUTBOX: 'shoutbox',                                                                                                // 10\n  POPUP: 'popup',                                                                                                      // 11\n  EMBEDDED: 'embedded',                                                                                                // 12\n  ALL_LIST: ['', 'shoutbox', 'popup', 'embedded']                                                                      // 13\n};                                                                                                                     // 9\nvar FORM_SUCCESS_ACTIONS = {                                                                                           // 16\n  EMAIL: 'email',                                                                                                      // 17\n  REDIRECT: 'redirect',                                                                                                // 18\n  ONPAGE: 'onPage',                                                                                                    // 19\n  ALL_LIST: ['', 'email', 'redirect', 'onPage']                                                                        // 20\n};                                                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"integrations.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"faker\",\"meteor/mongo\",\"meteor/random\",\"meteor/aldeed:simple-schema\",\"meteor/dburles:factory\",\"/imports/api/brands/brands\",\"/imports/api/channels/channels\",\"./social/social\",\"./constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/integrations/integrations.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Integrations: function () {                                                                                          // 1\n    return Integrations;                                                                                               // 1\n  },                                                                                                                   // 1\n  formSchema: function () {                                                                                            // 1\n    return formSchema;                                                                                                 // 1\n  },                                                                                                                   // 1\n  messengerSchema: function () {                                                                                       // 1\n    return messengerSchema;                                                                                            // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Brands = void 0;                                                                                                   // 1\nmodule.importSync(\"/imports/api/brands/brands\", {                                                                      // 1\n  Brands: function (v) {                                                                                               // 1\n    Brands = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Channels = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/channels/channels\", {                                                                  // 1\n  Channels: function (v) {                                                                                             // 1\n    Channels = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar facebookSchema = void 0,                                                                                           // 1\n    twitterSchema = void 0;                                                                                            // 1\nmodule.importSync(\"./social/social\", {                                                                                 // 1\n  facebookSchema: function (v) {                                                                                       // 1\n    facebookSchema = v;                                                                                                // 1\n  },                                                                                                                   // 1\n  twitterSchema: function (v) {                                                                                        // 1\n    twitterSchema = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar KIND_CHOICES = void 0,                                                                                             // 1\n    FORM_LOAD_TYPES = void 0,                                                                                          // 1\n    FORM_SUCCESS_ACTIONS = void 0;                                                                                     // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  KIND_CHOICES: function (v) {                                                                                         // 1\n    KIND_CHOICES = v;                                                                                                  // 1\n  },                                                                                                                   // 1\n  FORM_LOAD_TYPES: function (v) {                                                                                      // 1\n    FORM_LOAD_TYPES = v;                                                                                               // 1\n  },                                                                                                                   // 1\n  FORM_SUCCESS_ACTIONS: function (v) {                                                                                 // 1\n    FORM_SUCCESS_ACTIONS = v;                                                                                          // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\n                                                                                                                       //\nvar IntegrationCollections = function (_Mongo$Collection) {                                                            //\n  (0, _inherits3.default)(IntegrationCollections, _Mongo$Collection);                                                  //\n                                                                                                                       //\n  function IntegrationCollections() {                                                                                  //\n    (0, _classCallCheck3.default)(this, IntegrationCollections);                                                       //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  return IntegrationCollections;                                                                                       //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar Integrations = new IntegrationCollections('integrations');                                                         // 13\nIntegrations.deny({                                                                                                    // 15\n  insert: function () {                                                                                                // 16\n    return true;                                                                                                       // 17\n  },                                                                                                                   // 18\n  update: function () {                                                                                                // 19\n    return true;                                                                                                       // 20\n  },                                                                                                                   // 21\n  remove: function () {                                                                                                // 22\n    return true;                                                                                                       // 23\n  }                                                                                                                    // 24\n}); // form integration options                                                                                        // 15\n                                                                                                                       //\nvar formSchema = new SimpleSchema({                                                                                    // 28\n  loadType: {                                                                                                          // 29\n    type: String,                                                                                                      // 30\n    allowedValues: FORM_LOAD_TYPES.ALL_LIST,                                                                           // 31\n    optional: true                                                                                                     // 32\n  },                                                                                                                   // 29\n  successAction: {                                                                                                     // 35\n    type: String,                                                                                                      // 36\n    allowedValues: FORM_SUCCESS_ACTIONS.ALL_LIST,                                                                      // 37\n    optional: true                                                                                                     // 38\n  },                                                                                                                   // 35\n  fromEmail: {                                                                                                         // 41\n    type: String,                                                                                                      // 42\n    optional: true                                                                                                     // 43\n  },                                                                                                                   // 41\n  userEmailTitle: {                                                                                                    // 46\n    type: String,                                                                                                      // 47\n    optional: true                                                                                                     // 48\n  },                                                                                                                   // 46\n  userEmailContent: {                                                                                                  // 51\n    type: String,                                                                                                      // 52\n    optional: true                                                                                                     // 53\n  },                                                                                                                   // 51\n  adminEmails: {                                                                                                       // 56\n    type: [String],                                                                                                    // 57\n    optional: true                                                                                                     // 58\n  },                                                                                                                   // 56\n  adminEmailTitle: {                                                                                                   // 61\n    type: String,                                                                                                      // 62\n    optional: true                                                                                                     // 63\n  },                                                                                                                   // 61\n  adminEmailContent: {                                                                                                 // 66\n    type: String,                                                                                                      // 67\n    optional: true                                                                                                     // 68\n  },                                                                                                                   // 66\n  thankContent: {                                                                                                      // 71\n    type: String,                                                                                                      // 72\n    optional: true                                                                                                     // 73\n  },                                                                                                                   // 71\n  redirectUrl: {                                                                                                       // 76\n    type: String,                                                                                                      // 77\n    optional: true                                                                                                     // 78\n  }                                                                                                                    // 76\n});                                                                                                                    // 28\nvar onlineHoursSchema = new SimpleSchema({                                                                             // 82\n  _id: {                                                                                                               // 83\n    type: String                                                                                                       // 84\n  },                                                                                                                   // 83\n  day: {                                                                                                               // 86\n    type: String                                                                                                       // 87\n  },                                                                                                                   // 86\n  from: {                                                                                                              // 89\n    type: String                                                                                                       // 90\n  },                                                                                                                   // 89\n  to: {                                                                                                                // 92\n    type: String                                                                                                       // 93\n  }                                                                                                                    // 92\n}); // messenger ==============                                                                                        // 82\n                                                                                                                       //\nvar messengerSchema = new SimpleSchema({                                                                               // 98\n  notifyCustomer: {                                                                                                    // 99\n    type: Boolean,                                                                                                     // 100\n    optional: true                                                                                                     // 101\n  },                                                                                                                   // 99\n  // manual, auto                                                                                                      // 104\n  availabilityMethod: {                                                                                                // 105\n    type: String,                                                                                                      // 106\n    optional: true,                                                                                                    // 107\n    allowedValues: ['manual', 'auto']                                                                                  // 108\n  },                                                                                                                   // 105\n  isOnline: {                                                                                                          // 110\n    type: Boolean,                                                                                                     // 111\n    optional: true                                                                                                     // 112\n  },                                                                                                                   // 110\n  onlineHours: {                                                                                                       // 114\n    type: [onlineHoursSchema],                                                                                         // 115\n    optional: true                                                                                                     // 116\n  },                                                                                                                   // 114\n  timezone: {                                                                                                          // 118\n    type: String,                                                                                                      // 119\n    optional: true                                                                                                     // 120\n  },                                                                                                                   // 118\n  welcomeMessage: {                                                                                                    // 122\n    type: String,                                                                                                      // 123\n    optional: true                                                                                                     // 124\n  },                                                                                                                   // 122\n  awayMessage: {                                                                                                       // 126\n    type: String,                                                                                                      // 127\n    optional: true                                                                                                     // 128\n  },                                                                                                                   // 126\n  thankYouMessage: {                                                                                                   // 130\n    type: String,                                                                                                      // 131\n    optional: true                                                                                                     // 132\n  }                                                                                                                    // 130\n});                                                                                                                    // 98\nIntegrations.schema = new SimpleSchema({                                                                               // 136\n  // messenger , twitter ...                                                                                           // 137\n  kind: {                                                                                                              // 138\n    type: String,                                                                                                      // 139\n    allowedValues: KIND_CHOICES.ALL_LIST                                                                               // 140\n  },                                                                                                                   // 138\n  name: {                                                                                                              // 143\n    type: String                                                                                                       // 144\n  },                                                                                                                   // 143\n  brandId: {                                                                                                           // 146\n    type: String                                                                                                       // 147\n  },                                                                                                                   // 146\n  formId: {                                                                                                            // 149\n    type: String,                                                                                                      // 150\n    optional: true                                                                                                     // 151\n  },                                                                                                                   // 149\n  // form integration options                                                                                          // 154\n  formData: {                                                                                                          // 155\n    type: formSchema,                                                                                                  // 156\n    optional: true                                                                                                     // 157\n  },                                                                                                                   // 155\n  // messenger availability, text and other options                                                                    // 160\n  messengerData: {                                                                                                     // 161\n    type: messengerSchema,                                                                                             // 162\n    optional: true                                                                                                     // 163\n  },                                                                                                                   // 161\n  // twitter authentication info                                                                                       // 166\n  twitterData: {                                                                                                       // 167\n    type: twitterSchema,                                                                                               // 168\n    optional: true                                                                                                     // 169\n  },                                                                                                                   // 167\n  // facebook authentication info                                                                                      // 172\n  facebookData: {                                                                                                      // 173\n    type: facebookSchema,                                                                                              // 174\n    optional: true                                                                                                     // 175\n  },                                                                                                                   // 173\n  // ui options                                                                                                        // 178\n  uiOptions: {                                                                                                         // 179\n    type: Object,                                                                                                      // 180\n    blackbox: true,                                                                                                    // 181\n    optional: true                                                                                                     // 182\n  }                                                                                                                    // 179\n});                                                                                                                    // 136\nIntegrations.attachSchema(Integrations.schema);                                                                        // 186\nIntegrations.helpers({                                                                                                 // 188\n  brand: function () {                                                                                                 // 189\n    return Brands.findOne(this.brandId) || {};                                                                         // 190\n  },                                                                                                                   // 191\n  channels: function () {                                                                                              // 192\n    return Channels.find({                                                                                             // 193\n      integrationIds: {                                                                                                // 193\n        $in: [this._id]                                                                                                // 193\n      }                                                                                                                // 193\n    }).fetch();                                                                                                        // 193\n  }                                                                                                                    // 194\n});                                                                                                                    // 188\nIntegrations.publicFields = {                                                                                          // 197\n  name: 1,                                                                                                             // 198\n  kind: 1,                                                                                                             // 199\n  brandId: 1,                                                                                                          // 200\n  formId: 1,                                                                                                           // 201\n  uiOptions: 1,                                                                                                        // 202\n  formData: 1,                                                                                                         // 203\n  messengerData: 1                                                                                                     // 204\n};                                                                                                                     // 197\nFactory.define('integration', Integrations, {                                                                          // 207\n  name: function () {                                                                                                  // 208\n    return faker.random.word();                                                                                        // 208\n  },                                                                                                                   // 208\n  kind: KIND_CHOICES.MESSENGER,                                                                                        // 209\n  brandId: function () {                                                                                               // 210\n    return Random.id();                                                                                                // 210\n  }                                                                                                                    // 210\n});                                                                                                                    // 207\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"brands\":{\"server\":{\"methods.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/utils\",\"../brands\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/brands/server/methods.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  add: function () {                                                                                                   // 1\n    return add;                                                                                                        // 1\n  },                                                                                                                   // 1\n  edit: function () {                                                                                                  // 1\n    return edit;                                                                                                       // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  },                                                                                                                   // 1\n  configEmail: function () {                                                                                           // 1\n    return configEmail;                                                                                                // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Brands = void 0,                                                                                                   // 1\n    emailConfigSchema = void 0;                                                                                        // 1\nmodule.importSync(\"../brands\", {                                                                                       // 1\n  Brands: function (v) {                                                                                               // 1\n    Brands = v;                                                                                                        // 1\n  },                                                                                                                   // 1\n  emailConfigSchema: function (v) {                                                                                    // 1\n    emailConfigSchema = v;                                                                                             // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar add = new ValidatedMethod({                                                                                        // 8\n  name: 'brands.add',                                                                                                  // 9\n  mixins: [ErxesMixin],                                                                                                // 10\n  validate: function (_ref) {                                                                                          // 12\n    var doc = _ref.doc;                                                                                                // 12\n    check(doc, Brands.schema);                                                                                         // 13\n  },                                                                                                                   // 14\n  run: function (_ref2) {                                                                                              // 16\n    var doc = _ref2.doc;                                                                                               // 16\n    var id = Brands.insert(Object.assign({                                                                             // 17\n      userId: this.userId                                                                                              // 17\n    }, doc));                                                                                                          // 17\n    return id;                                                                                                         // 18\n  }                                                                                                                    // 19\n});                                                                                                                    // 8\nvar edit = new ValidatedMethod({                                                                                       // 23\n  name: 'brands.edit',                                                                                                 // 24\n  mixins: [ErxesMixin],                                                                                                // 25\n  validate: function (_ref3) {                                                                                         // 27\n    var id = _ref3.id,                                                                                                 // 27\n        doc = _ref3.doc;                                                                                               // 27\n    check(id, String);                                                                                                 // 28\n    check(doc, Brands.schema);                                                                                         // 29\n  },                                                                                                                   // 30\n  run: function (_ref4) {                                                                                              // 32\n    var id = _ref4.id,                                                                                                 // 32\n        doc = _ref4.doc;                                                                                               // 32\n    var brand = Brands.findOne(id, {                                                                                   // 33\n      fields: {                                                                                                        // 34\n        userId: 1                                                                                                      // 35\n      }                                                                                                                // 34\n    });                                                                                                                // 33\n                                                                                                                       //\n    if (!brand) {                                                                                                      // 39\n      throw new Meteor.Error('brands.edit.notFound', 'Brand not found');                                               // 40\n    }                                                                                                                  // 41\n                                                                                                                       //\n    return Brands.update(id, {                                                                                         // 43\n      $set: doc                                                                                                        // 43\n    });                                                                                                                // 43\n  }                                                                                                                    // 44\n});                                                                                                                    // 23\nvar remove = new ValidatedMethod({                                                                                     // 48\n  name: 'brands.remove',                                                                                               // 49\n  mixins: [ErxesMixin],                                                                                                // 50\n  validate: function (id) {                                                                                            // 52\n    check(id, String);                                                                                                 // 53\n  },                                                                                                                   // 54\n  run: function (id) {                                                                                                 // 56\n    var brand = Brands.findOne(id, {                                                                                   // 57\n      fields: {                                                                                                        // 57\n        userId: 1                                                                                                      // 57\n      }                                                                                                                // 57\n    });                                                                                                                // 57\n                                                                                                                       //\n    if (!brand) {                                                                                                      // 59\n      throw new Meteor.Error('brands.remove.notFound', 'Brand not found');                                             // 60\n    }                                                                                                                  // 61\n                                                                                                                       //\n    return Brands.remove(id);                                                                                          // 63\n  }                                                                                                                    // 64\n});                                                                                                                    // 48\nvar configEmail = new ValidatedMethod({                                                                                // 68\n  name: 'brands.configEmail',                                                                                          // 69\n  mixins: [ErxesMixin],                                                                                                // 70\n  validate: function (_ref5) {                                                                                         // 72\n    var id = _ref5.id,                                                                                                 // 72\n        config = _ref5.config;                                                                                         // 72\n    check(id, String);                                                                                                 // 73\n    check(config, emailConfigSchema);                                                                                  // 74\n  },                                                                                                                   // 75\n  run: function (_ref6) {                                                                                              // 77\n    var id = _ref6.id,                                                                                                 // 77\n        config = _ref6.config;                                                                                         // 77\n    return Brands.update(id, {                                                                                         // 78\n      $set: {                                                                                                          // 78\n        emailConfig: config                                                                                            // 78\n      }                                                                                                                // 78\n    });                                                                                                                // 78\n  }                                                                                                                    // 79\n});                                                                                                                    // 68\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"brands.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"faker\",\"meteor/mongo\",\"meteor/random\",\"meteor/dburles:factory\",\"meteor/aldeed:simple-schema\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/brands/brands.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Brands: function () {                                                                                                // 1\n    return Brands;                                                                                                     // 1\n  },                                                                                                                   // 1\n  emailConfigSchema: function () {                                                                                     // 1\n    return emailConfigSchema;                                                                                          // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\n                                                                                                                       //\n// Brand collection                                                                                                    // 7\nvar BrandsCollection = function (_Mongo$Collection) {                                                                  //\n  (0, _inherits3.default)(BrandsCollection, _Mongo$Collection);                                                        //\n                                                                                                                       //\n  function BrandsCollection() {                                                                                        //\n    (0, _classCallCheck3.default)(this, BrandsCollection);                                                             //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  BrandsCollection.prototype.insert = function () {                                                                    //\n    function insert(doc, callback) {                                                                                   //\n      var brand = Object.assign({}, doc); // generate code automatically                                               // 10\n                                                                                                                       //\n      var code = Random.id().substr(0, 6);                                                                             // 13\n                                                                                                                       //\n      while (this.findOne({                                                                                            // 14\n        code: code                                                                                                     // 14\n      })) {                                                                                                            // 14\n        code = Random.id().substr(0, 6);                                                                               // 15\n      }                                                                                                                // 16\n                                                                                                                       //\n      brand.code = code;                                                                                               // 18\n      brand.createdAt = new Date();                                                                                    // 19\n      brand.emailConfig = {                                                                                            // 20\n        type: 'simple'                                                                                                 // 20\n      };                                                                                                               // 20\n      return _Mongo$Collection.prototype.insert.call(this, brand, callback);                                           // 22\n    }                                                                                                                  // 23\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return BrandsCollection;                                                                                             //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar Brands = new BrandsCollection('brands');                                                                           // 26\n// Deny all client-side updates since we will be using methods to manage                                               // 28\n// this collection                                                                                                     // 29\nBrands.deny({                                                                                                          // 30\n  insert: function () {                                                                                                // 31\n    return true;                                                                                                       // 32\n  },                                                                                                                   // 33\n  update: function () {                                                                                                // 34\n    return true;                                                                                                       // 35\n  },                                                                                                                   // 36\n  remove: function () {                                                                                                // 37\n    return true;                                                                                                       // 38\n  }                                                                                                                    // 39\n});                                                                                                                    // 30\nvar emailConfigSchema = new SimpleSchema({                                                                             // 42\n  type: {                                                                                                              // 43\n    type: String,                                                                                                      // 44\n    allowedValues: ['simple', 'custom']                                                                                // 45\n  },                                                                                                                   // 43\n  template: {                                                                                                          // 47\n    type: String,                                                                                                      // 48\n    optional: true                                                                                                     // 49\n  }                                                                                                                    // 47\n});                                                                                                                    // 42\nBrands.schema = new SimpleSchema({                                                                                     // 53\n  name: {                                                                                                              // 54\n    type: String                                                                                                       // 55\n  },                                                                                                                   // 54\n  description: {                                                                                                       // 57\n    type: String,                                                                                                      // 58\n    optional: true                                                                                                     // 59\n  }                                                                                                                    // 57\n});                                                                                                                    // 53\nBrands.schemaExtra = new SimpleSchema({                                                                                // 63\n  code: {                                                                                                              // 64\n    type: String                                                                                                       // 65\n  },                                                                                                                   // 64\n  userId: {                                                                                                            // 67\n    type: String,                                                                                                      // 68\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 69\n  },                                                                                                                   // 67\n  createdAt: {                                                                                                         // 71\n    type: Date                                                                                                         // 72\n  },                                                                                                                   // 71\n  schema: {                                                                                                            // 74\n    type: Object,                                                                                                      // 75\n    blackbox: true,                                                                                                    // 76\n    optional: true                                                                                                     // 77\n  },                                                                                                                   // 74\n  emailConfig: {                                                                                                       // 79\n    type: emailConfigSchema,                                                                                           // 80\n    optional: true                                                                                                     // 81\n  }                                                                                                                    // 79\n});                                                                                                                    // 63\nBrands.attachSchema(Brands.schema);                                                                                    // 85\nBrands.attachSchema(Brands.schemaExtra);                                                                               // 86\nBrands.publicFields = {                                                                                                // 88\n  name: 1,                                                                                                             // 89\n  code: 1,                                                                                                             // 90\n  description: 1,                                                                                                      // 91\n  userId: 1,                                                                                                           // 92\n  createdAt: 1,                                                                                                        // 93\n  schema: 1,                                                                                                           // 94\n  emailConfig: 1                                                                                                       // 95\n};                                                                                                                     // 88\nFactory.define('brand', Brands, {                                                                                      // 98\n  name: function () {                                                                                                  // 99\n    return faker.random.word();                                                                                        // 99\n  },                                                                                                                   // 99\n  userId: function () {                                                                                                // 100\n    return Random.id();                                                                                                // 100\n  }                                                                                                                    // 100\n});                                                                                                                    // 98\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"channels\":{\"server\":{\"methods.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/server/utils\",\"/imports/api/utils\",\"../channels\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/channels/server/methods.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  add: function () {                                                                                                   // 1\n    return add;                                                                                                        // 1\n  },                                                                                                                   // 1\n  edit: function () {                                                                                                  // 1\n    return edit;                                                                                                       // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar sendNotification = void 0;                                                                                         // 1\nmodule.importSync(\"/imports/api/server/utils\", {                                                                       // 1\n  sendNotification: function (v) {                                                                                     // 1\n    sendNotification = v;                                                                                              // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Channels = void 0;                                                                                                 // 1\nmodule.importSync(\"../channels\", {                                                                                     // 1\n  Channels: function (v) {                                                                                             // 1\n    Channels = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\n                                                                                                                       //\nvar sendNotifications = function (channelId, _memberIds, userId) {                                                     // 8\n  var memberIds = _memberIds || [];                                                                                    // 9\n  var channel = Channels.findOne({                                                                                     // 10\n    _id: channelId                                                                                                     // 10\n  });                                                                                                                  // 10\n  var content = \"You have invited to '\" + channel.name + \"' channel.\";                                                 // 12\n  sendNotification({                                                                                                   // 14\n    createdUser: userId,                                                                                               // 15\n    notifType: 'channelMembersChange',                                                                                 // 16\n    title: content,                                                                                                    // 17\n    content: content,                                                                                                  // 18\n    link: \"/inbox/\" + channel._id,                                                                                     // 19\n    // exclude current user                                                                                            // 21\n    receivers: memberIds.filter(function (id) {                                                                        // 22\n      return id !== userId;                                                                                            // 22\n    })                                                                                                                 // 22\n  });                                                                                                                  // 14\n}; // channel add                                                                                                      // 24\n                                                                                                                       //\n                                                                                                                       //\nvar add = new ValidatedMethod({                                                                                        // 27\n  name: 'channels.add',                                                                                                // 28\n  mixins: [ErxesMixin],                                                                                                // 29\n  validate: function (_ref) {                                                                                          // 31\n    var doc = _ref.doc;                                                                                                // 31\n    // check doc                                                                                                       // 32\n    check(doc, Channels.schema);                                                                                       // 33\n  },                                                                                                                   // 34\n  run: function (_ref2) {                                                                                              // 36\n    var doc = _ref2.doc;                                                                                               // 36\n    var obj = Object.assign({                                                                                          // 37\n      userId: this.userId                                                                                              // 37\n    }, doc);                                                                                                           // 37\n    var channelId = Channels.insert(obj); // send notification                                                         // 39\n                                                                                                                       //\n    sendNotifications(channelId, doc.memberIds, this.userId);                                                          // 42\n    return channelId;                                                                                                  // 44\n  }                                                                                                                    // 45\n});                                                                                                                    // 27\nvar edit = new ValidatedMethod({                                                                                       // 49\n  name: 'channels.edit',                                                                                               // 50\n  mixins: [ErxesMixin],                                                                                                // 51\n  validate: function (_ref3) {                                                                                         // 53\n    var id = _ref3.id,                                                                                                 // 53\n        doc = _ref3.doc;                                                                                               // 53\n    check(id, String);                                                                                                 // 54\n    check(doc, Channels.schema);                                                                                       // 55\n  },                                                                                                                   // 56\n  run: function (_ref4) {                                                                                              // 58\n    var id = _ref4.id,                                                                                                 // 58\n        doc = _ref4.doc;                                                                                               // 58\n    var obj = Channels.findOne(id, {                                                                                   // 59\n      fields: {                                                                                                        // 59\n        userId: 1                                                                                                      // 59\n      }                                                                                                                // 59\n    });                                                                                                                // 59\n                                                                                                                       //\n    if (!obj) {                                                                                                        // 61\n      throw new Meteor.Error('channels.edit.notFound', 'Channel not found');                                           // 62\n    }                                                                                                                  // 63\n                                                                                                                       //\n    Object.assign(doc, {                                                                                               // 65\n      memberIds: doc.memberIds || []                                                                                   // 65\n    }); // add current user to members automatically                                                                   // 65\n                                                                                                                       //\n    if (doc.memberIds.indexOf(this.userId) === -1) {                                                                   // 68\n      doc.memberIds.push(this.userId);                                                                                 // 69\n    } // update action                                                                                                 // 70\n                                                                                                                       //\n                                                                                                                       //\n    Channels.update(id, {                                                                                              // 73\n      $set: doc                                                                                                        // 73\n    });                                                                                                                // 73\n    var updatedChannel = Channels.findOne(id); // send notification                                                    // 75\n                                                                                                                       //\n    sendNotifications(id, updatedChannel.memberIds, this.userId);                                                      // 78\n  }                                                                                                                    // 79\n});                                                                                                                    // 49\nvar remove = new ValidatedMethod({                                                                                     // 83\n  name: 'channels.remove',                                                                                             // 84\n  mixins: [ErxesMixin],                                                                                                // 85\n  validate: function (id) {                                                                                            // 87\n    check(id, String);                                                                                                 // 88\n  },                                                                                                                   // 89\n  run: function (id) {                                                                                                 // 91\n    var obj = Channels.findOne(id, {                                                                                   // 92\n      fields: {                                                                                                        // 92\n        userId: 1                                                                                                      // 92\n      }                                                                                                                // 92\n    });                                                                                                                // 92\n                                                                                                                       //\n    if (!obj) {                                                                                                        // 94\n      throw new Meteor.Error('channels.remove.notFound', 'Channel not found');                                         // 95\n    }                                                                                                                  // 96\n                                                                                                                       //\n    return Channels.remove(id);                                                                                        // 98\n  }                                                                                                                    // 99\n});                                                                                                                    // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"channels.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"faker\",\"meteor/mongo\",\"meteor/random\",\"meteor/aldeed:simple-schema\",\"meteor/dburles:factory\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/channels/channels.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Channels: function () {                                                                                              // 1\n    return Channels;                                                                                                   // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\n                                                                                                                       //\nvar ChannelsCollection = function (_Mongo$Collection) {                                                                //\n  (0, _inherits3.default)(ChannelsCollection, _Mongo$Collection);                                                      //\n                                                                                                                       //\n  function ChannelsCollection() {                                                                                      //\n    (0, _classCallCheck3.default)(this, ChannelsCollection);                                                           //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  ChannelsCollection.prototype.insert = function () {                                                                  //\n    function insert(doc, callback) {                                                                                   //\n      // extend doc with auto values                                                                                   // 9\n      var modifier = Object.assign({                                                                                   // 10\n        createdAt: new Date(),                                                                                         // 12\n        conversationCount: 0,                                                                                          // 13\n        openConversationCount: 0                                                                                       // 14\n      }, doc); // add current user to members                                                                          // 11\n                                                                                                                       //\n      if (modifier.memberIds.indexOf(modifier.userId) === -1) {                                                        // 20\n        modifier.memberIds.push(modifier.userId);                                                                      // 21\n      }                                                                                                                // 22\n                                                                                                                       //\n      return _Mongo$Collection.prototype.insert.call(this, modifier, callback);                                        // 24\n    }                                                                                                                  // 25\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return ChannelsCollection;                                                                                           //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar Channels = new ChannelsCollection('channels');                                                                     // 28\nChannels.deny({                                                                                                        // 30\n  insert: function () {                                                                                                // 31\n    return true;                                                                                                       // 32\n  },                                                                                                                   // 33\n  update: function () {                                                                                                // 34\n    return true;                                                                                                       // 35\n  },                                                                                                                   // 36\n  remove: function () {                                                                                                // 37\n    return true;                                                                                                       // 38\n  }                                                                                                                    // 39\n});                                                                                                                    // 30\nChannels.schema = new SimpleSchema({                                                                                   // 42\n  name: {                                                                                                              // 43\n    type: String                                                                                                       // 44\n  },                                                                                                                   // 43\n  description: {                                                                                                       // 46\n    type: String,                                                                                                      // 47\n    optional: true                                                                                                     // 48\n  },                                                                                                                   // 46\n  integrationIds: {                                                                                                    // 50\n    type: [String],                                                                                                    // 51\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 52\n  },                                                                                                                   // 50\n  memberIds: {                                                                                                         // 54\n    type: [String],                                                                                                    // 55\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 56\n  }                                                                                                                    // 54\n});                                                                                                                    // 42\nChannels.schemaExtra = new SimpleSchema({                                                                              // 60\n  createdAt: {                                                                                                         // 61\n    type: Date                                                                                                         // 62\n  },                                                                                                                   // 61\n  userId: {                                                                                                            // 64\n    type: String,                                                                                                      // 65\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 66\n  },                                                                                                                   // 64\n  // All conversation count                                                                                            // 69\n  conversationCount: {                                                                                                 // 70\n    type: Number                                                                                                       // 71\n  },                                                                                                                   // 70\n  // Open/unresolved conversation count                                                                                // 74\n  openConversationCount: {                                                                                             // 75\n    type: Number                                                                                                       // 76\n  }                                                                                                                    // 75\n});                                                                                                                    // 60\nChannels.attachSchema(Channels.schema);                                                                                // 80\nChannels.attachSchema(Channels.schemaExtra);                                                                           // 81\nChannels.publicFields = {                                                                                              // 83\n  name: 1,                                                                                                             // 84\n  description: 1,                                                                                                      // 85\n  integrationIds: 1,                                                                                                   // 86\n  memberIds: 1,                                                                                                        // 87\n  userId: 1,                                                                                                           // 88\n  createdAt: 1,                                                                                                        // 89\n  openConversationCount: 1,                                                                                            // 90\n  conversationCount: 1                                                                                                 // 91\n};                                                                                                                     // 83\nFactory.define('channel', Channels, {                                                                                  // 94\n  name: function () {                                                                                                  // 95\n    return faker.random.word();                                                                                        // 95\n  },                                                                                                                   // 95\n  memberIds: function () {                                                                                             // 96\n    return [Random.id()];                                                                                              // 96\n  },                                                                                                                   // 96\n  integrationIds: function () {                                                                                        // 97\n    return [Random.id()];                                                                                              // 97\n  },                                                                                                                   // 97\n  userId: function () {                                                                                                // 98\n    return Random.id();                                                                                                // 98\n  }                                                                                                                    // 98\n});                                                                                                                    // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"conversations\":{\"server\":{\"apolloPubSubs.js\":[\"../../server/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/server/apolloPubSubs.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  messageInserted: function () {                                                                                       // 1\n    return messageInserted;                                                                                            // 1\n  },                                                                                                                   // 1\n  conversationsChanged: function () {                                                                                  // 1\n    return conversationsChanged;                                                                                       // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar mutate = void 0;                                                                                                   // 1\nmodule.importSync(\"../../server/utils\", {                                                                              // 1\n  mutate: function (v) {                                                                                               // 1\n    mutate = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar messageInserted = function (messageId) {                                                                           // 8\n  return mutate(\"\\n    mutation {\\n      conversationMessageInserted(_id: \\\"\" + messageId + \"\\\")\\n    }\\n  \");         // 8\n};                                                                                                                     // 8\n                                                                                                                       //\nvar conversationsChanged = function (conversationIds, type) {                                                          // 17\n  return mutate(\"\\n    mutation {\\n      conversationsChanged(_ids: \" + JSON.stringify(conversationIds) + \", type: \\\"\" + type + \"\\\")\\n    }\\n  \");\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"cronJobs.js\":[\"meteor/meteor\",\"meteor/underscore\",\"moment\",\"meteor/percolate:synced-cron\",\"/imports/api/server/utils\",\"/imports/api/customers/customers\",\"/imports/api/brands/brands\",\"../conversations\",\"../constants\",\"../messages\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/server/cronJobs.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar moment = void 0;                                                                                                   // 1\nmodule.importSync(\"moment\", {                                                                                          // 1\n  \"default\": function (v) {                                                                                            // 1\n    moment = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar SyncedCron = void 0;                                                                                               // 1\nmodule.importSync(\"meteor/percolate:synced-cron\", {                                                                    // 1\n  SyncedCron: function (v) {                                                                                           // 1\n    SyncedCron = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar sendEmail = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/server/utils\", {                                                                       // 1\n  sendEmail: function (v) {                                                                                            // 1\n    sendEmail = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Brands = void 0;                                                                                                   // 1\nmodule.importSync(\"/imports/api/brands/brands\", {                                                                      // 1\n  Brands: function (v) {                                                                                               // 1\n    Brands = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Conversations = void 0;                                                                                            // 1\nmodule.importSync(\"../conversations\", {                                                                                // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar CONVERSATION_STATUSES = void 0;                                                                                    // 1\nmodule.importSync(\"../constants\", {                                                                                    // 1\n  CONVERSATION_STATUSES: function (v) {                                                                                // 1\n    CONVERSATION_STATUSES = v;                                                                                         // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"../messages\", {                                                                                     // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\n                                                                                                                       //\nfunction sendMessageEmail() {                                                                                          // 12\n  // new or open conversations                                                                                         // 13\n  var conversations = Conversations.find({                                                                             // 14\n    status: {                                                                                                          // 16\n      $in: [CONVERSATION_STATUSES.NEW, CONVERSATION_STATUSES.OPEN]                                                     // 16\n    }                                                                                                                  // 16\n  }, {                                                                                                                 // 15\n    fields: {                                                                                                          // 18\n      _id: 1,                                                                                                          // 18\n      customerId: 1,                                                                                                   // 18\n      brandId: 1                                                                                                       // 18\n    }                                                                                                                  // 18\n  });                                                                                                                  // 18\n                                                                                                                       //\n  _.each(conversations.fetch(), function (conversation) {                                                              // 21\n    var customer = Customers.findOne(conversation.customerId);                                                         // 22\n    var brand = Brands.findOne(conversation.brandId);                                                                  // 23\n                                                                                                                       //\n    if (!customer || !customer.email) {                                                                                // 25\n      return;                                                                                                          // 26\n    }                                                                                                                  // 27\n                                                                                                                       //\n    if (!brand) {                                                                                                      // 28\n      return;                                                                                                          // 29\n    } // user's last non answered question                                                                             // 30\n                                                                                                                       //\n                                                                                                                       //\n    var question = Messages.findOne({                                                                                  // 33\n      conversationId: conversation._id,                                                                                // 35\n      customerId: {                                                                                                    // 36\n        $exists: true                                                                                                  // 36\n      }                                                                                                                // 36\n    }, {                                                                                                               // 34\n      sort: {                                                                                                          // 38\n        createdAt: -1                                                                                                  // 38\n      }                                                                                                                // 38\n    }) || {};                                                                                                          // 38\n    question.createdAt = moment(question.createdAt).format('DD MMM YY, HH:mm'); // generate admin unread answers       // 41\n                                                                                                                       //\n    var answers = [];                                                                                                  // 44\n    var adminMessages = Messages.find({                                                                                // 46\n      conversationId: conversation._id,                                                                                // 48\n      userId: {                                                                                                        // 49\n        $exists: true                                                                                                  // 49\n      },                                                                                                               // 49\n      isCustomerRead: {                                                                                                // 50\n        $exists: false                                                                                                 // 50\n      },                                                                                                               // 50\n      // exclude internal notes                                                                                        // 52\n      internal: false                                                                                                  // 53\n    }, {                                                                                                               // 47\n      sort: {                                                                                                          // 55\n        createdAt: 1                                                                                                   // 55\n      }                                                                                                                // 55\n    }).fetch();                                                                                                        // 55\n                                                                                                                       //\n    _.each(adminMessages, function (message) {                                                                         // 58\n      var answer = message; // add user object to answer                                                               // 59\n                                                                                                                       //\n      answer.user = Meteor.users.findOne(message.userId);                                                              // 62\n      answer.createdAt = moment(answer.createdAt).format('DD MMM YY, HH:mm');                                          // 63\n      answers.push(answer);                                                                                            // 64\n    });                                                                                                                // 65\n                                                                                                                       //\n    if (answers.length < 1) {                                                                                          // 67\n      return;                                                                                                          // 68\n    } // template data                                                                                                 // 69\n                                                                                                                       //\n                                                                                                                       //\n    var data = {                                                                                                       // 72\n      customer: customer,                                                                                              // 72\n      question: question,                                                                                              // 72\n      answers: answers,                                                                                                // 72\n      brand: brand                                                                                                     // 72\n    }; // add user's signature                                                                                         // 72\n                                                                                                                       //\n    var user = Meteor.users.findOne(answers[0].userId);                                                                // 75\n                                                                                                                       //\n    if (user && user.emailSignatures) {                                                                                // 77\n      var signature = _.find(user.emailSignatures, function (s) {                                                      // 78\n        return brand._id === s.brandId;                                                                                // 78\n      });                                                                                                              // 78\n                                                                                                                       //\n      if (signature) {                                                                                                 // 80\n        data.signature = signature.signature;                                                                          // 81\n      }                                                                                                                // 82\n    } // send email                                                                                                    // 83\n                                                                                                                       //\n                                                                                                                       //\n    sendEmail({                                                                                                        // 86\n      to: customer.email,                                                                                              // 87\n      subject: \"Reply from \\\"\" + brand.name + \"\\\"\",                                                                    // 88\n      template: {                                                                                                      // 89\n        name: 'conversationCron',                                                                                      // 90\n        isCustom: true,                                                                                                // 91\n        data: data                                                                                                     // 92\n      }                                                                                                                // 89\n    }); // mark sent messages as read                                                                                  // 86\n                                                                                                                       //\n    Messages.update({                                                                                                  // 97\n      conversationId: conversation._id,                                                                                // 99\n      userId: {                                                                                                        // 100\n        $exists: true                                                                                                  // 100\n      },                                                                                                               // 100\n      isCustomerRead: {                                                                                                // 101\n        $exists: false                                                                                                 // 101\n      }                                                                                                                // 101\n    }, {                                                                                                               // 98\n      $set: {                                                                                                          // 103\n        isCustomerRead: true                                                                                           // 103\n      }                                                                                                                // 103\n    }, {                                                                                                               // 103\n      multi: true                                                                                                      // 104\n    });                                                                                                                // 104\n  });                                                                                                                  // 106\n}                                                                                                                      // 107\n                                                                                                                       //\nSyncedCron.add({                                                                                                       // 109\n  name: \"Send unread conversation messages to customer's email\",                                                       // 110\n  schedule: function (parser) {                                                                                        // 112\n    // return parser.text('every 10 seconds');                                                                         // 113\n    return parser.text('every 10 minutes');                                                                            // 114\n  },                                                                                                                   // 115\n  job: function () {                                                                                                   // 117\n    sendMessageEmail();                                                                                                // 118\n  }                                                                                                                    // 119\n});                                                                                                                    // 109\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods.js\":[\"babel-runtime/helpers/extends\",\"meteor/meteor\",\"meteor/check\",\"meteor/underscore\",\"meteor/mdg:validated-method\",\"strip\",\"/imports/api/utils\",\"/imports/api/server/utils\",\"/imports/api/integrations/constants\",\"/imports/api/integrations/social/server/twitter\",\"/imports/api/integrations/social/server/facebook\",\"/imports/api/conversations/messages\",\"/imports/api/conversations/conversations\",\"/imports/api/conversations/constants\",\"./apolloPubSubs\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/server/methods.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  addMessage: function () {                                                                                            // 1\n    return addMessage;                                                                                                 // 1\n  },                                                                                                                   // 1\n  assign: function () {                                                                                                // 1\n    return assign;                                                                                                     // 1\n  },                                                                                                                   // 1\n  unassign: function () {                                                                                              // 1\n    return unassign;                                                                                                   // 1\n  },                                                                                                                   // 1\n  changeStatus: function () {                                                                                          // 1\n    return changeStatus;                                                                                               // 1\n  },                                                                                                                   // 1\n  star: function () {                                                                                                  // 1\n    return star;                                                                                                       // 1\n  },                                                                                                                   // 1\n  unstar: function () {                                                                                                // 1\n    return unstar;                                                                                                     // 1\n  },                                                                                                                   // 1\n  toggleParticipate: function () {                                                                                     // 1\n    return toggleParticipate;                                                                                          // 1\n  },                                                                                                                   // 1\n  markAsRead: function () {                                                                                            // 1\n    return markAsRead;                                                                                                 // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar strip = void 0;                                                                                                    // 1\nmodule.importSync(\"strip\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    strip = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar sendNotification = void 0,                                                                                         // 1\n    sendEmail = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/server/utils\", {                                                                       // 1\n  sendNotification: function (v) {                                                                                     // 1\n    sendNotification = v;                                                                                              // 1\n  },                                                                                                                   // 1\n  sendEmail: function (v) {                                                                                            // 1\n    sendEmail = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar KIND_CHOICES = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/constants\", {                                                             // 1\n  KIND_CHOICES: function (v) {                                                                                         // 1\n    KIND_CHOICES = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar tweetReply = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/integrations/social/server/twitter\", {                                                 // 1\n  tweetReply: function (v) {                                                                                           // 1\n    tweetReply = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar facebookReply = void 0;                                                                                            // 1\nmodule.importSync(\"/imports/api/integrations/social/server/facebook\", {                                                // 1\n  facebookReply: function (v) {                                                                                        // 1\n    facebookReply = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\nvar Messages = void 0,                                                                                                 // 1\n    FormSchema = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/conversations/messages\", {                                                             // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  },                                                                                                                   // 1\n  FormSchema: function (v) {                                                                                           // 1\n    FormSchema = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 10);                                                                                                                // 1\nvar Conversations = void 0,                                                                                            // 1\n    ConversationIdsSchema = void 0,                                                                                    // 1\n    AssignSchema = void 0,                                                                                             // 1\n    ChangeStatusSchema = void 0;                                                                                       // 1\nmodule.importSync(\"/imports/api/conversations/conversations\", {                                                        // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  },                                                                                                                   // 1\n  ConversationIdsSchema: function (v) {                                                                                // 1\n    ConversationIdsSchema = v;                                                                                         // 1\n  },                                                                                                                   // 1\n  AssignSchema: function (v) {                                                                                         // 1\n    AssignSchema = v;                                                                                                  // 1\n  },                                                                                                                   // 1\n  ChangeStatusSchema: function (v) {                                                                                   // 1\n    ChangeStatusSchema = v;                                                                                            // 1\n  }                                                                                                                    // 1\n}, 11);                                                                                                                // 1\nvar CONVERSATION_STATUSES = void 0;                                                                                    // 1\nmodule.importSync(\"/imports/api/conversations/constants\", {                                                            // 1\n  CONVERSATION_STATUSES: function (v) {                                                                                // 1\n    CONVERSATION_STATUSES = v;                                                                                         // 1\n  }                                                                                                                    // 1\n}, 12);                                                                                                                // 1\nvar conversationsChanged = void 0,                                                                                     // 1\n    messageInserted = void 0;                                                                                          // 1\nmodule.importSync(\"./apolloPubSubs\", {                                                                                 // 1\n  conversationsChanged: function (v) {                                                                                 // 1\n    conversationsChanged = v;                                                                                          // 1\n  },                                                                                                                   // 1\n  messageInserted: function (v) {                                                                                      // 1\n    messageInserted = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 13);                                                                                                                // 1\n                                                                                                                       //\n/*                                                                                                                     // 22\n * all possible users they can get notifications                                                                       //\n */var conversationNotifReceivers = function (conversation, currentUserId) {                                           //\n  var userIds = []; // assigned user can get notifications                                                             // 26\n                                                                                                                       //\n  if (conversation.assignedUserId) {                                                                                   // 29\n    userIds.push(conversation.assignedUserId);                                                                         // 30\n  } // participated users can get notifications                                                                        // 31\n                                                                                                                       //\n                                                                                                                       //\n  if (conversation.participatedUserIds) {                                                                              // 34\n    userIds = _.union(userIds, conversation.participatedUserIds);                                                      // 35\n  } // exclude current user                                                                                            // 36\n                                                                                                                       //\n                                                                                                                       //\n  userIds = _.without(userIds, currentUserId);                                                                         // 39\n  return userIds;                                                                                                      // 41\n}; /*                                                                                                                  // 42\n    * create new message from admin                                                                                    //\n    */                                                                                                                 //\n                                                                                                                       //\nvar addMessage = new ValidatedMethod({                                                                                 // 47\n  name: 'conversations.addMessage',                                                                                    // 48\n  mixins: [ErxesMixin],                                                                                                // 49\n  validate: FormSchema.validator(),                                                                                    // 50\n  run: function (_doc) {                                                                                               // 52\n    var doc = _doc;                                                                                                    // 53\n    var conversation = Conversations.findOne(doc.conversationId);                                                      // 54\n                                                                                                                       //\n    if (!conversation) {                                                                                               // 56\n      throw new Meteor.Error('conversations.addMessage.conversationNotFound', 'Conversation not found');               // 57\n    }                                                                                                                  // 61\n                                                                                                                       //\n    var integration = conversation.integration(); // normalize content, attachments                                    // 63\n                                                                                                                       //\n    var content = doc.content || '';                                                                                   // 66\n    var attachments = doc.attachments || [];                                                                           // 67\n    doc.content = content;                                                                                             // 69\n    doc.attachments = attachments; // if there is no attachments and no content then throw content required            // 70\n    // error                                                                                                           // 73\n                                                                                                                       //\n    if (attachments.length === 0 && !strip(content)) {                                                                 // 74\n      throw new Meteor.Error('conversations.addMessage.contentRequired', 'Content is required');                       // 75\n    } // setting conversation's content to last message                                                                // 76\n                                                                                                                       //\n                                                                                                                       //\n    Conversations.update({                                                                                             // 79\n      _id: doc.conversationId                                                                                          // 79\n    }, {                                                                                                               // 79\n      $set: {                                                                                                          // 79\n        content: content                                                                                               // 79\n      }                                                                                                                // 79\n    });                                                                                                                // 79\n    var title = 'You have a new message.'; // send notification                                                        // 81\n                                                                                                                       //\n    sendNotification({                                                                                                 // 84\n      createdUser: this.userId,                                                                                        // 85\n      notifType: 'conversationAddMessage',                                                                             // 86\n      title: title,                                                                                                    // 87\n      content: content,                                                                                                // 88\n      link: \"/inbox/details/\" + conversation._id,                                                                      // 89\n      receivers: conversationNotifReceivers(conversation, this.userId)                                                 // 90\n    });                                                                                                                // 84\n    var userId = this.userId; // do not send internal message to third service integrations                            // 93\n                                                                                                                       //\n    if (doc.internal) {                                                                                                // 96\n      return Messages.insert((0, _extends3.default)({}, doc, {                                                         // 97\n        userId: userId                                                                                                 // 97\n      }));                                                                                                             // 97\n    } // send reply to twitter                                                                                         // 98\n                                                                                                                       //\n                                                                                                                       //\n    if (integration.kind === KIND_CHOICES.TWITTER) {                                                                   // 101\n      return tweetReply(conversation, strip(content));                                                                 // 102\n    }                                                                                                                  // 103\n                                                                                                                       //\n    var messageId = Messages.insert((0, _extends3.default)({}, doc, {                                                  // 105\n      userId: userId                                                                                                   // 105\n    })); // notify graphl subscription                                                                                 // 105\n                                                                                                                       //\n    messageInserted(messageId);                                                                                        // 108\n    var customer = conversation.customer(); // if conversation's integration kind is form then send reply to           // 110\n    // customer's email                                                                                                // 113\n                                                                                                                       //\n    var kind = integration.kind;                                                                                       // 114\n    var email = customer ? customer.email : '';                                                                        // 115\n                                                                                                                       //\n    if (kind === KIND_CHOICES.FORM && email) {                                                                         // 117\n      sendEmail({                                                                                                      // 118\n        to: customer.email,                                                                                            // 119\n        subject: 'Reply',                                                                                              // 120\n        template: {                                                                                                    // 121\n          name: 'notification',                                                                                        // 122\n          data: {                                                                                                      // 123\n            notification: {                                                                                            // 124\n              title: 'reply',                                                                                          // 125\n              content: content,                                                                                        // 126\n              date: new Date()                                                                                         // 127\n            }                                                                                                          // 124\n          }                                                                                                            // 123\n        }                                                                                                              // 121\n      });                                                                                                              // 118\n    } // send reply to facebook                                                                                        // 132\n                                                                                                                       //\n                                                                                                                       //\n    if (integration.kind === KIND_CHOICES.FACEBOOK) {                                                                  // 135\n      // when facebook kind is feed, assign commentId in extraData                                                     // 136\n      facebookReply(conversation, strip(content), messageId);                                                          // 137\n    }                                                                                                                  // 138\n                                                                                                                       //\n    return messageId;                                                                                                  // 140\n  }                                                                                                                    // 141\n});                                                                                                                    // 47\n                                                                                                                       //\nvar checkConversationsExistance = function (conversationIds) {                                                         // 144\n  var selector = {                                                                                                     // 145\n    _id: {                                                                                                             // 145\n      $in: conversationIds                                                                                             // 145\n    }                                                                                                                  // 145\n  };                                                                                                                   // 145\n  var conversations = Conversations.find(selector).fetch();                                                            // 146\n                                                                                                                       //\n  if (conversations.length !== conversationIds.length) {                                                               // 148\n    throw new Meteor.Error('conversations.conversationNotFound', 'Conversation not found.');                           // 149\n  }                                                                                                                    // 150\n                                                                                                                       //\n  return {                                                                                                             // 152\n    selector: selector,                                                                                                // 152\n    conversations: conversations                                                                                       // 152\n  };                                                                                                                   // 152\n}; /*                                                                                                                  // 153\n    * assign employee to conversation                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nvar assign = new ValidatedMethod({                                                                                     // 158\n  name: 'conversations.assign',                                                                                        // 159\n  mixins: [ErxesMixin],                                                                                                // 160\n  validate: AssignSchema.validator(),                                                                                  // 161\n  run: function (_ref) {                                                                                               // 163\n    var _this = this;                                                                                                  // 163\n                                                                                                                       //\n    var conversationIds = _ref.conversationIds,                                                                        // 163\n        assignedUserId = _ref.assignedUserId;                                                                          // 163\n                                                                                                                       //\n    // check conversations existance                                                                                   // 164\n    var _checkConversationsEx = checkConversationsExistance(conversationIds),                                          // 163\n        selector = _checkConversationsEx.selector;                                                                     // 163\n                                                                                                                       //\n    if (!Meteor.users.findOne(assignedUserId)) {                                                                       // 167\n      throw new Meteor.Error('conversations.assign.userNotFound', 'User not found.');                                  // 168\n    }                                                                                                                  // 169\n                                                                                                                       //\n    Conversations.update({                                                                                             // 171\n      _id: {                                                                                                           // 172\n        $in: conversationIds                                                                                           // 172\n      }                                                                                                                // 172\n    }, {                                                                                                               // 172\n      $set: {                                                                                                          // 173\n        assignedUserId: assignedUserId                                                                                 // 173\n      }                                                                                                                // 173\n    }, {                                                                                                               // 173\n      multi: true                                                                                                      // 174\n    }); // notify graphl subscription                                                                                  // 174\n                                                                                                                       //\n    conversationsChanged(conversationIds, 'statusChanged');                                                            // 178\n    var updatedConversations = Conversations.find(selector).fetch(); // send notification                              // 180\n                                                                                                                       //\n    _.each(updatedConversations, function (conversation) {                                                             // 183\n      var content = 'Assigned user has changed';                                                                       // 184\n      sendNotification({                                                                                               // 186\n        createdUser: _this.userId,                                                                                     // 187\n        notifType: 'conversationAssigneeChange',                                                                       // 188\n        title: content,                                                                                                // 189\n        content: content,                                                                                              // 190\n        link: \"/inbox/details/\" + conversation._id,                                                                    // 191\n        receivers: conversationNotifReceivers(conversation, _this.userId)                                              // 192\n      });                                                                                                              // 186\n    });                                                                                                                // 194\n  }                                                                                                                    // 195\n});                                                                                                                    // 158\nvar unassign = new ValidatedMethod({                                                                                   // 201\n  name: 'conversations.unassign',                                                                                      // 202\n  mixins: [ErxesMixin],                                                                                                // 203\n  validate: ConversationIdsSchema.validator(),                                                                         // 204\n  run: function (_ref2) {                                                                                              // 206\n    var conversationIds = _ref2.conversationIds;                                                                       // 206\n    // check conversations existance                                                                                   // 207\n    checkConversationsExistance(conversationIds);                                                                      // 208\n    Conversations.update({                                                                                             // 210\n      _id: {                                                                                                           // 211\n        $in: conversationIds                                                                                           // 211\n      }                                                                                                                // 211\n    }, {                                                                                                               // 211\n      $unset: {                                                                                                        // 212\n        assignedUserId: 1                                                                                              // 212\n      }                                                                                                                // 212\n    }, {                                                                                                               // 212\n      multi: true                                                                                                      // 213\n    }); // notify graphl subscription                                                                                  // 213\n                                                                                                                       //\n    conversationsChanged(conversationIds, 'statusChanged');                                                            // 217\n  }                                                                                                                    // 218\n});                                                                                                                    // 201\nvar changeStatus = new ValidatedMethod({                                                                               // 224\n  name: 'conversations.changeStatus',                                                                                  // 225\n  mixins: [ErxesMixin],                                                                                                // 226\n  validate: ChangeStatusSchema.validator(),                                                                            // 227\n  run: function (_ref3) {                                                                                              // 229\n    var _this2 = this;                                                                                                 // 229\n                                                                                                                       //\n    var conversationIds = _ref3.conversationIds,                                                                       // 229\n        status = _ref3.status;                                                                                         // 229\n                                                                                                                       //\n    // check conversations existance                                                                                   // 230\n    var _checkConversationsEx2 = checkConversationsExistance(conversationIds),                                         // 229\n        conversations = _checkConversationsEx2.conversations;                                                          // 229\n                                                                                                                       //\n    Conversations.update({                                                                                             // 233\n      _id: {                                                                                                           // 233\n        $in: conversationIds                                                                                           // 233\n      }                                                                                                                // 233\n    }, {                                                                                                               // 233\n      $set: {                                                                                                          // 233\n        status: status                                                                                                 // 233\n      }                                                                                                                // 233\n    }, {                                                                                                               // 233\n      multi: true                                                                                                      // 233\n    }); // notify graphl subscription                                                                                  // 233\n                                                                                                                       //\n    conversationsChanged(conversationIds, 'statusChanged'); // send notification                                       // 236\n                                                                                                                       //\n    _.each(conversations, function (conversation) {                                                                    // 239\n      // if associated integration's notify customer config is setted as true                                          // 240\n      // send email to customer, when conversation close                                                               // 241\n      if (status === CONVERSATION_STATUSES.CLOSED) {                                                                   // 242\n        var customer = conversation.customer();                                                                        // 243\n        var integration = conversation.integration();                                                                  // 244\n        var messengerData = integration.messengerData || {};                                                           // 245\n        var notifyCustomer = messengerData.notifyCustomer || false;                                                    // 246\n                                                                                                                       //\n        if (notifyCustomer && customer.email) {                                                                        // 248\n          // send email to customer                                                                                    // 249\n          sendEmail({                                                                                                  // 250\n            to: customer.email,                                                                                        // 251\n            subject: 'Conversation detail',                                                                            // 252\n            template: {                                                                                                // 253\n              name: 'conversationDetail',                                                                              // 254\n              data: {                                                                                                  // 255\n                conversationDetail: {                                                                                  // 256\n                  title: 'Conversation detail',                                                                        // 257\n                  messages: Messages.find({                                                                            // 258\n                    conversationId: conversation._id                                                                   // 258\n                  }).fetch(),                                                                                          // 258\n                  date: new Date()                                                                                     // 259\n                }                                                                                                      // 256\n              }                                                                                                        // 255\n            }                                                                                                          // 253\n          });                                                                                                          // 250\n        }                                                                                                              // 264\n      }                                                                                                                // 265\n                                                                                                                       //\n      var content = 'Conversation status has changed.';                                                                // 267\n      sendNotification({                                                                                               // 269\n        createdUser: _this2.userId,                                                                                    // 270\n        notifType: 'conversationStateChange',                                                                          // 271\n        title: content,                                                                                                // 272\n        content: content,                                                                                              // 273\n        link: \"/inbox/details/\" + conversation._id,                                                                    // 274\n        receivers: conversationNotifReceivers(conversation, _this2.userId)                                             // 275\n      });                                                                                                              // 269\n    });                                                                                                                // 277\n  }                                                                                                                    // 278\n});                                                                                                                    // 224\nvar star = new ValidatedMethod({                                                                                       // 284\n  name: 'conversations.star',                                                                                          // 285\n  mixins: [ErxesMixin],                                                                                                // 286\n  validate: ConversationIdsSchema.validator(),                                                                         // 287\n  run: function (_ref4) {                                                                                              // 289\n    var conversationIds = _ref4.conversationIds;                                                                       // 289\n    // check conversations existance                                                                                   // 290\n    checkConversationsExistance(conversationIds);                                                                      // 291\n    Meteor.users.update(this.userId, {                                                                                 // 293\n      $addToSet: {                                                                                                     // 294\n        'details.starredConversationIds': {                                                                            // 295\n          $each: conversationIds                                                                                       // 295\n        }                                                                                                              // 295\n      }                                                                                                                // 294\n    });                                                                                                                // 293\n  }                                                                                                                    // 298\n});                                                                                                                    // 284\nvar unstar = new ValidatedMethod({                                                                                     // 304\n  name: 'conversations.unstar',                                                                                        // 305\n  mixins: [ErxesMixin],                                                                                                // 306\n  validate: ConversationIdsSchema.validator(),                                                                         // 307\n  run: function (_ref5) {                                                                                              // 309\n    var conversationIds = _ref5.conversationIds;                                                                       // 309\n    // check conversations existance                                                                                   // 310\n    checkConversationsExistance(conversationIds);                                                                      // 311\n    Meteor.users.update(this.userId, {                                                                                 // 313\n      $pull: {                                                                                                         // 314\n        'details.starredConversationIds': {                                                                            // 314\n          $in: conversationIds                                                                                         // 314\n        }                                                                                                              // 314\n      }                                                                                                                // 314\n    });                                                                                                                // 313\n  }                                                                                                                    // 316\n});                                                                                                                    // 304\nvar toggleParticipate = new ValidatedMethod({                                                                          // 322\n  name: 'conversations.toggleParticipate',                                                                             // 323\n  mixins: [ErxesMixin],                                                                                                // 324\n  validate: ConversationIdsSchema.validator(),                                                                         // 325\n  run: function (_ref6) {                                                                                              // 327\n    var conversationIds = _ref6.conversationIds;                                                                       // 327\n                                                                                                                       //\n    // check conversations existance                                                                                   // 328\n    var _checkConversationsEx3 = checkConversationsExistance(conversationIds),                                         // 327\n        selector = _checkConversationsEx3.selector;                                                                    // 327\n                                                                                                                       //\n    var extendSelector = (0, _extends3.default)({}, selector, {                                                        // 331\n      participatedUserIds: {                                                                                           // 333\n        $in: [this.userId]                                                                                             // 333\n      }                                                                                                                // 333\n    }); // not previously added                                                                                        // 331\n                                                                                                                       //\n    if (Conversations.find(extendSelector).count() === 0) {                                                            // 337\n      Conversations.update(selector, {                                                                                 // 338\n        $addToSet: {                                                                                                   // 340\n          participatedUserIds: this.userId                                                                             // 340\n        }                                                                                                              // 340\n      }, {                                                                                                             // 340\n        multi: true                                                                                                    // 341\n      });                                                                                                              // 341\n    } else {                                                                                                           // 343\n      // remove                                                                                                        // 344\n      Conversations.update(selector, {                                                                                 // 345\n        $pull: {                                                                                                       // 347\n          participatedUserIds: {                                                                                       // 347\n            $in: [this.userId]                                                                                         // 347\n          }                                                                                                            // 347\n        }                                                                                                              // 347\n      }, {                                                                                                             // 347\n        multi: true                                                                                                    // 348\n      });                                                                                                              // 348\n    } // notify graphl subscription                                                                                    // 350\n                                                                                                                       //\n                                                                                                                       //\n    conversationsChanged(conversationIds, 'participatedStateChanged');                                                 // 353\n  }                                                                                                                    // 354\n});                                                                                                                    // 322\nvar markAsRead = new ValidatedMethod({                                                                                 // 360\n  name: 'conversations.markAsRead',                                                                                    // 361\n  mixins: [ErxesMixin],                                                                                                // 362\n  validate: function (_ref7) {                                                                                         // 364\n    var conversationId = _ref7.conversationId;                                                                         // 364\n    check(conversationId, String);                                                                                     // 365\n  },                                                                                                                   // 366\n  run: function (_ref8) {                                                                                              // 368\n    var conversationId = _ref8.conversationId;                                                                         // 368\n    var conversation = Conversations.findOne({                                                                         // 369\n      _id: conversationId                                                                                              // 369\n    });                                                                                                                // 369\n                                                                                                                       //\n    if (conversation) {                                                                                                // 371\n      var readUserIds = conversation.readUserIds; // if current user is first one                                      // 372\n                                                                                                                       //\n      if (!readUserIds) {                                                                                              // 375\n        return Conversations.update({                                                                                  // 376\n          _id: conversationId                                                                                          // 377\n        }, {                                                                                                           // 377\n          $set: {                                                                                                      // 378\n            readUserIds: [this.userId]                                                                                 // 378\n          }                                                                                                            // 378\n        });                                                                                                            // 378\n      } // if current user is not in read users list then add it                                                       // 380\n                                                                                                                       //\n                                                                                                                       //\n      if (!readUserIds.includes(this.userId)) {                                                                        // 383\n        return Conversations.update({                                                                                  // 384\n          _id: conversationId                                                                                          // 385\n        }, {                                                                                                           // 385\n          $push: {                                                                                                     // 386\n            readUserIds: this.userId                                                                                   // 386\n          }                                                                                                            // 386\n        });                                                                                                            // 386\n      }                                                                                                                // 388\n    }                                                                                                                  // 389\n                                                                                                                       //\n    return 'not affected';                                                                                             // 391\n  }                                                                                                                    // 392\n});                                                                                                                    // 360\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/constants.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  CONVERSATION_STATUSES: function () {                                                                                 // 1\n    return CONVERSATION_STATUSES;                                                                                      // 1\n  },                                                                                                                   // 1\n  FACEBOOK_DATA_KINDS: function () {                                                                                   // 1\n    return FACEBOOK_DATA_KINDS;                                                                                        // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar CONVERSATION_STATUSES = {                                                                                          // 1\n  NEW: 'new',                                                                                                          // 2\n  OPEN: 'open',                                                                                                        // 3\n  CLOSED: 'closed',                                                                                                    // 4\n  ALL_LIST: ['new', 'open', 'closed']                                                                                  // 5\n};                                                                                                                     // 1\nvar FACEBOOK_DATA_KINDS = {                                                                                            // 8\n  FEED: 'feed',                                                                                                        // 9\n  MESSENGER: 'messenger',                                                                                              // 10\n  ALL_LIST: ['feed', 'messenger']                                                                                      // 11\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"conversations.js\":[\"babel-runtime/helpers/extends\",\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"faker\",\"meteor/meteor\",\"meteor/random\",\"meteor/dburles:factory\",\"meteor/aldeed:simple-schema\",\"/imports/api/customers/customers\",\"/imports/api/integrations/integrations\",\"/imports/api/tags/utils\",\"./constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/conversations.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Conversations: function () {                                                                                         // 1\n    return Conversations;                                                                                              // 1\n  },                                                                                                                   // 1\n  addParticipator: function () {                                                                                       // 1\n    return addParticipator;                                                                                            // 1\n  },                                                                                                                   // 1\n  ConversationIdsSchema: function () {                                                                                 // 1\n    return ConversationIdsSchema;                                                                                      // 1\n  },                                                                                                                   // 1\n  AssignSchema: function () {                                                                                          // 1\n    return AssignSchema;                                                                                               // 1\n  },                                                                                                                   // 1\n  ChangeStatusSchema: function () {                                                                                    // 1\n    return ChangeStatusSchema;                                                                                         // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/integrations\", {                                                          // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar TagsCollection = void 0,                                                                                           // 1\n    tagsHelper = void 0,                                                                                               // 1\n    tagSchemaOptions = void 0;                                                                                         // 1\nmodule.importSync(\"/imports/api/tags/utils\", {                                                                         // 1\n  TagsCollection: function (v) {                                                                                       // 1\n    TagsCollection = v;                                                                                                // 1\n  },                                                                                                                   // 1\n  tagsHelper: function (v) {                                                                                           // 1\n    tagsHelper = v;                                                                                                    // 1\n  },                                                                                                                   // 1\n  tagSchemaOptions: function (v) {                                                                                     // 1\n    tagSchemaOptions = v;                                                                                              // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar CONVERSATION_STATUSES = void 0,                                                                                    // 1\n    FACEBOOK_DATA_KINDS = void 0;                                                                                      // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  CONVERSATION_STATUSES: function (v) {                                                                                // 1\n    CONVERSATION_STATUSES = v;                                                                                         // 1\n  },                                                                                                                   // 1\n  FACEBOOK_DATA_KINDS: function (v) {                                                                                  // 1\n    FACEBOOK_DATA_KINDS = v;                                                                                           // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\n                                                                                                                       //\nvar ConversationsCollection = function (_TagsCollection) {                                                             //\n  (0, _inherits3.default)(ConversationsCollection, _TagsCollection);                                                   //\n                                                                                                                       //\n  function ConversationsCollection() {                                                                                 //\n    (0, _classCallCheck3.default)(this, ConversationsCollection);                                                      //\n    return (0, _possibleConstructorReturn3.default)(this, _TagsCollection.apply(this, arguments));                     //\n  }                                                                                                                    //\n                                                                                                                       //\n  ConversationsCollection.prototype.insert = function () {                                                             //\n    function insert(doc, callback) {                                                                                   //\n      var conversation = Object.assign({                                                                               // 14\n        createdAt: new Date(),                                                                                         // 16\n        number: this.find().count() + 1,                                                                               // 17\n        messageCount: 0                                                                                                // 18\n      }, doc);                                                                                                         // 15\n      return _TagsCollection.prototype.insert.call(this, conversation, callback);                                      // 23\n    }                                                                                                                  // 24\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return ConversationsCollection;                                                                                      //\n}(TagsCollection);                                                                                                     //\n                                                                                                                       //\nvar Conversations = new ConversationsCollection('conversations');                                                      // 27\nConversations.TAG_TYPE = 'conversation';                                                                               // 29\nConversations.helpers((0, _extends3.default)({                                                                         // 31\n  customer: function () {                                                                                              // 32\n    return Customers.findOne(this.customerId) || {};                                                                   // 33\n  },                                                                                                                   // 34\n  user: function () {                                                                                                  // 35\n    return Meteor.users.findOne(this.userId);                                                                          // 36\n  },                                                                                                                   // 37\n  integration: function () {                                                                                           // 38\n    return Integrations.findOne(this.integrationId) || {};                                                             // 39\n  },                                                                                                                   // 40\n  assignedUser: function () {                                                                                          // 41\n    return Meteor.users.findOne(this.assignedUserId);                                                                  // 42\n  },                                                                                                                   // 43\n  participatedUsers: function () {                                                                                     // 44\n    var query = {                                                                                                      // 45\n      _id: {                                                                                                           // 45\n        $in: this.participatedUserIds || []                                                                            // 45\n      }                                                                                                                // 45\n    };                                                                                                                 // 45\n    return Meteor.users.find(query).fetch();                                                                           // 46\n  },                                                                                                                   // 47\n  participatorCount: function () {                                                                                     // 48\n    return this.participatedUserIds && this.participatedUserIds.length || 0;                                           // 49\n  }                                                                                                                    // 50\n}, tagsHelper));                                                                                                       // 31\n                                                                                                                       //\nvar addParticipator = function (_ref) {                                                                                // 54\n  var conversationId = _ref.conversationId,                                                                            // 54\n      userId = _ref.userId;                                                                                            // 54\n                                                                                                                       //\n  if (conversationId && userId) {                                                                                      // 55\n    Conversations.update(conversationId, {                                                                             // 56\n      $addToSet: {                                                                                                     // 57\n        participatedUserIds: userId                                                                                    // 57\n      }                                                                                                                // 57\n    });                                                                                                                // 56\n  }                                                                                                                    // 59\n};                                                                                                                     // 60\n                                                                                                                       //\nConversations.deny({                                                                                                   // 62\n  insert: function () {                                                                                                // 63\n    return true;                                                                                                       // 64\n  },                                                                                                                   // 65\n  update: function () {                                                                                                // 66\n    return true;                                                                                                       // 67\n  },                                                                                                                   // 68\n  remove: function () {                                                                                                // 69\n    return true;                                                                                                       // 70\n  }                                                                                                                    // 71\n}); // twitter schema ====================                                                                             // 62\n                                                                                                                       //\nvar twitterDirectMessageSchema = new SimpleSchema({                                                                    // 75\n  senderId: {                                                                                                          // 76\n    type: Number                                                                                                       // 77\n  },                                                                                                                   // 76\n  senderIdStr: {                                                                                                       // 79\n    type: String                                                                                                       // 80\n  },                                                                                                                   // 79\n  recipientId: {                                                                                                       // 82\n    type: Number                                                                                                       // 83\n  },                                                                                                                   // 82\n  recipientIdStr: {                                                                                                    // 85\n    type: String                                                                                                       // 86\n  }                                                                                                                    // 85\n});                                                                                                                    // 75\nvar twitterSchema = new SimpleSchema({                                                                                 // 90\n  id: {                                                                                                                // 91\n    type: Number,                                                                                                      // 92\n    optional: true                                                                                                     // 93\n  },                                                                                                                   // 91\n  idStr: {                                                                                                             // 95\n    type: String,                                                                                                      // 96\n    optional: true                                                                                                     // 97\n  },                                                                                                                   // 95\n  screenName: {                                                                                                        // 99\n    type: String,                                                                                                      // 100\n    optional: true                                                                                                     // 101\n  },                                                                                                                   // 99\n  isDirectMessage: {                                                                                                   // 103\n    type: Boolean                                                                                                      // 104\n  },                                                                                                                   // 103\n  directMessage: {                                                                                                     // 106\n    type: twitterDirectMessageSchema,                                                                                  // 107\n    optional: true                                                                                                     // 108\n  }                                                                                                                    // 106\n}); // facebook schema                                                                                                 // 90\n                                                                                                                       //\nvar facebookSchema = new SimpleSchema({                                                                                // 113\n  kind: {                                                                                                              // 114\n    type: String,                                                                                                      // 115\n    allowedValues: FACEBOOK_DATA_KINDS.ALL_LIST                                                                        // 116\n  },                                                                                                                   // 114\n  senderName: {                                                                                                        // 118\n    type: String,                                                                                                      // 119\n    optional: true                                                                                                     // 120\n  },                                                                                                                   // 118\n  senderId: {                                                                                                          // 122\n    type: String                                                                                                       // 123\n  },                                                                                                                   // 122\n  recipientId: {                                                                                                       // 125\n    type: String,                                                                                                      // 126\n    optional: true                                                                                                     // 127\n  },                                                                                                                   // 125\n  // when wall post                                                                                                    // 130\n  postId: {                                                                                                            // 131\n    type: String,                                                                                                      // 132\n    optional: true                                                                                                     // 133\n  },                                                                                                                   // 131\n  pageId: {                                                                                                            // 136\n    type: String                                                                                                       // 137\n  }                                                                                                                    // 136\n});                                                                                                                    // 113\nConversations.schema = new SimpleSchema((0, _extends3.default)({                                                       // 141\n  content: {                                                                                                           // 142\n    type: String                                                                                                       // 143\n  },                                                                                                                   // 142\n  integrationId: {                                                                                                     // 145\n    type: String,                                                                                                      // 146\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 147\n  },                                                                                                                   // 145\n  customerId: {                                                                                                        // 149\n    type: String,                                                                                                      // 150\n    regEx: SimpleSchema.RegEx.Id,                                                                                      // 151\n    optional: true                                                                                                     // 152\n  },                                                                                                                   // 149\n  userId: {                                                                                                            // 154\n    type: String,                                                                                                      // 155\n    optional: true,                                                                                                    // 156\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 157\n  },                                                                                                                   // 154\n  twitterData: {                                                                                                       // 159\n    type: twitterSchema,                                                                                               // 160\n    optional: true                                                                                                     // 161\n  },                                                                                                                   // 159\n  facebookData: {                                                                                                      // 163\n    type: facebookSchema,                                                                                              // 164\n    optional: true                                                                                                     // 165\n  },                                                                                                                   // 163\n  assignedUserId: {                                                                                                    // 167\n    type: String,                                                                                                      // 168\n    regEx: SimpleSchema.RegEx.Id,                                                                                      // 169\n    optional: true                                                                                                     // 170\n  },                                                                                                                   // 167\n  status: {                                                                                                            // 172\n    type: String,                                                                                                      // 173\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST                                                                      // 174\n  },                                                                                                                   // 172\n  participatedUserIds: {                                                                                               // 176\n    type: [String],                                                                                                    // 177\n    regEx: SimpleSchema.RegEx.Id,                                                                                      // 178\n    optional: true                                                                                                     // 179\n  },                                                                                                                   // 176\n  // users's informed history                                                                                          // 182\n  readUserIds: {                                                                                                       // 183\n    type: [String],                                                                                                    // 184\n    regEx: SimpleSchema.RegEx.Id,                                                                                      // 185\n    optional: true                                                                                                     // 186\n  },                                                                                                                   // 183\n  createdAt: {                                                                                                         // 189\n    type: Date                                                                                                         // 190\n  },                                                                                                                   // 189\n  // number of total messages                                                                                          // 193\n  messageCount: {                                                                                                      // 194\n    type: Number                                                                                                       // 195\n  },                                                                                                                   // 194\n  // number of total conversations                                                                                     // 198\n  number: {                                                                                                            // 199\n    type: Number                                                                                                       // 200\n  }                                                                                                                    // 199\n}, tagSchemaOptions()));                                                                                               // 141\nConversations.attachSchema(Conversations.schema); // Helper schemas. Using in method checks                            // 206\n                                                                                                                       //\nvar ConversationIdsSchema = new SimpleSchema({                                                                         // 209\n  conversationIds: {                                                                                                   // 210\n    type: [String],                                                                                                    // 211\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 212\n  }                                                                                                                    // 210\n});                                                                                                                    // 209\nvar AssignSchema = new SimpleSchema({                                                                                  // 216\n  conversationIds: {                                                                                                   // 217\n    type: [String],                                                                                                    // 218\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 219\n  },                                                                                                                   // 217\n  assignedUserId: {                                                                                                    // 221\n    type: String,                                                                                                      // 222\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 223\n  }                                                                                                                    // 221\n});                                                                                                                    // 216\nvar ChangeStatusSchema = new SimpleSchema({                                                                            // 227\n  conversationIds: {                                                                                                   // 228\n    type: [String],                                                                                                    // 229\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 230\n  },                                                                                                                   // 228\n  status: {                                                                                                            // 232\n    type: String,                                                                                                      // 233\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST                                                                      // 234\n  }                                                                                                                    // 232\n});                                                                                                                    // 227\nConversations.publicFields = {                                                                                         // 238\n  number: 1,                                                                                                           // 239\n  assignedUserId: 1,                                                                                                   // 240\n  content: 1,                                                                                                          // 241\n  customerId: 1,                                                                                                       // 242\n  userId: 1,                                                                                                           // 243\n  integrationId: 1,                                                                                                    // 244\n  status: 1,                                                                                                           // 245\n  createdAt: 1,                                                                                                        // 246\n  messageCount: 1,                                                                                                     // 247\n  participatedUserIds: 1,                                                                                              // 248\n  facebookData: 1,                                                                                                     // 249\n  readUserIds: 1,                                                                                                      // 250\n  tagIds: 1                                                                                                            // 251\n};                                                                                                                     // 238\nFactory.define('conversation', Conversations, {                                                                        // 254\n  content: function () {                                                                                               // 255\n    return faker.lorem.sentence();                                                                                     // 255\n  },                                                                                                                   // 255\n  customerId: function () {                                                                                            // 256\n    return Random.id();                                                                                                // 256\n  },                                                                                                                   // 256\n  integrationId: function () {                                                                                         // 257\n    return Factory.create('integration')._id;                                                                          // 257\n  },                                                                                                                   // 257\n  status: function () {                                                                                                // 258\n    return CONVERSATION_STATUSES.NEW;                                                                                  // 258\n  }                                                                                                                    // 258\n});                                                                                                                    // 254\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"messageCountDenormalizer.js\":[\"./messages.js\",\"./conversations.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/messageCountDenormalizer.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"./messages.js\", {                                                                                   // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Conversations = void 0;                                                                                            // 1\nmodule.importSync(\"./conversations.js\", {                                                                              // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar messageCountDenormalizer = {                                                                                       // 4\n  _updateConversation: function (conversationId) {                                                                     // 5\n    // Recalculate the correct message count direct from MongoDB                                                       // 6\n    var messageCount = Messages.find({                                                                                 // 7\n      conversationId: conversationId                                                                                   // 8\n    }).count();                                                                                                        // 7\n    Conversations.update(conversationId, {                                                                             // 11\n      $set: {                                                                                                          // 11\n        messageCount: messageCount                                                                                     // 11\n      }                                                                                                                // 11\n    });                                                                                                                // 11\n  },                                                                                                                   // 12\n  afterInsertMessage: function (message) {                                                                             // 14\n    this._updateConversation(message.conversationId);                                                                  // 15\n  },                                                                                                                   // 16\n  // Here we need to take the list of messages being removed,                                                          // 18\n  // selected *before* the update because otherwise we can't figure out                                                // 19\n  // the relevant message id(s) (if the message has been deleted)                                                      // 20\n  afterRemoveMessages: function (messages) {                                                                           // 21\n    var _this = this;                                                                                                  // 21\n                                                                                                                       //\n    messages.forEach(function (message) {                                                                              // 22\n      return _this._updateConversation(message.conversationId);                                                        // 22\n    });                                                                                                                // 22\n  }                                                                                                                    // 23\n};                                                                                                                     // 4\nmodule.export(\"default\", exports.default = messageCountDenormalizer);                                                  // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"messages.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"faker\",\"meteor/meteor\",\"meteor/mongo\",\"meteor/random\",\"meteor/underscore\",\"meteor/dburles:factory\",\"meteor/aldeed:simple-schema\",\"/imports/api/customers/customers\",\"./messageCountDenormalizer.js\",\"./conversations\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/messages.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Messages: function () {                                                                                              // 1\n    return Messages;                                                                                                   // 1\n  },                                                                                                                   // 1\n  FormSchema: function () {                                                                                            // 1\n    return FormSchema;                                                                                                 // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar messageCountDenormalizer = void 0;                                                                                 // 1\nmodule.importSync(\"./messageCountDenormalizer.js\", {                                                                   // 1\n  \"default\": function (v) {                                                                                            // 1\n    messageCountDenormalizer = v;                                                                                      // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar addParticipator = void 0;                                                                                          // 1\nmodule.importSync(\"./conversations\", {                                                                                 // 1\n  addParticipator: function (v) {                                                                                      // 1\n    addParticipator = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\n                                                                                                                       //\nvar MessagesCollection = function (_Mongo$Collection) {                                                                //\n  (0, _inherits3.default)(MessagesCollection, _Mongo$Collection);                                                      //\n                                                                                                                       //\n  function MessagesCollection() {                                                                                      //\n    (0, _classCallCheck3.default)(this, MessagesCollection);                                                           //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  MessagesCollection.prototype.insert = function () {                                                                  //\n    function insert(doc, callback) {                                                                                   //\n      var message = Object.assign({                                                                                    // 18\n        createdAt: new Date()                                                                                          // 18\n      }, doc);                                                                                                         // 18\n                                                                                                                       //\n      var result = _Mongo$Collection.prototype.insert.call(this, message, callback);                                   // 20\n                                                                                                                       //\n      messageCountDenormalizer.afterInsertMessage(message); // add created user to participators                       // 22\n                                                                                                                       //\n      if (message.userId) {                                                                                            // 25\n        addParticipator({                                                                                              // 26\n          conversationId: message.conversationId,                                                                      // 27\n          userId: message.userId                                                                                       // 28\n        });                                                                                                            // 26\n      } // add mentioned users to participators                                                                        // 30\n                                                                                                                       //\n                                                                                                                       //\n      _.each(message.mentionedUserIds || [], function (userId) {                                                       // 33\n        addParticipator({                                                                                              // 34\n          conversationId: message.conversationId,                                                                      // 35\n          userId: userId                                                                                               // 36\n        });                                                                                                            // 34\n      });                                                                                                              // 38\n                                                                                                                       //\n      return result;                                                                                                   // 40\n    }                                                                                                                  // 41\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MessagesCollection.prototype.remove = function () {                                                                  //\n    function remove(selector) {                                                                                        //\n      var messages = this.find(selector).fetch();                                                                      // 44\n                                                                                                                       //\n      var result = _Mongo$Collection.prototype.remove.call(this, selector);                                            // 45\n                                                                                                                       //\n      messageCountDenormalizer.afterRemoveMessages(messages);                                                          // 47\n      return result;                                                                                                   // 49\n    }                                                                                                                  // 50\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return MessagesCollection;                                                                                           //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar Messages = new MessagesCollection('conversation_messages');                                                        // 53\nMessages.helpers({                                                                                                     // 55\n  customer: function () {                                                                                              // 56\n    return Customers.findOne(this.customerId);                                                                         // 57\n  },                                                                                                                   // 58\n  user: function () {                                                                                                  // 60\n    return Meteor.users.findOne(this.userId);                                                                          // 61\n  }                                                                                                                    // 62\n});                                                                                                                    // 55\nMessages.deny({                                                                                                        // 65\n  insert: function () {                                                                                                // 66\n    return true;                                                                                                       // 67\n  },                                                                                                                   // 68\n  update: function () {                                                                                                // 69\n    return true;                                                                                                       // 70\n  },                                                                                                                   // 71\n  remove: function () {                                                                                                // 72\n    return true;                                                                                                       // 73\n  }                                                                                                                    // 74\n});                                                                                                                    // 65\nvar FormSchema = new SimpleSchema({                                                                                    // 77\n  // only required when there is no attachments                                                                        // 78\n  content: {                                                                                                           // 79\n    type: String,                                                                                                      // 80\n    defaultValue: '',                                                                                                  // 81\n    optional: true                                                                                                     // 82\n  },                                                                                                                   // 79\n  attachments: {                                                                                                       // 85\n    type: [new SimpleSchema({                                                                                          // 86\n      url: {                                                                                                           // 88\n        type: String,                                                                                                  // 88\n        optional: true                                                                                                 // 88\n      },                                                                                                               // 88\n      type: {                                                                                                          // 89\n        type: String,                                                                                                  // 89\n        optional: true                                                                                                 // 89\n      },                                                                                                               // 89\n      name: {                                                                                                          // 90\n        type: String,                                                                                                  // 90\n        optional: true                                                                                                 // 90\n      },                                                                                                               // 90\n      size: {                                                                                                          // 91\n        type: Number,                                                                                                  // 91\n        optional: true                                                                                                 // 91\n      }                                                                                                                // 91\n    })],                                                                                                               // 87\n    optional: true                                                                                                     // 95\n  },                                                                                                                   // 85\n  mentionedUserIds: {                                                                                                  // 98\n    type: [String],                                                                                                    // 99\n    optional: true                                                                                                     // 100\n  },                                                                                                                   // 98\n  conversationId: {                                                                                                    // 103\n    type: String,                                                                                                      // 104\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 105\n  },                                                                                                                   // 103\n  internal: {                                                                                                          // 108\n    type: Boolean                                                                                                      // 109\n  }                                                                                                                    // 108\n});                                                                                                                    // 77\nvar facebookSchema = new SimpleSchema({                                                                                // 113\n  commentId: {                                                                                                         // 114\n    type: String,                                                                                                      // 115\n    optional: true                                                                                                     // 116\n  },                                                                                                                   // 114\n  // comment, reaction, etc ...                                                                                        // 119\n  item: {                                                                                                              // 120\n    type: String,                                                                                                      // 121\n    optional: true                                                                                                     // 122\n  },                                                                                                                   // 120\n  // when share photo                                                                                                  // 125\n  photoId: {                                                                                                           // 126\n    type: String,                                                                                                      // 127\n    optional: true                                                                                                     // 128\n  },                                                                                                                   // 126\n  // when share video                                                                                                  // 131\n  videoId: {                                                                                                           // 132\n    type: String,                                                                                                      // 133\n    optional: true                                                                                                     // 134\n  },                                                                                                                   // 132\n  link: {                                                                                                              // 137\n    type: String,                                                                                                      // 138\n    optional: true                                                                                                     // 139\n  },                                                                                                                   // 137\n  reactionType: {                                                                                                      // 142\n    type: String,                                                                                                      // 143\n    optional: true                                                                                                     // 144\n  },                                                                                                                   // 142\n  senderId: {                                                                                                          // 147\n    type: String,                                                                                                      // 148\n    optional: true                                                                                                     // 149\n  },                                                                                                                   // 147\n  senderName: {                                                                                                        // 152\n    type: String,                                                                                                      // 153\n    optional: true                                                                                                     // 154\n  }                                                                                                                    // 152\n});                                                                                                                    // 113\nMessages.schema = new SimpleSchema([FormSchema, {                                                                      // 158\n  customerId: {                                                                                                        // 161\n    type: String,                                                                                                      // 162\n    optional: true,                                                                                                    // 163\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 164\n  },                                                                                                                   // 161\n  userId: {                                                                                                            // 167\n    type: String,                                                                                                      // 168\n    optional: true,                                                                                                    // 169\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 170\n  },                                                                                                                   // 167\n  createdAt: {                                                                                                         // 173\n    type: Date                                                                                                         // 174\n  },                                                                                                                   // 173\n  isCustomerRead: {                                                                                                    // 177\n    type: Boolean,                                                                                                     // 178\n    optional: true                                                                                                     // 179\n  },                                                                                                                   // 177\n  engageData: {                                                                                                        // 182\n    type: Object,                                                                                                      // 183\n    optional: true,                                                                                                    // 184\n    blackbox: true                                                                                                     // 185\n  },                                                                                                                   // 182\n  formWidgetData: {                                                                                                    // 188\n    type: Object,                                                                                                      // 189\n    optional: true,                                                                                                    // 190\n    blackbox: true                                                                                                     // 191\n  },                                                                                                                   // 188\n  facebookData: {                                                                                                      // 194\n    type: facebookSchema,                                                                                              // 195\n    optional: true                                                                                                     // 196\n  }                                                                                                                    // 194\n}]);                                                                                                                   // 160\nMessages.attachSchema(Messages.schema);                                                                                // 201\nMessages.publicFields = {                                                                                              // 203\n  content: 1,                                                                                                          // 204\n  attachments: 1,                                                                                                      // 205\n  mentionedUserIds: 1,                                                                                                 // 206\n  conversationId: 1,                                                                                                   // 207\n  customerId: 1,                                                                                                       // 208\n  userId: 1,                                                                                                           // 209\n  createdAt: 1,                                                                                                        // 210\n  engageData: 1,                                                                                                       // 211\n  formWidgetData: 1,                                                                                                   // 212\n  facebookData: 1,                                                                                                     // 213\n  internal: 1                                                                                                          // 214\n};                                                                                                                     // 203\nFactory.define('message', Messages, {                                                                                  // 217\n  content: function () {                                                                                               // 218\n    return faker.lorem.sentence();                                                                                     // 218\n  },                                                                                                                   // 218\n  conversationId: function () {                                                                                        // 219\n    return Random.id();                                                                                                // 219\n  },                                                                                                                   // 219\n  customerId: function () {                                                                                            // 220\n    return Random.id();                                                                                                // 220\n  },                                                                                                                   // 220\n  userId: function () {                                                                                                // 221\n    return Random.id();                                                                                                // 221\n  },                                                                                                                   // 221\n  internal: function () {                                                                                              // 222\n    return false;                                                                                                      // 222\n  }                                                                                                                    // 222\n});                                                                                                                    // 217\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":[\"babel-runtime/helpers/extends\",\"./conversations\",\"./messages\",\"./constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/conversations/utils.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  createConversation: function () {                                                                                    // 1\n    return createConversation;                                                                                         // 1\n  },                                                                                                                   // 1\n  createMessage: function () {                                                                                         // 1\n    return createMessage;                                                                                              // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Conversations = void 0;                                                                                            // 1\nmodule.importSync(\"./conversations\", {                                                                                 // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"./messages\", {                                                                                      // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar CONVERSATION_STATUSES = void 0;                                                                                    // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  CONVERSATION_STATUSES: function (v) {                                                                                // 1\n    CONVERSATION_STATUSES = v;                                                                                         // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\nvar createConversation = function (doc) {                                                                              // 5\n  return Conversations.insert((0, _extends3.default)({}, doc, {                                                        // 6\n    status: CONVERSATION_STATUSES.NEW,                                                                                 // 8\n    createdAt: new Date(),                                                                                             // 9\n    number: Conversations.find().count() + 1,                                                                          // 10\n    messageCount: 0                                                                                                    // 11\n  }));                                                                                                                 // 6\n};                                                                                                                     // 13\n                                                                                                                       //\nvar createMessage = function (doc) {                                                                                   // 15\n  return Messages.insert((0, _extends3.default)({}, doc, {                                                             // 16\n    createdAt: new Date(),                                                                                             // 18\n    internal: false                                                                                                    // 19\n  }));                                                                                                                 // 16\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"customers\":{\"server\":{\"methods.js\":[\"meteor/mdg:validated-method\",\"meteor/check\",\"meteor/random\",\"/imports/api/utils\",\"../segments\",\"../customers\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/customers/server/methods.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  createSegment: function () {                                                                                         // 1\n    return createSegment;                                                                                              // 1\n  },                                                                                                                   // 1\n  editSegment: function () {                                                                                           // 1\n    return editSegment;                                                                                                // 1\n  },                                                                                                                   // 1\n  removeSegment: function () {                                                                                         // 1\n    return removeSegment;                                                                                              // 1\n  },                                                                                                                   // 1\n  createInternalNote: function () {                                                                                    // 1\n    return createInternalNote;                                                                                         // 1\n  },                                                                                                                   // 1\n  removeInternalNote: function () {                                                                                    // 1\n    return removeInternalNote;                                                                                         // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Segments = void 0;                                                                                                 // 1\nmodule.importSync(\"../segments\", {                                                                                     // 1\n  \"default\": function (v) {                                                                                            // 1\n    Segments = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"../customers\", {                                                                                    // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar createSegment = new ValidatedMethod({                                                                              // 12\n  name: 'customers.createSegment',                                                                                     // 13\n  mixins: [ErxesMixin],                                                                                                // 14\n  validate: Segments.simpleSchema().validator(),                                                                       // 16\n  run: function (doc) {                                                                                                // 18\n    return Segments.insert(doc);                                                                                       // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 12\nvar editSegment = new ValidatedMethod({                                                                                // 23\n  name: 'customers.editSegment',                                                                                       // 24\n  mixins: [ErxesMixin],                                                                                                // 25\n  validate: function (_ref) {                                                                                          // 27\n    var id = _ref.id,                                                                                                  // 27\n        doc = _ref.doc;                                                                                                // 27\n    check(id, String);                                                                                                 // 28\n    check(doc, Segments.simpleSchema());                                                                               // 29\n  },                                                                                                                   // 30\n  run: function (_ref2) {                                                                                              // 32\n    var id = _ref2.id,                                                                                                 // 32\n        doc = _ref2.doc;                                                                                               // 32\n    return Segments.update(id, {                                                                                       // 33\n      $set: doc                                                                                                        // 33\n    });                                                                                                                // 33\n  }                                                                                                                    // 34\n});                                                                                                                    // 23\nvar removeSegment = new ValidatedMethod({                                                                              // 37\n  name: 'customers.removeSegment',                                                                                     // 38\n  mixins: [ErxesMixin],                                                                                                // 39\n  validate: function (id) {                                                                                            // 41\n    check(id, String);                                                                                                 // 42\n  },                                                                                                                   // 43\n  run: function (id) {                                                                                                 // 45\n    return Segments.remove(id);                                                                                        // 46\n  }                                                                                                                    // 47\n});                                                                                                                    // 37\nvar createInternalNote = new ValidatedMethod({                                                                         // 54\n  name: 'customers.createInternalNote',                                                                                // 55\n  mixins: [ErxesMixin],                                                                                                // 56\n  validate: function (_ref3) {                                                                                         // 58\n    var customerId = _ref3.customerId,                                                                                 // 58\n        internalNote = _ref3.internalNote;                                                                             // 58\n    check(customerId, String);                                                                                         // 59\n    check(internalNote, String);                                                                                       // 60\n  },                                                                                                                   // 61\n  run: function (_ref4) {                                                                                              // 63\n    var customerId = _ref4.customerId,                                                                                 // 63\n        internalNote = _ref4.internalNote;                                                                             // 63\n    var internalNoteObj = {                                                                                            // 64\n      _id: Random.id(),                                                                                                // 65\n      content: internalNote,                                                                                           // 66\n      createdBy: this.userId,                                                                                          // 67\n      createdDate: new Date()                                                                                          // 68\n    };                                                                                                                 // 64\n    Customers.update(customerId, {                                                                                     // 71\n      $addToSet: {                                                                                                     // 71\n        internalNotes: internalNoteObj                                                                                 // 71\n      }                                                                                                                // 71\n    });                                                                                                                // 71\n  }                                                                                                                    // 72\n});                                                                                                                    // 54\nvar removeInternalNote = new ValidatedMethod({                                                                         // 75\n  name: 'customers.removeInternalNote',                                                                                // 76\n  mixins: [ErxesMixin],                                                                                                // 77\n  validate: function (_ref5) {                                                                                         // 79\n    var customerId = _ref5.customerId,                                                                                 // 79\n        internalNoteId = _ref5.internalNoteId;                                                                         // 79\n    check(customerId, String);                                                                                         // 80\n    check(internalNoteId, String);                                                                                     // 81\n  },                                                                                                                   // 82\n  run: function (_ref6) {                                                                                              // 84\n    var _this = this;                                                                                                  // 84\n                                                                                                                       //\n    var customerId = _ref6.customerId,                                                                                 // 84\n        internalNoteId = _ref6.internalNoteId;                                                                         // 84\n    var notes = Customers.findOne(customerId).internalNotes || [];                                                     // 85\n    var canDelete = !!notes.find(function (n) {                                                                        // 86\n      return n.createdBy === _this.userId;                                                                             // 86\n    });                                                                                                                // 86\n                                                                                                                       //\n    if (!canDelete) {                                                                                                  // 88\n      throw new Meteor.Error('permissionDenied', 'Permission denied.');                                                // 89\n    }                                                                                                                  // 90\n                                                                                                                       //\n    Customers.update(customerId, {                                                                                     // 92\n      $pull: {                                                                                                         // 92\n        internalNotes: {                                                                                               // 92\n          _id: internalNoteId                                                                                          // 92\n        }                                                                                                              // 92\n      }                                                                                                                // 92\n    });                                                                                                                // 92\n  }                                                                                                                    // 93\n});                                                                                                                    // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/customers/constants.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  connectors: function () {                                                                                            // 1\n    return connectors;                                                                                                 // 1\n  },                                                                                                                   // 1\n  types: function () {                                                                                                 // 1\n    return types;                                                                                                      // 1\n  },                                                                                                                   // 1\n  operators: function () {                                                                                             // 1\n    return operators;                                                                                                  // 1\n  },                                                                                                                   // 1\n  dateUnits: function () {                                                                                             // 1\n    return dateUnits;                                                                                                  // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar connectors = {                                                                                                     // 1\n  any: 'any',                                                                                                          // 2\n  all: 'all'                                                                                                           // 3\n};                                                                                                                     // 1\nvar types = {                                                                                                          // 6\n  string: 'String',                                                                                                    // 7\n  number: 'Number',                                                                                                    // 8\n  boolean: 'Boolean',                                                                                                  // 9\n  date: 'Date'                                                                                                         // 10\n};                                                                                                                     // 6\nvar operators = {                                                                                                      // 13\n  string: [{                                                                                                           // 14\n    name: 'equals',                                                                                                    // 15\n    value: 'e'                                                                                                         // 15\n  }, {                                                                                                                 // 15\n    name: 'does not equal',                                                                                            // 16\n    value: 'dne'                                                                                                       // 16\n  }, {                                                                                                                 // 16\n    name: 'contains',                                                                                                  // 17\n    value: 'c'                                                                                                         // 17\n  }, {                                                                                                                 // 17\n    name: 'does not contain',                                                                                          // 18\n    value: 'dnc'                                                                                                       // 18\n  }, {                                                                                                                 // 18\n    name: 'is set',                                                                                                    // 19\n    value: 'is',                                                                                                       // 19\n    noInput: true                                                                                                      // 19\n  }, {                                                                                                                 // 19\n    name: 'is not set',                                                                                                // 20\n    value: 'ins',                                                                                                      // 20\n    noInput: true                                                                                                      // 20\n  }],                                                                                                                  // 20\n  number: [{                                                                                                           // 22\n    name: 'is greater than',                                                                                           // 23\n    value: 'igt'                                                                                                       // 23\n  }, {                                                                                                                 // 23\n    name: 'equals to',                                                                                                 // 24\n    value: 'et'                                                                                                        // 24\n  }, {                                                                                                                 // 24\n    name: 'is less than',                                                                                              // 25\n    value: 'ilt'                                                                                                       // 25\n  }, {                                                                                                                 // 25\n    name: 'is set',                                                                                                    // 26\n    value: 'is',                                                                                                       // 26\n    noInput: true                                                                                                      // 26\n  }, {                                                                                                                 // 26\n    name: 'is not set',                                                                                                // 27\n    value: 'ins',                                                                                                      // 27\n    noInput: true                                                                                                      // 27\n  }],                                                                                                                  // 27\n  boolean: [{                                                                                                          // 29\n    name: 'is true',                                                                                                   // 30\n    value: 'it',                                                                                                       // 30\n    noInput: true                                                                                                      // 30\n  }, {                                                                                                                 // 30\n    name: 'is false',                                                                                                  // 31\n    value: 'if',                                                                                                       // 31\n    noInput: true                                                                                                      // 31\n  }, {                                                                                                                 // 31\n    name: 'is set',                                                                                                    // 32\n    value: 'is',                                                                                                       // 32\n    noInput: true                                                                                                      // 32\n  }, {                                                                                                                 // 32\n    name: 'is not set',                                                                                                // 33\n    value: 'ins',                                                                                                      // 33\n    noInput: true                                                                                                      // 33\n  }],                                                                                                                  // 33\n  date: [{                                                                                                             // 35\n    name: 'was less than',                                                                                             // 36\n    value: 'wlt'                                                                                                       // 36\n  }, {                                                                                                                 // 36\n    name: 'was more than',                                                                                             // 37\n    value: 'wmt'                                                                                                       // 37\n  }, {                                                                                                                 // 37\n    name: 'will occur within',                                                                                         // 38\n    value: 'wow'                                                                                                       // 38\n  }, {                                                                                                                 // 38\n    name: 'will occur after',                                                                                          // 39\n    value: 'woa'                                                                                                       // 39\n  }, {                                                                                                                 // 39\n    name: 'is set',                                                                                                    // 40\n    value: 'is',                                                                                                       // 40\n    noInput: true                                                                                                      // 40\n  }, {                                                                                                                 // 40\n    name: 'is not set',                                                                                                // 41\n    value: 'ins',                                                                                                      // 41\n    noInput: true                                                                                                      // 41\n  }]                                                                                                                   // 41\n};                                                                                                                     // 13\nvar dateUnits = {                                                                                                      // 45\n  days: 'days',                                                                                                        // 46\n  weeks: 'weeks',                                                                                                      // 47\n  months: 'months'                                                                                                     // 48\n};                                                                                                                     // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"customers.js\":[\"babel-runtime/helpers/slicedToArray\",\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"babel-runtime/helpers/extends\",\"faker\",\"meteor/random\",\"meteor/underscore\",\"meteor/dburles:factory\",\"meteor/aldeed:simple-schema\",\"/imports/api/integrations/integrations\",\"/imports/api/brands/brands\",\"/imports/api/tags/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/customers/customers.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");                                                  //\n                                                                                                                       //\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);                                                         //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Customers: function () {                                                                                             // 1\n    return Customers;                                                                                                  // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/integrations\", {                                                          // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Brands = void 0;                                                                                                   // 1\nmodule.importSync(\"/imports/api/brands/brands\", {                                                                      // 1\n  Brands: function (v) {                                                                                               // 1\n    Brands = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar TagsCollection = void 0,                                                                                           // 1\n    tagsHelper = void 0,                                                                                               // 1\n    tagSchemaOptions = void 0;                                                                                         // 1\nmodule.importSync(\"/imports/api/tags/utils\", {                                                                         // 1\n  TagsCollection: function (v) {                                                                                       // 1\n    TagsCollection = v;                                                                                                // 1\n  },                                                                                                                   // 1\n  tagsHelper: function (v) {                                                                                           // 1\n    tagsHelper = v;                                                                                                    // 1\n  },                                                                                                                   // 1\n  tagSchemaOptions: function (v) {                                                                                     // 1\n    tagSchemaOptions = v;                                                                                              // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar messengerSchema = new SimpleSchema({                                                                               // 10\n  lastSeenAt: {                                                                                                        // 11\n    type: Date,                                                                                                        // 12\n    label: 'Messenger: Last online'                                                                                    // 13\n  },                                                                                                                   // 11\n  sessionCount: {                                                                                                      // 15\n    type: Number,                                                                                                      // 16\n    label: 'Messenger: Session count'                                                                                  // 17\n  },                                                                                                                   // 15\n  isActive: {                                                                                                          // 19\n    type: Boolean,                                                                                                     // 20\n    label: 'Messenger: Is online'                                                                                      // 21\n  },                                                                                                                   // 19\n  customData: {                                                                                                        // 23\n    type: Object,                                                                                                      // 24\n    blackbox: true,                                                                                                    // 25\n    optional: true                                                                                                     // 26\n  }                                                                                                                    // 23\n});                                                                                                                    // 10\nvar twitterSchema = new SimpleSchema({                                                                                 // 30\n  id: {                                                                                                                // 31\n    type: Number,                                                                                                      // 32\n    label: 'Twitter: ID (Number)'                                                                                      // 33\n  },                                                                                                                   // 31\n  idStr: {                                                                                                             // 35\n    type: String,                                                                                                      // 36\n    label: 'Twitter: ID (String)'                                                                                      // 37\n  },                                                                                                                   // 35\n  name: {                                                                                                              // 39\n    type: String,                                                                                                      // 40\n    label: 'Twitter: Name'                                                                                             // 41\n  },                                                                                                                   // 39\n  screenName: {                                                                                                        // 43\n    type: String,                                                                                                      // 44\n    label: 'Twitter: Screen name'                                                                                      // 45\n  },                                                                                                                   // 43\n  profileImageUrl: {                                                                                                   // 47\n    type: String,                                                                                                      // 48\n    label: 'Twitter: Profile photo'                                                                                    // 49\n  }                                                                                                                    // 47\n});                                                                                                                    // 30\nvar facebookSchema = new SimpleSchema({                                                                                // 53\n  id: {                                                                                                                // 54\n    type: String,                                                                                                      // 55\n    label: 'Facebook: ID'                                                                                              // 56\n  },                                                                                                                   // 54\n  profilePic: {                                                                                                        // 58\n    type: String,                                                                                                      // 59\n    optional: true,                                                                                                    // 60\n    label: 'Facebook: Profile photo'                                                                                   // 61\n  }                                                                                                                    // 58\n});                                                                                                                    // 53\nvar internalNoteSchema = new SimpleSchema({                                                                            // 65\n  _id: {                                                                                                               // 66\n    type: String,                                                                                                      // 67\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 68\n  },                                                                                                                   // 66\n  content: {                                                                                                           // 70\n    type: String                                                                                                       // 71\n  },                                                                                                                   // 70\n  createdBy: {                                                                                                         // 73\n    type: String,                                                                                                      // 74\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 75\n  },                                                                                                                   // 73\n  createdDate: {                                                                                                       // 77\n    type: Date                                                                                                         // 78\n  }                                                                                                                    // 77\n});                                                                                                                    // 65\nvar schema = new SimpleSchema((0, _extends3.default)({                                                                 // 82\n  name: {                                                                                                              // 83\n    type: String,                                                                                                      // 84\n    optional: true,                                                                                                    // 85\n    label: 'Name'                                                                                                      // 86\n  },                                                                                                                   // 83\n  email: {                                                                                                             // 88\n    type: String,                                                                                                      // 89\n    regEx: SimpleSchema.RegEx.Email,                                                                                   // 90\n    optional: true,                                                                                                    // 91\n    label: 'Email'                                                                                                     // 92\n  },                                                                                                                   // 88\n  phone: {                                                                                                             // 94\n    type: String,                                                                                                      // 95\n    optional: true,                                                                                                    // 96\n    label: 'Phone number'                                                                                              // 97\n  },                                                                                                                   // 94\n  isUser: {                                                                                                            // 99\n    type: Boolean,                                                                                                     // 100\n    label: 'Is user of one of our products',                                                                           // 101\n    optional: true                                                                                                     // 102\n  },                                                                                                                   // 99\n  integrationId: {                                                                                                     // 104\n    type: String,                                                                                                      // 105\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 106\n  },                                                                                                                   // 104\n  createdAt: {                                                                                                         // 108\n    type: Date,                                                                                                        // 109\n    label: 'Member since'                                                                                              // 110\n  },                                                                                                                   // 108\n  internalNotes: {                                                                                                     // 112\n    type: [internalNoteSchema],                                                                                        // 113\n    optional: true                                                                                                     // 114\n  },                                                                                                                   // 112\n  // Integration data                                                                                                  // 117\n  messengerData: {                                                                                                     // 118\n    type: messengerSchema,                                                                                             // 119\n    optional: true                                                                                                     // 120\n  },                                                                                                                   // 118\n  twitterData: {                                                                                                       // 122\n    type: twitterSchema,                                                                                               // 123\n    optional: true                                                                                                     // 124\n  },                                                                                                                   // 122\n  facebookData: {                                                                                                      // 126\n    type: facebookSchema,                                                                                              // 127\n    optional: true                                                                                                     // 128\n  }                                                                                                                    // 126\n}, tagSchemaOptions()));                                                                                               // 82\n                                                                                                                       //\nvar CustomersCollection = function (_TagsCollection) {                                                                 //\n  (0, _inherits3.default)(CustomersCollection, _TagsCollection);                                                       //\n                                                                                                                       //\n  function CustomersCollection() {                                                                                     //\n    (0, _classCallCheck3.default)(this, CustomersCollection);                                                          //\n    return (0, _possibleConstructorReturn3.default)(this, _TagsCollection.apply(this, arguments));                     //\n  }                                                                                                                    //\n                                                                                                                       //\n  CustomersCollection.prototype.insert = function () {                                                                 //\n    function insert(doc, callback) {                                                                                   //\n      var customer = Object.assign({                                                                                   // 136\n        createdAt: new Date()                                                                                          // 136\n      }, doc);                                                                                                         // 136\n      return _TagsCollection.prototype.insert.call(this, customer, callback);                                          // 138\n    }                                                                                                                  // 139\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }(); /**                                                                                                             //\n        * Public displayable fields of customer object.                                                                //\n        * Only the child fields (leaf fields).                                                                         //\n        * They're used for construct the table columns and segment filter fields.                                      //\n        * @return {Array.String} Fields names                                                                          //\n        */                                                                                                             //\n                                                                                                                       //\n  CustomersCollection.prototype.getPublicFields = function () {                                                        //\n    function getPublicFields() {                                                                                       //\n      var _this2 = this;                                                                                               // 147\n                                                                                                                       //\n      var schema = this.simpleSchema().schema();                                                                       // 148\n      var fields = Object.keys(schema).filter(function (key) {                                                         // 149\n        // Can't accepts below types of fields                                                                         // 151\n        var unacceptedTypes = ['Object', 'Array'];                                                                     // 152\n        var isAcceptedType = unacceptedTypes.indexOf(schema[key].type.name) < 0; // Exclude the fields which is used for internal use\n                                                                                                                       //\n        var _key$split = key.split('.'),                                                                               // 150\n            _key$split2 = (0, _slicedToArray3.default)(_key$split, 1),                                                 // 150\n            parentFieldName = _key$split2[0];                                                                          // 150\n                                                                                                                       //\n        var notInternalUseField = _this2.internalUseFields.indexOf(parentFieldName) < 0;                               // 157\n        return isAcceptedType && notInternalUseField;                                                                  // 159\n      }).map(function (key) {                                                                                          // 160\n        return {                                                                                                       // 161\n          key: key,                                                                                                    // 162\n          label: schema[key].label || key                                                                              // 163\n        };                                                                                                             // 161\n      });                                                                                                              // 161\n      return fields;                                                                                                   // 166\n    }                                                                                                                  // 167\n                                                                                                                       //\n    return getPublicFields;                                                                                            //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return CustomersCollection;                                                                                          //\n}(TagsCollection);                                                                                                     //\n                                                                                                                       //\nvar Customers = new CustomersCollection('customers');                                                                  // 170\nCustomers.attachSchema(schema); // collection helpers                                                                  // 172\n                                                                                                                       //\nCustomers.helpers((0, _extends3.default)({                                                                             // 175\n  integration: function () {                                                                                           // 176\n    return Integrations.findOne(this.integrationId);                                                                   // 177\n  },                                                                                                                   // 178\n  getIntegrationData: function () {                                                                                    // 179\n    return {                                                                                                           // 180\n      messenger: this.messengerData || {},                                                                             // 181\n      twitter: this.twitterData || {},                                                                                 // 182\n      facebook: this.facebookData || {}                                                                                // 183\n    };                                                                                                                 // 180\n  },                                                                                                                   // 185\n  brand: function () {                                                                                                 // 186\n    var integration = this.integration();                                                                              // 187\n    return Brands.findOne(integration && integration.brandId);                                                         // 188\n  },                                                                                                                   // 189\n  getMessengerCustomData: function () {                                                                                // 190\n    var results = [];                                                                                                  // 191\n    var data = this.messengerData.customData || {};                                                                    // 192\n                                                                                                                       //\n    _.each(_.keys(data), function (key) {                                                                              // 194\n      results.push({                                                                                                   // 195\n        name: key.replace(/_/g, ' '),                                                                                  // 196\n        value: data[key]                                                                                               // 197\n      });                                                                                                              // 195\n    });                                                                                                                // 199\n                                                                                                                       //\n    return results;                                                                                                    // 201\n  }                                                                                                                    // 202\n}, tagsHelper));                                                                                                       // 175\nCustomers.TAG_TYPE = 'customer';                                                                                       // 206\nCustomers.deny({                                                                                                       // 208\n  insert: function () {                                                                                                // 209\n    return true;                                                                                                       // 210\n  },                                                                                                                   // 211\n  update: function () {                                                                                                // 212\n    return true;                                                                                                       // 213\n  },                                                                                                                   // 214\n  remove: function () {                                                                                                // 215\n    return true;                                                                                                       // 216\n  }                                                                                                                    // 217\n});                                                                                                                    // 208\nCustomers.publicFields = {                                                                                             // 220\n  name: 1,                                                                                                             // 221\n  email: 1,                                                                                                            // 222\n  phone: 1,                                                                                                            // 223\n  isUser: 1,                                                                                                           // 224\n  integrationId: 1,                                                                                                    // 225\n  createdAt: 1,                                                                                                        // 226\n  messengerData: 1,                                                                                                    // 227\n  twitterData: 1,                                                                                                      // 228\n  facebookData: 1,                                                                                                     // 229\n  tagIds: 1,                                                                                                           // 230\n  internalNotes: 1                                                                                                     // 231\n}; /**                                                                                                                 // 220\n    * This fields list is used for not displaying                                                                      //\n    * internal use fields on customer segments form.                                                                   //\n    */                                                                                                                 //\nCustomers.internalUseFields = ['tagIds', 'integrationId', 'internalNotes'];                                            // 238\nFactory.define('customer', Customers, {                                                                                // 240\n  email: function () {                                                                                                 // 241\n    return faker.internet.email();                                                                                     // 241\n  },                                                                                                                   // 241\n  integrationId: function () {                                                                                         // 242\n    return Random.id();                                                                                                // 242\n  }                                                                                                                    // 242\n});                                                                                                                    // 240\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"queryBuilder.js\":[\"moment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/customers/queryBuilder.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar moment = void 0;                                                                                                   // 1\nmodule.importSync(\"moment\", {                                                                                          // 1\n  \"default\": function (v) {                                                                                            // 1\n    moment = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nmodule.export(\"default\", exports.default = {                                                                           // 1\n  segments: function (segment, headSegment) {                                                                          // 4\n    var _childQuery;                                                                                                   // 4\n                                                                                                                       //\n    var query = {                                                                                                      // 5\n      $and: []                                                                                                         // 5\n    };                                                                                                                 // 5\n    var childQuery = (_childQuery = {}, _childQuery[segment.connector === 'any' ? '$or' : '$and'] = segment.conditions.map(function (condition) {\n      var _ref;                                                                                                        // 8\n                                                                                                                       //\n      return _ref = {}, _ref[condition.field] = convertConditionToQuery(condition), _ref;                              // 8\n    }), _childQuery);                                                                                                  // 8\n                                                                                                                       //\n    if (segment.conditions.length) {                                                                                   // 12\n      query.$and.push(childQuery);                                                                                     // 13\n    } // Fetching parent segment                                                                                       // 14\n                                                                                                                       //\n                                                                                                                       //\n    var embeddedParentSegment = typeof segment.getParentSegment === 'function' ? segment.getParentSegment() : null;    // 17\n    var parentSegment = headSegment || embeddedParentSegment;                                                          // 20\n                                                                                                                       //\n    if (parentSegment) {                                                                                               // 22\n      var _parentQuery;                                                                                                // 22\n                                                                                                                       //\n      var parentQuery = (_parentQuery = {}, _parentQuery[parentSegment.connector === 'any' ? '$or' : '$and'] = parentSegment.conditions.map(function (condition) {\n        var _ref2;                                                                                                     // 26\n                                                                                                                       //\n        return _ref2 = {}, _ref2[condition.field] = convertConditionToQuery(condition), _ref2;                         // 26\n      }), _parentQuery);                                                                                               // 26\n                                                                                                                       //\n      if (parentSegment.conditions.length) {                                                                           // 30\n        query.$and.push(parentQuery);                                                                                  // 31\n      }                                                                                                                // 32\n    }                                                                                                                  // 33\n                                                                                                                       //\n    return query.$and.length ? query : {};                                                                             // 35\n  }                                                                                                                    // 36\n});                                                                                                                    // 3\n                                                                                                                       //\nfunction convertConditionToQuery(condition) {                                                                          // 39\n  var operator = condition.operator,                                                                                   // 39\n      type = condition.type,                                                                                           // 39\n      dateUnit = condition.dateUnit,                                                                                   // 39\n      value = condition.value;                                                                                         // 39\n  var transformedValue = void 0;                                                                                       // 41\n                                                                                                                       //\n  switch (type) {                                                                                                      // 43\n    case 'string':                                                                                                     // 44\n      transformedValue = value && value.toLowerCase();                                                                 // 45\n      break;                                                                                                           // 46\n                                                                                                                       //\n    case 'number':                                                                                                     // 47\n    case 'date':                                                                                                       // 48\n      transformedValue = parseInt(value, 10);                                                                          // 49\n      break;                                                                                                           // 50\n                                                                                                                       //\n    default:                                                                                                           // 51\n      transformedValue = value;                                                                                        // 52\n      break;                                                                                                           // 53\n  }                                                                                                                    // 43\n                                                                                                                       //\n  switch (operator) {                                                                                                  // 56\n    case 'e':                                                                                                          // 57\n    case 'et':                                                                                                         // 58\n    default:                                                                                                           // 59\n      return transformedValue;                                                                                         // 60\n                                                                                                                       //\n    case 'dne':                                                                                                        // 61\n      return {                                                                                                         // 62\n        $ne: transformedValue                                                                                          // 62\n      };                                                                                                               // 62\n                                                                                                                       //\n    case 'c':                                                                                                          // 63\n      return {                                                                                                         // 64\n        $regex: new RegExp(\".*\" + escapeRegExp(transformedValue) + \".*\", 'i')                                          // 64\n      };                                                                                                               // 64\n                                                                                                                       //\n    case 'dnc':                                                                                                        // 65\n      return {                                                                                                         // 66\n        $regex: new RegExp(\"^((?!\" + escapeRegExp(transformedValue) + \").)*$\", 'i')                                    // 66\n      };                                                                                                               // 66\n                                                                                                                       //\n    case 'igt':                                                                                                        // 67\n      return {                                                                                                         // 68\n        $gt: transformedValue                                                                                          // 68\n      };                                                                                                               // 68\n                                                                                                                       //\n    case 'ilt':                                                                                                        // 69\n      return {                                                                                                         // 70\n        $lt: transformedValue                                                                                          // 70\n      };                                                                                                               // 70\n                                                                                                                       //\n    case 'it':                                                                                                         // 71\n      return true;                                                                                                     // 72\n                                                                                                                       //\n    case 'if':                                                                                                         // 73\n      return false;                                                                                                    // 74\n                                                                                                                       //\n    case 'wlt':                                                                                                        // 75\n      return {                                                                                                         // 76\n        $gte: moment().subtract(transformedValue, dateUnit).toDate(),                                                  // 77\n        $lte: new Date()                                                                                               // 78\n      };                                                                                                               // 76\n                                                                                                                       //\n    case 'wmt':                                                                                                        // 80\n      return {                                                                                                         // 81\n        $lte: moment().subtract(transformedValue, dateUnit).toDate()                                                   // 82\n      };                                                                                                               // 81\n                                                                                                                       //\n    case 'wow':                                                                                                        // 84\n      return {                                                                                                         // 85\n        $lte: moment().add(transformedValue, dateUnit).toDate(),                                                       // 86\n        $gte: new Date()                                                                                               // 87\n      };                                                                                                               // 85\n                                                                                                                       //\n    case 'woa':                                                                                                        // 89\n      return {                                                                                                         // 90\n        $gte: moment().add(transformedValue, dateUnit).toDate()                                                        // 91\n      };                                                                                                               // 90\n                                                                                                                       //\n    case 'is':                                                                                                         // 93\n      return {                                                                                                         // 94\n        $exists: true                                                                                                  // 94\n      };                                                                                                               // 94\n                                                                                                                       //\n    case 'ins':                                                                                                        // 95\n      return {                                                                                                         // 96\n        $exists: false                                                                                                 // 96\n      };                                                                                                               // 96\n  }                                                                                                                    // 56\n}                                                                                                                      // 98\n                                                                                                                       //\nfunction escapeRegExp(string) {                                                                                        // 100\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string                           // 101\n}                                                                                                                      // 102\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"segments.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"meteor/mongo\",\"meteor/aldeed:simple-schema\",\"./constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/customers/segments.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar types = void 0,                                                                                                    // 1\n    connectors = void 0,                                                                                               // 1\n    dateUnits = void 0;                                                                                                // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  types: function (v) {                                                                                                // 1\n    types = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  connectors: function (v) {                                                                                           // 1\n    connectors = v;                                                                                                    // 1\n  },                                                                                                                   // 1\n  dateUnits: function (v) {                                                                                            // 1\n    dateUnits = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar conditionSchema = new SimpleSchema({                                                                               // 5\n  field: {                                                                                                             // 6\n    type: String                                                                                                       // 7\n  },                                                                                                                   // 6\n  operator: {                                                                                                          // 9\n    type: String                                                                                                       // 10\n  },                                                                                                                   // 9\n  value: {                                                                                                             // 12\n    type: String,                                                                                                      // 13\n    optional: true                                                                                                     // 14\n  },                                                                                                                   // 12\n  dateUnit: {                                                                                                          // 16\n    type: String,                                                                                                      // 17\n    optional: true,                                                                                                    // 18\n    allowedValues: Object.keys(dateUnits)                                                                              // 19\n  },                                                                                                                   // 16\n  type: {                                                                                                              // 21\n    type: String,                                                                                                      // 22\n    allowedValues: Object.keys(types)                                                                                  // 23\n  }                                                                                                                    // 21\n});                                                                                                                    // 5\nvar schema = new SimpleSchema({                                                                                        // 27\n  name: {                                                                                                              // 28\n    type: String                                                                                                       // 29\n  },                                                                                                                   // 28\n  description: {                                                                                                       // 31\n    type: String,                                                                                                      // 32\n    optional: true                                                                                                     // 33\n  },                                                                                                                   // 31\n  subOf: {                                                                                                             // 35\n    type: String,                                                                                                      // 36\n    regEx: SimpleSchema.RegEx.Id,                                                                                      // 37\n    optional: true                                                                                                     // 38\n  },                                                                                                                   // 35\n  color: {                                                                                                             // 40\n    type: String                                                                                                       // 41\n  },                                                                                                                   // 40\n  connector: {                                                                                                         // 43\n    type: String,                                                                                                      // 44\n    allowedValues: Object.keys(connectors)                                                                             // 45\n  },                                                                                                                   // 43\n  conditions: {                                                                                                        // 47\n    type: [conditionSchema]                                                                                            // 48\n  }                                                                                                                    // 47\n});                                                                                                                    // 27\n                                                                                                                       //\nvar SegmentsCollection = function (_Mongo$Collection) {                                                                //\n  (0, _inherits3.default)(SegmentsCollection, _Mongo$Collection);                                                      //\n                                                                                                                       //\n  function SegmentsCollection() {                                                                                      //\n    (0, _classCallCheck3.default)(this, SegmentsCollection);                                                           //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  SegmentsCollection.prototype.insert = function () {                                                                  //\n    function insert(doc, callback) {                                                                                   //\n      return _Mongo$Collection.prototype.insert.call(this, doc, callback);                                             // 54\n    }                                                                                                                  // 55\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  SegmentsCollection.prototype.remove = function () {                                                                  //\n    function remove(selector, callback) {                                                                              //\n      return _Mongo$Collection.prototype.remove.call(this, selector, callback);                                        // 58\n    }                                                                                                                  // 59\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return SegmentsCollection;                                                                                           //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar Segments = new SegmentsCollection('segments');                                                                     // 62\nSegments.attachSchema(schema);                                                                                         // 64\nSegments.helpers({                                                                                                     // 66\n  getParentSegment: function () {                                                                                      // 67\n    return Segments.findOne(this.subOf);                                                                               // 68\n  },                                                                                                                   // 69\n  getSubSegments: function () {                                                                                        // 70\n    return Segments.find({                                                                                             // 71\n      subOf: this._id                                                                                                  // 71\n    }).fetch();                                                                                                        // 71\n  }                                                                                                                    // 72\n});                                                                                                                    // 66\nmodule.export(\"default\", exports.default = Segments);                                                                  // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"engage\":{\"server\":{\"cronJobs.js\":[\"meteor/percolate:synced-cron\",\"/imports/api/engage/engage\",\"/imports/api/engage/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/engage/server/cronJobs.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar SyncedCron = void 0;                                                                                               // 1\nmodule.importSync(\"meteor/percolate:synced-cron\", {                                                                    // 1\n  SyncedCron: function (v) {                                                                                           // 1\n    SyncedCron = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/engage/engage\", {                                                                      // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar send = void 0;                                                                                                     // 1\nmodule.importSync(\"/imports/api/engage/utils\", {                                                                       // 1\n  send: function (v) {                                                                                                 // 1\n    send = v;                                                                                                          // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\nvar sendAutoMessage = function () {                                                                                    // 5\n  return Messages.find({                                                                                               // 5\n    kind: 'auto',                                                                                                      // 6\n    isLive: true                                                                                                       // 6\n  }).forEach(function (message) {                                                                                      // 6\n    return send(message);                                                                                              // 6\n  });                                                                                                                  // 6\n};                                                                                                                     // 5\n                                                                                                                       //\nSyncedCron.add({                                                                                                       // 8\n  name: 'Send auto messages',                                                                                          // 9\n  schedule: function (parser) {                                                                                        // 11\n    return parser.text('every day at 11pm');                                                                           // 12\n  },                                                                                                                   // 13\n  job: function () {                                                                                                   // 15\n    sendAutoMessage();                                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods.js\":[\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/utils\",\"../engage\",\"../constants\",\"../utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/engage/server/methods.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  messagesAdd: function () {                                                                                           // 1\n    return messagesAdd;                                                                                                // 1\n  },                                                                                                                   // 1\n  messagesEdit: function () {                                                                                          // 1\n    return messagesEdit;                                                                                               // 1\n  },                                                                                                                   // 1\n  messagesRemove: function () {                                                                                        // 1\n    return messagesRemove;                                                                                             // 1\n  },                                                                                                                   // 1\n  messagesSetLive: function () {                                                                                       // 1\n    return messagesSetLive;                                                                                            // 1\n  },                                                                                                                   // 1\n  messagesSetPause: function () {                                                                                      // 1\n    return messagesSetPause;                                                                                           // 1\n  },                                                                                                                   // 1\n  messagesSetLiveManual: function () {                                                                                 // 1\n    return messagesSetLiveManual;                                                                                      // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"../engage\", {                                                                                       // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar MESSAGE_KINDS = void 0;                                                                                            // 1\nmodule.importSync(\"../constants\", {                                                                                    // 1\n  MESSAGE_KINDS: function (v) {                                                                                        // 1\n    MESSAGE_KINDS = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar send = void 0;                                                                                                     // 1\nmodule.importSync(\"../utils\", {                                                                                        // 1\n  send: function (v) {                                                                                                 // 1\n    send = v;                                                                                                          // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar messagesAdd = new ValidatedMethod({                                                                                // 9\n  name: 'engage.messages.add',                                                                                         // 10\n  mixins: [ErxesMixin],                                                                                                // 11\n  validate: function (_ref) {                                                                                          // 13\n    var doc = _ref.doc;                                                                                                // 13\n    check(doc, Messages.schema);                                                                                       // 14\n  },                                                                                                                   // 15\n  run: function (_ref2) {                                                                                              // 17\n    var doc = _ref2.doc;                                                                                               // 17\n    doc.createdUserId = this.userId;                                                                                   // 18\n    doc.createdDate = new Date();                                                                                      // 19\n    doc.deliveryReports = {}; // create                                                                                // 20\n                                                                                                                       //\n    var messageId = Messages.insert(doc); // if manual and live then send immediately                                  // 23\n                                                                                                                       //\n    if (doc.kind === MESSAGE_KINDS.MANUAL && doc.isLive) {                                                             // 26\n      var message = Messages.findOne(messageId);                                                                       // 27\n      send(message);                                                                                                   // 29\n    }                                                                                                                  // 30\n                                                                                                                       //\n    return {                                                                                                           // 32\n      messageId: messageId,                                                                                            // 32\n      method: doc.method                                                                                               // 32\n    };                                                                                                                 // 32\n  }                                                                                                                    // 33\n});                                                                                                                    // 9\nvar messagesEdit = new ValidatedMethod({                                                                               // 37\n  name: 'engage.messages.edit',                                                                                        // 38\n  mixins: [ErxesMixin],                                                                                                // 39\n  validate: function (_ref3) {                                                                                         // 41\n    var id = _ref3.id,                                                                                                 // 41\n        doc = _ref3.doc;                                                                                               // 41\n    check(id, String);                                                                                                 // 42\n    check(doc, Messages.schema);                                                                                       // 43\n  },                                                                                                                   // 44\n  run: function (_ref4) {                                                                                              // 46\n    var id = _ref4.id,                                                                                                 // 46\n        doc = _ref4.doc;                                                                                               // 46\n    Messages.update(id, {                                                                                              // 47\n      $set: doc                                                                                                        // 47\n    });                                                                                                                // 47\n    return {                                                                                                           // 49\n      messageId: id,                                                                                                   // 49\n      method: doc.method                                                                                               // 49\n    };                                                                                                                 // 49\n  }                                                                                                                    // 50\n});                                                                                                                    // 37\nvar messagesRemove = new ValidatedMethod({                                                                             // 54\n  name: 'engage.messages.remove',                                                                                      // 55\n  mixins: [ErxesMixin],                                                                                                // 56\n  validate: function (id) {                                                                                            // 58\n    check(id, String);                                                                                                 // 59\n  },                                                                                                                   // 60\n  run: function (id) {                                                                                                 // 62\n    return Messages.remove(id);                                                                                        // 63\n  }                                                                                                                    // 64\n});                                                                                                                    // 54\nvar messagesSetLive = new ValidatedMethod({                                                                            // 68\n  name: 'engage.messages.setLive',                                                                                     // 69\n  mixins: [ErxesMixin],                                                                                                // 70\n  validate: function (id) {                                                                                            // 72\n    check(id, String);                                                                                                 // 73\n  },                                                                                                                   // 74\n  run: function (id) {                                                                                                 // 76\n    return Messages.update(id, {                                                                                       // 77\n      $set: {                                                                                                          // 77\n        isLive: true,                                                                                                  // 77\n        isDraft: false                                                                                                 // 77\n      }                                                                                                                // 77\n    });                                                                                                                // 77\n  }                                                                                                                    // 78\n});                                                                                                                    // 68\nvar messagesSetPause = new ValidatedMethod({                                                                           // 82\n  name: 'engage.messages.setPause',                                                                                    // 83\n  mixins: [ErxesMixin],                                                                                                // 84\n  validate: function (id) {                                                                                            // 86\n    check(id, String);                                                                                                 // 87\n  },                                                                                                                   // 88\n  run: function (id) {                                                                                                 // 90\n    return Messages.update(id, {                                                                                       // 91\n      $set: {                                                                                                          // 91\n        isLive: false                                                                                                  // 91\n      }                                                                                                                // 91\n    });                                                                                                                // 91\n  }                                                                                                                    // 92\n});                                                                                                                    // 82\nvar messagesSetLiveManual = new ValidatedMethod({                                                                      // 96\n  name: 'engage.messages.setLiveManual',                                                                               // 97\n  mixins: [ErxesMixin],                                                                                                // 98\n  validate: function (id) {                                                                                            // 100\n    check(id, String);                                                                                                 // 101\n  },                                                                                                                   // 102\n  run: function (id) {                                                                                                 // 104\n    Messages.update(id, {                                                                                              // 105\n      $set: {                                                                                                          // 105\n        isLive: true,                                                                                                  // 105\n        isDraft: false                                                                                                 // 105\n      }                                                                                                                // 105\n    });                                                                                                                // 105\n    var message = Messages.findOne(id); // if manual and live then send                                                // 107\n                                                                                                                       //\n    send(message);                                                                                                     // 110\n  }                                                                                                                    // 111\n});                                                                                                                    // 96\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/engage/constants.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  EMAIL_CONTENT_CLASS: function () {                                                                                   // 1\n    return EMAIL_CONTENT_CLASS;                                                                                        // 1\n  },                                                                                                                   // 1\n  EMAIL_CONTENT_PLACEHOLDER: function () {                                                                             // 1\n    return EMAIL_CONTENT_PLACEHOLDER;                                                                                  // 1\n  },                                                                                                                   // 1\n  MESSAGE_KINDS: function () {                                                                                         // 1\n    return MESSAGE_KINDS;                                                                                              // 1\n  },                                                                                                                   // 1\n  EMAIL_CONTENT_KEYS_FOR_SELECT: function () {                                                                         // 1\n    return EMAIL_CONTENT_KEYS_FOR_SELECT;                                                                              // 1\n  },                                                                                                                   // 1\n  statusFilters: function () {                                                                                         // 1\n    return statusFilters;                                                                                              // 1\n  },                                                                                                                   // 1\n  MESSENGER_KINDS: function () {                                                                                       // 1\n    return MESSENGER_KINDS;                                                                                            // 1\n  },                                                                                                                   // 1\n  METHODS: function () {                                                                                               // 1\n    return METHODS;                                                                                                    // 1\n  },                                                                                                                   // 1\n  SENT_AS_CHOICES: function () {                                                                                       // 1\n    return SENT_AS_CHOICES;                                                                                            // 1\n  },                                                                                                                   // 1\n  VISITOR_AUDIENCE_RULES: function () {                                                                                // 1\n    return VISITOR_AUDIENCE_RULES;                                                                                     // 1\n  },                                                                                                                   // 1\n  RULE_CONDITIONS: function () {                                                                                       // 1\n    return RULE_CONDITIONS;                                                                                            // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar EMAIL_CONTENT_CLASS = 'erxes-email-content';                                                                       // 1\nvar EMAIL_CONTENT_PLACEHOLDER = \"<div class=\\\"\" + EMAIL_CONTENT_CLASS + \"\\\"></div>\";                                   // 2\nvar MESSAGE_KINDS = {                                                                                                  // 4\n  AUTO: 'auto',                                                                                                        // 5\n  VISITOR_AUTO: 'visitorAuto',                                                                                         // 6\n  MANUAL: 'manual',                                                                                                    // 7\n  ALL_LIST: ['auto', 'visitorAuto', 'manual']                                                                          // 8\n};                                                                                                                     // 4\nvar EMAIL_CONTENT_KEYS_FOR_SELECT = [{                                                                                 // 11\n  group: {                                                                                                             // 13\n    value: 'customer',                                                                                                 // 13\n    text: 'Customer'                                                                                                   // 13\n  },                                                                                                                   // 13\n  options: [{                                                                                                          // 14\n    value: 'name',                                                                                                     // 14\n    text: 'Name'                                                                                                       // 14\n  }, {                                                                                                                 // 14\n    value: 'email',                                                                                                    // 14\n    text: 'Email'                                                                                                      // 14\n  }]                                                                                                                   // 14\n}, {                                                                                                                   // 12\n  group: {                                                                                                             // 17\n    value: 'user',                                                                                                     // 17\n    text: 'User'                                                                                                       // 17\n  },                                                                                                                   // 17\n  options: [{                                                                                                          // 18\n    value: 'fullName',                                                                                                 // 19\n    text: 'Fullname'                                                                                                   // 19\n  }, {                                                                                                                 // 19\n    value: 'position',                                                                                                 // 20\n    text: 'Position'                                                                                                   // 20\n  }, {                                                                                                                 // 20\n    value: 'email',                                                                                                    // 21\n    text: 'Email'                                                                                                      // 21\n  }]                                                                                                                   // 21\n}];                                                                                                                    // 16\nvar statusFilters = [{                                                                                                 // 26\n  key: 'live',                                                                                                         // 27\n  value: 'Live'                                                                                                        // 27\n}, {                                                                                                                   // 27\n  key: 'draft',                                                                                                        // 28\n  value: 'Draft'                                                                                                       // 28\n}, {                                                                                                                   // 28\n  key: 'paused',                                                                                                       // 29\n  value: 'Paused'                                                                                                      // 29\n}, {                                                                                                                   // 29\n  key: 'yours',                                                                                                        // 30\n  value: 'Your messages'                                                                                               // 30\n}];                                                                                                                    // 30\nvar MESSENGER_KINDS = {                                                                                                // 33\n  CHAT: 'chat',                                                                                                        // 34\n  NOTE: 'note',                                                                                                        // 35\n  POST: 'post',                                                                                                        // 36\n  ALL_LIST: ['chat', 'note', 'post'],                                                                                  // 37\n  SELECT_OPTIONS: [{                                                                                                   // 38\n    value: 'chat',                                                                                                     // 39\n    text: 'Chat'                                                                                                       // 39\n  }, {                                                                                                                 // 39\n    value: 'note',                                                                                                     // 40\n    text: 'Note'                                                                                                       // 40\n  }, {                                                                                                                 // 40\n    value: 'post',                                                                                                     // 41\n    text: 'Post'                                                                                                       // 41\n  }]                                                                                                                   // 41\n};                                                                                                                     // 33\nvar METHODS = {                                                                                                        // 45\n  MESSENGER: 'messenger',                                                                                              // 46\n  EMAIL: 'email',                                                                                                      // 47\n  ALL_LIST: ['messenger', 'email']                                                                                     // 48\n};                                                                                                                     // 45\nvar SENT_AS_CHOICES = {                                                                                                // 51\n  BADGE: 'badge',                                                                                                      // 52\n  SNIPPET: 'snippet',                                                                                                  // 53\n  FULL_MESSAGE: 'fullMessage',                                                                                         // 54\n  ALL_LIST: ['badge', 'snippet', 'fullMessage'],                                                                       // 55\n  SELECT_OPTIONS: [{                                                                                                   // 56\n    value: 'badge',                                                                                                    // 57\n    text: 'Badge'                                                                                                      // 57\n  }, {                                                                                                                 // 57\n    value: 'snippet',                                                                                                  // 58\n    text: 'Snippet'                                                                                                    // 58\n  }, {                                                                                                                 // 58\n    value: 'fullMessage',                                                                                              // 59\n    text: 'Show the full message'                                                                                      // 59\n  }]                                                                                                                   // 59\n};                                                                                                                     // 51\nvar VISITOR_AUDIENCE_RULES = [{                                                                                        // 63\n  value: '',                                                                                                           // 64\n  text: ''                                                                                                             // 64\n}, {                                                                                                                   // 64\n  value: 'browserLanguage',                                                                                            // 65\n  text: 'Browser language'                                                                                             // 65\n}, {                                                                                                                   // 65\n  value: 'currentPageUrl',                                                                                             // 66\n  text: 'Current page url'                                                                                             // 66\n}, {                                                                                                                   // 66\n  value: 'country',                                                                                                    // 67\n  text: 'Country'                                                                                                      // 67\n}, {                                                                                                                   // 67\n  value: 'city',                                                                                                       // 68\n  text: 'City'                                                                                                         // 68\n}, {                                                                                                                   // 68\n  value: 'numberOfVisits',                                                                                             // 69\n  text: 'Number of visits'                                                                                             // 69\n}];                                                                                                                    // 69\nvar stringTypeChoices = [{                                                                                             // 72\n  value: '',                                                                                                           // 73\n  text: ''                                                                                                             // 73\n}, {                                                                                                                   // 73\n  value: 'is',                                                                                                         // 74\n  text: 'is'                                                                                                           // 74\n}, {                                                                                                                   // 74\n  value: 'isNot',                                                                                                      // 75\n  text: 'is not'                                                                                                       // 75\n}, {                                                                                                                   // 75\n  value: 'startsWith',                                                                                                 // 76\n  text: 'starts with'                                                                                                  // 76\n}, {                                                                                                                   // 76\n  value: 'endsWith',                                                                                                   // 77\n  text: 'ends with'                                                                                                    // 77\n}, {                                                                                                                   // 77\n  value: 'contains',                                                                                                   // 78\n  text: 'contains'                                                                                                     // 78\n}, {                                                                                                                   // 78\n  value: 'doesNotContain',                                                                                             // 79\n  text: 'does not contain'                                                                                             // 79\n}, {                                                                                                                   // 79\n  value: 'isUnknown',                                                                                                  // 80\n  text: 'is unknown'                                                                                                   // 80\n}, {                                                                                                                   // 80\n  value: 'hasAnyValue',                                                                                                // 81\n  text: 'has any value'                                                                                                // 81\n}];                                                                                                                    // 81\nvar numberTypeChoices = [{                                                                                             // 84\n  value: '',                                                                                                           // 85\n  text: ''                                                                                                             // 85\n}, {                                                                                                                   // 85\n  value: 'greaterThan',                                                                                                // 86\n  text: 'Greater than'                                                                                                 // 86\n}, {                                                                                                                   // 86\n  value: 'lessThan',                                                                                                   // 87\n  text: 'Less than'                                                                                                    // 87\n}, {                                                                                                                   // 87\n  value: 'is',                                                                                                         // 88\n  text: 'is'                                                                                                           // 88\n}, {                                                                                                                   // 88\n  value: 'isNot',                                                                                                      // 89\n  text: 'is not'                                                                                                       // 89\n}, {                                                                                                                   // 89\n  value: 'isUnknown',                                                                                                  // 90\n  text: 'is unknown'                                                                                                   // 90\n}, {                                                                                                                   // 90\n  value: 'hasAnyValue',                                                                                                // 91\n  text: 'has any value'                                                                                                // 91\n}];                                                                                                                    // 91\nvar RULE_CONDITIONS = {                                                                                                // 94\n  browserLanguage: stringTypeChoices,                                                                                  // 95\n  currentPageUrl: stringTypeChoices,                                                                                   // 96\n  country: stringTypeChoices,                                                                                          // 97\n  city: stringTypeChoices,                                                                                             // 98\n  numberOfVisits: numberTypeChoices                                                                                    // 99\n};                                                                                                                     // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"engage.js\":[\"babel-runtime/helpers/extends\",\"meteor/meteor\",\"faker\",\"meteor/dburles:factory\",\"meteor/aldeed:simple-schema\",\"/imports/api/customers/segments\",\"/imports/api/tags/utils\",\"./constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/engage/engage.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Messages: function () {                                                                                              // 1\n    return Messages;                                                                                                   // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Segments = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/customers/segments\", {                                                                 // 1\n  \"default\": function (v) {                                                                                            // 1\n    Segments = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar TagsCollection = void 0,                                                                                           // 1\n    tagsHelper = void 0,                                                                                               // 1\n    tagSchemaOptions = void 0;                                                                                         // 1\nmodule.importSync(\"/imports/api/tags/utils\", {                                                                         // 1\n  TagsCollection: function (v) {                                                                                       // 1\n    TagsCollection = v;                                                                                                // 1\n  },                                                                                                                   // 1\n  tagsHelper: function (v) {                                                                                           // 1\n    tagsHelper = v;                                                                                                    // 1\n  },                                                                                                                   // 1\n  tagSchemaOptions: function (v) {                                                                                     // 1\n    tagSchemaOptions = v;                                                                                              // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar MESSAGE_KINDS = void 0,                                                                                            // 1\n    MESSENGER_KINDS = void 0,                                                                                          // 1\n    METHODS = void 0,                                                                                                  // 1\n    SENT_AS_CHOICES = void 0;                                                                                          // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  MESSAGE_KINDS: function (v) {                                                                                        // 1\n    MESSAGE_KINDS = v;                                                                                                 // 1\n  },                                                                                                                   // 1\n  MESSENGER_KINDS: function (v) {                                                                                      // 1\n    MESSENGER_KINDS = v;                                                                                               // 1\n  },                                                                                                                   // 1\n  METHODS: function (v) {                                                                                              // 1\n    METHODS = v;                                                                                                       // 1\n  },                                                                                                                   // 1\n  SENT_AS_CHOICES: function (v) {                                                                                      // 1\n    SENT_AS_CHOICES = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Messages = new TagsCollection('engage_messages');                                                                  // 9\nMessages.TAG_TYPE = 'engageMessage';                                                                                   // 11\nvar EmailSchema = new SimpleSchema({                                                                                   // 13\n  templateId: {                                                                                                        // 14\n    type: String,                                                                                                      // 15\n    optional: true                                                                                                     // 16\n  },                                                                                                                   // 14\n  subject: {                                                                                                           // 18\n    type: String                                                                                                       // 19\n  },                                                                                                                   // 18\n  content: {                                                                                                           // 21\n    type: String                                                                                                       // 22\n  }                                                                                                                    // 21\n}); // visistor auto message's per rule schema                                                                         // 13\n                                                                                                                       //\nvar RuleSchema = new SimpleSchema({                                                                                    // 27\n  _id: {                                                                                                               // 28\n    type: String                                                                                                       // 28\n  },                                                                                                                   // 28\n  // browserLanguage, currentUrl, etc ...                                                                              // 30\n  kind: {                                                                                                              // 31\n    type: String                                                                                                       // 31\n  },                                                                                                                   // 31\n  // Browser language, Current url etc ...                                                                             // 33\n  text: {                                                                                                              // 34\n    type: String                                                                                                       // 34\n  },                                                                                                                   // 34\n  // is, isNot, startsWith                                                                                             // 36\n  condition: {                                                                                                         // 37\n    type: String                                                                                                       // 37\n  },                                                                                                                   // 37\n  value: {                                                                                                             // 39\n    type: String,                                                                                                      // 39\n    optional: true                                                                                                     // 39\n  }                                                                                                                    // 39\n});                                                                                                                    // 27\nvar MessengerSchema = new SimpleSchema({                                                                               // 42\n  brandId: {                                                                                                           // 43\n    type: String                                                                                                       // 44\n  },                                                                                                                   // 43\n  kind: {                                                                                                              // 46\n    type: String,                                                                                                      // 47\n    allowedValues: MESSENGER_KINDS.ALL_LIST,                                                                           // 48\n    optional: true                                                                                                     // 49\n  },                                                                                                                   // 46\n  sentAs: {                                                                                                            // 51\n    type: String,                                                                                                      // 52\n    allowedValues: SENT_AS_CHOICES.ALL_LIST                                                                            // 53\n  },                                                                                                                   // 51\n  content: {                                                                                                           // 55\n    type: String                                                                                                       // 56\n  },                                                                                                                   // 55\n  rules: {                                                                                                             // 58\n    type: [RuleSchema],                                                                                                // 59\n    optional: true                                                                                                     // 60\n  }                                                                                                                    // 58\n});                                                                                                                    // 42\nMessages.schema = new SimpleSchema((0, _extends3.default)({                                                            // 64\n  // auto, visitorAuto, manual                                                                                         // 65\n  kind: {                                                                                                              // 66\n    type: String,                                                                                                      // 67\n    allowedValues: MESSAGE_KINDS.ALL_LIST                                                                              // 68\n  },                                                                                                                   // 66\n  // targets                                                                                                           // 71\n  segmentId: {                                                                                                         // 72\n    type: String,                                                                                                      // 73\n    optional: true                                                                                                     // 74\n  },                                                                                                                   // 72\n  customerIds: {                                                                                                       // 76\n    type: [String],                                                                                                    // 77\n    optional: true                                                                                                     // 78\n  },                                                                                                                   // 76\n  title: {                                                                                                             // 81\n    type: String                                                                                                       // 82\n  },                                                                                                                   // 81\n  fromUserId: {                                                                                                        // 84\n    type: String                                                                                                       // 85\n  },                                                                                                                   // 84\n  // messenger, email etc ...                                                                                          // 88\n  method: {                                                                                                            // 89\n    type: String,                                                                                                      // 90\n    allowedValues: METHODS.ALL_LIST                                                                                    // 91\n  },                                                                                                                   // 89\n  // email kind fields                                                                                                 // 94\n  email: {                                                                                                             // 95\n    type: EmailSchema,                                                                                                 // 96\n    optional: true                                                                                                     // 97\n  },                                                                                                                   // 95\n  // messenger kind fields                                                                                             // 100\n  messenger: {                                                                                                         // 101\n    type: MessengerSchema,                                                                                             // 102\n    optional: true                                                                                                     // 103\n  },                                                                                                                   // 101\n  isDraft: {                                                                                                           // 106\n    type: Boolean,                                                                                                     // 107\n    optional: true                                                                                                     // 108\n  },                                                                                                                   // 106\n  isLive: {                                                                                                            // 110\n    type: Boolean,                                                                                                     // 111\n    optional: true                                                                                                     // 112\n  },                                                                                                                   // 110\n  stopDate: {                                                                                                          // 114\n    type: Date,                                                                                                        // 115\n    optional: true                                                                                                     // 116\n  }                                                                                                                    // 114\n}, tagSchemaOptions()));                                                                                               // 64\nMessages.schemaExtra = new SimpleSchema({                                                                              // 121\n  createdUserId: {                                                                                                     // 122\n    type: String                                                                                                       // 123\n  },                                                                                                                   // 122\n  createdDate: {                                                                                                       // 126\n    type: Date                                                                                                         // 127\n  },                                                                                                                   // 126\n  // read customer ids                                                                                                 // 130\n  messengerReceivedCustomerIds: {                                                                                      // 131\n    type: [String],                                                                                                    // 132\n    optional: true                                                                                                     // 133\n  },                                                                                                                   // 131\n  // for example, save each customers's email delivery reports by messageId                                            // 136\n  deliveryReports: {                                                                                                   // 137\n    type: Object,                                                                                                      // 138\n    blackbox: true,                                                                                                    // 139\n    optional: true                                                                                                     // 140\n  }                                                                                                                    // 137\n});                                                                                                                    // 121\nMessages.helpers((0, _extends3.default)({                                                                              // 144\n  fromUser: function () {                                                                                              // 145\n    return Meteor.users.findOne(this.fromUserId) || {};                                                                // 146\n  },                                                                                                                   // 147\n  segment: function () {                                                                                               // 149\n    return Segments.findOne(this.segmentId) || {};                                                                     // 150\n  }                                                                                                                    // 151\n}, tagsHelper));                                                                                                       // 144\nMessages.attachSchema(Messages.schema);                                                                                // 156\nMessages.attachSchema(Messages.schemaExtra);                                                                           // 157\nFactory.define('engage.messages', Messages, {                                                                          // 159\n  title: function () {                                                                                                 // 160\n    return faker.random.word();                                                                                        // 160\n  }                                                                                                                    // 160\n});                                                                                                                    // 159\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":[\"babel-runtime/helpers/extends\",\"meteor/meteor\",\"meteor/random\",\"node4mailer\",\"/imports/api/customers/queryBuilder\",\"/imports/api/customers/segments\",\"/imports/api/emailTemplates/emailTemplates\",\"/imports/api/customers/customers\",\"/imports/api/integrations/integrations\",\"/imports/api/integrations/constants\",\"/imports/api/conversations/utils\",\"./constants\",\"./engage\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/engage/utils.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");                                                              //\n                                                                                                                       //\nvar _extends3 = _interopRequireDefault(_extends2);                                                                     //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  replaceKeys: function () {                                                                                           // 1\n    return replaceKeys;                                                                                                // 1\n  },                                                                                                                   // 1\n  send: function () {                                                                                                  // 1\n    return send;                                                                                                       // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar nodemailer = void 0;                                                                                               // 1\nmodule.importSync(\"node4mailer\", {                                                                                     // 1\n  \"default\": function (v) {                                                                                            // 1\n    nodemailer = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar customerQueryBuilder = void 0;                                                                                     // 1\nmodule.importSync(\"/imports/api/customers/queryBuilder\", {                                                             // 1\n  \"default\": function (v) {                                                                                            // 1\n    customerQueryBuilder = v;                                                                                          // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Segments = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/customers/segments\", {                                                                 // 1\n  \"default\": function (v) {                                                                                            // 1\n    Segments = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar EmailTemplates = void 0;                                                                                           // 1\nmodule.importSync(\"/imports/api/emailTemplates/emailTemplates\", {                                                      // 1\n  EmailTemplates: function (v) {                                                                                       // 1\n    EmailTemplates = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/integrations\", {                                                          // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar KIND_CHOICES = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/constants\", {                                                             // 1\n  KIND_CHOICES: function (v) {                                                                                         // 1\n    KIND_CHOICES = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar createConversation = void 0,                                                                                       // 1\n    createMessage = void 0;                                                                                            // 1\nmodule.importSync(\"/imports/api/conversations/utils\", {                                                                // 1\n  createConversation: function (v) {                                                                                   // 1\n    createConversation = v;                                                                                            // 1\n  },                                                                                                                   // 1\n  createMessage: function (v) {                                                                                        // 1\n    createMessage = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\nvar EMAIL_CONTENT_PLACEHOLDER = void 0,                                                                                // 1\n    METHODS = void 0,                                                                                                  // 1\n    MESSAGE_KINDS = void 0;                                                                                            // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  EMAIL_CONTENT_PLACEHOLDER: function (v) {                                                                            // 1\n    EMAIL_CONTENT_PLACEHOLDER = v;                                                                                     // 1\n  },                                                                                                                   // 1\n  METHODS: function (v) {                                                                                              // 1\n    METHODS = v;                                                                                                       // 1\n  },                                                                                                                   // 1\n  MESSAGE_KINDS: function (v) {                                                                                        // 1\n    MESSAGE_KINDS = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 10);                                                                                                                // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"./engage\", {                                                                                        // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 11);                                                                                                                // 1\n                                                                                                                       //\nvar replaceKeys = function (_ref) {                                                                                    // 20\n  var content = _ref.content,                                                                                          // 20\n      customer = _ref.customer,                                                                                        // 20\n      user = _ref.user;                                                                                                // 20\n  var result = content; // replace customer fields                                                                     // 21\n                                                                                                                       //\n  result = result.replace(/{{\\s?customer.name\\s?}}/gi, customer.name);                                                 // 24\n  result = result.replace(/{{\\s?customer.email\\s?}}/gi, customer.email); // replace user fields                        // 25\n                                                                                                                       //\n  result = result.replace(/{{\\s?user.fullName\\s?}}/gi, user.fullName);                                                 // 28\n  result = result.replace(/{{\\s?user.position\\s?}}/gi, user.position);                                                 // 29\n  result = result.replace(/{{\\s?user.email\\s?}}/gi, user.email);                                                       // 30\n  return result;                                                                                                       // 32\n};                                                                                                                     // 33\n                                                                                                                       //\nvar findCustomers = function (_ref2) {                                                                                 // 35\n  var customerIds = _ref2.customerIds,                                                                                 // 35\n      segmentId = _ref2.segmentId;                                                                                     // 35\n  // find matched customers                                                                                            // 36\n  var customerQuery = {                                                                                                // 37\n    _id: {                                                                                                             // 37\n      $in: customerIds || []                                                                                           // 37\n    }                                                                                                                  // 37\n  };                                                                                                                   // 37\n                                                                                                                       //\n  if (segmentId) {                                                                                                     // 39\n    customerQuery = customerQueryBuilder.segments(Segments.findOne(segmentId));                                        // 40\n  }                                                                                                                    // 41\n                                                                                                                       //\n  return Customers.find(customerQuery).fetch();                                                                        // 43\n};                                                                                                                     // 44\n                                                                                                                       //\nvar saveMatchedCustomerIds = function (messageId, customers) {                                                         // 46\n  return Messages.update({                                                                                             // 46\n    _id: messageId                                                                                                     // 48\n  }, {                                                                                                                 // 48\n    $set: {                                                                                                            // 49\n      customerIds: customers.map(function (customer) {                                                                 // 49\n        return customer._id;                                                                                           // 49\n      })                                                                                                               // 49\n    }                                                                                                                  // 49\n  });                                                                                                                  // 49\n};                                                                                                                     // 46\n                                                                                                                       //\nvar sendViaEmail = function (message) {                                                                                // 52\n  var fromUserId = message.fromUserId,                                                                                 // 52\n      segmentId = message.segmentId,                                                                                   // 52\n      customerIds = message.customerIds;                                                                               // 52\n  var _message$email = message.email,                                                                                  // 52\n      templateId = _message$email.templateId,                                                                          // 52\n      subject = _message$email.subject,                                                                                // 52\n      content = _message$email.content;                                                                                // 52\n  var user = Meteor.users.findOne(fromUserId);                                                                         // 56\n  var userEmail = user.emails.pop();                                                                                   // 57\n  var template = EmailTemplates.findOne(templateId); // find matched customers                                         // 58\n                                                                                                                       //\n  var customers = findCustomers({                                                                                      // 61\n    customerIds: customerIds,                                                                                          // 61\n    segmentId: segmentId                                                                                               // 61\n  }); // save matched customer ids                                                                                     // 61\n                                                                                                                       //\n  saveMatchedCustomerIds(message._id, customers); // create reusable transporter object using the default SMTP transport\n                                                                                                                       //\n  var _ref3 = Meteor.settings.mail || {},                                                                              // 52\n      host = _ref3.host,                                                                                               // 52\n      port = _ref3.port,                                                                                               // 52\n      secure = _ref3.secure,                                                                                           // 52\n      auth = _ref3.auth;                                                                                               // 52\n                                                                                                                       //\n  var transporter = nodemailer.createTransport({                                                                       // 69\n    host: host,                                                                                                        // 69\n    port: port,                                                                                                        // 69\n    secure: secure,                                                                                                    // 69\n    auth: auth                                                                                                         // 69\n  });                                                                                                                  // 69\n  customers.forEach(function (customer) {                                                                              // 71\n    var _$set;                                                                                                         // 71\n                                                                                                                       //\n    // replace keys in subject                                                                                         // 72\n    var replacedSubject = replaceKeys({                                                                                // 73\n      content: subject,                                                                                                // 73\n      customer: customer,                                                                                              // 73\n      user: user                                                                                                       // 73\n    }); // replace keys such as {{ customer.name }} in content                                                         // 73\n                                                                                                                       //\n    var replacedContent = replaceKeys({                                                                                // 76\n      content: content,                                                                                                // 76\n      customer: customer,                                                                                              // 76\n      user: user                                                                                                       // 76\n    }); // if sender choosed some template then use it                                                                 // 76\n                                                                                                                       //\n    if (template) {                                                                                                    // 79\n      replacedContent = template.content.replace(EMAIL_CONTENT_PLACEHOLDER, replacedContent);                          // 80\n    }                                                                                                                  // 81\n                                                                                                                       //\n    var mailMessageId = Random.id(); // add new delivery report                                                        // 83\n                                                                                                                       //\n    Messages.update({                                                                                                  // 86\n      _id: message._id                                                                                                 // 87\n    }, {                                                                                                               // 87\n      $set: (_$set = {}, _$set[\"deliveryReports.\" + mailMessageId] = {                                                 // 89\n        customerId: customer._id,                                                                                      // 91\n        status: 'pending'                                                                                              // 92\n      }, _$set)                                                                                                        // 90\n    }); // send email                                                                                                  // 88\n                                                                                                                       //\n    transporter.sendMail({                                                                                             // 99\n      from: userEmail.address,                                                                                         // 101\n      to: customer.email,                                                                                              // 102\n      subject: replacedSubject,                                                                                        // 103\n      html: replacedContent,                                                                                           // 104\n      messageId: mailMessageId                                                                                         // 105\n    }, Meteor.bindEnvironment(function (error, info) {                                                                 // 100\n      var _$set2;                                                                                                      // 107\n                                                                                                                       //\n      // set new status                                                                                                // 108\n      var status = error ? 'failed' : 'sent'; // update status                                                         // 109\n                                                                                                                       //\n      Messages.update({                                                                                                // 112\n        _id: message._id                                                                                               // 113\n      }, {                                                                                                             // 113\n        $set: (_$set2 = {}, _$set2[\"deliveryReports.\" + info.messageId + \".status\"] = status, _$set2)                  // 115\n      });                                                                                                              // 114\n    }));                                                                                                               // 120\n  });                                                                                                                  // 122\n};                                                                                                                     // 123\n                                                                                                                       //\nvar sendViaMessenger = function (message) {                                                                            // 125\n  var fromUserId = message.fromUserId,                                                                                 // 125\n      segmentId = message.segmentId,                                                                                   // 125\n      customerIds = message.customerIds;                                                                               // 125\n  var _message$messenger = message.messenger,                                                                          // 125\n      brandId = _message$messenger.brandId,                                                                            // 125\n      content = _message$messenger.content;                                                                            // 125\n  var user = Meteor.users.findOne(fromUserId); // find integration                                                     // 129\n                                                                                                                       //\n  var integration = Integrations.findOne({                                                                             // 132\n    brandId: brandId,                                                                                                  // 133\n    kind: KIND_CHOICES.MESSENGER                                                                                       // 134\n  });                                                                                                                  // 132\n                                                                                                                       //\n  if (!integration) {                                                                                                  // 137\n    return 'Integration not found';                                                                                    // 138\n  } // find matched customers                                                                                          // 139\n                                                                                                                       //\n                                                                                                                       //\n  var customers = findCustomers({                                                                                      // 142\n    customerIds: customerIds,                                                                                          // 142\n    segmentId: segmentId                                                                                               // 142\n  }); // save matched customer ids                                                                                     // 142\n                                                                                                                       //\n  saveMatchedCustomerIds(message._id, customers);                                                                      // 145\n  customers.forEach(function (customer) {                                                                              // 147\n    // replace keys in content                                                                                         // 148\n    var replacedContent = replaceKeys({                                                                                // 149\n      content: content,                                                                                                // 149\n      customer: customer,                                                                                              // 149\n      user: user                                                                                                       // 149\n    }); // create conversation                                                                                         // 149\n                                                                                                                       //\n    var conversationId = createConversation({                                                                          // 152\n      userId: fromUserId,                                                                                              // 153\n      customerId: customer._id,                                                                                        // 154\n      integrationId: integration._id,                                                                                  // 155\n      content: replacedContent                                                                                         // 156\n    }); // create message                                                                                              // 152\n                                                                                                                       //\n    createMessage({                                                                                                    // 160\n      engageData: (0, _extends3.default)({                                                                             // 161\n        messageId: message._id,                                                                                        // 162\n        fromUserId: fromUserId                                                                                         // 163\n      }, message.messenger),                                                                                           // 161\n      conversationId: conversationId,                                                                                  // 166\n      userId: fromUserId,                                                                                              // 167\n      customerId: customer._id,                                                                                        // 168\n      content: replacedContent                                                                                         // 169\n    });                                                                                                                // 160\n  });                                                                                                                  // 171\n};                                                                                                                     // 172\n                                                                                                                       //\nvar send = function (message) {                                                                                        // 174\n  var method = message.method,                                                                                         // 174\n      kind = message.kind;                                                                                             // 174\n                                                                                                                       //\n  if (method === METHODS.EMAIL) {                                                                                      // 177\n    return sendViaEmail(message);                                                                                      // 178\n  } // when kind is visitor auto, do not do anything                                                                   // 179\n                                                                                                                       //\n                                                                                                                       //\n  if (method === METHODS.MESSENGER && kind !== MESSAGE_KINDS.VISITOR_AUTO) {                                           // 182\n    return sendViaMessenger(message);                                                                                  // 183\n  }                                                                                                                    // 184\n};                                                                                                                     // 185\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"forms\":{\"server\":{\"methods.js\":[\"meteor/meteor\",\"meteor/random\",\"meteor/underscore\",\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/integrations/integrations\",\"/imports/api/utils\",\"../forms\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/forms/server/methods.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  add: function () {                                                                                                   // 1\n    return add;                                                                                                        // 1\n  },                                                                                                                   // 1\n  edit: function () {                                                                                                  // 1\n    return edit;                                                                                                       // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  },                                                                                                                   // 1\n  addField: function () {                                                                                              // 1\n    return addField;                                                                                                   // 1\n  },                                                                                                                   // 1\n  editField: function () {                                                                                             // 1\n    return editField;                                                                                                  // 1\n  },                                                                                                                   // 1\n  removeField: function () {                                                                                           // 1\n    return removeField;                                                                                                // 1\n  },                                                                                                                   // 1\n  updateFieldsOrder: function () {                                                                                     // 1\n    return updateFieldsOrder;                                                                                          // 1\n  },                                                                                                                   // 1\n  duplicate: function () {                                                                                             // 1\n    return duplicate;                                                                                                  // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/integrations\", {                                                          // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Forms = void 0,                                                                                                    // 1\n    Fields = void 0;                                                                                                   // 1\nmodule.importSync(\"../forms\", {                                                                                        // 1\n  Forms: function (v) {                                                                                                // 1\n    Forms = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  Fields: function (v) {                                                                                               // 1\n    Fields = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\n                                                                                                                       //\nvar generateCode = function () {                                                                                       // 10\n  // generate code automatically                                                                                       // 11\n  var code = Random.id().substr(0, 6);                                                                                 // 12\n                                                                                                                       //\n  while (Forms.findOne({                                                                                               // 14\n    code: code                                                                                                         // 14\n  })) {                                                                                                                // 14\n    code = Random.id().substr(0, 6);                                                                                   // 15\n  }                                                                                                                    // 16\n                                                                                                                       //\n  return code;                                                                                                         // 18\n};                                                                                                                     // 19\n                                                                                                                       //\nvar add = new ValidatedMethod({                                                                                        // 21\n  name: 'forms.add',                                                                                                   // 22\n  mixins: [ErxesMixin],                                                                                                // 23\n  validate: function (_ref) {                                                                                          // 25\n    var doc = _ref.doc;                                                                                                // 25\n    check(doc, Forms.schema);                                                                                          // 26\n  },                                                                                                                   // 27\n  run: function (_ref2) {                                                                                              // 29\n    var doc = _ref2.doc;                                                                                               // 29\n    doc.code = generateCode();                                                                                         // 30\n    doc.createdUserId = this.userId;                                                                                   // 31\n    doc.createdDate = new Date(); // create                                                                            // 32\n                                                                                                                       //\n    return Forms.insert(doc);                                                                                          // 35\n  }                                                                                                                    // 36\n});                                                                                                                    // 21\nvar edit = new ValidatedMethod({                                                                                       // 40\n  name: 'forms.edit',                                                                                                  // 41\n  mixins: [ErxesMixin],                                                                                                // 42\n  validate: function (_ref3) {                                                                                         // 44\n    var id = _ref3.id,                                                                                                 // 44\n        doc = _ref3.doc;                                                                                               // 44\n    check(id, String);                                                                                                 // 45\n    check(doc, Forms.schema);                                                                                          // 46\n  },                                                                                                                   // 47\n  run: function (_ref4) {                                                                                              // 49\n    var id = _ref4.id,                                                                                                 // 49\n        doc = _ref4.doc;                                                                                               // 49\n    return Forms.update(id, {                                                                                          // 50\n      $set: doc                                                                                                        // 50\n    });                                                                                                                // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 40\nvar remove = new ValidatedMethod({                                                                                     // 55\n  name: 'forms.remove',                                                                                                // 56\n  mixins: [ErxesMixin],                                                                                                // 57\n  validate: function (id) {                                                                                            // 59\n    check(id, String);                                                                                                 // 60\n  },                                                                                                                   // 61\n  run: function (id) {                                                                                                 // 63\n    // check whether has any field                                                                                     // 64\n    if (Fields.find({                                                                                                  // 65\n      formId: id                                                                                                       // 65\n    }).count() > 0) {                                                                                                  // 65\n      throw new Meteor.Error('forms.cannotDelete.hasFields', 'You cannot delete this form. This form has some fields.');\n    } // check whether used in integration                                                                             // 70\n                                                                                                                       //\n                                                                                                                       //\n    if (Integrations.find({                                                                                            // 73\n      formId: id                                                                                                       // 73\n    }).count() > 0) {                                                                                                  // 73\n      throw new Meteor.Error('forms.cannotDelete.usedInIntegration', 'You cannot delete this form. This form used in integration.');\n    }                                                                                                                  // 78\n                                                                                                                       //\n    return Forms.remove(id);                                                                                           // 80\n  }                                                                                                                    // 81\n});                                                                                                                    // 55\nvar addField = new ValidatedMethod({                                                                                   // 87\n  name: 'forms.addField',                                                                                              // 88\n  mixins: [ErxesMixin],                                                                                                // 89\n  validate: function (_ref5) {                                                                                         // 91\n    var formId = _ref5.formId,                                                                                         // 91\n        doc = _ref5.doc;                                                                                               // 91\n    check(formId, String);                                                                                             // 92\n    check(doc, Fields.schema);                                                                                         // 93\n  },                                                                                                                   // 94\n  run: function (_ref6) {                                                                                              // 96\n    var formId = _ref6.formId,                                                                                         // 96\n        doc = _ref6.doc;                                                                                               // 96\n    // set form id                                                                                                     // 97\n    doc.formId = formId; // find last field by order                                                                   // 98\n                                                                                                                       //\n    var lastField = Fields.findOne({}, {                                                                               // 101\n      fields: {                                                                                                        // 101\n        order: 1                                                                                                       // 101\n      },                                                                                                               // 101\n      sort: {                                                                                                          // 101\n        order: -1                                                                                                      // 101\n      }                                                                                                                // 101\n    }); // if there is no field then start with 0                                                                      // 101\n                                                                                                                       //\n    var order = 0;                                                                                                     // 104\n                                                                                                                       //\n    if (lastField) {                                                                                                   // 106\n      order = lastField.order + 1;                                                                                     // 107\n    }                                                                                                                  // 108\n                                                                                                                       //\n    doc.order = order; // insert field                                                                                 // 110\n                                                                                                                       //\n    return Fields.insert(doc);                                                                                         // 113\n  }                                                                                                                    // 114\n});                                                                                                                    // 87\nvar editField = new ValidatedMethod({                                                                                  // 118\n  name: 'forms.editField',                                                                                             // 119\n  mixins: [ErxesMixin],                                                                                                // 120\n  validate: function (_ref7) {                                                                                         // 122\n    var _id = _ref7._id,                                                                                               // 122\n        doc = _ref7.doc;                                                                                               // 122\n    check(_id, String);                                                                                                // 123\n    check(doc, Fields.schema);                                                                                         // 124\n  },                                                                                                                   // 125\n  run: function (_ref8) {                                                                                              // 127\n    var _id = _ref8._id,                                                                                               // 127\n        doc = _ref8.doc;                                                                                               // 127\n    // update field                                                                                                    // 128\n    return Fields.update({                                                                                             // 129\n      _id: _id                                                                                                         // 129\n    }, {                                                                                                               // 129\n      $set: doc                                                                                                        // 129\n    });                                                                                                                // 129\n  }                                                                                                                    // 130\n});                                                                                                                    // 118\nvar removeField = new ValidatedMethod({                                                                                // 134\n  name: 'forms.removeField',                                                                                           // 135\n  mixins: [ErxesMixin],                                                                                                // 136\n  validate: function (_ref9) {                                                                                         // 138\n    var _id = _ref9._id;                                                                                               // 138\n    check(_id, String);                                                                                                // 139\n  },                                                                                                                   // 140\n  run: function (_ref10) {                                                                                             // 142\n    var _id = _ref10._id;                                                                                              // 142\n    Fields.remove(_id);                                                                                                // 143\n  }                                                                                                                    // 144\n});                                                                                                                    // 134\nvar updateFieldsOrder = new ValidatedMethod({                                                                          // 148\n  name: 'forms.updateFieldsOrder',                                                                                     // 149\n  mixins: [ErxesMixin],                                                                                                // 150\n  validate: function (_ref11) {                                                                                        // 152\n    var orderDics = _ref11.orderDics;                                                                                  // 152\n    check(orderDics, Array);                                                                                           // 153\n  },                                                                                                                   // 154\n  run: function (_ref12) {                                                                                             // 156\n    var orderDics = _ref12.orderDics;                                                                                  // 156\n    // update each field's order                                                                                       // 157\n    orderDics.forEach(function (_ref13) {                                                                              // 158\n      var _id = _ref13._id,                                                                                            // 158\n          order = _ref13.order;                                                                                        // 158\n      Fields.update({                                                                                                  // 159\n        _id: _id                                                                                                       // 159\n      }, {                                                                                                             // 159\n        $set: {                                                                                                        // 159\n          order: order                                                                                                 // 159\n        }                                                                                                              // 159\n      });                                                                                                              // 159\n    });                                                                                                                // 160\n  }                                                                                                                    // 161\n});                                                                                                                    // 148\nvar duplicate = new ValidatedMethod({                                                                                  // 165\n  name: 'forms.duplicate',                                                                                             // 166\n  mixins: [ErxesMixin],                                                                                                // 167\n  validate: function (_ref14) {                                                                                        // 169\n    var id = _ref14.id;                                                                                                // 169\n    check(id, String);                                                                                                 // 170\n  },                                                                                                                   // 171\n  run: function (_ref15) {                                                                                             // 173\n    var id = _ref15.id;                                                                                                // 173\n    var form = Forms.findOne(id);                                                                                      // 174\n    form.title = form.title + \" duplicated\";                                                                           // 176\n    form.code = generateCode();                                                                                        // 177\n    delete form._id; // duplicate form                                                                                 // 179\n                                                                                                                       //\n    var newFormId = Forms.insert(form); // duplicate fields                                                            // 182\n                                                                                                                       //\n    Fields.find({                                                                                                      // 185\n      formId: id                                                                                                       // 185\n    }).forEach(function (field) {                                                                                      // 185\n      var fieldParams = _.omit(field, '_id');                                                                          // 186\n                                                                                                                       //\n      fieldParams.formId = newFormId;                                                                                  // 187\n      Fields.insert(fieldParams);                                                                                      // 189\n    });                                                                                                                // 190\n  }                                                                                                                    // 191\n});                                                                                                                    // 165\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"forms.js\":[\"faker\",\"meteor/random\",\"meteor/dburles:factory\",\"meteor/mongo\",\"meteor/aldeed:simple-schema\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/forms/forms.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Forms: function () {                                                                                                 // 1\n    return Forms;                                                                                                      // 1\n  },                                                                                                                   // 1\n  Fields: function () {                                                                                                // 1\n    return Fields;                                                                                                     // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar faker = void 0;                                                                                                    // 1\nmodule.importSync(\"faker\", {                                                                                           // 1\n  \"default\": function (v) {                                                                                            // 1\n    faker = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Forms = new Mongo.Collection('forms');                                                                             // 7\nvar Fields = new Mongo.Collection('form_fields');                                                                      // 8\n/* ----------------------- Schemas ----------------------- */ // forms                                                 // 10\nForms.schema = new SimpleSchema({                                                                                      // 13\n  title: {                                                                                                             // 14\n    type: String                                                                                                       // 15\n  },                                                                                                                   // 14\n  description: {                                                                                                       // 17\n    type: String,                                                                                                      // 18\n    optional: true                                                                                                     // 19\n  }                                                                                                                    // 17\n});                                                                                                                    // 13\nvar FormSchemaExtra = new SimpleSchema({                                                                               // 23\n  code: {                                                                                                              // 24\n    type: String                                                                                                       // 25\n  },                                                                                                                   // 24\n  createdUserId: {                                                                                                     // 27\n    type: String                                                                                                       // 28\n  },                                                                                                                   // 27\n  createdDate: {                                                                                                       // 30\n    type: Date                                                                                                         // 31\n  }                                                                                                                    // 30\n}); // fields                                                                                                          // 23\n                                                                                                                       //\nFields.schema = new SimpleSchema({                                                                                     // 36\n  type: {                                                                                                              // 37\n    type: String,                                                                                                      // 38\n    allowedValues: ['input', 'textarea', 'radio', 'check', 'select', 'divider', 'email', 'firstName', 'lastName']      // 39\n  },                                                                                                                   // 37\n  validation: {                                                                                                        // 51\n    type: String,                                                                                                      // 52\n    optional: true,                                                                                                    // 53\n    allowedValues: ['', 'number', 'date', 'email']                                                                     // 54\n  },                                                                                                                   // 51\n  text: {                                                                                                              // 56\n    type: String,                                                                                                      // 57\n    optional: true                                                                                                     // 58\n  },                                                                                                                   // 56\n  description: {                                                                                                       // 60\n    type: String,                                                                                                      // 61\n    optional: true                                                                                                     // 62\n  },                                                                                                                   // 60\n  // for radio, check, select, choices                                                                                 // 65\n  options: {                                                                                                           // 66\n    type: [String],                                                                                                    // 67\n    optional: true                                                                                                     // 68\n  },                                                                                                                   // 66\n  isRequired: {                                                                                                        // 71\n    type: Boolean                                                                                                      // 72\n  }                                                                                                                    // 71\n});                                                                                                                    // 36\nvar FieldSchemaExtra = new SimpleSchema({                                                                              // 76\n  formId: {                                                                                                            // 77\n    type: String                                                                                                       // 78\n  },                                                                                                                   // 77\n  order: {                                                                                                             // 80\n    type: Number,                                                                                                      // 81\n    optional: true                                                                                                     // 82\n  }                                                                                                                    // 80\n}); /* ----------------------- Collections ----------------------- */                                                  // 76\nForms.attachSchema(Forms.schema);                                                                                      // 88\nForms.attachSchema(FormSchemaExtra);                                                                                   // 89\nFields.attachSchema(Fields.schema);                                                                                    // 91\nFields.attachSchema(FieldSchemaExtra);                                                                                 // 92\nFactory.define('form', Forms, {                                                                                        // 94\n  title: function () {                                                                                                 // 95\n    return faker.random.word();                                                                                        // 95\n  },                                                                                                                   // 95\n  code: function () {                                                                                                  // 96\n    return Random.id();                                                                                                // 96\n  },                                                                                                                   // 96\n  description: function () {                                                                                           // 97\n    return faker.random.word();                                                                                        // 97\n  },                                                                                                                   // 97\n  createdUserId: function () {                                                                                         // 98\n    return Random.id();                                                                                                // 98\n  },                                                                                                                   // 98\n  createdDate: function () {                                                                                           // 99\n    return faker.date.recent();                                                                                        // 99\n  }                                                                                                                    // 99\n});                                                                                                                    // 94\nFactory.define('formField', Fields, {                                                                                  // 102\n  formId: function () {                                                                                                // 103\n    return Random.id();                                                                                                // 103\n  },                                                                                                                   // 103\n  type: 'input',                                                                                                       // 104\n  isRequired: false,                                                                                                   // 105\n  order: function () {                                                                                                 // 106\n    return faker.random.number();                                                                                      // 106\n  }                                                                                                                    // 106\n});                                                                                                                    // 102\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"responseTemplates\":{\"server\":{\"methods.js\":[\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/utils\",\"../responseTemplates\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/responseTemplates/server/methods.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  add: function () {                                                                                                   // 1\n    return add;                                                                                                        // 1\n  },                                                                                                                   // 1\n  edit: function () {                                                                                                  // 1\n    return edit;                                                                                                       // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar ResponseTemplates = void 0;                                                                                        // 1\nmodule.importSync(\"../responseTemplates\", {                                                                            // 1\n  ResponseTemplates: function (v) {                                                                                    // 1\n    ResponseTemplates = v;                                                                                             // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar add = new ValidatedMethod({                                                                                        // 7\n  name: 'responseTemplates.add',                                                                                       // 8\n  mixins: [ErxesMixin],                                                                                                // 9\n  validate: function (_ref) {                                                                                          // 11\n    var doc = _ref.doc;                                                                                                // 11\n    check(doc, ResponseTemplates.schema);                                                                              // 12\n  },                                                                                                                   // 13\n  run: function (_ref2) {                                                                                              // 15\n    var doc = _ref2.doc;                                                                                               // 15\n    return ResponseTemplates.insert(doc);                                                                              // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 7\nvar edit = new ValidatedMethod({                                                                                       // 21\n  name: 'responseTemplates.edit',                                                                                      // 22\n  mixins: [ErxesMixin],                                                                                                // 23\n  validate: function (_ref3) {                                                                                         // 25\n    var id = _ref3.id,                                                                                                 // 25\n        doc = _ref3.doc;                                                                                               // 25\n    check(id, String);                                                                                                 // 26\n    check(doc, ResponseTemplates.schema);                                                                              // 27\n  },                                                                                                                   // 28\n  run: function (_ref4) {                                                                                              // 30\n    var id = _ref4.id,                                                                                                 // 30\n        doc = _ref4.doc;                                                                                               // 30\n    return ResponseTemplates.update(id, {                                                                              // 31\n      $set: doc                                                                                                        // 31\n    });                                                                                                                // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 21\nvar remove = new ValidatedMethod({                                                                                     // 36\n  name: 'responseTemplates.remove',                                                                                    // 37\n  mixins: [ErxesMixin],                                                                                                // 38\n  validate: function (id) {                                                                                            // 40\n    check(id, String);                                                                                                 // 41\n  },                                                                                                                   // 42\n  run: function (id) {                                                                                                 // 44\n    return ResponseTemplates.remove({                                                                                  // 45\n      _id: id                                                                                                          // 45\n    });                                                                                                                // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"responseTemplates.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"meteor/mongo\",\"meteor/aldeed:simple-schema\",\"/imports/api/brands/brands\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/responseTemplates/responseTemplates.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  ResponseTemplates: function () {                                                                                     // 1\n    return ResponseTemplates;                                                                                          // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Brands = void 0;                                                                                                   // 1\nmodule.importSync(\"/imports/api/brands/brands\", {                                                                      // 1\n  Brands: function (v) {                                                                                               // 1\n    Brands = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\n// Response template collection                                                                                        // 5\nvar Collection = function (_Mongo$Collection) {                                                                        //\n  (0, _inherits3.default)(Collection, _Mongo$Collection);                                                              //\n                                                                                                                       //\n  function Collection() {                                                                                              //\n    (0, _classCallCheck3.default)(this, Collection);                                                                   //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  return Collection;                                                                                                   //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar ResponseTemplates = new Collection('response_templates');                                                          // 8\n// collection helpers                                                                                                  // 10\nResponseTemplates.helpers({                                                                                            // 11\n  brand: function () {                                                                                                 // 12\n    return Brands.findOne(this.brandId);                                                                               // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 11\nResponseTemplates.schema = new SimpleSchema({                                                                          // 17\n  brandId: {                                                                                                           // 18\n    type: String                                                                                                       // 19\n  },                                                                                                                   // 18\n  name: {                                                                                                              // 21\n    type: String                                                                                                       // 22\n  },                                                                                                                   // 21\n  content: {                                                                                                           // 24\n    type: String                                                                                                       // 25\n  },                                                                                                                   // 24\n  files: {                                                                                                             // 27\n    type: [new SimpleSchema({                                                                                          // 28\n      url: {                                                                                                           // 30\n        type: String                                                                                                   // 30\n      },                                                                                                               // 30\n      type: {                                                                                                          // 31\n        type: String,                                                                                                  // 31\n        optional: true                                                                                                 // 31\n      },                                                                                                               // 31\n      name: {                                                                                                          // 32\n        type: String,                                                                                                  // 32\n        optional: true                                                                                                 // 32\n      },                                                                                                               // 32\n      size: {                                                                                                          // 33\n        type: Number,                                                                                                  // 33\n        optional: true                                                                                                 // 33\n      }                                                                                                                // 33\n    })],                                                                                                               // 29\n    optional: true                                                                                                     // 36\n  }                                                                                                                    // 27\n});                                                                                                                    // 17\nResponseTemplates.attachSchema(ResponseTemplates.schema);                                                              // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"tags\":{\"server\":{\"api.js\":[\"meteor/check\",\"meteor/meteor\",\"meteor/mongo\",\"meteor/underscore\",\"../constants\",\"../tags\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/tags/server/api.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  tagObject: function () {                                                                                             // 1\n    return tagObject;                                                                                                  // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar check = void 0,                                                                                                    // 1\n    Match = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  Match: function (v) {                                                                                                // 1\n    Match = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar TAG_TYPES = void 0;                                                                                                // 1\nmodule.importSync(\"../constants\", {                                                                                    // 1\n  TAG_TYPES: function (v) {                                                                                            // 1\n    TAG_TYPES = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Tags = void 0;                                                                                                     // 1\nmodule.importSync(\"../tags\", {                                                                                         // 1\n  Tags: function (v) {                                                                                                 // 1\n    Tags = v;                                                                                                          // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\n                                                                                                                       //\nfunction tagObject(_ref) {                                                                                             // 8\n  var tagIds = _ref.tagIds,                                                                                            // 8\n      objectIds = _ref.objectIds,                                                                                      // 8\n      collection = _ref.collection;                                                                                    // 8\n  check(collection, Mongo.Collection);                                                                                 // 9\n  check(collection.TAG_TYPE, Match.Where(function (t) {                                                                // 10\n    check(t, String);                                                                                                  // 13\n    return TAG_TYPES.ALL_LIST.indexOf(t) > -1;                                                                         // 14\n  }));                                                                                                                 // 15\n  check(tagIds, [String]);                                                                                             // 18\n  check(objectIds, [String]);                                                                                          // 19\n  var type = collection.TAG_TYPE;                                                                                      // 21\n                                                                                                                       //\n  if (Tags.find({                                                                                                      // 23\n    _id: {                                                                                                             // 23\n      $in: tagIds                                                                                                      // 23\n    },                                                                                                                 // 23\n    type: type                                                                                                         // 23\n  }).count() !== tagIds.length) {                                                                                      // 23\n    throw new Meteor.Error('tags.tagObject.notFound', 'Tag not found.');                                               // 24\n  }                                                                                                                    // 25\n                                                                                                                       //\n  var objects = collection.find({                                                                                      // 27\n    _id: {                                                                                                             // 27\n      $in: objectIds                                                                                                   // 27\n    }                                                                                                                  // 27\n  }, {                                                                                                                 // 27\n    fields: {                                                                                                          // 27\n      tagIds: 1                                                                                                        // 27\n    }                                                                                                                  // 27\n  });                                                                                                                  // 27\n  var removeIds = [];                                                                                                  // 29\n  objects.forEach(function (obj) {                                                                                     // 31\n    removeIds.push(obj.tagIds || []);                                                                                  // 32\n  });                                                                                                                  // 33\n  removeIds = _.uniq(_.flatten(removeIds));                                                                            // 35\n  Tags.update({                                                                                                        // 37\n    _id: {                                                                                                             // 37\n      $in: removeIds                                                                                                   // 37\n    }                                                                                                                  // 37\n  }, {                                                                                                                 // 37\n    $inc: {                                                                                                            // 37\n      objectCount: -1                                                                                                  // 37\n    }                                                                                                                  // 37\n  }, {                                                                                                                 // 37\n    multi: true                                                                                                        // 37\n  });                                                                                                                  // 37\n  collection.update({                                                                                                  // 39\n    _id: {                                                                                                             // 39\n      $in: objectIds                                                                                                   // 39\n    }                                                                                                                  // 39\n  }, {                                                                                                                 // 39\n    $set: {                                                                                                            // 39\n      tagIds: tagIds                                                                                                   // 39\n    }                                                                                                                  // 39\n  }, {                                                                                                                 // 39\n    multi: true                                                                                                        // 39\n  });                                                                                                                  // 39\n  Tags.update({                                                                                                        // 41\n    _id: {                                                                                                             // 41\n      $in: tagIds                                                                                                      // 41\n    }                                                                                                                  // 41\n  }, {                                                                                                                 // 41\n    $inc: {                                                                                                            // 41\n      objectCount: 1                                                                                                   // 41\n    }                                                                                                                  // 41\n  }, {                                                                                                                 // 41\n    multi: true                                                                                                        // 41\n  });                                                                                                                  // 41\n}                                                                                                                      // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/customers/customers\",\"/imports/api/conversations/conversations\",\"/imports/api/engage/engage\",\"/imports/api/utils\",\"../tags\",\"../constants\",\"./api\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/tags/server/methods.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  add: function () {                                                                                                   // 1\n    return add;                                                                                                        // 1\n  },                                                                                                                   // 1\n  edit: function () {                                                                                                  // 1\n    return edit;                                                                                                       // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  },                                                                                                                   // 1\n  tag: function () {                                                                                                   // 1\n    return tag;                                                                                                        // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Conversations = void 0;                                                                                            // 1\nmodule.importSync(\"/imports/api/conversations/conversations\", {                                                        // 1\n  Conversations: function (v) {                                                                                        // 1\n    Conversations = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Messages = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/engage/engage\", {                                                                      // 1\n  Messages: function (v) {                                                                                             // 1\n    Messages = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Tags = void 0,                                                                                                     // 1\n    FormSchema = void 0,                                                                                               // 1\n    TagItemSchema = void 0;                                                                                            // 1\nmodule.importSync(\"../tags\", {                                                                                         // 1\n  Tags: function (v) {                                                                                                 // 1\n    Tags = v;                                                                                                          // 1\n  },                                                                                                                   // 1\n  FormSchema: function (v) {                                                                                           // 1\n    FormSchema = v;                                                                                                    // 1\n  },                                                                                                                   // 1\n  TagItemSchema: function (v) {                                                                                        // 1\n    TagItemSchema = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar TAG_TYPES = void 0;                                                                                                // 1\nmodule.importSync(\"../constants\", {                                                                                    // 1\n  TAG_TYPES: function (v) {                                                                                            // 1\n    TAG_TYPES = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar tagObject = void 0;                                                                                                // 1\nmodule.importSync(\"./api\", {                                                                                           // 1\n  tagObject: function (v) {                                                                                            // 1\n    tagObject = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 9);                                                                                                                 // 1\nvar add = new ValidatedMethod({                                                                                        // 12\n  name: 'tags.add',                                                                                                    // 13\n  validate: FormSchema.validator(),                                                                                    // 14\n  mixins: [ErxesMixin],                                                                                                // 15\n  run: function (doc) {                                                                                                // 17\n    return Tags.insert(doc);                                                                                           // 18\n  }                                                                                                                    // 19\n});                                                                                                                    // 12\nvar edit = new ValidatedMethod({                                                                                       // 22\n  name: 'tags.edit',                                                                                                   // 23\n  mixins: [ErxesMixin],                                                                                                // 24\n  validate: function (_ref) {                                                                                          // 26\n    var id = _ref.id,                                                                                                  // 26\n        doc = _ref.doc;                                                                                                // 26\n    check(id, String);                                                                                                 // 27\n    check(doc, FormSchema);                                                                                            // 28\n  },                                                                                                                   // 29\n  run: function (_ref2) {                                                                                              // 31\n    var id = _ref2.id,                                                                                                 // 31\n        doc = _ref2.doc;                                                                                               // 31\n                                                                                                                       //\n    if (!Tags.findOne(id)) {                                                                                           // 32\n      throw new Meteor.Error('tags.edit.notFound', 'Tag not found');                                                   // 33\n    }                                                                                                                  // 34\n                                                                                                                       //\n    return Tags.update(id, {                                                                                           // 36\n      $set: doc                                                                                                        // 36\n    });                                                                                                                // 36\n  }                                                                                                                    // 37\n});                                                                                                                    // 22\nvar remove = new ValidatedMethod({                                                                                     // 40\n  name: 'tags.remove',                                                                                                 // 41\n  mixins: [ErxesMixin],                                                                                                // 42\n  validate: function (ids) {                                                                                           // 44\n    check(ids, [String]);                                                                                              // 45\n  },                                                                                                                   // 46\n  run: function (ids) {                                                                                                // 48\n    var tagCount = Tags.find({                                                                                         // 49\n      _id: {                                                                                                           // 49\n        $in: ids                                                                                                       // 49\n      }                                                                                                                // 49\n    }).count();                                                                                                        // 49\n                                                                                                                       //\n    if (tagCount !== ids.length) {                                                                                     // 51\n      throw new Meteor.Error('tags.remove.notFound', 'Tag not found');                                                 // 52\n    }                                                                                                                  // 53\n                                                                                                                       //\n    var count = 0;                                                                                                     // 55\n    count += Customers.find({                                                                                          // 57\n      tagIds: {                                                                                                        // 57\n        $in: ids                                                                                                       // 57\n      }                                                                                                                // 57\n    }).count();                                                                                                        // 57\n    count += Conversations.find({                                                                                      // 58\n      tagIds: {                                                                                                        // 58\n        $in: ids                                                                                                       // 58\n      }                                                                                                                // 58\n    }).count();                                                                                                        // 58\n    count += Messages.find({                                                                                           // 59\n      tagIds: {                                                                                                        // 59\n        $in: ids                                                                                                       // 59\n      }                                                                                                                // 59\n    }).count(); // can't remove a tag with tagged objects                                                              // 59\n                                                                                                                       //\n    if (count > 0) {                                                                                                   // 62\n      throw new Meteor.Error('tags.remove.restricted', \"Can't remove a tag with tagged object(s)\");                    // 63\n    }                                                                                                                  // 64\n                                                                                                                       //\n    return Tags.remove({                                                                                               // 66\n      _id: {                                                                                                           // 66\n        $in: ids                                                                                                       // 66\n      }                                                                                                                // 66\n    });                                                                                                                // 66\n  }                                                                                                                    // 67\n});                                                                                                                    // 40\nvar tag = new ValidatedMethod({                                                                                        // 71\n  name: 'tags.tag',                                                                                                    // 72\n  mixins: [ErxesMixin],                                                                                                // 73\n  validate: TagItemSchema.validator(),                                                                                 // 74\n  run: function (_ref3) {                                                                                              // 76\n    var type = _ref3.type,                                                                                             // 76\n        targetIds = _ref3.targetIds,                                                                                   // 76\n        tagIds = _ref3.tagIds;                                                                                         // 76\n    var collection = Conversations;                                                                                    // 77\n                                                                                                                       //\n    if (type === TAG_TYPES.CUSTOMER) {                                                                                 // 79\n      collection = Customers;                                                                                          // 80\n    }                                                                                                                  // 81\n                                                                                                                       //\n    if (type === TAG_TYPES.ENGAGE_MESSAGE) {                                                                           // 83\n      collection = Messages;                                                                                           // 84\n    }                                                                                                                  // 85\n                                                                                                                       //\n    tagObject({                                                                                                        // 87\n      tagIds: tagIds,                                                                                                  // 88\n      objectIds: targetIds,                                                                                            // 89\n      collection: collection                                                                                           // 90\n    });                                                                                                                // 87\n  }                                                                                                                    // 92\n});                                                                                                                    // 71\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/tags/constants.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  TAG_TYPES: function () {                                                                                             // 1\n    return TAG_TYPES;                                                                                                  // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar TAG_TYPES = {                                                                                                      // 1\n  CONVERSATION: 'conversation',                                                                                        // 2\n  CUSTOMER: 'customer',                                                                                                // 3\n  ENGAGE_MESSAGE: 'engageMessage',                                                                                     // 4\n  ALL_LIST: ['conversation', 'customer', 'engageMessage']                                                              // 5\n};                                                                                                                     // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tags.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"meteor/mongo\",\"meteor/meteor\",\"meteor/random\",\"meteor/dburles:factory\",\"meteor/aldeed:simple-schema\",\"./constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/tags/tags.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Tags: function () {                                                                                                  // 1\n    return Tags;                                                                                                       // 1\n  },                                                                                                                   // 1\n  FormSchema: function () {                                                                                            // 1\n    return FormSchema;                                                                                                 // 1\n  },                                                                                                                   // 1\n  TagItemSchema: function () {                                                                                         // 1\n    return TagItemSchema;                                                                                              // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/random\", {                                                                                   // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Factory = void 0;                                                                                                  // 1\nmodule.importSync(\"meteor/dburles:factory\", {                                                                          // 1\n  Factory: function (v) {                                                                                              // 1\n    Factory = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar TAG_TYPES = void 0;                                                                                                // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  TAG_TYPES: function (v) {                                                                                            // 1\n    TAG_TYPES = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\n                                                                                                                       //\nvar TagsCollection = function (_Mongo$Collection) {                                                                    //\n  (0, _inherits3.default)(TagsCollection, _Mongo$Collection);                                                          //\n                                                                                                                       //\n  function TagsCollection() {                                                                                          //\n    (0, _classCallCheck3.default)(this, TagsCollection);                                                               //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  TagsCollection.prototype.insert = function () {                                                                      //\n    function insert(doc, callback) {                                                                                   //\n      // extend doc with auto values                                                                                   // 10\n      var tag = Object.assign({                                                                                        // 11\n        createdAt: new Date(),                                                                                         // 13\n        objectCount: 0                                                                                                 // 14\n      }, doc);                                                                                                         // 12\n                                                                                                                       //\n      if (!this.validateUniqueness(null, tag)) {                                                                       // 19\n        throw new Meteor.Error('tags.insert.restricted', 'Tag duplicated');                                            // 20\n      }                                                                                                                // 21\n                                                                                                                       //\n      return _Mongo$Collection.prototype.insert.call(this, tag, callback);                                             // 23\n    }                                                                                                                  // 24\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  TagsCollection.prototype.update = function () {                                                                      //\n    function update(selector, modifier) {                                                                              //\n      var set = modifier.$set || {};                                                                                   // 27\n                                                                                                                       //\n      if (!this.validateUniqueness(selector, set)) {                                                                   // 29\n        throw new Meteor.Error('tags.update.restricted', 'Tag duplicated');                                            // 30\n      }                                                                                                                // 31\n                                                                                                                       //\n      return _Mongo$Collection.prototype.update.call(this, selector, modifier);                                        // 33\n    }                                                                                                                  // 34\n                                                                                                                       //\n    return update;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  TagsCollection.prototype.validateUniqueness = function () {                                                          //\n    function validateUniqueness(selector, data) {                                                                      //\n      var name = data.name,                                                                                            // 36\n          type = data.type;                                                                                            // 36\n      var filter = {                                                                                                   // 38\n        name: name,                                                                                                    // 38\n        type: type                                                                                                     // 38\n      };                                                                                                               // 38\n                                                                                                                       //\n      if (!name || !type) {                                                                                            // 40\n        return true;                                                                                                   // 41\n      } // can't update name & type same time more than one tags.                                                      // 42\n                                                                                                                       //\n                                                                                                                       //\n      if (selector && this.find(selector).count() > 1) {                                                               // 45\n        return false;                                                                                                  // 46\n      }                                                                                                                // 47\n                                                                                                                       //\n      var obj = selector && this.findOne(selector);                                                                    // 49\n                                                                                                                       //\n      if (obj) {                                                                                                       // 50\n        filter._id = {                                                                                                 // 51\n          $ne: obj._id                                                                                                 // 51\n        };                                                                                                             // 51\n      }                                                                                                                // 52\n                                                                                                                       //\n      if (this.findOne(filter)) {                                                                                      // 54\n        return false;                                                                                                  // 55\n      }                                                                                                                // 56\n                                                                                                                       //\n      return true;                                                                                                     // 58\n    }                                                                                                                  // 59\n                                                                                                                       //\n    return validateUniqueness;                                                                                         //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return TagsCollection;                                                                                               //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar Tags = new TagsCollection('tags');                                                                                 // 62\nTags.deny({                                                                                                            // 64\n  insert: function () {                                                                                                // 65\n    return true;                                                                                                       // 66\n  },                                                                                                                   // 67\n  update: function () {                                                                                                // 68\n    return true;                                                                                                       // 69\n  },                                                                                                                   // 70\n  remove: function () {                                                                                                // 71\n    return true;                                                                                                       // 72\n  }                                                                                                                    // 73\n});                                                                                                                    // 64\nvar FormSchema = new SimpleSchema({                                                                                    // 76\n  name: {                                                                                                              // 77\n    type: String                                                                                                       // 78\n  },                                                                                                                   // 77\n  type: {                                                                                                              // 80\n    type: String,                                                                                                      // 81\n    allowedValues: TAG_TYPES.ALL_LIST                                                                                  // 82\n  },                                                                                                                   // 80\n  colorCode: {                                                                                                         // 84\n    type: String                                                                                                       // 85\n  }                                                                                                                    // 84\n});                                                                                                                    // 76\nTags.schema = new SimpleSchema([FormSchema, {                                                                          // 89\n  createdAt: {                                                                                                         // 92\n    type: Date                                                                                                         // 93\n  },                                                                                                                   // 92\n  objectCount: {                                                                                                       // 95\n    type: Number                                                                                                       // 96\n  }                                                                                                                    // 95\n}]);                                                                                                                   // 91\nTags.attachSchema(Tags.schema); // helper for conversation, customer, engage message etc ...                           // 101\n                                                                                                                       //\nvar TagItemSchema = new SimpleSchema({                                                                                 // 104\n  type: {                                                                                                              // 105\n    type: String                                                                                                       // 106\n  },                                                                                                                   // 105\n  targetIds: {                                                                                                         // 108\n    type: [String],                                                                                                    // 109\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 110\n  },                                                                                                                   // 108\n  tagIds: {                                                                                                            // 112\n    type: [String],                                                                                                    // 113\n    regEx: SimpleSchema.RegEx.Id                                                                                       // 114\n  }                                                                                                                    // 112\n});                                                                                                                    // 104\nTags.publicFields = {                                                                                                  // 118\n  name: 1,                                                                                                             // 119\n  type: 1,                                                                                                             // 120\n  createdAt: 1,                                                                                                        // 121\n  colorCode: 1                                                                                                         // 122\n};                                                                                                                     // 118\nFactory.define('tag', Tags, {                                                                                          // 125\n  name: function () {                                                                                                  // 126\n    return Random.id();                                                                                                // 126\n  },                                                                                                                   // 126\n  type: function () {                                                                                                  // 127\n    return TAG_TYPES.CONVERSATION;                                                                                     // 127\n  },                                                                                                                   // 127\n  colorCode: function () {                                                                                             // 128\n    return '#000';                                                                                                     // 128\n  }                                                                                                                    // 128\n});                                                                                                                    // 125\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"meteor/mongo\",\"meteor/underscore\",\"meteor/aldeed:simple-schema\",\"./tags\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/tags/utils.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  TagsCollection: function () {                                                                                        // 1\n    return TagsCollection;                                                                                             // 1\n  },                                                                                                                   // 1\n  tagsHelper: function () {                                                                                            // 1\n    return tagsHelper;                                                                                                 // 1\n  },                                                                                                                   // 1\n  tagSchemaOptions: function () {                                                                                      // 1\n    return tagSchemaOptions;                                                                                           // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Tags = void 0;                                                                                                     // 1\nmodule.importSync(\"./tags\", {                                                                                          // 1\n  Tags: function (v) {                                                                                                 // 1\n    Tags = v;                                                                                                          // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\n                                                                                                                       //\nvar TagsCollection = function (_Mongo$Collection) {                                                                    //\n  (0, _inherits3.default)(TagsCollection, _Mongo$Collection);                                                          //\n                                                                                                                       //\n  function TagsCollection() {                                                                                          //\n    (0, _classCallCheck3.default)(this, TagsCollection);                                                               //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  TagsCollection.prototype.remove = function () {                                                                      //\n    function remove(selector, callback) {                                                                              //\n      var objects = this.find(selector).fetch();                                                                       // 8\n                                                                                                                       //\n      var result = _Mongo$Collection.prototype.remove.call(this, selector, callback); // remove tag items that using removing objects\n                                                                                                                       //\n                                                                                                                       //\n      var removeIds = [];                                                                                              // 12\n      objects.forEach(function (obj) {                                                                                 // 14\n        removeIds.push(obj.tagIds || []);                                                                              // 15\n      });                                                                                                              // 16\n      removeIds = _.uniq(_.flatten(removeIds));                                                                        // 18\n      Tags.update({                                                                                                    // 19\n        _id: {                                                                                                         // 19\n          $in: removeIds                                                                                               // 19\n        }                                                                                                              // 19\n      }, {                                                                                                             // 19\n        $inc: {                                                                                                        // 19\n          objectCount: -1                                                                                              // 19\n        }                                                                                                              // 19\n      });                                                                                                              // 19\n      return result;                                                                                                   // 21\n    }                                                                                                                  // 22\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return TagsCollection;                                                                                               //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar tagsHelper = {                                                                                                     // 25\n  tags: function () {                                                                                                  // 26\n    return Tags.find({                                                                                                 // 27\n      _id: {                                                                                                           // 27\n        $in: this.tagIds || []                                                                                         // 27\n      }                                                                                                                // 27\n    }).fetch();                                                                                                        // 27\n  }                                                                                                                    // 28\n};                                                                                                                     // 25\n                                                                                                                       //\nvar tagSchemaOptions = function () {                                                                                   // 31\n  return {                                                                                                             // 31\n    tagIds: {                                                                                                          // 32\n      type: [String],                                                                                                  // 33\n      regEx: SimpleSchema.RegEx.Id,                                                                                    // 34\n      optional: true                                                                                                   // 35\n    }                                                                                                                  // 32\n  };                                                                                                                   // 31\n};                                                                                                                     // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"users\":{\"server\":{\"config.js\":[\"meteor/meteor\",\"meteor/accounts-base\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/users/server/config.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Accounts = void 0;                                                                                                 // 1\nmodule.importSync(\"meteor/accounts-base\", {                                                                            // 1\n  Accounts: function (v) {                                                                                             // 1\n    Accounts = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nAccounts.emailTemplates.siteName = Meteor.settings.company.name;                                                       // 4\nAccounts.emailTemplates.from = Meteor.settings.company.noReplyEmail;                                                   // 5\n                                                                                                                       //\nAccounts.urls.resetPassword = function (token) {                                                                       // 7\n  return Meteor.absoluteUrl(\"reset-password/\" + token);                                                                // 7\n};                                                                                                                     // 7\n                                                                                                                       //\nMeteor.startup(function () {                                                                                           // 9\n  if (Meteor.users.find().count() > 0) {                                                                               // 10\n    Accounts.config({                                                                                                  // 11\n      forbidClientAccountCreation: true                                                                                // 12\n    });                                                                                                                // 11\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"hooks.js\":[\"meteor/meteor\",\"meteor/accounts-base\",\"/imports/api/customers/customers\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/users/server/hooks.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Accounts = void 0;                                                                                                 // 1\nmodule.importSync(\"meteor/accounts-base\", {                                                                            // 1\n  Accounts: function (v) {                                                                                             // 1\n    Accounts = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nAccounts.onCreateUser(function (options, doc) {                                                                        // 5\n  if (Meteor.users.find().count() > 0 && !options.invite) {                                                            // 6\n    throw new Meteor.Error(403, 'Can not register');                                                                   // 7\n  }                                                                                                                    // 8\n                                                                                                                       //\n  var user = Object.assign({                                                                                           // 10\n    details: options.details || {}                                                                                     // 10\n  }, doc);                                                                                                             // 10\n                                                                                                                       //\n  if (Meteor.users.find().count() === 0) {                                                                             // 12\n    user.isOwner = true;                                                                                               // 13\n  } // For various user specific configurations                                                                        // 14\n                                                                                                                       //\n                                                                                                                       //\n  user.configs = {}; // Save customer fields selection config                                                          // 17\n                                                                                                                       //\n  user.configs.customerFields = Customers.getPublicFields();                                                           // 20\n  return user;                                                                                                         // 22\n}); /**                                                                                                                // 23\n     * Validate email address                                                                                          //\n     */                                                                                                                //\nAccounts.validateNewUser(function (user) {                                                                             // 28\n  var email = user.emails[0].address;                                                                                  // 29\n                                                                                                                       //\n  if (/^[A-Z0-9'.1234z_%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {                                                 // 31\n    return true;                                                                                                       // 32\n  }                                                                                                                    // 33\n                                                                                                                       //\n  throw new Meteor.Error('invalid-email', 'Please enter valid email');                                                 // 35\n});                                                                                                                    // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods.js\":[\"meteor/meteor\",\"meteor/mdg:validated-method\",\"meteor/check\",\"meteor/accounts-base\",\"/imports/api/server/utils\",\"/imports/api/utils\",\"/imports/api/channels/channels\",\"/imports/api/customers/customers\",\"../schemas\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/users/server/methods.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  invite: function () {                                                                                                // 1\n    return invite;                                                                                                     // 1\n  },                                                                                                                   // 1\n  edit: function () {                                                                                                  // 1\n    return edit;                                                                                                       // 1\n  },                                                                                                                   // 1\n  editProfile: function () {                                                                                           // 1\n    return editProfile;                                                                                                // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  },                                                                                                                   // 1\n  configEmailSignature: function () {                                                                                  // 1\n    return configEmailSignature;                                                                                       // 1\n  },                                                                                                                   // 1\n  configGetNotificationByEmail: function () {                                                                          // 1\n    return configGetNotificationByEmail;                                                                               // 1\n  },                                                                                                                   // 1\n  configCustomerFields: function () {                                                                                  // 1\n    return configCustomerFields;                                                                                       // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Accounts = void 0;                                                                                                 // 1\nmodule.importSync(\"meteor/accounts-base\", {                                                                            // 1\n  Accounts: function (v) {                                                                                             // 1\n    Accounts = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar sendEmail = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/server/utils\", {                                                                       // 1\n  sendEmail: function (v) {                                                                                            // 1\n    sendEmail = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar Channels = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/channels/channels\", {                                                                  // 1\n  Channels: function (v) {                                                                                             // 1\n    Channels = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar Customers = void 0;                                                                                                // 1\nmodule.importSync(\"/imports/api/customers/customers\", {                                                                // 1\n  Customers: function (v) {                                                                                            // 1\n    Customers = v;                                                                                                     // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar CreateInvitationSchema = void 0,                                                                                   // 1\n    UpdateInvitationSchema = void 0,                                                                                   // 1\n    ProfileSchema = void 0,                                                                                            // 1\n    EmailSignaturesSchema = void 0;                                                                                    // 1\nmodule.importSync(\"../schemas\", {                                                                                      // 1\n  CreateInvitationSchema: function (v) {                                                                               // 1\n    CreateInvitationSchema = v;                                                                                        // 1\n  },                                                                                                                   // 1\n  UpdateInvitationSchema: function (v) {                                                                               // 1\n    UpdateInvitationSchema = v;                                                                                        // 1\n  },                                                                                                                   // 1\n  ProfileSchema: function (v) {                                                                                        // 1\n    ProfileSchema = v;                                                                                                 // 1\n  },                                                                                                                   // 1\n  EmailSignaturesSchema: function (v) {                                                                                // 1\n    EmailSignaturesSchema = v;                                                                                         // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\n                                                                                                                       //\n// ***************** helpers ******************* //                                                                    // 16\n// update user's channels                                                                                              // 18\nvar updateUserChannels = function (channelIds, userId) {                                                               // 19\n  // remove from previous channels                                                                                     // 20\n  Channels.update({                                                                                                    // 21\n    memberIds: {                                                                                                       // 22\n      $in: [userId]                                                                                                    // 22\n    }                                                                                                                  // 22\n  }, {                                                                                                                 // 22\n    $pull: {                                                                                                           // 23\n      memberIds: userId                                                                                                // 23\n    }                                                                                                                  // 23\n  }, {                                                                                                                 // 23\n    multi: true                                                                                                        // 24\n  }); // add to given channels                                                                                         // 24\n                                                                                                                       //\n  Channels.update({                                                                                                    // 28\n    _id: {                                                                                                             // 28\n      $in: channelIds                                                                                                  // 28\n    }                                                                                                                  // 28\n  }, {                                                                                                                 // 28\n    $push: {                                                                                                           // 28\n      memberIds: userId                                                                                                // 28\n    }                                                                                                                  // 28\n  }, {                                                                                                                 // 28\n    multi: true                                                                                                        // 28\n  });                                                                                                                  // 28\n}; // update user's common infos                                                                                       // 29\n                                                                                                                       //\n                                                                                                                       //\nvar updateUserCommonInfos = function (userId, doc) {                                                                   // 32\n  var user = Meteor.users.findOne({                                                                                    // 33\n    _id: {                                                                                                             // 34\n      $ne: userId                                                                                                      // 34\n    },                                                                                                                 // 34\n    'details.twitterUsername': doc.twitterUsername                                                                     // 35\n  }); // check twitterUsername duplication                                                                             // 33\n                                                                                                                       //\n  if (doc.twitterUsername && user) {                                                                                   // 39\n    throw new Meteor.Error('users.updateInfo.wrongTwitterUsername', 'Duplicated twitter username');                    // 40\n  }                                                                                                                    // 41\n                                                                                                                       //\n  Meteor.users.update(userId, {                                                                                        // 43\n    $set: {                                                                                                            // 44\n      username: doc.username,                                                                                          // 45\n      'details.twitterUsername': doc.twitterUsername,                                                                  // 46\n      'details.avatar': doc.avatar,                                                                                    // 47\n      'details.fullName': doc.fullName,                                                                                // 48\n      'details.position': doc.position,                                                                                // 49\n      'emails.0.address': doc.email                                                                                    // 50\n    }                                                                                                                  // 44\n  });                                                                                                                  // 43\n};                                                                                                                     // 53\n                                                                                                                       //\nvar checkPasswordConfirmation = function (password, passwordConfirmation) {                                            // 55\n  if (password !== passwordConfirmation) {                                                                             // 56\n    throw new Meteor.Error('users.updateInfo.WrongPasswordConfirmation', 'Wrong password confirmation');               // 57\n  }                                                                                                                    // 61\n}; // ***************** methods ******************* //                                                                 // 62\n// create user and invite to given channels                                                                            // 66\n                                                                                                                       //\n                                                                                                                       //\nvar invite = new ValidatedMethod({                                                                                     // 67\n  name: 'users.add',                                                                                                   // 68\n  mixins: [ErxesMixin],                                                                                                // 70\n  validate: function (_ref) {                                                                                          // 72\n    var doc = _ref.doc;                                                                                                // 72\n    check(doc, CreateInvitationSchema);                                                                                // 73\n  },                                                                                                                   // 74\n  run: function (_ref2) {                                                                                              // 76\n    var doc = _ref2.doc;                                                                                               // 76\n    var username = doc.username,                                                                                       // 76\n        twitterUsername = doc.twitterUsername,                                                                         // 76\n        avatar = doc.avatar,                                                                                           // 76\n        position = doc.position,                                                                                       // 76\n        fullName = doc.fullName,                                                                                       // 76\n        email = doc.email,                                                                                             // 76\n        role = doc.role,                                                                                               // 76\n        channelIds = doc.channelIds,                                                                                   // 76\n        password = doc.password,                                                                                       // 76\n        passwordConfirmation = doc.passwordConfirmation;                                                               // 76\n    checkPasswordConfirmation(password, passwordConfirmation); // create user with given email and role                // 90\n                                                                                                                       //\n    var userId = Accounts.createUser({                                                                                 // 93\n      email: email,                                                                                                    // 94\n      invite: true,                                                                                                    // 95\n      details: {                                                                                                       // 96\n        role: role                                                                                                     // 96\n      }                                                                                                                // 96\n    }); // set new password                                                                                            // 93\n                                                                                                                       //\n    Accounts.setPassword(userId, password); // set profile infos                                                       // 100\n                                                                                                                       //\n    updateUserCommonInfos(userId, {                                                                                    // 103\n      twitterUsername: twitterUsername,                                                                                // 104\n      username: username,                                                                                              // 105\n      avatar: avatar,                                                                                                  // 106\n      fullName: fullName,                                                                                              // 107\n      position: position,                                                                                              // 108\n      email: email                                                                                                     // 109\n    }); // add new user to channels                                                                                    // 103\n                                                                                                                       //\n    updateUserChannels(channelIds, userId); // send email                                                              // 113\n                                                                                                                       //\n    sendEmail({                                                                                                        // 116\n      to: email,                                                                                                       // 117\n      subject: 'Invitation info',                                                                                      // 118\n      template: {                                                                                                      // 119\n        name: 'invitation',                                                                                            // 120\n        data: {                                                                                                        // 121\n          username: username,                                                                                          // 122\n          password: password                                                                                           // 123\n        }                                                                                                              // 121\n      }                                                                                                                // 119\n    });                                                                                                                // 116\n  }                                                                                                                    // 127\n});                                                                                                                    // 67\nvar edit = new ValidatedMethod({                                                                                       // 131\n  name: 'users.edit',                                                                                                  // 132\n  mixins: [ErxesMixin],                                                                                                // 134\n  validate: function (_ref3) {                                                                                         // 136\n    var id = _ref3.id,                                                                                                 // 136\n        doc = _ref3.doc;                                                                                               // 136\n    check(id, String); // check doc                                                                                    // 137\n                                                                                                                       //\n    check(doc, UpdateInvitationSchema);                                                                                // 140\n  },                                                                                                                   // 141\n  run: function (_ref4) {                                                                                              // 143\n    var id = _ref4.id,                                                                                                 // 143\n        doc = _ref4.doc;                                                                                               // 143\n    var twitterUsername = doc.twitterUsername,                                                                         // 143\n        position = doc.position,                                                                                       // 143\n        username = doc.username,                                                                                       // 143\n        avatar = doc.avatar,                                                                                           // 143\n        fullName = doc.fullName,                                                                                       // 143\n        email = doc.email,                                                                                             // 143\n        role = doc.role,                                                                                               // 143\n        channelIds = doc.channelIds,                                                                                   // 143\n        password = doc.password,                                                                                       // 143\n        passwordConfirmation = doc.passwordConfirmation; // update user channels channels                              // 143\n                                                                                                                       //\n    updateUserChannels(channelIds, id);                                                                                // 158\n    var user = Meteor.users.findOne(id); // change password                                                            // 160\n                                                                                                                       //\n    if (doc.password) {                                                                                                // 163\n      checkPasswordConfirmation(password, passwordConfirmation); // set new password                                   // 164\n                                                                                                                       //\n      Accounts.setPassword(id, password);                                                                              // 167\n    } // if user is not owner then update profile infos                                                                // 168\n                                                                                                                       //\n                                                                                                                       //\n    if (!user.isOwner) {                                                                                               // 171\n      updateUserCommonInfos(id, {                                                                                      // 172\n        username: username,                                                                                            // 173\n        twitterUsername: twitterUsername,                                                                              // 174\n        avatar: avatar,                                                                                                // 175\n        position: position,                                                                                            // 176\n        fullName: fullName,                                                                                            // 177\n        email: email                                                                                                   // 178\n      }); // update role                                                                                               // 172\n                                                                                                                       //\n      Meteor.users.update(id, {                                                                                        // 182\n        $set: {                                                                                                        // 182\n          'details.role': role                                                                                         // 182\n        }                                                                                                              // 182\n      });                                                                                                              // 182\n    }                                                                                                                  // 183\n  }                                                                                                                    // 184\n});                                                                                                                    // 131\nvar editProfile = new ValidatedMethod({                                                                                // 188\n  name: 'users.editProfile',                                                                                           // 189\n  mixins: [ErxesMixin],                                                                                                // 190\n  validate: ProfileSchema.validator(),                                                                                 // 191\n  run: function (doc) {                                                                                                // 193\n    // check password                                                                                                  // 194\n    var result = Accounts._checkPassword(Meteor.user(), doc.currentPassword);                                          // 195\n                                                                                                                       //\n    if (result.error) {                                                                                                // 197\n      throw new Meteor.Error('users.editProfile.invalidPassword', result.error.reason);                                // 198\n    }                                                                                                                  // 199\n                                                                                                                       //\n    return updateUserCommonInfos(this.userId, doc);                                                                    // 201\n  }                                                                                                                    // 202\n});                                                                                                                    // 188\nvar remove = new ValidatedMethod({                                                                                     // 206\n  name: 'users.remove',                                                                                                // 207\n  mixins: [ErxesMixin],                                                                                                // 208\n  validate: function (userId) {                                                                                        // 210\n    check(userId, String);                                                                                             // 211\n  },                                                                                                                   // 212\n  run: function (userId) {                                                                                             // 214\n    var user = Meteor.users.findOne(userId); // can not delete owner                                                   // 215\n                                                                                                                       //\n    if (user.isOwner) {                                                                                                // 218\n      throw new Meteor.Error('users.remove.canNotDeleteOwner', 'You cannot delete the owner.');                        // 219\n    } // if the user involved in any channel then can not delete this user                                             // 220\n                                                                                                                       //\n                                                                                                                       //\n    if (Channels.find({                                                                                                // 223\n      userId: userId                                                                                                   // 223\n    }).count() > 0) {                                                                                                  // 223\n      throw new Meteor.Error('users.remove.involvedInChannel', 'You cannot delete this user. This user belongs other channel.');\n    }                                                                                                                  // 228\n                                                                                                                       //\n    if (Channels.find({                                                                                                // 230\n      memberIds: {                                                                                                     // 230\n        $in: [userId]                                                                                                  // 230\n      }                                                                                                                // 230\n    }).count() > 0) {                                                                                                  // 230\n      throw new Meteor.Error('users.remove.involvedInChannel', 'You cannot delete this user. This user belongs other channel.');\n    } // if there is no problem then delete it                                                                         // 235\n                                                                                                                       //\n                                                                                                                       //\n    Meteor.users.remove({                                                                                              // 238\n      _id: userId                                                                                                      // 238\n    });                                                                                                                // 238\n  }                                                                                                                    // 239\n});                                                                                                                    // 206\nvar configEmailSignature = new ValidatedMethod({                                                                       // 242\n  name: 'users.configEmailSignature',                                                                                  // 243\n  mixins: [ErxesMixin],                                                                                                // 244\n  validate: EmailSignaturesSchema.validator(),                                                                         // 245\n  run: function (_ref5) {                                                                                              // 247\n    var signatures = _ref5.signatures;                                                                                 // 247\n    Meteor.users.update(this.userId, {                                                                                 // 248\n      $set: {                                                                                                          // 248\n        emailSignatures: signatures                                                                                    // 248\n      }                                                                                                                // 248\n    });                                                                                                                // 248\n  }                                                                                                                    // 249\n});                                                                                                                    // 242\nvar configGetNotificationByEmail = new ValidatedMethod({                                                               // 253\n  name: 'users.configGetNotificationByEmail',                                                                          // 254\n  mixins: [ErxesMixin],                                                                                                // 255\n  validate: function (_ref6) {                                                                                         // 257\n    var isAllowed = _ref6.isAllowed;                                                                                   // 257\n    check(isAllowed, Boolean);                                                                                         // 258\n  },                                                                                                                   // 259\n  run: function (_ref7) {                                                                                              // 261\n    var isAllowed = _ref7.isAllowed;                                                                                   // 261\n    Meteor.users.update(this.userId, {                                                                                 // 262\n      $set: {                                                                                                          // 263\n        'details.getNotificationByEmail': isAllowed                                                                    // 263\n      }                                                                                                                // 263\n    });                                                                                                                // 262\n  }                                                                                                                    // 265\n});                                                                                                                    // 253\nvar configCustomerFields = new ValidatedMethod({                                                                       // 272\n  name: 'users.configCustomerFields',                                                                                  // 273\n  mixins: [ErxesMixin],                                                                                                // 274\n  validate: function (_ref8) {                                                                                         // 276\n    var fields = _ref8.fields;                                                                                         // 276\n    check(fields, Array); // Check if the fields are correctly named                                                   // 277\n                                                                                                                       //\n    var schemaFields = Customers.getPublicFields();                                                                    // 280\n    fields.forEach(function (_ref9) {                                                                                  // 281\n      var key = _ref9.key;                                                                                             // 281\n      var isCorrectField = schemaFields.find(function (f) {                                                            // 282\n        return f.key === key;                                                                                          // 282\n      });                                                                                                              // 282\n                                                                                                                       //\n      if (!isCorrectField) {                                                                                           // 283\n        throw new Meteor.Error('users.configs.wrongCsutomerField', 'Wrong customer field declaration.');               // 284\n      }                                                                                                                // 288\n    });                                                                                                                // 289\n  },                                                                                                                   // 290\n  run: function (_ref10) {                                                                                             // 292\n    var fields = _ref10.fields;                                                                                        // 292\n    Meteor.users.update(this.userId, {                                                                                 // 293\n      $set: {                                                                                                          // 294\n        'configs.customerFields': fields                                                                               // 294\n      }                                                                                                                // 294\n    });                                                                                                                // 293\n  }                                                                                                                    // 296\n});                                                                                                                    // 272\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"publications.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/tmeasday:publish-counts\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/users/server/publications.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Match = void 0,                                                                                                    // 1\n    check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  Match: function (v) {                                                                                                // 1\n    Match = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Counts = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/tmeasday:publish-counts\", {                                                                  // 1\n  Counts: function (v) {                                                                                               // 1\n    Counts = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar publicFields = {                                                                                                   // 5\n  isOwner: 1,                                                                                                          // 6\n  username: 1,                                                                                                         // 7\n  details: 1,                                                                                                          // 8\n  emailSignatures: 1,                                                                                                  // 9\n  emails: 1,                                                                                                           // 10\n  configs: 1                                                                                                           // 11\n};                                                                                                                     // 5\nMeteor.publish(null, function () {                                                                                     // 14\n  function loggedInUserFields() {                                                                                      // 14\n    if (!this.userId) {                                                                                                // 15\n      return this.ready();                                                                                             // 16\n    }                                                                                                                  // 17\n                                                                                                                       //\n    return Meteor.users.find(this.userId, {                                                                            // 19\n      fields: publicFields                                                                                             // 19\n    });                                                                                                                // 19\n  }                                                                                                                    // 20\n                                                                                                                       //\n  return loggedInUserFields;                                                                                           // 14\n}());                                                                                                                  // 14\nMeteor.publish('users.list', function () {                                                                             // 22\n  function usersList(params) {                                                                                         // 22\n    check(params, {                                                                                                    // 23\n      ids: Match.Optional([String]),                                                                                   // 24\n      limit: Match.Optional(Number)                                                                                    // 25\n    });                                                                                                                // 23\n                                                                                                                       //\n    if (!this.userId) {                                                                                                // 28\n      return this.ready();                                                                                             // 29\n    }                                                                                                                  // 30\n                                                                                                                       //\n    Counts.publish(this, 'users.list.count', Meteor.users.find(), {                                                    // 32\n      noReady: true                                                                                                    // 33\n    });                                                                                                                // 32\n    return Meteor.users.find({}, {                                                                                     // 36\n      fields: publicFields,                                                                                            // 36\n      limit: params.limit                                                                                              // 36\n    });                                                                                                                // 36\n  }                                                                                                                    // 37\n                                                                                                                       //\n  return usersList;                                                                                                    // 22\n}());                                                                                                                  // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/users/constants.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  ROLES: function () {                                                                                                 // 1\n    return ROLES;                                                                                                      // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar ROLES = {                                                                                                          // 1\n  ADMIN: 'admin',                                                                                                      // 2\n  CONTRIBUTOR: 'contributor'                                                                                           // 3\n};                                                                                                                     // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schemas.js\":[\"meteor/aldeed:simple-schema\",\"./constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/users/schemas.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  CreateInvitationSchema: function () {                                                                                // 1\n    return CreateInvitationSchema;                                                                                     // 1\n  },                                                                                                                   // 1\n  UpdateInvitationSchema: function () {                                                                                // 1\n    return UpdateInvitationSchema;                                                                                     // 1\n  },                                                                                                                   // 1\n  ProfileSchema: function () {                                                                                         // 1\n    return ProfileSchema;                                                                                              // 1\n  },                                                                                                                   // 1\n  EmailSignaturesSchema: function () {                                                                                 // 1\n    return EmailSignaturesSchema;                                                                                      // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ROLES = void 0;                                                                                                    // 1\nmodule.importSync(\"./constants\", {                                                                                     // 1\n  ROLES: function (v) {                                                                                                // 1\n    ROLES = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n// user common infos schema                                                                                            // 4\nvar CommonInfo = {                                                                                                     // 5\n  avatar: {                                                                                                            // 6\n    type: String,                                                                                                      // 7\n    optional: true                                                                                                     // 8\n  },                                                                                                                   // 6\n  fullName: {                                                                                                          // 10\n    type: String                                                                                                       // 11\n  },                                                                                                                   // 10\n  position: {                                                                                                          // 13\n    type: String,                                                                                                      // 14\n    optional: true                                                                                                     // 15\n  },                                                                                                                   // 13\n  username: {                                                                                                          // 17\n    type: String                                                                                                       // 18\n  },                                                                                                                   // 17\n  twitterUsername: {                                                                                                   // 20\n    type: String                                                                                                       // 21\n  },                                                                                                                   // 20\n  email: {                                                                                                             // 23\n    type: String,                                                                                                      // 24\n    regEx: SimpleSchema.RegEx.Email                                                                                    // 25\n  }                                                                                                                    // 23\n}; // ************* invitation  ***************** //                                                                   // 5\n                                                                                                                       //\nvar InvitationCommon = Object.assign({}, CommonInfo, {                                                                 // 30\n  // owner, admin, contributor                                                                                         // 31\n  role: {                                                                                                              // 32\n    type: String,                                                                                                      // 33\n    allowedValues: [ROLES.ADMIN, ROLES.CONTRIBUTOR]                                                                    // 34\n  },                                                                                                                   // 32\n  // channels to invite                                                                                                // 37\n  channelIds: {                                                                                                        // 38\n    type: [String],                                                                                                    // 39\n    optional: true                                                                                                     // 40\n  }                                                                                                                    // 38\n});                                                                                                                    // 30\nvar CreateInvitationSchema = new SimpleSchema([InvitationCommon, {                                                     // 44\n  password: {                                                                                                          // 47\n    type: String                                                                                                       // 48\n  },                                                                                                                   // 47\n  passwordConfirmation: {                                                                                              // 50\n    type: String                                                                                                       // 51\n  }                                                                                                                    // 50\n}]);                                                                                                                   // 46\nvar UpdateInvitationSchema = new SimpleSchema([InvitationCommon, {                                                     // 56\n  password: {                                                                                                          // 59\n    type: String,                                                                                                      // 60\n    optional: true                                                                                                     // 61\n  },                                                                                                                   // 59\n  passwordConfirmation: {                                                                                              // 63\n    type: String,                                                                                                      // 64\n    optional: true                                                                                                     // 65\n  }                                                                                                                    // 63\n}]);                                                                                                                   // 58\nvar ProfileSchema = new SimpleSchema([CommonInfo, {                                                                    // 71\n  currentPassword: {                                                                                                   // 74\n    type: String,                                                                                                      // 75\n    optional: true                                                                                                     // 76\n  }                                                                                                                    // 74\n}]);                                                                                                                   // 73\nvar EmailSignaturesSchema = new SimpleSchema({                                                                         // 82\n  signatures: {                                                                                                        // 83\n    type: [new SimpleSchema({                                                                                          // 84\n      brandId: {                                                                                                       // 86\n        type: String,                                                                                                  // 87\n        regEx: SimpleSchema.RegEx.Id                                                                                   // 88\n      },                                                                                                               // 86\n      signature: {                                                                                                     // 90\n        type: String                                                                                                   // 91\n      }                                                                                                                // 90\n    })]                                                                                                                // 85\n  }                                                                                                                    // 83\n});                                                                                                                    // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"emailTemplates\":{\"emailTemplates.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"meteor/mongo\",\"meteor/aldeed:simple-schema\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/emailTemplates/emailTemplates.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  EmailTemplates: function () {                                                                                        // 1\n    return EmailTemplates;                                                                                             // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/mongo\", {                                                                                    // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar SimpleSchema = void 0;                                                                                             // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                                     // 1\n  SimpleSchema: function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\n// Email template collection                                                                                           // 4\nvar Collection = function (_Mongo$Collection) {                                                                        //\n  (0, _inherits3.default)(Collection, _Mongo$Collection);                                                              //\n                                                                                                                       //\n  function Collection() {                                                                                              //\n    (0, _classCallCheck3.default)(this, Collection);                                                                   //\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));                   //\n  }                                                                                                                    //\n                                                                                                                       //\n  return Collection;                                                                                                   //\n}(Mongo.Collection);                                                                                                   //\n                                                                                                                       //\nvar EmailTemplates = new Collection('email_templates');                                                                // 7\nEmailTemplates.schema = new SimpleSchema({                                                                             // 9\n  name: {                                                                                                              // 10\n    type: String                                                                                                       // 11\n  },                                                                                                                   // 10\n  content: {                                                                                                           // 13\n    type: String                                                                                                       // 14\n  }                                                                                                                    // 13\n});                                                                                                                    // 9\nEmailTemplates.attachSchema(EmailTemplates.schema);                                                                    // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods.js\":[\"meteor/check\",\"meteor/mdg:validated-method\",\"/imports/api/utils\",\"./emailTemplates\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/emailTemplates/methods.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  add: function () {                                                                                                   // 1\n    return add;                                                                                                        // 1\n  },                                                                                                                   // 1\n  edit: function () {                                                                                                  // 1\n    return edit;                                                                                                       // 1\n  },                                                                                                                   // 1\n  remove: function () {                                                                                                // 1\n    return remove;                                                                                                     // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar ErxesMixin = void 0;                                                                                               // 1\nmodule.importSync(\"/imports/api/utils\", {                                                                              // 1\n  ErxesMixin: function (v) {                                                                                           // 1\n    ErxesMixin = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar EmailTemplates = void 0;                                                                                           // 1\nmodule.importSync(\"./emailTemplates\", {                                                                                // 1\n  EmailTemplates: function (v) {                                                                                       // 1\n    EmailTemplates = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar add = new ValidatedMethod({                                                                                        // 7\n  name: 'emailTemplates.add',                                                                                          // 8\n  mixins: [ErxesMixin],                                                                                                // 9\n  validate: function (_ref) {                                                                                          // 11\n    var doc = _ref.doc;                                                                                                // 11\n    check(doc, EmailTemplates.schema);                                                                                 // 12\n  },                                                                                                                   // 13\n  run: function (_ref2) {                                                                                              // 15\n    var doc = _ref2.doc;                                                                                               // 15\n    return EmailTemplates.insert(doc);                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 7\nvar edit = new ValidatedMethod({                                                                                       // 21\n  name: 'emailTemplates.edit',                                                                                         // 22\n  mixins: [ErxesMixin],                                                                                                // 23\n  validate: function (_ref3) {                                                                                         // 25\n    var id = _ref3.id,                                                                                                 // 25\n        doc = _ref3.doc;                                                                                               // 25\n    check(id, String);                                                                                                 // 26\n    check(doc, EmailTemplates.schema);                                                                                 // 27\n  },                                                                                                                   // 28\n  run: function (_ref4) {                                                                                              // 30\n    var id = _ref4.id,                                                                                                 // 30\n        doc = _ref4.doc;                                                                                               // 30\n    return EmailTemplates.update(id, {                                                                                 // 31\n      $set: doc                                                                                                        // 31\n    });                                                                                                                // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 21\nvar remove = new ValidatedMethod({                                                                                     // 36\n  name: 'emailTemplates.remove',                                                                                       // 37\n  mixins: [ErxesMixin],                                                                                                // 38\n  validate: function (id) {                                                                                            // 40\n    check(id, String);                                                                                                 // 41\n  },                                                                                                                   // 42\n  run: function (id) {                                                                                                 // 44\n    return EmailTemplates.remove({                                                                                     // 45\n      _id: id                                                                                                          // 45\n    });                                                                                                                // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"server\":{\"methods.js\":[\"meteor/check\",\"meteor/mdg:validated-method\",\"./utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/methods.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  uploadFileMethod: function () {                                                                                      // 1\n    return uploadFileMethod;                                                                                           // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Match = void 0,                                                                                                    // 1\n    check = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/check\", {                                                                                    // 1\n  Match: function (v) {                                                                                                // 1\n    Match = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ValidatedMethod = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mdg:validated-method\", {                                                                     // 1\n  ValidatedMethod: function (v) {                                                                                      // 1\n    ValidatedMethod = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar uploadFile = void 0;                                                                                               // 1\nmodule.importSync(\"./utils\", {                                                                                         // 1\n  uploadFile: function (v) {                                                                                           // 1\n    uploadFile = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar uploadFileMethod = new ValidatedMethod({                                                                           // 7\n  name: 'uploadFile',                                                                                                  // 8\n  validate: function (_ref) {                                                                                          // 10\n    var name = _ref.name,                                                                                              // 10\n        data = _ref.data;                                                                                              // 10\n    check(name, String);                                                                                               // 11\n    check(data, Match.Any);                                                                                            // 12\n  },                                                                                                                   // 13\n  run: function (doc) {                                                                                                // 15\n    return uploadFile(doc);                                                                                            // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":[\"aws-sdk\",\"handlebars\",\"meteor/meteor\",\"meteor/email\",\"meteor/http\",\"meteor/erxes-notifications\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/utils.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  uploadFile: function () {                                                                                            // 1\n    return uploadFile;                                                                                                 // 1\n  },                                                                                                                   // 1\n  sendEmail: function () {                                                                                             // 1\n    return sendEmail;                                                                                                  // 1\n  },                                                                                                                   // 1\n  sendNotification: function () {                                                                                      // 1\n    return sendNotification;                                                                                           // 1\n  },                                                                                                                   // 1\n  mutate: function () {                                                                                                // 1\n    return mutate;                                                                                                     // 1\n  },                                                                                                                   // 1\n  apolloNotifyNewMessage: function () {                                                                                // 1\n    return apolloNotifyNewMessage;                                                                                     // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar AWS = void 0;                                                                                                      // 1\nmodule.importSync(\"aws-sdk\", {                                                                                         // 1\n  \"default\": function (v) {                                                                                            // 1\n    AWS = v;                                                                                                           // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Handlebars = void 0;                                                                                               // 1\nmodule.importSync(\"handlebars\", {                                                                                      // 1\n  \"default\": function (v) {                                                                                            // 1\n    Handlebars = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Email = void 0;                                                                                                    // 1\nmodule.importSync(\"meteor/email\", {                                                                                    // 1\n  Email: function (v) {                                                                                                // 1\n    Email = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar HTTP = void 0;                                                                                                     // 1\nmodule.importSync(\"meteor/http\", {                                                                                     // 1\n  HTTP: function (v) {                                                                                                 // 1\n    HTTP = v;                                                                                                          // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar Notifications = void 0;                                                                                            // 1\nmodule.importSync(\"meteor/erxes-notifications\", {                                                                      // 1\n  Notifications: function (v) {                                                                                        // 1\n    Notifications = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\n                                                                                                                       //\nvar uploadFile = function (_ref) {                                                                                     // 9\n  var name = _ref.name,                                                                                                // 9\n      data = _ref.data;                                                                                                // 9\n  var _Meteor$settings$serv = Meteor.settings.services.aws,                                                            // 9\n      accessKeyId = _Meteor$settings$serv.accessKeyId,                                                                 // 9\n      secretAccessKey = _Meteor$settings$serv.secretAccessKey,                                                         // 9\n      bucket = _Meteor$settings$serv.bucket,                                                                           // 9\n      _Meteor$settings$serv2 = _Meteor$settings$serv.prefix,                                                           // 9\n      prefix = _Meteor$settings$serv2 === undefined ? '' : _Meteor$settings$serv2; // check credentials                // 9\n                                                                                                                       //\n  if (!(accessKeyId || secretAccessKey || bucket)) {                                                                   // 13\n    return {                                                                                                           // 14\n      status: 'error',                                                                                                 // 15\n      data: 'Security credentials are not configured'                                                                  // 16\n    };                                                                                                                 // 14\n  } // initialize s3                                                                                                   // 18\n                                                                                                                       //\n                                                                                                                       //\n  var s3 = new AWS.S3({                                                                                                // 21\n    accessKeyId: accessKeyId,                                                                                          // 21\n    secretAccessKey: secretAccessKey                                                                                   // 21\n  }); // wait for putObject response                                                                                   // 21\n                                                                                                                       //\n  var syncPutObject = Meteor.wrapAsync(s3.putObject, s3); // generate unique name                                      // 24\n                                                                                                                       //\n  var fileName = \"\" + prefix + Math.random() + name; // create buffer from file data                                   // 27\n                                                                                                                       //\n  var buffer = new Buffer(data); // call putObject                                                                     // 30\n                                                                                                                       //\n  var response = syncPutObject({                                                                                       // 33\n    Bucket: bucket,                                                                                                    // 34\n    Key: fileName,                                                                                                     // 35\n    Body: buffer,                                                                                                      // 36\n    ACL: 'public-read'                                                                                                 // 37\n  });                                                                                                                  // 33\n  response.url = \"https://s3.amazonaws.com/\" + bucket + \"/\" + fileName;                                                // 40\n  return response;                                                                                                     // 42\n};                                                                                                                     // 43\n                                                                                                                       //\n// send email helpers ====================                                                                             // 45\nfunction applyTemplate(data, templateName) {                                                                           // 46\n  var template = Assets.getText(\"emailTemplates/\" + templateName + \".html\");                                           // 47\n  template = Handlebars.compile(template);                                                                             // 49\n  return template(data);                                                                                               // 51\n}                                                                                                                      // 52\n                                                                                                                       //\nvar sendEmail = function (_ref2) {                                                                                     // 54\n  var to = _ref2.to,                                                                                                   // 54\n      subject = _ref2.subject,                                                                                         // 54\n      template = _ref2.template;                                                                                       // 54\n  var isCustom = template.isCustom,                                                                                    // 54\n      data = template.data,                                                                                            // 54\n      name = template.name; // generate email content by given template                                                // 54\n                                                                                                                       //\n  var content = applyTemplate(data, name);                                                                             // 58\n  var html = ''; // for example brand related emails can be totally different                                          // 60\n                                                                                                                       //\n  if (isCustom) {                                                                                                      // 63\n    html = content; // invitation, notification emails can be same                                                     // 64\n  } else {                                                                                                             // 67\n    html = applyTemplate({                                                                                             // 68\n      content: content                                                                                                 // 68\n    }, 'base');                                                                                                        // 68\n  } // do not send email in test mode                                                                                  // 69\n                                                                                                                       //\n                                                                                                                       //\n  if (Meteor.isTest) {                                                                                                 // 72\n    return;                                                                                                            // 73\n  }                                                                                                                    // 74\n                                                                                                                       //\n  Email.send({                                                                                                         // 76\n    from: Meteor.settings.company.noReplyEmail,                                                                        // 77\n    to: to,                                                                                                            // 78\n    subject: subject,                                                                                                  // 79\n    html: html                                                                                                         // 80\n  });                                                                                                                  // 76\n};                                                                                                                     // 82\n                                                                                                                       //\nvar sendNotification = function (_doc) {                                                                               // 85\n  var doc = _doc; // Splitting receivers                                                                               // 86\n                                                                                                                       //\n  var receivers = doc.receivers;                                                                                       // 89\n  delete doc.receivers; // Inserting entry to every receiver                                                           // 90\n                                                                                                                       //\n  receivers.forEach(function (receiverId) {                                                                            // 93\n    doc.receiver = receiverId; // create notification                                                                  // 94\n                                                                                                                       //\n    var response = Notifications.create(Object.assign({}, doc)); // if receiver did not disable to get this notification\n                                                                                                                       //\n    if (response === 'ok') {                                                                                           // 100\n      var receiver = Meteor.users.findOne({                                                                            // 101\n        _id: receiverId                                                                                                // 101\n      });                                                                                                              // 101\n      var details = receiver.details; // if receiver did not disable email notification then send email                // 102\n                                                                                                                       //\n      if (!(details && details.getNotificationByEmail === false)) {                                                    // 105\n        sendEmail({                                                                                                    // 106\n          to: receiver.emails[0].address,                                                                              // 107\n          subject: 'Notification',                                                                                     // 108\n          template: {                                                                                                  // 109\n            name: 'notification',                                                                                      // 110\n            data: {                                                                                                    // 111\n              notification: doc                                                                                        // 112\n            }                                                                                                          // 111\n          }                                                                                                            // 109\n        });                                                                                                            // 106\n      }                                                                                                                // 116\n    }                                                                                                                  // 117\n  });                                                                                                                  // 118\n};                                                                                                                     // 119\n                                                                                                                       //\nvar mutate = function (query) {                                                                                        // 122\n  return HTTP.call('POST', Meteor.settings.public.APOLLO_CLIENT_URL, {                                                 // 122\n    headers: {                                                                                                         // 124\n      'Content-Type': 'application/json'                                                                               // 124\n    },                                                                                                                 // 124\n    data: {                                                                                                            // 125\n      query: query                                                                                                     // 125\n    }                                                                                                                  // 125\n  });                                                                                                                  // 123\n};                                                                                                                     // 122\n                                                                                                                       //\nvar apolloNotifyNewMessage = function (messageId) {                                                                    // 129\n  // Don't do anyting in test mode                                                                                     // 130\n  if (Meteor.isTest) {                                                                                                 // 131\n    return;                                                                                                            // 132\n  }                                                                                                                    // 133\n                                                                                                                       //\n  mutate(\"\\n    mutation {\\n      conversationMessageInserted(_id: \\\"\" + messageId + \"\\\")\\n    }\\n  \");                // 135\n};                                                                                                                     // 142\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"utils.js\":[\"meteor/meteor\",\"/imports/api/users/constants\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/utils.js                                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  ErxesMixin: function () {                                                                                            // 1\n    return ErxesMixin;                                                                                                 // 1\n  },                                                                                                                   // 1\n  wait: function () {                                                                                                  // 1\n    return wait;                                                                                                       // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ROLES = void 0;                                                                                                    // 1\nmodule.importSync(\"/imports/api/users/constants\", {                                                                    // 1\n  ROLES: function (v) {                                                                                                // 1\n    ROLES = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar RESTRICTED_METHODS = ['users.invite', 'users.updateAccessInfo', 'users.remove', 'brands.add', 'brands.edit', 'brands.remove', 'brands.configEmail', 'channels.add', 'channels.edit', 'channels.remove', 'forms.add', 'forms.edit', 'forms.remove', 'integrations.add', 'integrations.edit', 'integrations.remove', 'integrations.addMessenger', 'integrations.addTwitter', 'integrations.addFacebook']; // all validated methods mixin\n// check login, permissions etc ..                                                                                     // 27\n                                                                                                                       //\nfunction ErxesMixin(_options) {                                                                                        // 28\n  var options = _options; // save real run                                                                             // 29\n                                                                                                                       //\n  var runFunc = _options.run; // override run                                                                          // 32\n                                                                                                                       //\n  options.run = function () {                                                                                          // 35\n    function run() {                                                                                                   // 35\n      // check login required                                                                                          // 36\n      if (!this.userId) {                                                                                              // 37\n        throw new Meteor.Error('loginRequired', 'Login required.');                                                    // 38\n      }                                                                                                                // 39\n                                                                                                                       //\n      if (Meteor.isServer) {                                                                                           // 41\n        var user = Meteor.users.findOne(this.userId); // check contributor permissions                                 // 42\n                                                                                                                       //\n        if (user.details && user.details.role === ROLES.CONTRIBUTOR && RESTRICTED_METHODS.includes(_options.name)) {   // 45\n          throw new Meteor.Error('permissionDenied', 'Permission denied.');                                            // 50\n        }                                                                                                              // 51\n      }                                                                                                                // 52\n                                                                                                                       //\n      for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {                         // 35\n        params[_key] = arguments[_key];                                                                                // 35\n      }                                                                                                                // 35\n                                                                                                                       //\n      return runFunc.call.apply(runFunc, [this].concat(params));                                                       // 54\n    }                                                                                                                  // 55\n                                                                                                                       //\n    return run;                                                                                                        // 35\n  }();                                                                                                                 // 35\n                                                                                                                       //\n  return options;                                                                                                      // 57\n}                                                                                                                      // 58\n                                                                                                                       //\nvar wait = function (ms) {                                                                                             // 60\n  var start = new Date().getTime();                                                                                    // 61\n  var end = start;                                                                                                     // 62\n                                                                                                                       //\n  while (end < start + ms) {                                                                                           // 64\n    end = new Date().getTime();                                                                                        // 65\n  }                                                                                                                    // 66\n};                                                                                                                     // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"startup\":{\"server\":{\"fixtures.js\":[\"meteor/meteor\",\"meteor/accounts-base\",\"/imports/api/brands/brands\",\"/imports/api/channels/channels\",\"/imports/api/integrations/integrations\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/startup/server/fixtures.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Accounts = void 0;                                                                                                 // 1\nmodule.importSync(\"meteor/accounts-base\", {                                                                            // 1\n  Accounts: function (v) {                                                                                             // 1\n    Accounts = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Brands = void 0;                                                                                                   // 1\nmodule.importSync(\"/imports/api/brands/brands\", {                                                                      // 1\n  Brands: function (v) {                                                                                               // 1\n    Brands = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Channels = void 0;                                                                                                 // 1\nmodule.importSync(\"/imports/api/channels/channels\", {                                                                  // 1\n  Channels: function (v) {                                                                                             // 1\n    Channels = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Integrations = void 0;                                                                                             // 1\nmodule.importSync(\"/imports/api/integrations/integrations\", {                                                          // 1\n  Integrations: function (v) {                                                                                         // 1\n    Integrations = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\n// if the database is empty on server start, create some sample data.                                                  // 8\nMeteor.startup(function () {                                                                                           // 9\n  if (Meteor.users.find().count() !== 0) {                                                                             // 10\n    return;                                                                                                            // 11\n  }                                                                                                                    // 12\n                                                                                                                       //\n  var _Meteor$settings$init = Meteor.settings.initialData,                                                             // 9\n      user = _Meteor$settings$init.user,                                                                               // 9\n      brand = _Meteor$settings$init.brand,                                                                             // 9\n      integration = _Meteor$settings$init.integration,                                                                 // 9\n      channel = _Meteor$settings$init.channel;                                                                         // 9\n  var userId = Accounts.createUser(user);                                                                              // 16\n  var brandId = Brands.insert(Object.assign({                                                                          // 17\n    userId: userId                                                                                                     // 17\n  }, brand));                                                                                                          // 17\n  var integrationId = Integrations.insert(Object.assign({                                                              // 18\n    brandId: brandId                                                                                                   // 18\n  }, integration));                                                                                                    // 18\n  Channels.insert(Object.assign({                                                                                      // 19\n    userId: userId,                                                                                                    // 22\n    memberIds: [userId],                                                                                               // 23\n    integrationIds: [integrationId]                                                                                    // 24\n  }, channel));                                                                                                        // 21\n});                                                                                                                    // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"index.js\":[\"meteor/percolate:synced-cron\",\"./security.js\",\"./register-api.js\",\"./fixtures.js\",\"./notifications.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/startup/server/index.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar SyncedCron = void 0;                                                                                               // 1\nmodule.importSync(\"meteor/percolate:synced-cron\", {                                                                    // 1\n  SyncedCron: function (v) {                                                                                           // 1\n    SyncedCron = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nmodule.importSync(\"./security.js\");                                                                                    // 1\nmodule.importSync(\"./register-api.js\");                                                                                // 1\nmodule.importSync(\"./fixtures.js\");                                                                                    // 1\nmodule.importSync(\"./notifications.js\");                                                                               // 1\nSyncedCron.start();                                                                                                    // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"notifications.js\":[\"meteor/erxes-notifications\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/startup/server/notifications.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Notifications = void 0;                                                                                            // 1\nmodule.importSync(\"meteor/erxes-notifications\", {                                                                      // 1\n  Notifications: function (v) {                                                                                        // 1\n    Notifications = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Conversations = {                                                                                                  // 3\n  name: 'conversations',                                                                                               // 4\n  description: 'Conversations',                                                                                        // 5\n  types: [{                                                                                                            // 6\n    name: 'conversationStateChange',                                                                                   // 8\n    text: 'State change'                                                                                               // 9\n  }, {                                                                                                                 // 7\n    name: 'conversationAssigneeChange',                                                                                // 12\n    text: 'Assignee change'                                                                                            // 13\n  }, {                                                                                                                 // 11\n    name: 'conversationAddMessage',                                                                                    // 16\n    text: 'Add message'                                                                                                // 17\n  }]                                                                                                                   // 15\n};                                                                                                                     // 3\nvar Channels = {                                                                                                       // 22\n  name: 'channels',                                                                                                    // 23\n  description: 'Channels',                                                                                             // 24\n  types: [{                                                                                                            // 25\n    name: 'channelMembersChange',                                                                                      // 27\n    text: 'Members change'                                                                                             // 28\n  }]                                                                                                                   // 26\n};                                                                                                                     // 22\nNotifications.registerModule(Conversations);                                                                           // 33\nNotifications.registerModule(Channels);                                                                                // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"register-api.js\":[\"/imports/api/users/schemas\",\"/imports/api/users/server/publications\",\"/imports/api/users/server/config\",\"/imports/api/users/server/hooks\",\"/imports/api/users/server/methods\",\"/imports/api/server/methods\",\"/imports/api/brands/server/methods\",\"/imports/api/customers/server/methods\",\"/imports/api/channels/server/methods\",\"/imports/api/integrations/server/methods\",\"/imports/api/integrations/social/server\",\"/imports/api/conversations/server/methods\",\"/imports/api/conversations/server/cronJobs\",\"/imports/api/tags/server/methods\",\"/imports/api/forms/server/methods\",\"/imports/api/responseTemplates/server/methods\",\"/imports/api/emailTemplates/methods\",\"/imports/api/engage/server/methods\",\"/imports/api/engage/server/cronJobs\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/startup/server/register-api.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.importSync(\"/imports/api/users/schemas\");                                                                       // 1\nmodule.importSync(\"/imports/api/users/server/publications\");                                                           // 1\nmodule.importSync(\"/imports/api/users/server/config\");                                                                 // 1\nmodule.importSync(\"/imports/api/users/server/hooks\");                                                                  // 1\nmodule.importSync(\"/imports/api/users/server/methods\");                                                                // 1\nmodule.importSync(\"/imports/api/server/methods\");                                                                      // 1\nmodule.importSync(\"/imports/api/brands/server/methods\");                                                               // 1\nmodule.importSync(\"/imports/api/customers/server/methods\");                                                            // 1\nmodule.importSync(\"/imports/api/channels/server/methods\");                                                             // 1\nmodule.importSync(\"/imports/api/integrations/server/methods\");                                                         // 1\nmodule.importSync(\"/imports/api/integrations/social/server\");                                                          // 1\nmodule.importSync(\"/imports/api/conversations/server/methods\");                                                        // 1\nmodule.importSync(\"/imports/api/conversations/server/cronJobs\");                                                       // 1\nmodule.importSync(\"/imports/api/tags/server/methods\");                                                                 // 1\nmodule.importSync(\"/imports/api/forms/server/methods\");                                                                // 1\nmodule.importSync(\"/imports/api/responseTemplates/server/methods\");                                                    // 1\nmodule.importSync(\"/imports/api/emailTemplates/methods\");                                                              // 1\nmodule.importSync(\"/imports/api/engage/server/methods\");                                                               // 1\nmodule.importSync(\"/imports/api/engage/server/cronJobs\");                                                              // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"security.js\":[\"meteor/meteor\",\"meteor/ddp-rate-limiter\",\"meteor/underscore\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/startup/server/security.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Meteor = void 0;                                                                                                   // 1\nmodule.importSync(\"meteor/meteor\", {                                                                                   // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar DDPRateLimiter = void 0;                                                                                           // 1\nmodule.importSync(\"meteor/ddp-rate-limiter\", {                                                                         // 1\n  DDPRateLimiter: function (v) {                                                                                       // 1\n    DDPRateLimiter = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.importSync(\"meteor/underscore\", {                                                                               // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\n// Don't let people write arbitrary data to their 'profile' field from the client                                      // 5\nMeteor.users.deny({                                                                                                    // 6\n  update: function () {                                                                                                // 7\n    return true;                                                                                                       // 8\n  }                                                                                                                    // 9\n}); // Get a list of all accounts methods by running `Meteor.server.method_handlers` in meteor shell                   // 6\n                                                                                                                       //\nvar AUTH_METHODS = ['login', 'logout', 'logoutOtherClients', 'getNewToken', 'removeOtherTokens', 'configureLoginService', 'changePassword', 'forgotPassword', 'resetPassword', 'verifyEmail', 'createUser', 'ATRemoveService', 'ATCreateUserServer', 'ATResendVerificationEmail'];\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 30\n  // Only allow 2 login attempts per connection per 5 seconds                                                          // 31\n  DDPRateLimiter.addRule({                                                                                             // 32\n    name: function (name) {                                                                                            // 34\n      return _.contains(AUTH_METHODS, name);                                                                           // 35\n    },                                                                                                                 // 36\n    // Rate limit per connection ID                                                                                    // 38\n    connectionId: function () {                                                                                        // 39\n      return true;                                                                                                     // 40\n    }                                                                                                                  // 41\n  }, 2, 5000);                                                                                                         // 33\n}                                                                                                                      // 46\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},\"server\":{\"main.js\":[\"/imports/startup/server\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/main.js                                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.importSync(\"/imports/startup/server\");                                                                          // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/integrations/social/server/facebook.js","/imports/api/integrations/social/server/index.js","/imports/api/integrations/social/server/methods.js","/imports/api/integrations/social/server/routes.js","/imports/api/integrations/social/server/twitter.js","/imports/api/integrations/social/social.js","/imports/api/integrations/server/methods.js","/imports/api/integrations/constants.js","/imports/api/integrations/integrations.js","/imports/api/brands/server/methods.js","/imports/api/brands/brands.js","/imports/api/channels/server/methods.js","/imports/api/channels/channels.js","/imports/api/conversations/server/apolloPubSubs.js","/imports/api/conversations/server/cronJobs.js","/imports/api/conversations/server/methods.js","/imports/api/conversations/constants.js","/imports/api/conversations/conversations.js","/imports/api/conversations/messageCountDenormalizer.js","/imports/api/conversations/messages.js","/imports/api/conversations/utils.js","/imports/api/customers/server/methods.js","/imports/api/customers/constants.js","/imports/api/customers/customers.js","/imports/api/customers/queryBuilder.js","/imports/api/customers/segments.js","/imports/api/engage/server/cronJobs.js","/imports/api/engage/server/methods.js","/imports/api/engage/constants.js","/imports/api/engage/engage.js","/imports/api/engage/utils.js","/imports/api/forms/server/methods.js","/imports/api/forms/forms.js","/imports/api/responseTemplates/server/methods.js","/imports/api/responseTemplates/responseTemplates.js","/imports/api/tags/server/api.js","/imports/api/tags/server/methods.js","/imports/api/tags/constants.js","/imports/api/tags/tags.js","/imports/api/tags/utils.js","/imports/api/users/server/config.js","/imports/api/users/server/hooks.js","/imports/api/users/server/methods.js","/imports/api/users/server/publications.js","/imports/api/users/constants.js","/imports/api/users/schemas.js","/imports/api/emailTemplates/emailTemplates.js","/imports/api/emailTemplates/methods.js","/imports/api/server/methods.js","/imports/api/server/utils.js","/imports/api/utils.js","/imports/startup/server/fixtures.js","/imports/startup/server/index.js","/imports/startup/server/notifications.js","/imports/startup/server/register-api.js","/imports/startup/server/security.js","/server/main.js"],"names":["module","export","graphRequest","getPageList","SaveWebhookResponse","receiveWebhookResponse","facebookReply","graph","importSync","v","Picker","Meteor","apolloNotifyNewMessage","Conversations","Messages","Customers","Integrations","KIND_CHOICES","CONVERSATION_STATUSES","FACEBOOK_DATA_KINDS","base","method","path","accessToken","setAccessToken","wrappedGraph","wrapAsync","otherParams","e","console","log","message","get","args","post","response","data","map","id","page","name","userAccessToken","integration","currentPageId","start","object","entry","forEach","facebookData","pageIds","includes","messaging","viaMessengerEvent","changes","viaFeedEvent","messagingEvent","getOrCreateConversationByMessenger","getOrCreateConversationByFeed","event","value","getOrCreateConversation","params","findSelector","status","senderId","content","attachments","msgFacebookData","conversation","findOne","conversationId","insert","integrationId","_id","customerId","getOrCreateCustomer","pageId","update","$set","readUserIds","OPEN","createMessage","userId","commentId","comment_id","verb","item","senderName","sender_name","sender_id","toString","messageText","link","postId","post_id","access_token","NEW","CLOSED","FEED","kind","reactionType","reaction_type","photoId","photo_id","videoId","video_id","sender","recipientId","recipient","text","type","attachment","url","payload","MESSENGER","$or","fbUserId","customer","res","first_name","last_name","profilePic","profile_pic","messageId","internal","app","selector","FACEBOOK","find","saveWebhookResponse","settings","services","facebook","route","req","query","verifyToken","end","statusCode","body","a","appId","commentResponse","addTwitter","addFacebook","getFacebookAppList","getFacebookPageList","check","ValidatedMethod","_","ErxesMixin","twitter","mixins","validate","doc","brandId","String","queryParams","Object","run","authenticate","assign","TWITTER","trackIntegration","bodyParser","replace","writeHead","Location","middleware","json","urlencoded","extended","getOrCreateCommonConversation","getOrCreateDirectMessageConversation","TwitMap","tweetReply","Twit","soc","user","twitterData","idStr","id_str","screenName","screen_name","profileImageUrl","profile_image_url","updateConversation","in_reply_to_status_id","isDirectMessage","recipient_id","directMessage","senderIdStr","sender_id_str","recipientIdStr","recipient_id_str","integrationUserId","consumerKey","consumerSecret","twit","consumer_key","consumer_secret","token","access_token_secret","tokenSecret","stream","on","bindEnvironment","entities","user_mentions","mention","direct_message","postCallback","error","Error","user_id","redirectUrl","socTwitter","Twitter","CONSUMER_KEY","CONSUMER_SECRET","REDIRECT_URL","methods","getAuthorizeUrl","exports","default","callback","then","info","tokens","auth","token_secret","twitterSchema","facebookSchema","SimpleSchema","Number","addMessenger","editMessenger","addForm","editForm","remove","saveMessengerApperance","saveMessengerConfigs","Match","Channels","messengerSchema","formSchema","generateFormDoc","mainDoc","formDoc","FORM","formData","formId","integrationIds","$in","count","conversations","fetch","conversationIds","c","color","wallpaper","Optional","logo","uiOptions","messengerData","FORM_LOAD_TYPES","FORM_SUCCESS_ACTIONS","ALL_LIST","SHOUTBOX","POPUP","EMBEDDED","EMAIL","REDIRECT","ONPAGE","faker","Mongo","Random","Factory","Brands","IntegrationCollections","Collection","deny","loadType","allowedValues","optional","successAction","fromEmail","userEmailTitle","userEmailContent","adminEmails","adminEmailTitle","adminEmailContent","thankContent","onlineHoursSchema","day","from","to","notifyCustomer","Boolean","availabilityMethod","isOnline","onlineHours","timezone","welcomeMessage","awayMessage","thankYouMessage","schema","blackbox","attachSchema","helpers","brand","channels","publicFields","define","random","word","add","edit","configEmail","emailConfigSchema","fields","config","emailConfig","BrandsCollection","code","substr","createdAt","Date","template","description","schemaExtra","regEx","RegEx","Id","sendNotification","sendNotifications","channelId","_memberIds","memberIds","channel","createdUser","notifType","title","receivers","filter","obj","indexOf","push","updatedChannel","ChannelsCollection","modifier","conversationCount","openConversationCount","messageInserted","conversationsChanged","mutate","JSON","stringify","moment","SyncedCron","sendEmail","sendMessageEmail","each","email","question","$exists","sort","format","answers","adminMessages","isCustomerRead","answer","users","length","emailSignatures","signature","s","subject","isCustom","multi","schedule","parser","job","addMessage","unassign","changeStatus","star","unstar","toggleParticipate","markAsRead","strip","FormSchema","ConversationIdsSchema","AssignSchema","ChangeStatusSchema","conversationNotifReceivers","currentUserId","userIds","assignedUserId","participatedUserIds","union","without","validator","_doc","notification","date","checkConversationsExistance","updatedConversations","$unset","conversationDetail","messages","$addToSet","$each","$pull","extendSelector","$push","addParticipator","TagsCollection","tagsHelper","tagSchemaOptions","ConversationsCollection","number","messageCount","TAG_TYPE","assignedUser","participatedUsers","participatorCount","twitterDirectMessageSchema","tagIds","lorem","sentence","create","messageCountDenormalizer","_updateConversation","afterInsertMessage","afterRemoveMessages","MessagesCollection","result","mentionedUserIds","defaultValue","size","engageData","formWidgetData","createConversation","createSegment","editSegment","removeSegment","createInternalNote","removeInternalNote","Segments","simpleSchema","internalNote","internalNoteObj","createdBy","createdDate","internalNotes","internalNoteId","notes","canDelete","n","connectors","types","operators","dateUnits","any","all","string","boolean","noInput","days","weeks","months","lastSeenAt","label","sessionCount","isActive","customData","internalNoteSchema","Email","phone","isUser","CustomersCollection","getPublicFields","keys","unacceptedTypes","isAcceptedType","key","split","parentFieldName","notInternalUseField","internalUseFields","getIntegrationData","messenger","getMessengerCustomData","results","internet","segments","segment","headSegment","$and","childQuery","connector","conditions","condition","field","convertConditionToQuery","embeddedParentSegment","getParentSegment","parentSegment","parentQuery","operator","dateUnit","transformedValue","toLowerCase","parseInt","$ne","$regex","RegExp","escapeRegExp","$gt","$lt","$gte","subtract","toDate","$lte","conditionSchema","subOf","SegmentsCollection","getSubSegments","send","sendAutoMessage","isLive","messagesAdd","messagesEdit","messagesRemove","messagesSetLive","messagesSetPause","messagesSetLiveManual","MESSAGE_KINDS","createdUserId","deliveryReports","MANUAL","isDraft","EMAIL_CONTENT_CLASS","EMAIL_CONTENT_PLACEHOLDER","EMAIL_CONTENT_KEYS_FOR_SELECT","statusFilters","MESSENGER_KINDS","METHODS","SENT_AS_CHOICES","VISITOR_AUDIENCE_RULES","RULE_CONDITIONS","AUTO","VISITOR_AUTO","group","options","CHAT","NOTE","POST","SELECT_OPTIONS","BADGE","SNIPPET","FULL_MESSAGE","stringTypeChoices","numberTypeChoices","browserLanguage","currentPageUrl","country","city","numberOfVisits","EmailSchema","templateId","RuleSchema","MessengerSchema","sentAs","rules","segmentId","customerIds","fromUserId","stopDate","messengerReceivedCustomerIds","fromUser","replaceKeys","nodemailer","customerQueryBuilder","EmailTemplates","fullName","position","findCustomers","customerQuery","saveMatchedCustomerIds","customers","sendViaEmail","userEmail","emails","pop","mail","host","port","secure","transporter","createTransport","replacedSubject","replacedContent","mailMessageId","sendMail","address","html","sendViaMessenger","addField","editField","removeField","updateFieldsOrder","duplicate","Forms","Fields","generateCode","lastField","order","orderDics","Array","form","newFormId","fieldParams","omit","FormSchemaExtra","validation","isRequired","FieldSchemaExtra","recent","ResponseTemplates","files","tagObject","TAG_TYPES","Tags","objectIds","collection","Where","t","objects","removeIds","uniq","flatten","$inc","objectCount","tag","TagItemSchema","ids","tagCount","targetIds","CUSTOMER","ENGAGE_MESSAGE","CONVERSATION","validateUniqueness","set","colorCode","tags","Accounts","emailTemplates","siteName","company","noReplyEmail","urls","resetPassword","absoluteUrl","startup","forbidClientAccountCreation","onCreateUser","invite","details","isOwner","configs","customerFields","validateNewUser","test","editProfile","configEmailSignature","configGetNotificationByEmail","configCustomerFields","CreateInvitationSchema","UpdateInvitationSchema","ProfileSchema","EmailSignaturesSchema","updateUserChannels","channelIds","updateUserCommonInfos","twitterUsername","username","avatar","checkPasswordConfirmation","password","passwordConfirmation","role","createUser","setPassword","_checkPassword","currentPassword","reason","signatures","isAllowed","schemaFields","isCorrectField","f","Counts","publish","loggedInUserFields","ready","usersList","limit","noReady","ROLES","ADMIN","CONTRIBUTOR","CommonInfo","InvitationCommon","uploadFileMethod","uploadFile","Any","AWS","Handlebars","HTTP","Notifications","aws","accessKeyId","secretAccessKey","bucket","prefix","s3","S3","syncPutObject","putObject","fileName","Math","buffer","Buffer","Bucket","Key","Body","ACL","applyTemplate","templateName","Assets","getText","compile","isTest","receiver","receiverId","getNotificationByEmail","call","public","APOLLO_CLIENT_URL","headers","wait","RESTRICTED_METHODS","_options","runFunc","isServer","getTime","ms","initialData","registerModule","DDPRateLimiter","AUTH_METHODS","addRule","contains","connectionId"],"mappings":"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","file":"/app.js","sourcesContent":["import graph from 'fbgraph';\nimport { Picker } from 'meteor/meteorhacks:picker';\nimport { Meteor } from 'meteor/meteor';\nimport { apolloNotifyNewMessage } from '/imports/api/server/utils';\nimport { Conversations } from '/imports/api/conversations/conversations';\nimport { Messages } from '/imports/api/conversations/messages';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { KIND_CHOICES } from '/imports/api/integrations/constants';\nimport { CONVERSATION_STATUSES, FACEBOOK_DATA_KINDS } from '/imports/api/conversations/constants';\n\n/*\n * Common graph api request wrapper\n * catchs auth token or other type of exceptions\n */\nexport const graphRequest = {\n  base(method, path, accessToken, ...otherParams) {\n    // set access token\n    graph.setAccessToken(accessToken);\n\n    const wrappedGraph = Meteor.wrapAsync(graph[method], graph);\n\n    try {\n      return wrappedGraph(path, ...otherParams);\n\n      // catch session expired or some other error\n    } catch (e) {\n      console.log(e.message); // eslint-disable-line no-console\n      return e.message;\n    }\n  },\n\n  get(...args) {\n    return this.base('get', ...args);\n  },\n\n  post(...args) {\n    return this.base('post', ...args);\n  },\n};\n\n/*\n * get list of pages that authorized user owns\n */\nexport const getPageList = accessToken => {\n  const response = graphRequest.get('/me/accounts?limit=100', accessToken);\n\n  return response.data.map(page => ({\n    id: page.id,\n    name: page.name,\n  }));\n};\n\n/*\n * save webhook response\n * create conversation, customer, message using transmitted data\n */\n\nexport class SaveWebhookResponse {\n  constructor(userAccessToken, integration, data) {\n    this.userAccessToken = userAccessToken;\n\n    this.integration = integration;\n\n    // received facebook data\n    this.data = data;\n\n    this.currentPageId = null;\n  }\n\n  start() {\n    const data = this.data;\n    const integration = this.integration;\n\n    if (data.object === 'page') {\n      data.entry.forEach(entry => {\n        // check receiving page is in integration's page list\n        if (!integration.facebookData.pageIds.includes(entry.id)) {\n          return;\n        }\n\n        // set current page\n        this.currentPageId = entry.id;\n\n        // receive new messenger message\n        if (entry.messaging) {\n          this.viaMessengerEvent(entry);\n        }\n\n        // receive new feed\n        if (entry.changes) {\n          this.viaFeedEvent(entry);\n        }\n      });\n    }\n  }\n\n  // via page messenger\n  viaMessengerEvent(entry) {\n    entry.messaging.forEach(messagingEvent => {\n      // someone sent us a message\n      if (messagingEvent.message) {\n        this.getOrCreateConversationByMessenger(messagingEvent);\n      }\n    });\n  }\n\n  // wall post\n  viaFeedEvent(entry) {\n    entry.changes.forEach(event => {\n      // someone posted on our wall\n      this.getOrCreateConversationByFeed(event.value);\n    });\n  }\n\n  // common get or create conversation helper using both in messenger and feed\n  getOrCreateConversation(params) {\n    // extract params\n    const {\n      findSelector,\n      status,\n      senderId,\n      facebookData,\n      content,\n      attachments,\n      msgFacebookData,\n    } = params;\n\n    let conversation = Conversations.findOne({\n      ...findSelector,\n    });\n\n    // create new conversation\n    if (!conversation) {\n      const conversationId = Conversations.insert({\n        integrationId: this.integration._id,\n        customerId: this.getOrCreateCustomer(senderId),\n        status,\n        content,\n\n        // save facebook infos\n        facebookData: {\n          ...facebookData,\n          pageId: this.currentPageId,\n        },\n      });\n      conversation = Conversations.findOne(conversationId);\n\n      // update conversation\n    } else {\n      Conversations.update(\n        { _id: conversation._id },\n        {\n          $set: {\n            // reset read history\n            readUserIds: [],\n\n            // if closed, reopen it\n            status: CONVERSATION_STATUSES.OPEN,\n          },\n        },\n      );\n    }\n\n    // create new message\n    this.createMessage({\n      conversation,\n      userId: senderId,\n      content,\n      attachments,\n      facebookData: msgFacebookData,\n    });\n  }\n\n  // get or create new conversation by feed info\n  getOrCreateConversationByFeed(value) {\n    const commentId = value.comment_id;\n\n    // collect only added actions\n    if (value.verb !== 'add') {\n      return;\n    }\n\n    // ignore duplicated action when like\n    if (value.verb === 'add' && value.item === 'like') {\n      return;\n    }\n\n    // if this is already saved then ignore it\n    if (commentId && Messages.findOne({ 'facebookData.commentId': commentId })) {\n      return;\n    }\n\n    const senderName = value.sender_name;\n\n    // sender_id is giving number values when feed and giving string value\n    // when messenger. customer.facebookData.senderId has type of string so\n    // convert it to string\n    const senderId = value.sender_id.toString();\n\n    let messageText = value.message;\n\n    // when photo, video share, there will be no text, so link instead\n    if (!messageText && value.link) {\n      messageText = value.link;\n    }\n\n    // when situations like checkin, there will be no text and no link\n    // if so ignore it\n    if (!messageText) {\n      return;\n    }\n\n    // value.post_id is returning different value even though same post\n    // with the previous one. So fetch post info via graph api and\n    // save returned value. This value will always be the same\n    let postId = value.post_id;\n\n    // get page access token\n    let response = graphRequest.get(\n      `${this.currentPageId}/?fields=access_token`,\n      this.userAccessToken,\n    );\n\n    // acess token expired\n    if (response === 'Error processing https request') {\n      return;\n    }\n\n    // get post object\n    response = graphRequest.get(postId, response.access_token);\n\n    postId = response.id;\n\n    let status = CONVERSATION_STATUSES.NEW;\n\n    // if we are posting from our page, close it automatically\n    if (this.integration.facebookData.pageIds.includes(senderId)) {\n      status = CONVERSATION_STATUSES.CLOSED;\n    }\n\n    this.getOrCreateConversation({\n      findSelector: {\n        'facebookData.kind': FACEBOOK_DATA_KINDS.FEED,\n        'facebookData.postId': postId,\n      },\n      status,\n      senderId,\n      facebookData: {\n        kind: FACEBOOK_DATA_KINDS.FEED,\n        senderId,\n        senderName,\n        postId,\n      },\n\n      // message data\n      content: messageText,\n      msgFacebookData: {\n        senderId,\n        senderName,\n        item: value.item,\n        reactionType: value.reaction_type,\n        photoId: value.photo_id,\n        videoId: value.video_id,\n        link: value.link,\n      },\n    });\n  }\n\n  // get or create new conversation by page messenger\n  getOrCreateConversationByMessenger(event) {\n    const senderId = event.sender.id;\n    const senderName = event.sender.name;\n    const recipientId = event.recipient.id;\n    const messageText = event.message.text || 'attachment';\n\n    // collect attachment's url, type fields\n    const attachments = (event.message.attachments || []).map(attachment => ({\n      type: attachment.type,\n      url: attachment.payload ? attachment.payload.url : '',\n    }));\n\n    this.getOrCreateConversation({\n      // try to find conversation by senderId, recipientId keys\n      findSelector: {\n        'facebookData.kind': FACEBOOK_DATA_KINDS.MESSENGER,\n        $or: [\n          {\n            'facebookData.senderId': senderId,\n            'facebookData.recipientId': recipientId,\n          },\n          {\n            'facebookData.senderId': recipientId,\n            'facebookData.recipientId': senderId,\n          },\n        ],\n      },\n      status: CONVERSATION_STATUSES.NEW,\n      senderId,\n      facebookData: {\n        kind: FACEBOOK_DATA_KINDS.MESSENGER,\n        senderId,\n        senderName,\n        recipientId,\n      },\n\n      // message data\n      content: messageText,\n      attachments,\n      msgFacebookData: {},\n    });\n  }\n\n  // get or create customer using facebook data\n  getOrCreateCustomer(fbUserId) {\n    const integrationId = this.integration._id;\n\n    const customer = Customers.findOne({\n      integrationId,\n      'facebookData.id': fbUserId,\n    });\n\n    if (customer) {\n      return customer._id;\n    }\n\n    // get page access token\n    let res = graphRequest.get(`${this.currentPageId}/?fields=access_token`, this.userAccessToken);\n\n    // get user info\n    res = graphRequest.get(`/${fbUserId}`, res.access_token);\n\n    // when feed response will contain name field\n    // when messeger response will not contain name field\n    const name = res.name || `${res.first_name} ${res.last_name}`;\n\n    // create customer\n    return Customers.insert({\n      name,\n      integrationId,\n      facebookData: {\n        id: fbUserId,\n        profilePic: res.profile_pic,\n      },\n    });\n  }\n\n  createMessage({ conversation, userId, content, attachments, facebookData }) {\n    if (conversation) {\n      // create new message\n      const messageId = Messages.insert({\n        conversationId: conversation._id,\n        customerId: this.getOrCreateCustomer(userId),\n        content,\n        attachments,\n        facebookData,\n        internal: false,\n      });\n\n      // notify subscription server new message\n      apolloNotifyNewMessage(messageId);\n\n      return messageId;\n    }\n  }\n}\n\n/*\n * receive per app webhook response\n */\nexport const receiveWebhookResponse = (app, data) => {\n  const selector = {\n    kind: KIND_CHOICES.FACEBOOK,\n    'facebookData.appId': app.id,\n  };\n\n  Integrations.find(selector).forEach(integration => {\n    // when new message or other kind of activity in page\n    const saveWebhookResponse = new SaveWebhookResponse(app.accessToken, integration, data);\n\n    saveWebhookResponse.start();\n  });\n};\n\nMeteor.settings.services.facebook.forEach(app => {\n  Picker.route(`/service/facebook/${app.id}/webhook-callback`, (params, req, res) => {\n    const query = params.query;\n\n    // when the endpoint is registered as a webhook, it must echo back\n    // the 'hub.challenge' value it receives in the query arguments\n    if (query['hub.mode'] === 'subscribe' && query['hub.challenge']) {\n      if (query['hub.verify_token'] !== app.verifyToken) {\n        res.end('Verification token mismatch');\n      }\n\n      res.end(query['hub.challenge']);\n    }\n\n    res.statusCode = 200;\n\n    // receive per app webhook response\n    receiveWebhookResponse(app, req.body);\n\n    res.end('success');\n  });\n});\n\n/*\n * post reply to page conversation or comment to wall post\n */\nexport const facebookReply = (conversation, text, messageId) => {\n  const app = Meteor.settings.services.facebook.find(\n    a => a.id === conversation.integration().facebookData.appId,\n  );\n\n  // page access token\n  const response = graphRequest.get(\n    `${conversation.facebookData.pageId}/?fields=access_token`,\n    app.accessToken,\n  );\n\n  // messenger reply\n  if (conversation.facebookData.kind === FACEBOOK_DATA_KINDS.MESSENGER) {\n    return graphRequest.post(\n      'me/messages',\n      response.access_token,\n      {\n        recipient: { id: conversation.facebookData.senderId },\n        message: { text },\n      },\n      () => {},\n    );\n  }\n\n  // feed reply\n  if (conversation.facebookData.kind === FACEBOOK_DATA_KINDS.FEED) {\n    const postId = conversation.facebookData.postId;\n\n    // post reply\n    const commentResponse = graphRequest.post(`${postId}/comments`, response.access_token, {\n      message: text,\n    });\n\n    // save commentId in message object\n    Messages.update({ _id: messageId }, { $set: { 'facebookData.commentId': commentResponse.id } });\n  }\n\n  return null;\n};\n","import './routes';\nimport './twitter';\nimport './facebook';\nimport './methods';\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { _ } from 'meteor/underscore';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Integrations } from '../../integrations';\nimport { KIND_CHOICES } from '../../constants';\nimport twitter from './twitter';\nimport { getPageList } from './facebook';\n\n// add twitter\nexport const addTwitter = new ValidatedMethod({\n  name: 'integrations.addTwitter',\n  mixins: [ErxesMixin],\n\n  validate(doc) {\n    check(doc, { brandId: String, queryParams: Object });\n  },\n\n  run({ brandId, queryParams }) {\n    // authenticate via twitter and get logged in user's infos\n    twitter.authenticate(queryParams, doc => {\n      const id = Integrations.insert(Object.assign(doc, { brandId, kind: KIND_CHOICES.TWITTER }));\n\n      // start tracking newly created twitter integration\n      const integration = Integrations.findOne({ _id: id });\n      twitter.trackIntegration(integration);\n    });\n  },\n});\n\n// add facebook\nexport const addFacebook = new ValidatedMethod({\n  name: 'integrations.addFacebook',\n  mixins: [ErxesMixin],\n\n  validate(doc) {\n    check(doc, {\n      name: String,\n      appId: String,\n      brandId: String,\n      pageIds: [String],\n    });\n  },\n\n  run({ name, appId, brandId, pageIds }) {\n    return Integrations.insert({\n      name,\n      kind: KIND_CHOICES.FACEBOOK,\n      brandId,\n      facebookData: {\n        appId,\n        pageIds,\n      },\n    });\n  },\n});\n\n// get facebook apps's list from settings.json\nexport const getFacebookAppList = new ValidatedMethod({\n  name: 'integrations.getFacebookAppList',\n  mixins: [ErxesMixin],\n\n  validate() {},\n\n  run() {\n    return _.map(Meteor.settings.services.facebook, app => ({\n      id: app.id,\n      name: app.name,\n    }));\n  },\n});\n\n// get facebook apps's page list from settings.json\nexport const getFacebookPageList = new ValidatedMethod({\n  name: 'integrations.getFacebookPageList',\n  mixins: [ErxesMixin],\n\n  validate({ appId }) {\n    check(appId, String);\n  },\n\n  run({ appId }) {\n    const app = _.find(Meteor.settings.services.facebook, a => a.id === appId);\n\n    if (!app) {\n      return [];\n    }\n\n    return getPageList(app.accessToken);\n  },\n});\n","import bodyParser from 'body-parser';\nimport { Picker } from 'meteor/meteorhacks:picker';\n\nPicker.route('/service/oauth/twitter_callback', (params, req, res) => {\n  const url = req.url.replace('service/', '');\n\n  res.writeHead(301, { Location: `/settings/integrations${url}` });\n  res.end();\n});\n\nPicker.middleware(bodyParser.json());\nPicker.middleware(bodyParser.urlencoded({ extended: false }));\n","import Twit from 'twit';\nimport soc from 'social-oauth-client';\nimport { Meteor } from 'meteor/meteor';\nimport { apolloNotifyNewMessage } from '/imports/api/server/utils';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { KIND_CHOICES } from '/imports/api/integrations/constants';\nimport { Conversations } from '/imports/api/conversations/conversations';\nimport { Messages } from '/imports/api/conversations/messages';\nimport { Customers } from '/imports/api/customers/customers';\nimport { CONVERSATION_STATUSES } from '/imports/api/conversations/constants';\n\n/*\n * get or create customer using twitter data\n */\nconst getOrCreateCustomer = (integrationId, user) => {\n  const customer = Customers.findOne({\n    integrationId,\n    'twitterData.id': user.id,\n  });\n\n  if (customer) {\n    return customer._id;\n  }\n\n  // create customer\n  return Customers.insert({\n    name: user.name,\n    integrationId,\n    twitterData: {\n      id: user.id,\n      idStr: user.id_str,\n      name: user.name,\n      screenName: user.screen_name,\n      profileImageUrl: user.profile_image_url,\n    },\n  });\n};\n\n/*\n * create new message\n */\nconst createMessage = (conversation, content, user) => {\n  if (conversation) {\n    // create new message\n    const messageId = Messages.insert({\n      conversationId: conversation._id,\n      customerId: getOrCreateCustomer(conversation.integrationId, user),\n      content,\n      internal: false,\n    });\n\n    // notify subscription server new message\n    apolloNotifyNewMessage(messageId);\n\n    return messageId;\n  }\n};\n\n/*\n * new message received in old converation, update status adn readUsers\n */\nconst updateConversation = _id => {\n  Conversations.update(\n    { _id },\n    {\n      $set: {\n        // reset read state\n        readUserIds: [],\n\n        // if closed, reopen\n        status: CONVERSATION_STATUSES.OPEN,\n      },\n    },\n  );\n};\n\n/*\n * create new conversation by regular tweet\n */\nexport const getOrCreateCommonConversation = (data, integration) => {\n  let conversation;\n\n  if (data.in_reply_to_status_id) {\n    // find conversation by tweet id\n    conversation = Conversations.findOne({\n      'twitterData.id': data.in_reply_to_status_id,\n    });\n\n    // if closed, reopen it\n    updateConversation(conversation._id);\n\n    // create new conversation\n  } else {\n    const conversationId = Conversations.insert({\n      content: data.text,\n      integrationId: integration._id,\n      customerId: getOrCreateCustomer(integration._id, data.user),\n      status: CONVERSATION_STATUSES.NEW,\n\n      // save tweet id\n      twitterData: {\n        id: data.id,\n        idStr: data.id_str,\n        screenName: data.user.screen_name,\n        isDirectMessage: false,\n      },\n    });\n\n    conversation = Conversations.findOne(conversationId);\n  }\n\n  // create new message\n  return createMessage(conversation, data.text, data.user);\n};\n\n/*\n * create new conversation by direct message\n */\nexport const getOrCreateDirectMessageConversation = (data, integration) => {\n  let conversation = Conversations.findOne({\n    'twitterData.isDirectMessage': true,\n    $or: [\n      {\n        'twitterData.directMessage.senderId': data.sender_id,\n        'twitterData.directMessage.recipientId': data.recipient_id,\n      },\n      {\n        'twitterData.directMessage.senderId': data.recipient_id,\n        'twitterData.directMessage.recipientId': data.sender_id,\n      },\n    ],\n  });\n\n  if (conversation) {\n    // if closed, reopen it\n    updateConversation(conversation._id);\n\n    // create new conversation\n  } else {\n    const conversationId = Conversations.insert({\n      content: data.text,\n      integrationId: integration._id,\n      customerId: getOrCreateCustomer(integration._id, data.sender),\n      status: CONVERSATION_STATUSES.NEW,\n\n      // save tweet id\n      twitterData: {\n        id: data.id,\n        idStr: data.id_str,\n        screenName: data.sender.screen_name,\n        isDirectMessage: true,\n        directMessage: {\n          senderId: data.sender_id,\n          senderIdStr: data.sender_id_str,\n          recipientId: data.recipient_id,\n          recipientIdStr: data.recipient_id_str,\n        },\n      },\n    });\n    conversation = Conversations.findOne(conversationId);\n  }\n\n  // create new message\n  return createMessage(conversation, data.text, data.sender);\n};\n\n// save twit instances by integration id\nexport const TwitMap = {};\n\nconst trackIntegration = integration => {\n  const integrationUserId = integration.twitterData.id;\n\n  const { consumerKey, consumerSecret } = Meteor.settings.services.twitter;\n\n  // Twit instance\n  const twit = new Twit({\n    consumer_key: consumerKey,\n    consumer_secret: consumerSecret,\n    access_token: integration.twitterData.token,\n    access_token_secret: integration.twitterData.tokenSecret,\n  });\n\n  // save twit instance\n  TwitMap[integration._id] = twit;\n\n  // create stream\n  const stream = twit.stream('user');\n\n  // listen for timeline\n  stream.on(\n    'tweet',\n    Meteor.bindEnvironment(data => {\n      // When situations like integration is deleted but trackIntegration\n      // version of that integration is still running, new conversations being\n      // created using non existing integrationId\n      if (!Integrations.findOne({ _id: integration._id })) {\n        return null;\n      }\n\n      // if user is replying to some tweet\n      if (data.in_reply_to_status_id) {\n        const conversation = Conversations.findOne({\n          'twitterData.id': data.in_reply_to_status_id,\n        });\n\n        // and that tweet must exists\n        if (conversation) {\n          return getOrCreateCommonConversation(data, integration);\n        }\n      }\n\n      data.entities.user_mentions.forEach(mention => {\n        // listen for only mentioned tweets\n        if (mention.id === integrationUserId) {\n          getOrCreateCommonConversation(data, integration);\n        }\n      });\n\n      return null;\n    }),\n  );\n\n  // listen for direct messages\n  stream.on(\n    'direct_message',\n    Meteor.bindEnvironment(data => {\n      // When situations like integration is deleted but trackIntegration\n      // version of that integration is still running, new conversations being\n      // created using non existing integrationId\n      if (!Integrations.findOne({ _id: integration._id })) {\n        return;\n      }\n\n      getOrCreateDirectMessageConversation(data.direct_message, integration);\n    }),\n  );\n};\n\n// track all twitter integrations for the first time\nIntegrations.find({ kind: KIND_CHOICES.TWITTER }).forEach(integration => {\n  trackIntegration(integration);\n});\n\nconst postCallback = error => {\n  if (error) {\n    throw Error(error.message);\n  }\n};\n\n/*\n * post reply to twitter\n */\nexport const tweetReply = (conversation, text) => {\n  const twit = TwitMap[conversation.integrationId];\n  const twitterData = conversation.twitterData;\n\n  // send direct message\n  if (conversation.twitterData.isDirectMessage) {\n    return twit.post(\n      'direct_messages/new',\n      {\n        user_id: twitterData.directMessage.senderIdStr,\n        text,\n      },\n      Meteor.bindEnvironment(postCallback),\n    );\n  }\n\n  // send reply\n  return twit.post(\n    'statuses/update',\n    {\n      status: `@${twitterData.screenName} ${text}`,\n\n      // replying tweet id\n      in_reply_to_status_id: twitterData.idStr,\n    },\n    Meteor.bindEnvironment(postCallback),\n  );\n};\n\n// twitter oauth ===============\nconst { consumerKey, consumerSecret, redirectUrl } = Meteor.settings.services.twitter;\nconst socTwitter = new soc.Twitter({\n  CONSUMER_KEY: consumerKey,\n  CONSUMER_SECRET: consumerSecret,\n  REDIRECT_URL: redirectUrl,\n});\n\nMeteor.methods({\n  'integrations.getTwitterAuthorizeUrl': () => socTwitter.getAuthorizeUrl(),\n});\n\nexport default {\n  trackIntegration,\n  tweetReply,\n  soc: socTwitter,\n\n  authenticate: (queryParams, callback) => {\n    // after user clicked authenticate button\n    socTwitter.callback({ query: queryParams }).then(\n      Meteor.bindEnvironment(data => {\n        // return integration info\n        callback({\n          name: data.info.name,\n          twitterData: {\n            id: data.info.id,\n            token: data.tokens.auth.token,\n            tokenSecret: data.tokens.auth.token_secret,\n          },\n        });\n      }),\n    );\n  },\n};\n","import { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\n// twitter schemas ==============\nexport const twitterSchema = new SimpleSchema({\n  id: {\n    type: Number,\n  },\n  token: {\n    type: String,\n  },\n  tokenSecret: {\n    type: String,\n  },\n});\n\n// facebook schemas ==============\nexport const facebookSchema = new SimpleSchema({\n  appId: {\n    type: String,\n  },\n  pageIds: {\n    type: [String],\n  },\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Conversations } from '/imports/api/conversations/conversations';\nimport { Messages } from '/imports/api/conversations/messages';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Channels } from '/imports/api/channels/channels';\nimport { Integrations, messengerSchema, formSchema } from '../integrations';\nimport { KIND_CHOICES } from '../constants';\n\n// add messenger\nexport const addMessenger = new ValidatedMethod({\n  name: 'integrations.addMessenger',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, { name: String, brandId: String });\n  },\n\n  run({ doc }) {\n    return Integrations.insert(Object.assign(doc, { kind: KIND_CHOICES.MESSENGER }));\n  },\n});\n\n// edit messenger\nexport const editMessenger = new ValidatedMethod({\n  name: 'integrations.editMessenger',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, { name: String, brandId: String });\n  },\n\n  run({ _id, doc }) {\n    return Integrations.update({ _id }, { $set: doc });\n  },\n});\n\nconst generateFormDoc = (mainDoc, formDoc) =>\n  Object.assign(mainDoc, {\n    kind: KIND_CHOICES.FORM,\n    formData: formDoc,\n  });\n\n// add form\nexport const addForm = new ValidatedMethod({\n  name: 'integrations.addForm',\n  mixins: [ErxesMixin],\n\n  validate({ mainDoc, formDoc }) {\n    check(mainDoc, { name: String, brandId: String, formId: String });\n    check(formDoc, formSchema);\n  },\n\n  run({ mainDoc, formDoc }) {\n    return Integrations.insert(generateFormDoc(mainDoc, formDoc));\n  },\n});\n\n// edit form\nexport const editForm = new ValidatedMethod({\n  name: 'integrations.editForm',\n  mixins: [ErxesMixin],\n\n  validate({ _id, mainDoc, formDoc }) {\n    check(_id, String);\n    check(mainDoc, { name: String, brandId: String, formId: String });\n    check(formDoc, formSchema);\n  },\n\n  run({ _id, mainDoc, formDoc }) {\n    return Integrations.update({ _id }, { $set: generateFormDoc(mainDoc, formDoc) });\n  },\n});\n\n// integration remove\nexport const remove = new ValidatedMethod({\n  name: 'integrations.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    // check whether or not used in channels\n    if (Channels.find({ integrationIds: { $in: [id] } }).count() > 0) {\n      throw new Meteor.Error(\n        'integrations.remove.usedInChannel',\n        'You cannot delete this integration. It belongs to other channel.',\n      );\n    }\n\n    // conversations\n    const conversations = Conversations.find({ integrationId: id }).fetch();\n    const conversationIds = conversations.map(c => c._id);\n\n    // remove messages\n    Messages.remove({ conversationId: { $in: conversationIds } });\n\n    // remove conversations\n    Conversations.remove({ integrationId: id });\n\n    // remove customers\n    Customers.remove({ integrationId: id });\n\n    return Integrations.remove(id);\n  },\n});\n\nexport const saveMessengerApperance = new ValidatedMethod({\n  name: 'integrations.saveMessengerApperance',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, {\n      color: String,\n      wallpaper: Match.Optional(String),\n      logo: Match.Optional(String),\n    });\n  },\n\n  run({ _id, doc }) {\n    return Integrations.update({ _id }, { $set: { uiOptions: doc } });\n  },\n});\n\nexport const saveMessengerConfigs = new ValidatedMethod({\n  name: 'integrations.saveMessengerConfigs',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, messengerSchema);\n  },\n\n  run({ _id, doc }) {\n    return Integrations.update({ _id }, { $set: { messengerData: doc } });\n  },\n});\n","export const KIND_CHOICES = {\n  MESSENGER: 'messenger',\n  FORM: 'form',\n  TWITTER: 'twitter',\n  FACEBOOK: 'facebook',\n  ALL_LIST: ['messenger', 'form', 'twitter', 'facebook'],\n};\n\nexport const FORM_LOAD_TYPES = {\n  SHOUTBOX: 'shoutbox',\n  POPUP: 'popup',\n  EMBEDDED: 'embedded',\n  ALL_LIST: ['', 'shoutbox', 'popup', 'embedded'],\n};\n\nexport const FORM_SUCCESS_ACTIONS = {\n  EMAIL: 'email',\n  REDIRECT: 'redirect',\n  ONPAGE: 'onPage',\n  ALL_LIST: ['', 'email', 'redirect', 'onPage'],\n};\n","import faker from 'faker';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Factory } from 'meteor/dburles:factory';\nimport { Brands } from '/imports/api/brands/brands';\nimport { Channels } from '/imports/api/channels/channels';\nimport { facebookSchema, twitterSchema } from './social/social';\nimport { KIND_CHOICES, FORM_LOAD_TYPES, FORM_SUCCESS_ACTIONS } from './constants';\n\nclass IntegrationCollections extends Mongo.Collection {}\n\nexport const Integrations = new IntegrationCollections('integrations');\n\nIntegrations.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\n// form integration options\nexport const formSchema = new SimpleSchema({\n  loadType: {\n    type: String,\n    allowedValues: FORM_LOAD_TYPES.ALL_LIST,\n    optional: true,\n  },\n\n  successAction: {\n    type: String,\n    allowedValues: FORM_SUCCESS_ACTIONS.ALL_LIST,\n    optional: true,\n  },\n\n  fromEmail: {\n    type: String,\n    optional: true,\n  },\n\n  userEmailTitle: {\n    type: String,\n    optional: true,\n  },\n\n  userEmailContent: {\n    type: String,\n    optional: true,\n  },\n\n  adminEmails: {\n    type: [String],\n    optional: true,\n  },\n\n  adminEmailTitle: {\n    type: String,\n    optional: true,\n  },\n\n  adminEmailContent: {\n    type: String,\n    optional: true,\n  },\n\n  thankContent: {\n    type: String,\n    optional: true,\n  },\n\n  redirectUrl: {\n    type: String,\n    optional: true,\n  },\n});\n\nconst onlineHoursSchema = new SimpleSchema({\n  _id: {\n    type: String,\n  },\n  day: {\n    type: String,\n  },\n  from: {\n    type: String,\n  },\n  to: {\n    type: String,\n  },\n});\n\n// messenger ==============\nexport const messengerSchema = new SimpleSchema({\n  notifyCustomer: {\n    type: Boolean,\n    optional: true,\n  },\n\n  // manual, auto\n  availabilityMethod: {\n    type: String,\n    optional: true,\n    allowedValues: ['manual', 'auto'],\n  },\n  isOnline: {\n    type: Boolean,\n    optional: true,\n  },\n  onlineHours: {\n    type: [onlineHoursSchema],\n    optional: true,\n  },\n  timezone: {\n    type: String,\n    optional: true,\n  },\n  welcomeMessage: {\n    type: String,\n    optional: true,\n  },\n  awayMessage: {\n    type: String,\n    optional: true,\n  },\n  thankYouMessage: {\n    type: String,\n    optional: true,\n  },\n});\n\nIntegrations.schema = new SimpleSchema({\n  // messenger , twitter ...\n  kind: {\n    type: String,\n    allowedValues: KIND_CHOICES.ALL_LIST,\n  },\n\n  name: {\n    type: String,\n  },\n  brandId: {\n    type: String,\n  },\n  formId: {\n    type: String,\n    optional: true,\n  },\n\n  // form integration options\n  formData: {\n    type: formSchema,\n    optional: true,\n  },\n\n  // messenger availability, text and other options\n  messengerData: {\n    type: messengerSchema,\n    optional: true,\n  },\n\n  // twitter authentication info\n  twitterData: {\n    type: twitterSchema,\n    optional: true,\n  },\n\n  // facebook authentication info\n  facebookData: {\n    type: facebookSchema,\n    optional: true,\n  },\n\n  // ui options\n  uiOptions: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n});\n\nIntegrations.attachSchema(Integrations.schema);\n\nIntegrations.helpers({\n  brand() {\n    return Brands.findOne(this.brandId) || {};\n  },\n  channels() {\n    return Channels.find({ integrationIds: { $in: [this._id] } }).fetch();\n  },\n});\n\nIntegrations.publicFields = {\n  name: 1,\n  kind: 1,\n  brandId: 1,\n  formId: 1,\n  uiOptions: 1,\n  formData: 1,\n  messengerData: 1,\n};\n\nFactory.define('integration', Integrations, {\n  name: () => faker.random.word(),\n  kind: KIND_CHOICES.MESSENGER,\n  brandId: () => Random.id(),\n});\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Brands, emailConfigSchema } from '../brands';\n\n// brand add\nexport const add = new ValidatedMethod({\n  name: 'brands.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, Brands.schema);\n  },\n\n  run({ doc }) {\n    const id = Brands.insert(Object.assign({ userId: this.userId }, doc));\n    return id;\n  },\n});\n\n// brand edit\nexport const edit = new ValidatedMethod({\n  name: 'brands.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Brands.schema);\n  },\n\n  run({ id, doc }) {\n    const brand = Brands.findOne(id, {\n      fields: {\n        userId: 1,\n      },\n    });\n\n    if (!brand) {\n      throw new Meteor.Error('brands.edit.notFound', 'Brand not found');\n    }\n\n    return Brands.update(id, { $set: doc });\n  },\n});\n\n// brand remove\nexport const remove = new ValidatedMethod({\n  name: 'brands.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    const brand = Brands.findOne(id, { fields: { userId: 1 } });\n\n    if (!brand) {\n      throw new Meteor.Error('brands.remove.notFound', 'Brand not found');\n    }\n\n    return Brands.remove(id);\n  },\n});\n\n// config email\nexport const configEmail = new ValidatedMethod({\n  name: 'brands.configEmail',\n  mixins: [ErxesMixin],\n\n  validate({ id, config }) {\n    check(id, String);\n    check(config, emailConfigSchema);\n  },\n\n  run({ id, config }) {\n    return Brands.update(id, { $set: { emailConfig: config } });\n  },\n});\n","import faker from 'faker';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\n// Brand collection\nclass BrandsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    const brand = Object.assign({}, doc);\n\n    // generate code automatically\n    let code = Random.id().substr(0, 6);\n    while (this.findOne({ code })) {\n      code = Random.id().substr(0, 6);\n    }\n\n    brand.code = code;\n    brand.createdAt = new Date();\n    brand.emailConfig = { type: 'simple' };\n\n    return super.insert(brand, callback);\n  }\n}\n\nexport const Brands = new BrandsCollection('brands');\n\n// Deny all client-side updates since we will be using methods to manage\n// this collection\nBrands.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nexport const emailConfigSchema = new SimpleSchema({\n  type: {\n    type: String,\n    allowedValues: ['simple', 'custom'],\n  },\n  template: {\n    type: String,\n    optional: true,\n  },\n});\n\nBrands.schema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n});\n\nBrands.schemaExtra = new SimpleSchema({\n  code: {\n    type: String,\n  },\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  createdAt: {\n    type: Date,\n  },\n  schema: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n  emailConfig: {\n    type: emailConfigSchema,\n    optional: true,\n  },\n});\n\nBrands.attachSchema(Brands.schema);\nBrands.attachSchema(Brands.schemaExtra);\n\nBrands.publicFields = {\n  name: 1,\n  code: 1,\n  description: 1,\n  userId: 1,\n  createdAt: 1,\n  schema: 1,\n  emailConfig: 1,\n};\n\nFactory.define('brand', Brands, {\n  name: () => faker.random.word(),\n  userId: () => Random.id(),\n});\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { sendNotification } from '/imports/api/server/utils';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Channels } from '../channels';\n\nconst sendNotifications = (channelId, _memberIds, userId) => {\n  const memberIds = _memberIds || [];\n  const channel = Channels.findOne({ _id: channelId });\n\n  const content = `You have invited to '${channel.name}' channel.`;\n\n  sendNotification({\n    createdUser: userId,\n    notifType: 'channelMembersChange',\n    title: content,\n    content,\n    link: `/inbox/${channel._id}`,\n\n    // exclude current user\n    receivers: memberIds.filter(id => id !== userId),\n  });\n};\n\n// channel add\nexport const add = new ValidatedMethod({\n  name: 'channels.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    // check doc\n    check(doc, Channels.schema);\n  },\n\n  run({ doc }) {\n    const obj = Object.assign({ userId: this.userId }, doc);\n\n    const channelId = Channels.insert(obj);\n\n    // send notification\n    sendNotifications(channelId, doc.memberIds, this.userId);\n\n    return channelId;\n  },\n});\n\n// channel edit\nexport const edit = new ValidatedMethod({\n  name: 'channels.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Channels.schema);\n  },\n\n  run({ id, doc }) {\n    const obj = Channels.findOne(id, { fields: { userId: 1 } });\n\n    if (!obj) {\n      throw new Meteor.Error('channels.edit.notFound', 'Channel not found');\n    }\n\n    Object.assign(doc, { memberIds: doc.memberIds || [] });\n\n    // add current user to members automatically\n    if (doc.memberIds.indexOf(this.userId) === -1) {\n      doc.memberIds.push(this.userId);\n    }\n\n    // update action\n    Channels.update(id, { $set: doc });\n\n    const updatedChannel = Channels.findOne(id);\n\n    // send notification\n    sendNotifications(id, updatedChannel.memberIds, this.userId);\n  },\n});\n\n// channel remove\nexport const remove = new ValidatedMethod({\n  name: 'channels.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    const obj = Channels.findOne(id, { fields: { userId: 1 } });\n\n    if (!obj) {\n      throw new Meteor.Error('channels.remove.notFound', 'Channel not found');\n    }\n\n    return Channels.remove(id);\n  },\n});\n","import faker from 'faker';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Factory } from 'meteor/dburles:factory';\n\nclass ChannelsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    // extend doc with auto values\n    const modifier = Object.assign(\n      {\n        createdAt: new Date(),\n        conversationCount: 0,\n        openConversationCount: 0,\n      },\n      doc,\n    );\n\n    // add current user to members\n    if (modifier.memberIds.indexOf(modifier.userId) === -1) {\n      modifier.memberIds.push(modifier.userId);\n    }\n\n    return super.insert(modifier, callback);\n  }\n}\n\nexport const Channels = new ChannelsCollection('channels');\n\nChannels.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nChannels.schema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n  integrationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  memberIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nChannels.schemaExtra = new SimpleSchema({\n  createdAt: {\n    type: Date,\n  },\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n\n  // All conversation count\n  conversationCount: {\n    type: Number,\n  },\n\n  // Open/unresolved conversation count\n  openConversationCount: {\n    type: Number,\n  },\n});\n\nChannels.attachSchema(Channels.schema);\nChannels.attachSchema(Channels.schemaExtra);\n\nChannels.publicFields = {\n  name: 1,\n  description: 1,\n  integrationIds: 1,\n  memberIds: 1,\n  userId: 1,\n  createdAt: 1,\n  openConversationCount: 1,\n  conversationCount: 1,\n};\n\nFactory.define('channel', Channels, {\n  name: () => faker.random.word(),\n  memberIds: () => [Random.id()],\n  integrationIds: () => [Random.id()],\n  userId: () => Random.id(),\n});\n","/*\n * we will use this to call graphql subscripton. After we replace methods with\n * mutations this temp mutations will be deleted\n*/\n\nimport { mutate } from '../../server/utils';\n\nexport const messageInserted = messageId =>\n  mutate(\n    `\n    mutation {\n      conversationMessageInserted(_id: \"${messageId}\")\n    }\n  `,\n  );\n\nexport const conversationsChanged = (conversationIds, type) =>\n  mutate(\n    `\n    mutation {\n      conversationsChanged(_ids: ${JSON.stringify(conversationIds)}, type: \"${type}\")\n    }\n  `,\n  );\n","import { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\nimport moment from 'moment';\nimport { SyncedCron } from 'meteor/percolate:synced-cron';\nimport { sendEmail } from '/imports/api/server/utils';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Brands } from '/imports/api/brands/brands';\nimport { Conversations } from '../conversations';\nimport { CONVERSATION_STATUSES } from '../constants';\nimport { Messages } from '../messages';\n\nfunction sendMessageEmail() {\n  // new or open conversations\n  const conversations = Conversations.find(\n    {\n      status: { $in: [CONVERSATION_STATUSES.NEW, CONVERSATION_STATUSES.OPEN] },\n    },\n    { fields: { _id: 1, customerId: 1, brandId: 1 } },\n  );\n\n  _.each(conversations.fetch(), conversation => {\n    const customer = Customers.findOne(conversation.customerId);\n    const brand = Brands.findOne(conversation.brandId);\n\n    if (!customer || !customer.email) {\n      return;\n    }\n    if (!brand) {\n      return;\n    }\n\n    // user's last non answered question\n    const question = Messages.findOne(\n      {\n        conversationId: conversation._id,\n        customerId: { $exists: true },\n      },\n      { sort: { createdAt: -1 } },\n    ) || {};\n\n    question.createdAt = moment(question.createdAt).format('DD MMM YY, HH:mm');\n\n    // generate admin unread answers\n    const answers = [];\n\n    const adminMessages = Messages.find(\n      {\n        conversationId: conversation._id,\n        userId: { $exists: true },\n        isCustomerRead: { $exists: false },\n\n        // exclude internal notes\n        internal: false,\n      },\n      { sort: { createdAt: 1 } },\n    ).fetch();\n\n    _.each(adminMessages, message => {\n      const answer = message;\n\n      // add user object to answer\n      answer.user = Meteor.users.findOne(message.userId);\n      answer.createdAt = moment(answer.createdAt).format('DD MMM YY, HH:mm');\n      answers.push(answer);\n    });\n\n    if (answers.length < 1) {\n      return;\n    }\n\n    // template data\n    const data = { customer, question, answers, brand };\n\n    // add user's signature\n    const user = Meteor.users.findOne(answers[0].userId);\n\n    if (user && user.emailSignatures) {\n      const signature = _.find(user.emailSignatures, s => brand._id === s.brandId);\n\n      if (signature) {\n        data.signature = signature.signature;\n      }\n    }\n\n    // send email\n    sendEmail({\n      to: customer.email,\n      subject: `Reply from \"${brand.name}\"`,\n      template: {\n        name: 'conversationCron',\n        isCustom: true,\n        data,\n      },\n    });\n\n    // mark sent messages as read\n    Messages.update(\n      {\n        conversationId: conversation._id,\n        userId: { $exists: true },\n        isCustomerRead: { $exists: false },\n      },\n      { $set: { isCustomerRead: true } },\n      { multi: true },\n    );\n  });\n}\n\nSyncedCron.add({\n  name: \"Send unread conversation messages to customer's email\",\n\n  schedule(parser) {\n    // return parser.text('every 10 seconds');\n    return parser.text('every 10 minutes');\n  },\n\n  job() {\n    sendMessageEmail();\n  },\n});\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport strip from 'strip';\n\nimport { ErxesMixin } from '/imports/api/utils';\nimport { sendNotification, sendEmail } from '/imports/api/server/utils';\nimport { KIND_CHOICES } from '/imports/api/integrations/constants';\nimport { tweetReply } from '/imports/api/integrations/social/server/twitter';\nimport { facebookReply } from '/imports/api/integrations/social/server/facebook';\nimport { Messages, FormSchema } from '/imports/api/conversations/messages';\nimport {\n  Conversations,\n  ConversationIdsSchema,\n  AssignSchema,\n  ChangeStatusSchema,\n} from '/imports/api/conversations/conversations';\nimport { CONVERSATION_STATUSES } from '/imports/api/conversations/constants';\nimport { conversationsChanged, messageInserted } from './apolloPubSubs';\n\n/*\n * all possible users they can get notifications\n */\nconst conversationNotifReceivers = (conversation, currentUserId) => {\n  let userIds = [];\n\n  // assigned user can get notifications\n  if (conversation.assignedUserId) {\n    userIds.push(conversation.assignedUserId);\n  }\n\n  // participated users can get notifications\n  if (conversation.participatedUserIds) {\n    userIds = _.union(userIds, conversation.participatedUserIds);\n  }\n\n  // exclude current user\n  userIds = _.without(userIds, currentUserId);\n\n  return userIds;\n};\n\n/*\n * create new message from admin\n */\nexport const addMessage = new ValidatedMethod({\n  name: 'conversations.addMessage',\n  mixins: [ErxesMixin],\n  validate: FormSchema.validator(),\n\n  run(_doc) {\n    const doc = _doc;\n    const conversation = Conversations.findOne(doc.conversationId);\n\n    if (!conversation) {\n      throw new Meteor.Error(\n        'conversations.addMessage.conversationNotFound',\n        'Conversation not found',\n      );\n    }\n\n    const integration = conversation.integration();\n\n    // normalize content, attachments\n    const content = doc.content || '';\n    const attachments = doc.attachments || [];\n\n    doc.content = content;\n    doc.attachments = attachments;\n\n    // if there is no attachments and no content then throw content required\n    // error\n    if (attachments.length === 0 && !strip(content)) {\n      throw new Meteor.Error('conversations.addMessage.contentRequired', 'Content is required');\n    }\n\n    // setting conversation's content to last message\n    Conversations.update({ _id: doc.conversationId }, { $set: { content } });\n\n    const title = 'You have a new message.';\n\n    // send notification\n    sendNotification({\n      createdUser: this.userId,\n      notifType: 'conversationAddMessage',\n      title,\n      content,\n      link: `/inbox/details/${conversation._id}`,\n      receivers: conversationNotifReceivers(conversation, this.userId),\n    });\n\n    const userId = this.userId;\n\n    // do not send internal message to third service integrations\n    if (doc.internal) {\n      return Messages.insert({ ...doc, userId });\n    }\n\n    // send reply to twitter\n    if (integration.kind === KIND_CHOICES.TWITTER) {\n      return tweetReply(conversation, strip(content));\n    }\n\n    const messageId = Messages.insert({ ...doc, userId });\n\n    // notify graphl subscription\n    messageInserted(messageId);\n\n    const customer = conversation.customer();\n\n    // if conversation's integration kind is form then send reply to\n    // customer's email\n    const kind = integration.kind;\n    const email = customer ? customer.email : '';\n\n    if (kind === KIND_CHOICES.FORM && email) {\n      sendEmail({\n        to: customer.email,\n        subject: 'Reply',\n        template: {\n          name: 'notification',\n          data: {\n            notification: {\n              title: 'reply',\n              content,\n              date: new Date(),\n            },\n          },\n        },\n      });\n    }\n\n    // send reply to facebook\n    if (integration.kind === KIND_CHOICES.FACEBOOK) {\n      // when facebook kind is feed, assign commentId in extraData\n      facebookReply(conversation, strip(content), messageId);\n    }\n\n    return messageId;\n  },\n});\n\nconst checkConversationsExistance = conversationIds => {\n  const selector = { _id: { $in: conversationIds } };\n  const conversations = Conversations.find(selector).fetch();\n\n  if (conversations.length !== conversationIds.length) {\n    throw new Meteor.Error('conversations.conversationNotFound', 'Conversation not found.');\n  }\n\n  return { selector, conversations };\n};\n\n/*\n * assign employee to conversation\n */\nexport const assign = new ValidatedMethod({\n  name: 'conversations.assign',\n  mixins: [ErxesMixin],\n  validate: AssignSchema.validator(),\n\n  run({ conversationIds, assignedUserId }) {\n    // check conversations existance\n    const { selector } = checkConversationsExistance(conversationIds);\n\n    if (!Meteor.users.findOne(assignedUserId)) {\n      throw new Meteor.Error('conversations.assign.userNotFound', 'User not found.');\n    }\n\n    Conversations.update(\n      { _id: { $in: conversationIds } },\n      { $set: { assignedUserId } },\n      { multi: true },\n    );\n\n    // notify graphl subscription\n    conversationsChanged(conversationIds, 'statusChanged');\n\n    const updatedConversations = Conversations.find(selector).fetch();\n\n    // send notification\n    _.each(updatedConversations, conversation => {\n      const content = 'Assigned user has changed';\n\n      sendNotification({\n        createdUser: this.userId,\n        notifType: 'conversationAssigneeChange',\n        title: content,\n        content,\n        link: `/inbox/details/${conversation._id}`,\n        receivers: conversationNotifReceivers(conversation, this.userId),\n      });\n    });\n  },\n});\n\n/*\n * unassign employee from conversation\n */\nexport const unassign = new ValidatedMethod({\n  name: 'conversations.unassign',\n  mixins: [ErxesMixin],\n  validate: ConversationIdsSchema.validator(),\n\n  run({ conversationIds }) {\n    // check conversations existance\n    checkConversationsExistance(conversationIds);\n\n    Conversations.update(\n      { _id: { $in: conversationIds } },\n      { $unset: { assignedUserId: 1 } },\n      { multi: true },\n    );\n\n    // notify graphl subscription\n    conversationsChanged(conversationIds, 'statusChanged');\n  },\n});\n\n/*\n * change conversation status. closed, open etc...\n */\nexport const changeStatus = new ValidatedMethod({\n  name: 'conversations.changeStatus',\n  mixins: [ErxesMixin],\n  validate: ChangeStatusSchema.validator(),\n\n  run({ conversationIds, status }) {\n    // check conversations existance\n    const { conversations } = checkConversationsExistance(conversationIds);\n\n    Conversations.update({ _id: { $in: conversationIds } }, { $set: { status } }, { multi: true });\n\n    // notify graphl subscription\n    conversationsChanged(conversationIds, 'statusChanged');\n\n    // send notification\n    _.each(conversations, conversation => {\n      // if associated integration's notify customer config is setted as true\n      // send email to customer, when conversation close\n      if (status === CONVERSATION_STATUSES.CLOSED) {\n        const customer = conversation.customer();\n        const integration = conversation.integration();\n        const messengerData = integration.messengerData || {};\n        const notifyCustomer = messengerData.notifyCustomer || false;\n\n        if (notifyCustomer && customer.email) {\n          // send email to customer\n          sendEmail({\n            to: customer.email,\n            subject: 'Conversation detail',\n            template: {\n              name: 'conversationDetail',\n              data: {\n                conversationDetail: {\n                  title: 'Conversation detail',\n                  messages: Messages.find({ conversationId: conversation._id }).fetch(),\n                  date: new Date(),\n                },\n              },\n            },\n          });\n        }\n      }\n\n      const content = 'Conversation status has changed.';\n\n      sendNotification({\n        createdUser: this.userId,\n        notifType: 'conversationStateChange',\n        title: content,\n        content,\n        link: `/inbox/details/${conversation._id}`,\n        receivers: conversationNotifReceivers(conversation, this.userId),\n      });\n    });\n  },\n});\n\n/*\n * add given conversation to current user's starred list\n */\nexport const star = new ValidatedMethod({\n  name: 'conversations.star',\n  mixins: [ErxesMixin],\n  validate: ConversationIdsSchema.validator(),\n\n  run({ conversationIds }) {\n    // check conversations existance\n    checkConversationsExistance(conversationIds);\n\n    Meteor.users.update(this.userId, {\n      $addToSet: {\n        'details.starredConversationIds': { $each: conversationIds },\n      },\n    });\n  },\n});\n\n/*\n * remove given conversation from current user's starred list\n */\nexport const unstar = new ValidatedMethod({\n  name: 'conversations.unstar',\n  mixins: [ErxesMixin],\n  validate: ConversationIdsSchema.validator(),\n\n  run({ conversationIds }) {\n    // check conversations existance\n    checkConversationsExistance(conversationIds);\n\n    Meteor.users.update(this.userId, {\n      $pull: { 'details.starredConversationIds': { $in: conversationIds } },\n    });\n  },\n});\n\n/*\n * add or remove user from given conversations's participated list\n */\nexport const toggleParticipate = new ValidatedMethod({\n  name: 'conversations.toggleParticipate',\n  mixins: [ErxesMixin],\n  validate: ConversationIdsSchema.validator(),\n\n  run({ conversationIds }) {\n    // check conversations existance\n    const { selector } = checkConversationsExistance(conversationIds);\n\n    const extendSelector = {\n      ...selector,\n      participatedUserIds: { $in: [this.userId] },\n    };\n\n    // not previously added\n    if (Conversations.find(extendSelector).count() === 0) {\n      Conversations.update(\n        selector,\n        { $addToSet: { participatedUserIds: this.userId } },\n        { multi: true },\n      );\n    } else {\n      // remove\n      Conversations.update(\n        selector,\n        { $pull: { participatedUserIds: { $in: [this.userId] } } },\n        { multi: true },\n      );\n    }\n\n    // notify graphl subscription\n    conversationsChanged(conversationIds, 'participatedStateChanged');\n  },\n});\n\n/*\n * mark given conversation as read for current user\n */\nexport const markAsRead = new ValidatedMethod({\n  name: 'conversations.markAsRead',\n  mixins: [ErxesMixin],\n\n  validate({ conversationId }) {\n    check(conversationId, String);\n  },\n\n  run({ conversationId }) {\n    const conversation = Conversations.findOne({ _id: conversationId });\n\n    if (conversation) {\n      const readUserIds = conversation.readUserIds;\n\n      // if current user is first one\n      if (!readUserIds) {\n        return Conversations.update(\n          { _id: conversationId },\n          { $set: { readUserIds: [this.userId] } },\n        );\n      }\n\n      // if current user is not in read users list then add it\n      if (!readUserIds.includes(this.userId)) {\n        return Conversations.update(\n          { _id: conversationId },\n          { $push: { readUserIds: this.userId } },\n        );\n      }\n    }\n\n    return 'not affected';\n  },\n});\n","export const CONVERSATION_STATUSES = {\n  NEW: 'new',\n  OPEN: 'open',\n  CLOSED: 'closed',\n  ALL_LIST: ['new', 'open', 'closed'],\n};\n\nexport const FACEBOOK_DATA_KINDS = {\n  FEED: 'feed',\n  MESSENGER: 'messenger',\n  ALL_LIST: ['feed', 'messenger'],\n};\n","import faker from 'faker';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { TagsCollection, tagsHelper, tagSchemaOptions } from '/imports/api/tags/utils';\n\nimport { CONVERSATION_STATUSES, FACEBOOK_DATA_KINDS } from './constants';\n\nclass ConversationsCollection extends TagsCollection {\n  insert(doc, callback) {\n    const conversation = Object.assign(\n      {\n        createdAt: new Date(),\n        number: this.find().count() + 1,\n        messageCount: 0,\n      },\n      doc,\n    );\n\n    return super.insert(conversation, callback);\n  }\n}\n\nexport const Conversations = new ConversationsCollection('conversations');\n\nConversations.TAG_TYPE = 'conversation';\n\nConversations.helpers({\n  customer() {\n    return Customers.findOne(this.customerId) || {};\n  },\n  user() {\n    return Meteor.users.findOne(this.userId);\n  },\n  integration() {\n    return Integrations.findOne(this.integrationId) || {};\n  },\n  assignedUser() {\n    return Meteor.users.findOne(this.assignedUserId);\n  },\n  participatedUsers() {\n    const query = { _id: { $in: this.participatedUserIds || [] } };\n    return Meteor.users.find(query).fetch();\n  },\n  participatorCount() {\n    return (this.participatedUserIds && this.participatedUserIds.length) || 0;\n  },\n  ...tagsHelper,\n});\n\nexport const addParticipator = ({ conversationId, userId }) => {\n  if (conversationId && userId) {\n    Conversations.update(conversationId, {\n      $addToSet: { participatedUserIds: userId },\n    });\n  }\n};\n\nConversations.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\n// twitter schema ====================\nconst twitterDirectMessageSchema = new SimpleSchema({\n  senderId: {\n    type: Number,\n  },\n  senderIdStr: {\n    type: String,\n  },\n  recipientId: {\n    type: Number,\n  },\n  recipientIdStr: {\n    type: String,\n  },\n});\n\nconst twitterSchema = new SimpleSchema({\n  id: {\n    type: Number,\n    optional: true,\n  },\n  idStr: {\n    type: String,\n    optional: true,\n  },\n  screenName: {\n    type: String,\n    optional: true,\n  },\n  isDirectMessage: {\n    type: Boolean,\n  },\n  directMessage: {\n    type: twitterDirectMessageSchema,\n    optional: true,\n  },\n});\n\n// facebook schema\nconst facebookSchema = new SimpleSchema({\n  kind: {\n    type: String,\n    allowedValues: FACEBOOK_DATA_KINDS.ALL_LIST,\n  },\n  senderName: {\n    type: String,\n    optional: true,\n  },\n  senderId: {\n    type: String,\n  },\n  recipientId: {\n    type: String,\n    optional: true,\n  },\n\n  // when wall post\n  postId: {\n    type: String,\n    optional: true,\n  },\n\n  pageId: {\n    type: String,\n  },\n});\n\nConversations.schema = new SimpleSchema({\n  content: {\n    type: String,\n  },\n  integrationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  customerId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n  userId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  twitterData: {\n    type: twitterSchema,\n    optional: true,\n  },\n  facebookData: {\n    type: facebookSchema,\n    optional: true,\n  },\n  assignedUserId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n  status: {\n    type: String,\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST,\n  },\n  participatedUserIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n\n  // users's informed history\n  readUserIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n\n  createdAt: {\n    type: Date,\n  },\n\n  // number of total messages\n  messageCount: {\n    type: Number,\n  },\n\n  // number of total conversations\n  number: {\n    type: Number,\n  },\n\n  ...tagSchemaOptions(),\n});\n\nConversations.attachSchema(Conversations.schema);\n\n// Helper schemas. Using in method checks\nexport const ConversationIdsSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nexport const AssignSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  assignedUserId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nexport const ChangeStatusSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  status: {\n    type: String,\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST,\n  },\n});\n\nConversations.publicFields = {\n  number: 1,\n  assignedUserId: 1,\n  content: 1,\n  customerId: 1,\n  userId: 1,\n  integrationId: 1,\n  status: 1,\n  createdAt: 1,\n  messageCount: 1,\n  participatedUserIds: 1,\n  facebookData: 1,\n  readUserIds: 1,\n  tagIds: 1,\n};\n\nFactory.define('conversation', Conversations, {\n  content: () => faker.lorem.sentence(),\n  customerId: () => Random.id(),\n  integrationId: () => Factory.create('integration')._id,\n  status: () => CONVERSATION_STATUSES.NEW,\n});\n","import { Messages } from './messages.js';\nimport { Conversations } from './conversations.js';\n\nconst messageCountDenormalizer = {\n  _updateConversation(conversationId) {\n    // Recalculate the correct message count direct from MongoDB\n    const messageCount = Messages.find({\n      conversationId,\n    }).count();\n\n    Conversations.update(conversationId, { $set: { messageCount } });\n  },\n\n  afterInsertMessage(message) {\n    this._updateConversation(message.conversationId);\n  },\n\n  // Here we need to take the list of messages being removed,\n  // selected *before* the update because otherwise we can't figure out\n  // the relevant message id(s) (if the message has been deleted)\n  afterRemoveMessages(messages) {\n    messages.forEach(message => this._updateConversation(message.conversationId));\n  },\n};\n\nexport default messageCountDenormalizer;\n","import faker from 'faker';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\n\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\nimport { Customers } from '/imports/api/customers/customers';\nimport messageCountDenormalizer from './messageCountDenormalizer.js';\n\nimport { addParticipator } from './conversations';\n\nclass MessagesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    const message = Object.assign({ createdAt: new Date() }, doc);\n\n    const result = super.insert(message, callback);\n\n    messageCountDenormalizer.afterInsertMessage(message);\n\n    // add created user to participators\n    if (message.userId) {\n      addParticipator({\n        conversationId: message.conversationId,\n        userId: message.userId,\n      });\n    }\n\n    // add mentioned users to participators\n    _.each(message.mentionedUserIds || [], userId => {\n      addParticipator({\n        conversationId: message.conversationId,\n        userId,\n      });\n    });\n\n    return result;\n  }\n\n  remove(selector) {\n    const messages = this.find(selector).fetch();\n    const result = super.remove(selector);\n\n    messageCountDenormalizer.afterRemoveMessages(messages);\n\n    return result;\n  }\n}\n\nexport const Messages = new MessagesCollection('conversation_messages');\n\nMessages.helpers({\n  customer() {\n    return Customers.findOne(this.customerId);\n  },\n\n  user() {\n    return Meteor.users.findOne(this.userId);\n  },\n});\n\nMessages.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nexport const FormSchema = new SimpleSchema({\n  // only required when there is no attachments\n  content: {\n    type: String,\n    defaultValue: '',\n    optional: true,\n  },\n\n  attachments: {\n    type: [\n      new SimpleSchema({\n        url: { type: String, optional: true },\n        type: { type: String, optional: true },\n        name: { type: String, optional: true },\n        size: { type: Number, optional: true },\n      }),\n    ],\n\n    optional: true,\n  },\n\n  mentionedUserIds: {\n    type: [String],\n    optional: true,\n  },\n\n  conversationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n\n  internal: {\n    type: Boolean,\n  },\n});\n\nconst facebookSchema = new SimpleSchema({\n  commentId: {\n    type: String,\n    optional: true,\n  },\n\n  // comment, reaction, etc ...\n  item: {\n    type: String,\n    optional: true,\n  },\n\n  // when share photo\n  photoId: {\n    type: String,\n    optional: true,\n  },\n\n  // when share video\n  videoId: {\n    type: String,\n    optional: true,\n  },\n\n  link: {\n    type: String,\n    optional: true,\n  },\n\n  reactionType: {\n    type: String,\n    optional: true,\n  },\n\n  senderId: {\n    type: String,\n    optional: true,\n  },\n\n  senderName: {\n    type: String,\n    optional: true,\n  },\n});\n\nMessages.schema = new SimpleSchema([\n  FormSchema,\n  {\n    customerId: {\n      type: String,\n      optional: true,\n      regEx: SimpleSchema.RegEx.Id,\n    },\n\n    userId: {\n      type: String,\n      optional: true,\n      regEx: SimpleSchema.RegEx.Id,\n    },\n\n    createdAt: {\n      type: Date,\n    },\n\n    isCustomerRead: {\n      type: Boolean,\n      optional: true,\n    },\n\n    engageData: {\n      type: Object,\n      optional: true,\n      blackbox: true,\n    },\n\n    formWidgetData: {\n      type: Object,\n      optional: true,\n      blackbox: true,\n    },\n\n    facebookData: {\n      type: facebookSchema,\n      optional: true,\n    },\n  },\n]);\n\nMessages.attachSchema(Messages.schema);\n\nMessages.publicFields = {\n  content: 1,\n  attachments: 1,\n  mentionedUserIds: 1,\n  conversationId: 1,\n  customerId: 1,\n  userId: 1,\n  createdAt: 1,\n  engageData: 1,\n  formWidgetData: 1,\n  facebookData: 1,\n  internal: 1,\n};\n\nFactory.define('message', Messages, {\n  content: () => faker.lorem.sentence(),\n  conversationId: () => Random.id(),\n  customerId: () => Random.id(),\n  userId: () => Random.id(),\n  internal: () => false,\n});\n","import { Conversations } from './conversations';\nimport { Messages } from './messages';\nimport { CONVERSATION_STATUSES } from './constants';\n\nexport const createConversation = doc => {\n  return Conversations.insert({\n    ...doc,\n    status: CONVERSATION_STATUSES.NEW,\n    createdAt: new Date(),\n    number: Conversations.find().count() + 1,\n    messageCount: 0,\n  });\n};\n\nexport const createMessage = doc => {\n  return Messages.insert({\n    ...doc,\n    createdAt: new Date(),\n    internal: false,\n  });\n};\n","import { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { check } from 'meteor/check';\nimport { Random } from 'meteor/random';\nimport { ErxesMixin } from '/imports/api/utils';\nimport Segments from '../segments';\nimport { Customers } from '../customers';\n\n/**\n * Segments\n */\n\nexport const createSegment = new ValidatedMethod({\n  name: 'customers.createSegment',\n  mixins: [ErxesMixin],\n\n  validate: Segments.simpleSchema().validator(),\n\n  run(doc) {\n    return Segments.insert(doc);\n  },\n});\n\nexport const editSegment = new ValidatedMethod({\n  name: 'customers.editSegment',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Segments.simpleSchema());\n  },\n\n  run({ id, doc }) {\n    return Segments.update(id, { $set: doc });\n  },\n});\n\nexport const removeSegment = new ValidatedMethod({\n  name: 'customers.removeSegment',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Segments.remove(id);\n  },\n});\n\n/**\n * Internal notes\n */\n\nexport const createInternalNote = new ValidatedMethod({\n  name: 'customers.createInternalNote',\n  mixins: [ErxesMixin],\n\n  validate({ customerId, internalNote }) {\n    check(customerId, String);\n    check(internalNote, String);\n  },\n\n  run({ customerId, internalNote }) {\n    const internalNoteObj = {\n      _id: Random.id(),\n      content: internalNote,\n      createdBy: this.userId,\n      createdDate: new Date(),\n    };\n\n    Customers.update(customerId, { $addToSet: { internalNotes: internalNoteObj } });\n  },\n});\n\nexport const removeInternalNote = new ValidatedMethod({\n  name: 'customers.removeInternalNote',\n  mixins: [ErxesMixin],\n\n  validate({ customerId, internalNoteId }) {\n    check(customerId, String);\n    check(internalNoteId, String);\n  },\n\n  run({ customerId, internalNoteId }) {\n    const notes = Customers.findOne(customerId).internalNotes || [];\n    const canDelete = !!notes.find(n => n.createdBy === this.userId);\n\n    if (!canDelete) {\n      throw new Meteor.Error('permissionDenied', 'Permission denied.');\n    }\n\n    Customers.update(customerId, { $pull: { internalNotes: { _id: internalNoteId } } });\n  },\n});\n","export const connectors = {\n  any: 'any',\n  all: 'all',\n};\n\nexport const types = {\n  string: 'String',\n  number: 'Number',\n  boolean: 'Boolean',\n  date: 'Date',\n};\n\nexport const operators = {\n  string: [\n    { name: 'equals', value: 'e' },\n    { name: 'does not equal', value: 'dne' },\n    { name: 'contains', value: 'c' },\n    { name: 'does not contain', value: 'dnc' },\n    { name: 'is set', value: 'is', noInput: true },\n    { name: 'is not set', value: 'ins', noInput: true },\n  ],\n  number: [\n    { name: 'is greater than', value: 'igt' },\n    { name: 'equals to', value: 'et' },\n    { name: 'is less than', value: 'ilt' },\n    { name: 'is set', value: 'is', noInput: true },\n    { name: 'is not set', value: 'ins', noInput: true },\n  ],\n  boolean: [\n    { name: 'is true', value: 'it', noInput: true },\n    { name: 'is false', value: 'if', noInput: true },\n    { name: 'is set', value: 'is', noInput: true },\n    { name: 'is not set', value: 'ins', noInput: true },\n  ],\n  date: [\n    { name: 'was less than', value: 'wlt' },\n    { name: 'was more than', value: 'wmt' },\n    { name: 'will occur within', value: 'wow' },\n    { name: 'will occur after', value: 'woa' },\n    { name: 'is set', value: 'is', noInput: true },\n    { name: 'is not set', value: 'ins', noInput: true },\n  ],\n};\n\nexport const dateUnits = {\n  days: 'days',\n  weeks: 'weeks',\n  months: 'months',\n};\n","import faker from 'faker';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { Brands } from '/imports/api/brands/brands';\nimport { TagsCollection, tagsHelper, tagSchemaOptions } from '/imports/api/tags/utils';\n\nconst messengerSchema = new SimpleSchema({\n  lastSeenAt: {\n    type: Date,\n    label: 'Messenger: Last online',\n  },\n  sessionCount: {\n    type: Number,\n    label: 'Messenger: Session count',\n  },\n  isActive: {\n    type: Boolean,\n    label: 'Messenger: Is online',\n  },\n  customData: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n});\n\nconst twitterSchema = new SimpleSchema({\n  id: {\n    type: Number,\n    label: 'Twitter: ID (Number)',\n  },\n  idStr: {\n    type: String,\n    label: 'Twitter: ID (String)',\n  },\n  name: {\n    type: String,\n    label: 'Twitter: Name',\n  },\n  screenName: {\n    type: String,\n    label: 'Twitter: Screen name',\n  },\n  profileImageUrl: {\n    type: String,\n    label: 'Twitter: Profile photo',\n  },\n});\n\nconst facebookSchema = new SimpleSchema({\n  id: {\n    type: String,\n    label: 'Facebook: ID',\n  },\n  profilePic: {\n    type: String,\n    optional: true,\n    label: 'Facebook: Profile photo',\n  },\n});\n\nconst internalNoteSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  content: {\n    type: String,\n  },\n  createdBy: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  createdDate: {\n    type: Date,\n  },\n});\n\nconst schema = new SimpleSchema({\n  name: {\n    type: String,\n    optional: true,\n    label: 'Name',\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true,\n    label: 'Email',\n  },\n  phone: {\n    type: String,\n    optional: true,\n    label: 'Phone number',\n  },\n  isUser: {\n    type: Boolean,\n    label: 'Is user of one of our products',\n    optional: true,\n  },\n  integrationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  createdAt: {\n    type: Date,\n    label: 'Member since',\n  },\n  internalNotes: {\n    type: [internalNoteSchema],\n    optional: true,\n  },\n\n  // Integration data\n  messengerData: {\n    type: messengerSchema,\n    optional: true,\n  },\n  twitterData: {\n    type: twitterSchema,\n    optional: true,\n  },\n  facebookData: {\n    type: facebookSchema,\n    optional: true,\n  },\n\n  ...tagSchemaOptions(),\n});\n\nclass CustomersCollection extends TagsCollection {\n  insert(doc, callback) {\n    const customer = Object.assign({ createdAt: new Date() }, doc);\n\n    return super.insert(customer, callback);\n  }\n\n  /**\n   * Public displayable fields of customer object.\n   * Only the child fields (leaf fields).\n   * They're used for construct the table columns and segment filter fields.\n   * @return {Array.String} Fields names\n   */\n  getPublicFields() {\n    const schema = this.simpleSchema().schema();\n    const fields = Object.keys(schema)\n      .filter(key => {\n        // Can't accepts below types of fields\n        const unacceptedTypes = ['Object', 'Array'];\n        const isAcceptedType = unacceptedTypes.indexOf(schema[key].type.name) < 0;\n\n        // Exclude the fields which is used for internal use\n        const [parentFieldName] = key.split('.');\n        const notInternalUseField = this.internalUseFields.indexOf(parentFieldName) < 0;\n\n        return isAcceptedType && notInternalUseField;\n      })\n      .map(key => ({\n        key,\n        label: schema[key].label || key,\n      }));\n\n    return fields;\n  }\n}\n\nexport const Customers = new CustomersCollection('customers');\n\nCustomers.attachSchema(schema);\n\n// collection helpers\nCustomers.helpers({\n  integration() {\n    return Integrations.findOne(this.integrationId);\n  },\n  getIntegrationData() {\n    return {\n      messenger: this.messengerData || {},\n      twitter: this.twitterData || {},\n      facebook: this.facebookData || {},\n    };\n  },\n  brand() {\n    const integration = this.integration();\n    return Brands.findOne(integration && integration.brandId);\n  },\n  getMessengerCustomData() {\n    const results = [];\n    const data = this.messengerData.customData || {};\n\n    _.each(_.keys(data), key => {\n      results.push({\n        name: key.replace(/_/g, ' '),\n        value: data[key],\n      });\n    });\n\n    return results;\n  },\n  ...tagsHelper,\n});\n\nCustomers.TAG_TYPE = 'customer';\n\nCustomers.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nCustomers.publicFields = {\n  name: 1,\n  email: 1,\n  phone: 1,\n  isUser: 1,\n  integrationId: 1,\n  createdAt: 1,\n  messengerData: 1,\n  twitterData: 1,\n  facebookData: 1,\n  tagIds: 1,\n  internalNotes: 1,\n};\n\n/**\n * This fields list is used for not displaying\n * internal use fields on customer segments form.\n */\nCustomers.internalUseFields = ['tagIds', 'integrationId', 'internalNotes'];\n\nFactory.define('customer', Customers, {\n  email: () => faker.internet.email(),\n  integrationId: () => Random.id(),\n});\n","import moment from 'moment';\n\nexport default {\n  segments(segment, headSegment) {\n    const query = { $and: [] };\n\n    const childQuery = {\n      [segment.connector === 'any' ? '$or' : '$and']: segment.conditions.map(condition => ({\n        [condition.field]: convertConditionToQuery(condition),\n      })),\n    };\n    if (segment.conditions.length) {\n      query.$and.push(childQuery);\n    }\n\n    // Fetching parent segment\n    const embeddedParentSegment = typeof segment.getParentSegment === 'function'\n      ? segment.getParentSegment()\n      : null;\n    const parentSegment = headSegment || embeddedParentSegment;\n\n    if (parentSegment) {\n      const parentQuery = {\n        [parentSegment.connector === 'any'\n          ? '$or'\n          : '$and']: parentSegment.conditions.map(condition => ({\n          [condition.field]: convertConditionToQuery(condition),\n        })),\n      };\n      if (parentSegment.conditions.length) {\n        query.$and.push(parentQuery);\n      }\n    }\n\n    return query.$and.length ? query : {};\n  },\n};\n\nfunction convertConditionToQuery(condition) {\n  const { operator, type, dateUnit, value } = condition;\n  let transformedValue;\n\n  switch (type) {\n    case 'string':\n      transformedValue = value && value.toLowerCase();\n      break;\n    case 'number':\n    case 'date':\n      transformedValue = parseInt(value, 10);\n      break;\n    default:\n      transformedValue = value;\n      break;\n  }\n\n  switch (operator) {\n    case 'e':\n    case 'et':\n    default:\n      return transformedValue;\n    case 'dne':\n      return { $ne: transformedValue };\n    case 'c':\n      return { $regex: new RegExp(`.*${escapeRegExp(transformedValue)}.*`, 'i') };\n    case 'dnc':\n      return { $regex: new RegExp(`^((?!${escapeRegExp(transformedValue)}).)*$`, 'i') };\n    case 'igt':\n      return { $gt: transformedValue };\n    case 'ilt':\n      return { $lt: transformedValue };\n    case 'it':\n      return true;\n    case 'if':\n      return false;\n    case 'wlt':\n      return {\n        $gte: moment().subtract(transformedValue, dateUnit).toDate(),\n        $lte: new Date(),\n      };\n    case 'wmt':\n      return {\n        $lte: moment().subtract(transformedValue, dateUnit).toDate(),\n      };\n    case 'wow':\n      return {\n        $lte: moment().add(transformedValue, dateUnit).toDate(),\n        $gte: new Date(),\n      };\n    case 'woa':\n      return {\n        $gte: moment().add(transformedValue, dateUnit).toDate(),\n      };\n    case 'is':\n      return { $exists: true };\n    case 'ins':\n      return { $exists: false };\n  }\n}\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import { Mongo } from 'meteor/mongo';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { types, connectors, dateUnits } from './constants';\n\nconst conditionSchema = new SimpleSchema({\n  field: {\n    type: String,\n  },\n  operator: {\n    type: String,\n  },\n  value: {\n    type: String,\n    optional: true,\n  },\n  dateUnit: {\n    type: String,\n    optional: true,\n    allowedValues: Object.keys(dateUnits),\n  },\n  type: {\n    type: String,\n    allowedValues: Object.keys(types),\n  },\n});\n\nconst schema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n  subOf: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n  color: {\n    type: String,\n  },\n  connector: {\n    type: String,\n    allowedValues: Object.keys(connectors),\n  },\n  conditions: {\n    type: [conditionSchema],\n  },\n});\n\nclass SegmentsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    return super.insert(doc, callback);\n  }\n\n  remove(selector, callback) {\n    return super.remove(selector, callback);\n  }\n}\n\nconst Segments = new SegmentsCollection('segments');\n\nSegments.attachSchema(schema);\n\nSegments.helpers({\n  getParentSegment() {\n    return Segments.findOne(this.subOf);\n  },\n  getSubSegments() {\n    return Segments.find({ subOf: this._id }).fetch();\n  },\n});\n\nexport default Segments;\n","import { SyncedCron } from 'meteor/percolate:synced-cron';\nimport { Messages } from '/imports/api/engage/engage';\nimport { send } from '/imports/api/engage/utils';\n\nconst sendAutoMessage = () =>\n  Messages.find({ kind: 'auto', isLive: true }).forEach(message => send(message));\n\nSyncedCron.add({\n  name: 'Send auto messages',\n\n  schedule(parser) {\n    return parser.text('every day at 11pm');\n  },\n\n  job() {\n    sendAutoMessage();\n  },\n});\n","import { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Messages } from '../engage';\nimport { MESSAGE_KINDS } from '../constants';\nimport { send } from '../utils';\n\n// add messsage\nexport const messagesAdd = new ValidatedMethod({\n  name: 'engage.messages.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, Messages.schema);\n  },\n\n  run({ doc }) {\n    doc.createdUserId = this.userId;\n    doc.createdDate = new Date();\n    doc.deliveryReports = {};\n\n    // create\n    const messageId = Messages.insert(doc);\n\n    // if manual and live then send immediately\n    if (doc.kind === MESSAGE_KINDS.MANUAL && doc.isLive) {\n      const message = Messages.findOne(messageId);\n\n      send(message);\n    }\n\n    return { messageId, method: doc.method };\n  },\n});\n\n// edit message\nexport const messagesEdit = new ValidatedMethod({\n  name: 'engage.messages.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Messages.schema);\n  },\n\n  run({ id, doc }) {\n    Messages.update(id, { $set: doc });\n\n    return { messageId: id, method: doc.method };\n  },\n});\n\n// remove message\nexport const messagesRemove = new ValidatedMethod({\n  name: 'engage.messages.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Messages.remove(id);\n  },\n});\n\n// set live\nexport const messagesSetLive = new ValidatedMethod({\n  name: 'engage.messages.setLive',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Messages.update(id, { $set: { isLive: true, isDraft: false } });\n  },\n});\n\n// set pause\nexport const messagesSetPause = new ValidatedMethod({\n  name: 'engage.messages.setPause',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Messages.update(id, { $set: { isLive: false } });\n  },\n});\n\n// set live manual\nexport const messagesSetLiveManual = new ValidatedMethod({\n  name: 'engage.messages.setLiveManual',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    Messages.update(id, { $set: { isLive: true, isDraft: false } });\n\n    const message = Messages.findOne(id);\n\n    // if manual and live then send\n    send(message);\n  },\n});\n","export const EMAIL_CONTENT_CLASS = 'erxes-email-content';\nexport const EMAIL_CONTENT_PLACEHOLDER = `<div class=\"${EMAIL_CONTENT_CLASS}\"></div>`;\n\nexport const MESSAGE_KINDS = {\n  AUTO: 'auto',\n  VISITOR_AUTO: 'visitorAuto',\n  MANUAL: 'manual',\n  ALL_LIST: ['auto', 'visitorAuto', 'manual'],\n};\n\nexport const EMAIL_CONTENT_KEYS_FOR_SELECT = [\n  {\n    group: { value: 'customer', text: 'Customer' },\n    options: [{ value: 'name', text: 'Name' }, { value: 'email', text: 'Email' }],\n  },\n  {\n    group: { value: 'user', text: 'User' },\n    options: [\n      { value: 'fullName', text: 'Fullname' },\n      { value: 'position', text: 'Position' },\n      { value: 'email', text: 'Email' },\n    ],\n  },\n];\n\nexport const statusFilters = [\n  { key: 'live', value: 'Live' },\n  { key: 'draft', value: 'Draft' },\n  { key: 'paused', value: 'Paused' },\n  { key: 'yours', value: 'Your messages' },\n];\n\nexport const MESSENGER_KINDS = {\n  CHAT: 'chat',\n  NOTE: 'note',\n  POST: 'post',\n  ALL_LIST: ['chat', 'note', 'post'],\n  SELECT_OPTIONS: [\n    { value: 'chat', text: 'Chat' },\n    { value: 'note', text: 'Note' },\n    { value: 'post', text: 'Post' },\n  ],\n};\n\nexport const METHODS = {\n  MESSENGER: 'messenger',\n  EMAIL: 'email',\n  ALL_LIST: ['messenger', 'email'],\n};\n\nexport const SENT_AS_CHOICES = {\n  BADGE: 'badge',\n  SNIPPET: 'snippet',\n  FULL_MESSAGE: 'fullMessage',\n  ALL_LIST: ['badge', 'snippet', 'fullMessage'],\n  SELECT_OPTIONS: [\n    { value: 'badge', text: 'Badge' },\n    { value: 'snippet', text: 'Snippet' },\n    { value: 'fullMessage', text: 'Show the full message' },\n  ],\n};\n\nexport const VISITOR_AUDIENCE_RULES = [\n  { value: '', text: '' },\n  { value: 'browserLanguage', text: 'Browser language' },\n  { value: 'currentPageUrl', text: 'Current page url' },\n  { value: 'country', text: 'Country' },\n  { value: 'city', text: 'City' },\n  { value: 'numberOfVisits', text: 'Number of visits' },\n];\n\nconst stringTypeChoices = [\n  { value: '', text: '' },\n  { value: 'is', text: 'is' },\n  { value: 'isNot', text: 'is not' },\n  { value: 'startsWith', text: 'starts with' },\n  { value: 'endsWith', text: 'ends with' },\n  { value: 'contains', text: 'contains' },\n  { value: 'doesNotContain', text: 'does not contain' },\n  { value: 'isUnknown', text: 'is unknown' },\n  { value: 'hasAnyValue', text: 'has any value' },\n];\n\nconst numberTypeChoices = [\n  { value: '', text: '' },\n  { value: 'greaterThan', text: 'Greater than' },\n  { value: 'lessThan', text: 'Less than' },\n  { value: 'is', text: 'is' },\n  { value: 'isNot', text: 'is not' },\n  { value: 'isUnknown', text: 'is unknown' },\n  { value: 'hasAnyValue', text: 'has any value' },\n];\n\nexport const RULE_CONDITIONS = {\n  browserLanguage: stringTypeChoices,\n  currentPageUrl: stringTypeChoices,\n  country: stringTypeChoices,\n  city: stringTypeChoices,\n  numberOfVisits: numberTypeChoices,\n};\n","import { Meteor } from 'meteor/meteor';\nimport faker from 'faker';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport Segments from '/imports/api/customers/segments';\nimport { TagsCollection, tagsHelper, tagSchemaOptions } from '/imports/api/tags/utils';\nimport { MESSAGE_KINDS, MESSENGER_KINDS, METHODS, SENT_AS_CHOICES } from './constants';\n\nexport const Messages = new TagsCollection('engage_messages');\n\nMessages.TAG_TYPE = 'engageMessage';\n\nconst EmailSchema = new SimpleSchema({\n  templateId: {\n    type: String,\n    optional: true,\n  },\n  subject: {\n    type: String,\n  },\n  content: {\n    type: String,\n  },\n});\n\n// visistor auto message's per rule schema\nconst RuleSchema = new SimpleSchema({\n  _id: { type: String },\n\n  // browserLanguage, currentUrl, etc ...\n  kind: { type: String },\n\n  // Browser language, Current url etc ...\n  text: { type: String },\n\n  // is, isNot, startsWith\n  condition: { type: String },\n\n  value: { type: String, optional: true },\n});\n\nconst MessengerSchema = new SimpleSchema({\n  brandId: {\n    type: String,\n  },\n  kind: {\n    type: String,\n    allowedValues: MESSENGER_KINDS.ALL_LIST,\n    optional: true,\n  },\n  sentAs: {\n    type: String,\n    allowedValues: SENT_AS_CHOICES.ALL_LIST,\n  },\n  content: {\n    type: String,\n  },\n  rules: {\n    type: [RuleSchema],\n    optional: true,\n  },\n});\n\nMessages.schema = new SimpleSchema({\n  // auto, visitorAuto, manual\n  kind: {\n    type: String,\n    allowedValues: MESSAGE_KINDS.ALL_LIST,\n  },\n\n  // targets\n  segmentId: {\n    type: String,\n    optional: true,\n  },\n  customerIds: {\n    type: [String],\n    optional: true,\n  },\n\n  title: {\n    type: String,\n  },\n  fromUserId: {\n    type: String,\n  },\n\n  // messenger, email etc ...\n  method: {\n    type: String,\n    allowedValues: METHODS.ALL_LIST,\n  },\n\n  // email kind fields\n  email: {\n    type: EmailSchema,\n    optional: true,\n  },\n\n  // messenger kind fields\n  messenger: {\n    type: MessengerSchema,\n    optional: true,\n  },\n\n  isDraft: {\n    type: Boolean,\n    optional: true,\n  },\n  isLive: {\n    type: Boolean,\n    optional: true,\n  },\n  stopDate: {\n    type: Date,\n    optional: true,\n  },\n  ...tagSchemaOptions(),\n});\n\nMessages.schemaExtra = new SimpleSchema({\n  createdUserId: {\n    type: String,\n  },\n\n  createdDate: {\n    type: Date,\n  },\n\n  // read customer ids\n  messengerReceivedCustomerIds: {\n    type: [String],\n    optional: true,\n  },\n\n  // for example, save each customers's email delivery reports by messageId\n  deliveryReports: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n});\n\nMessages.helpers({\n  fromUser() {\n    return Meteor.users.findOne(this.fromUserId) || {};\n  },\n\n  segment() {\n    return Segments.findOne(this.segmentId) || {};\n  },\n\n  ...tagsHelper,\n});\n\nMessages.attachSchema(Messages.schema);\nMessages.attachSchema(Messages.schemaExtra);\n\nFactory.define('engage.messages', Messages, {\n  title: () => faker.random.word(),\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\n// node4mailer is a small modification to nodemailer to run on Node 4 (and higher),\n// whereas official Nodemailer runs only on Node 6 (and higher).\n// after meteor supports node6, we need to change this\nimport nodemailer from 'node4mailer';\n\nimport customerQueryBuilder from '/imports/api/customers/queryBuilder';\nimport Segments from '/imports/api/customers/segments';\nimport { EmailTemplates } from '/imports/api/emailTemplates/emailTemplates';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { KIND_CHOICES } from '/imports/api/integrations/constants';\nimport { createConversation, createMessage } from '/imports/api/conversations/utils';\n\nimport { EMAIL_CONTENT_PLACEHOLDER, METHODS, MESSAGE_KINDS } from './constants';\nimport { Messages } from './engage';\n\nexport const replaceKeys = ({ content, customer, user }) => {\n  let result = content;\n\n  // replace customer fields\n  result = result.replace(/{{\\s?customer.name\\s?}}/gi, customer.name);\n  result = result.replace(/{{\\s?customer.email\\s?}}/gi, customer.email);\n\n  // replace user fields\n  result = result.replace(/{{\\s?user.fullName\\s?}}/gi, user.fullName);\n  result = result.replace(/{{\\s?user.position\\s?}}/gi, user.position);\n  result = result.replace(/{{\\s?user.email\\s?}}/gi, user.email);\n\n  return result;\n};\n\nconst findCustomers = ({ customerIds, segmentId }) => {\n  // find matched customers\n  let customerQuery = { _id: { $in: customerIds || [] } };\n\n  if (segmentId) {\n    customerQuery = customerQueryBuilder.segments(Segments.findOne(segmentId));\n  }\n\n  return Customers.find(customerQuery).fetch();\n};\n\nconst saveMatchedCustomerIds = (messageId, customers) =>\n  Messages.update(\n    { _id: messageId },\n    { $set: { customerIds: customers.map(customer => customer._id) } },\n  );\n\nconst sendViaEmail = message => {\n  const { fromUserId, segmentId, customerIds } = message;\n  const { templateId, subject, content } = message.email;\n\n  const user = Meteor.users.findOne(fromUserId);\n  const userEmail = user.emails.pop();\n  const template = EmailTemplates.findOne(templateId);\n\n  // find matched customers\n  const customers = findCustomers({ customerIds, segmentId });\n\n  // save matched customer ids\n  saveMatchedCustomerIds(message._id, customers);\n\n  // create reusable transporter object using the default SMTP transport\n  const { host, port, secure, auth } = Meteor.settings.mail || {};\n\n  const transporter = nodemailer.createTransport({ host, port, secure, auth });\n\n  customers.forEach(customer => {\n    // replace keys in subject\n    const replacedSubject = replaceKeys({ content: subject, customer, user });\n\n    // replace keys such as {{ customer.name }} in content\n    let replacedContent = replaceKeys({ content, customer, user });\n\n    // if sender choosed some template then use it\n    if (template) {\n      replacedContent = template.content.replace(EMAIL_CONTENT_PLACEHOLDER, replacedContent);\n    }\n\n    const mailMessageId = Random.id();\n\n    // add new delivery report\n    Messages.update(\n      { _id: message._id },\n      {\n        $set: {\n          [`deliveryReports.${mailMessageId}`]: {\n            customerId: customer._id,\n            status: 'pending',\n          },\n        },\n      },\n    );\n\n    // send email\n    transporter.sendMail(\n      {\n        from: userEmail.address,\n        to: customer.email,\n        subject: replacedSubject,\n        html: replacedContent,\n        messageId: mailMessageId,\n      },\n      Meteor.bindEnvironment((error, info) => {\n        // set new status\n        const status = error ? 'failed' : 'sent';\n\n        // update status\n        Messages.update(\n          { _id: message._id },\n          {\n            $set: {\n              [`deliveryReports.${info.messageId}.status`]: status,\n            },\n          },\n        );\n      }),\n    );\n  });\n};\n\nconst sendViaMessenger = message => {\n  const { fromUserId, segmentId, customerIds } = message;\n  const { brandId, content } = message.messenger;\n\n  const user = Meteor.users.findOne(fromUserId);\n\n  // find integration\n  const integration = Integrations.findOne({\n    brandId,\n    kind: KIND_CHOICES.MESSENGER,\n  });\n\n  if (!integration) {\n    return 'Integration not found';\n  }\n\n  // find matched customers\n  const customers = findCustomers({ customerIds, segmentId });\n\n  // save matched customer ids\n  saveMatchedCustomerIds(message._id, customers);\n\n  customers.forEach(customer => {\n    // replace keys in content\n    const replacedContent = replaceKeys({ content, customer, user });\n\n    // create conversation\n    const conversationId = createConversation({\n      userId: fromUserId,\n      customerId: customer._id,\n      integrationId: integration._id,\n      content: replacedContent,\n    });\n\n    // create message\n    createMessage({\n      engageData: {\n        messageId: message._id,\n        fromUserId,\n        ...message.messenger,\n      },\n      conversationId,\n      userId: fromUserId,\n      customerId: customer._id,\n      content: replacedContent,\n    });\n  });\n};\n\nexport const send = message => {\n  const { method, kind } = message;\n\n  if (method === METHODS.EMAIL) {\n    return sendViaEmail(message);\n  }\n\n  // when kind is visitor auto, do not do anything\n  if (method === METHODS.MESSENGER && kind !== MESSAGE_KINDS.VISITOR_AUTO) {\n    return sendViaMessenger(message);\n  }\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Forms, Fields } from '../forms';\n\nconst generateCode = () => {\n  // generate code automatically\n  let code = Random.id().substr(0, 6);\n\n  while (Forms.findOne({ code })) {\n    code = Random.id().substr(0, 6);\n  }\n\n  return code;\n};\n\nexport const add = new ValidatedMethod({\n  name: 'forms.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, Forms.schema);\n  },\n\n  run({ doc }) {\n    doc.code = generateCode();\n    doc.createdUserId = this.userId;\n    doc.createdDate = new Date();\n\n    // create\n    return Forms.insert(doc);\n  },\n});\n\n// form edit\nexport const edit = new ValidatedMethod({\n  name: 'forms.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Forms.schema);\n  },\n\n  run({ id, doc }) {\n    return Forms.update(id, { $set: doc });\n  },\n});\n\n// form remove\nexport const remove = new ValidatedMethod({\n  name: 'forms.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    // check whether has any field\n    if (Fields.find({ formId: id }).count() > 0) {\n      throw new Meteor.Error(\n        'forms.cannotDelete.hasFields',\n        'You cannot delete this form. This form has some fields.',\n      );\n    }\n\n    // check whether used in integration\n    if (Integrations.find({ formId: id }).count() > 0) {\n      throw new Meteor.Error(\n        'forms.cannotDelete.usedInIntegration',\n        'You cannot delete this form. This form used in integration.',\n      );\n    }\n\n    return Forms.remove(id);\n  },\n});\n\n/* ----------------------- fields ----------------------- */\n\n// add field\nexport const addField = new ValidatedMethod({\n  name: 'forms.addField',\n  mixins: [ErxesMixin],\n\n  validate({ formId, doc }) {\n    check(formId, String);\n    check(doc, Fields.schema);\n  },\n\n  run({ formId, doc }) {\n    // set form id\n    doc.formId = formId;\n\n    // find last field by order\n    const lastField = Fields.findOne({}, { fields: { order: 1 }, sort: { order: -1 } });\n\n    // if there is no field then start with 0\n    let order = 0;\n\n    if (lastField) {\n      order = lastField.order + 1;\n    }\n\n    doc.order = order;\n\n    // insert field\n    return Fields.insert(doc);\n  },\n});\n\n// edit field\nexport const editField = new ValidatedMethod({\n  name: 'forms.editField',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, Fields.schema);\n  },\n\n  run({ _id, doc }) {\n    // update field\n    return Fields.update({ _id }, { $set: doc });\n  },\n});\n\n// remove field\nexport const removeField = new ValidatedMethod({\n  name: 'forms.removeField',\n  mixins: [ErxesMixin],\n\n  validate({ _id }) {\n    check(_id, String);\n  },\n\n  run({ _id }) {\n    Fields.remove(_id);\n  },\n});\n\n// update field's orders\nexport const updateFieldsOrder = new ValidatedMethod({\n  name: 'forms.updateFieldsOrder',\n  mixins: [ErxesMixin],\n\n  validate({ orderDics }) {\n    check(orderDics, Array);\n  },\n\n  run({ orderDics }) {\n    // update each field's order\n    orderDics.forEach(({ _id, order }) => {\n      Fields.update({ _id }, { $set: { order } });\n    });\n  },\n});\n\n// duplicate form\nexport const duplicate = new ValidatedMethod({\n  name: 'forms.duplicate',\n  mixins: [ErxesMixin],\n\n  validate({ id }) {\n    check(id, String);\n  },\n\n  run({ id }) {\n    const form = Forms.findOne(id);\n\n    form.title = `${form.title} duplicated`;\n    form.code = generateCode();\n\n    delete form._id;\n\n    // duplicate form\n    const newFormId = Forms.insert(form);\n\n    // duplicate fields\n    Fields.find({ formId: id }).forEach(field => {\n      const fieldParams = _.omit(field, '_id');\n      fieldParams.formId = newFormId;\n\n      Fields.insert(fieldParams);\n    });\n  },\n});\n","import faker from 'faker';\nimport { Random } from 'meteor/random';\nimport { Factory } from 'meteor/dburles:factory';\nimport { Mongo } from 'meteor/mongo';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\nexport const Forms = new Mongo.Collection('forms');\nexport const Fields = new Mongo.Collection('form_fields');\n\n/* ----------------------- Schemas ----------------------- */\n\n// forms\nForms.schema = new SimpleSchema({\n  title: {\n    type: String,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n});\n\nconst FormSchemaExtra = new SimpleSchema({\n  code: {\n    type: String,\n  },\n  createdUserId: {\n    type: String,\n  },\n  createdDate: {\n    type: Date,\n  },\n});\n\n// fields\nFields.schema = new SimpleSchema({\n  type: {\n    type: String,\n    allowedValues: [\n      'input',\n      'textarea',\n      'radio',\n      'check',\n      'select',\n      'divider',\n      'email',\n      'firstName',\n      'lastName',\n    ],\n  },\n  validation: {\n    type: String,\n    optional: true,\n    allowedValues: ['', 'number', 'date', 'email'],\n  },\n  text: {\n    type: String,\n    optional: true,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n\n  // for radio, check, select, choices\n  options: {\n    type: [String],\n    optional: true,\n  },\n\n  isRequired: {\n    type: Boolean,\n  },\n});\n\nconst FieldSchemaExtra = new SimpleSchema({\n  formId: {\n    type: String,\n  },\n  order: {\n    type: Number,\n    optional: true,\n  },\n});\n\n/* ----------------------- Collections ----------------------- */\n\nForms.attachSchema(Forms.schema);\nForms.attachSchema(FormSchemaExtra);\n\nFields.attachSchema(Fields.schema);\nFields.attachSchema(FieldSchemaExtra);\n\nFactory.define('form', Forms, {\n  title: () => faker.random.word(),\n  code: () => Random.id(),\n  description: () => faker.random.word(),\n  createdUserId: () => Random.id(),\n  createdDate: () => faker.date.recent(),\n});\n\nFactory.define('formField', Fields, {\n  formId: () => Random.id(),\n  type: 'input',\n  isRequired: false,\n  order: () => faker.random.number(),\n});\n","import { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { ResponseTemplates } from '../responseTemplates';\n\n// response template add\nexport const add = new ValidatedMethod({\n  name: 'responseTemplates.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, ResponseTemplates.schema);\n  },\n\n  run({ doc }) {\n    return ResponseTemplates.insert(doc);\n  },\n});\n\n// response template edit\nexport const edit = new ValidatedMethod({\n  name: 'responseTemplates.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, ResponseTemplates.schema);\n  },\n\n  run({ id, doc }) {\n    return ResponseTemplates.update(id, { $set: doc });\n  },\n});\n\n// response template remove\nexport const remove = new ValidatedMethod({\n  name: 'responseTemplates.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return ResponseTemplates.remove({ _id: id });\n  },\n});\n","import { Mongo } from 'meteor/mongo';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Brands } from '/imports/api/brands/brands';\n\n// Response template collection\nclass Collection extends Mongo.Collection {}\n\nexport const ResponseTemplates = new Collection('response_templates');\n\n// collection helpers\nResponseTemplates.helpers({\n  brand() {\n    return Brands.findOne(this.brandId);\n  },\n});\n\nResponseTemplates.schema = new SimpleSchema({\n  brandId: {\n    type: String,\n  },\n  name: {\n    type: String,\n  },\n  content: {\n    type: String,\n  },\n  files: {\n    type: [\n      new SimpleSchema({\n        url: { type: String },\n        type: { type: String, optional: true },\n        name: { type: String, optional: true },\n        size: { type: Number, optional: true },\n      }),\n    ],\n    optional: true,\n  },\n});\n\nResponseTemplates.attachSchema(ResponseTemplates.schema);\n","import { check, Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { _ } from 'meteor/underscore';\nimport { TAG_TYPES } from '../constants';\nimport { Tags } from '../tags';\n\nexport function tagObject({ tagIds, objectIds, collection }) {\n  check(collection, Mongo.Collection);\n  check(\n    collection.TAG_TYPE,\n    Match.Where(t => {\n      check(t, String);\n      return TAG_TYPES.ALL_LIST.indexOf(t) > -1;\n    }),\n  );\n\n  check(tagIds, [String]);\n  check(objectIds, [String]);\n\n  const type = collection.TAG_TYPE;\n\n  if (Tags.find({ _id: { $in: tagIds }, type }).count() !== tagIds.length) {\n    throw new Meteor.Error('tags.tagObject.notFound', 'Tag not found.');\n  }\n\n  const objects = collection.find({ _id: { $in: objectIds } }, { fields: { tagIds: 1 } });\n\n  let removeIds = [];\n\n  objects.forEach(obj => {\n    removeIds.push(obj.tagIds || []);\n  });\n\n  removeIds = _.uniq(_.flatten(removeIds));\n\n  Tags.update({ _id: { $in: removeIds } }, { $inc: { objectCount: -1 } }, { multi: true });\n\n  collection.update({ _id: { $in: objectIds } }, { $set: { tagIds } }, { multi: true });\n\n  Tags.update({ _id: { $in: tagIds } }, { $inc: { objectCount: 1 } }, { multi: true });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Conversations } from '/imports/api/conversations/conversations';\nimport { Messages } from '/imports/api/engage/engage';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Tags, FormSchema, TagItemSchema } from '../tags';\nimport { TAG_TYPES } from '../constants';\nimport { tagObject } from './api';\n\nexport const add = new ValidatedMethod({\n  name: 'tags.add',\n  validate: FormSchema.validator(),\n  mixins: [ErxesMixin],\n\n  run(doc) {\n    return Tags.insert(doc);\n  },\n});\n\nexport const edit = new ValidatedMethod({\n  name: 'tags.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, FormSchema);\n  },\n\n  run({ id, doc }) {\n    if (!Tags.findOne(id)) {\n      throw new Meteor.Error('tags.edit.notFound', 'Tag not found');\n    }\n\n    return Tags.update(id, { $set: doc });\n  },\n});\n\nexport const remove = new ValidatedMethod({\n  name: 'tags.remove',\n  mixins: [ErxesMixin],\n\n  validate(ids) {\n    check(ids, [String]);\n  },\n\n  run(ids) {\n    const tagCount = Tags.find({ _id: { $in: ids } }).count();\n\n    if (tagCount !== ids.length) {\n      throw new Meteor.Error('tags.remove.notFound', 'Tag not found');\n    }\n\n    let count = 0;\n\n    count += Customers.find({ tagIds: { $in: ids } }).count();\n    count += Conversations.find({ tagIds: { $in: ids } }).count();\n    count += Messages.find({ tagIds: { $in: ids } }).count();\n\n    // can't remove a tag with tagged objects\n    if (count > 0) {\n      throw new Meteor.Error('tags.remove.restricted', \"Can't remove a tag with tagged object(s)\");\n    }\n\n    return Tags.remove({ _id: { $in: ids } });\n  },\n});\n\n// actual tag action\nexport const tag = new ValidatedMethod({\n  name: 'tags.tag',\n  mixins: [ErxesMixin],\n  validate: TagItemSchema.validator(),\n\n  run({ type, targetIds, tagIds }) {\n    let collection = Conversations;\n\n    if (type === TAG_TYPES.CUSTOMER) {\n      collection = Customers;\n    }\n\n    if (type === TAG_TYPES.ENGAGE_MESSAGE) {\n      collection = Messages;\n    }\n\n    tagObject({\n      tagIds,\n      objectIds: targetIds,\n      collection,\n    });\n  },\n});\n","export const TAG_TYPES = {\n  CONVERSATION: 'conversation',\n  CUSTOMER: 'customer',\n  ENGAGE_MESSAGE: 'engageMessage',\n  ALL_LIST: ['conversation', 'customer', 'engageMessage'],\n};\n","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { TAG_TYPES } from './constants';\n\nclass TagsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    // extend doc with auto values\n    const tag = Object.assign(\n      {\n        createdAt: new Date(),\n        objectCount: 0,\n      },\n      doc,\n    );\n\n    if (!this.validateUniqueness(null, tag)) {\n      throw new Meteor.Error('tags.insert.restricted', 'Tag duplicated');\n    }\n\n    return super.insert(tag, callback);\n  }\n\n  update(selector, modifier) {\n    const set = modifier.$set || {};\n\n    if (!this.validateUniqueness(selector, set)) {\n      throw new Meteor.Error('tags.update.restricted', 'Tag duplicated');\n    }\n\n    return super.update(selector, modifier);\n  }\n\n  validateUniqueness(selector, data) {\n    const { name, type } = data;\n    const filter = { name, type };\n\n    if (!name || !type) {\n      return true;\n    }\n\n    // can't update name & type same time more than one tags.\n    if (selector && this.find(selector).count() > 1) {\n      return false;\n    }\n\n    const obj = selector && this.findOne(selector);\n    if (obj) {\n      filter._id = { $ne: obj._id };\n    }\n\n    if (this.findOne(filter)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\nexport const Tags = new TagsCollection('tags');\n\nTags.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nexport const FormSchema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  type: {\n    type: String,\n    allowedValues: TAG_TYPES.ALL_LIST,\n  },\n  colorCode: {\n    type: String,\n  },\n});\n\nTags.schema = new SimpleSchema([\n  FormSchema,\n  {\n    createdAt: {\n      type: Date,\n    },\n    objectCount: {\n      type: Number,\n    },\n  },\n]);\n\nTags.attachSchema(Tags.schema);\n\n// helper for conversation, customer, engage message etc ...\nexport const TagItemSchema = new SimpleSchema({\n  type: {\n    type: String,\n  },\n  targetIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  tagIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nTags.publicFields = {\n  name: 1,\n  type: 1,\n  createdAt: 1,\n  colorCode: 1,\n};\n\nFactory.define('tag', Tags, {\n  name: () => Random.id(),\n  type: () => TAG_TYPES.CONVERSATION,\n  colorCode: () => '#000',\n});\n","import { Mongo } from 'meteor/mongo';\nimport { _ } from 'meteor/underscore';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Tags } from './tags';\n\nexport class TagsCollection extends Mongo.Collection {\n  remove(selector, callback) {\n    const objects = this.find(selector).fetch();\n    const result = super.remove(selector, callback);\n\n    // remove tag items that using removing objects\n    let removeIds = [];\n\n    objects.forEach(obj => {\n      removeIds.push(obj.tagIds || []);\n    });\n\n    removeIds = _.uniq(_.flatten(removeIds));\n    Tags.update({ _id: { $in: removeIds } }, { $inc: { objectCount: -1 } });\n\n    return result;\n  }\n}\n\nexport const tagsHelper = {\n  tags() {\n    return Tags.find({ _id: { $in: this.tagIds || [] } }).fetch();\n  },\n};\n\nexport const tagSchemaOptions = () => ({\n  tagIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nAccounts.emailTemplates.siteName = Meteor.settings.company.name;\nAccounts.emailTemplates.from = Meteor.settings.company.noReplyEmail;\n\nAccounts.urls.resetPassword = token => Meteor.absoluteUrl(`reset-password/${token}`);\n\nMeteor.startup(() => {\n  if (Meteor.users.find().count() > 0) {\n    Accounts.config({\n      forbidClientAccountCreation: true,\n    });\n  }\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Customers } from '/imports/api/customers/customers';\n\nAccounts.onCreateUser((options, doc) => {\n  if (Meteor.users.find().count() > 0 && !options.invite) {\n    throw new Meteor.Error(403, 'Can not register');\n  }\n\n  const user = Object.assign({ details: options.details || {} }, doc);\n\n  if (Meteor.users.find().count() === 0) {\n    user.isOwner = true;\n  }\n\n  // For various user specific configurations\n  user.configs = {};\n\n  // Save customer fields selection config\n  user.configs.customerFields = Customers.getPublicFields();\n\n  return user;\n});\n\n/**\n * Validate email address\n */\nAccounts.validateNewUser(user => {\n  const email = user.emails[0].address;\n\n  if (/^[A-Z0-9'.1234z_%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n    return true;\n  }\n\n  throw new Meteor.Error('invalid-email', 'Please enter valid email');\n});\n","import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { check } from 'meteor/check';\nimport { Accounts } from 'meteor/accounts-base';\nimport { sendEmail } from '/imports/api/server/utils';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Channels } from '/imports/api/channels/channels';\nimport { Customers } from '/imports/api/customers/customers';\nimport {\n  CreateInvitationSchema,\n  UpdateInvitationSchema,\n  ProfileSchema,\n  EmailSignaturesSchema,\n} from '../schemas';\n\n// ***************** helpers ******************* //\n\n// update user's channels\nconst updateUserChannels = (channelIds, userId) => {\n  // remove from previous channels\n  Channels.update(\n    { memberIds: { $in: [userId] } },\n    { $pull: { memberIds: userId } },\n    { multi: true },\n  );\n\n  // add to given channels\n  Channels.update({ _id: { $in: channelIds } }, { $push: { memberIds: userId } }, { multi: true });\n};\n\n// update user's common infos\nconst updateUserCommonInfos = (userId, doc) => {\n  const user = Meteor.users.findOne({\n    _id: { $ne: userId },\n    'details.twitterUsername': doc.twitterUsername,\n  });\n\n  // check twitterUsername duplication\n  if (doc.twitterUsername && user) {\n    throw new Meteor.Error('users.updateInfo.wrongTwitterUsername', 'Duplicated twitter username');\n  }\n\n  Meteor.users.update(userId, {\n    $set: {\n      username: doc.username,\n      'details.twitterUsername': doc.twitterUsername,\n      'details.avatar': doc.avatar,\n      'details.fullName': doc.fullName,\n      'details.position': doc.position,\n      'emails.0.address': doc.email,\n    },\n  });\n};\n\nconst checkPasswordConfirmation = (password, passwordConfirmation) => {\n  if (password !== passwordConfirmation) {\n    throw new Meteor.Error(\n      'users.updateInfo.WrongPasswordConfirmation',\n      'Wrong password confirmation',\n    );\n  }\n};\n\n// ***************** methods ******************* //\n\n// create user and invite to given channels\nexport const invite = new ValidatedMethod({\n  name: 'users.add',\n\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, CreateInvitationSchema);\n  },\n\n  run({ doc }) {\n    const {\n      username,\n      twitterUsername,\n      avatar,\n      position,\n      fullName,\n      email,\n      role,\n      channelIds,\n      password,\n      passwordConfirmation,\n    } = doc;\n\n    checkPasswordConfirmation(password, passwordConfirmation);\n\n    // create user with given email and role\n    const userId = Accounts.createUser({\n      email,\n      invite: true,\n      details: { role },\n    });\n\n    // set new password\n    Accounts.setPassword(userId, password);\n\n    // set profile infos\n    updateUserCommonInfos(userId, {\n      twitterUsername,\n      username,\n      avatar,\n      fullName,\n      position,\n      email,\n    });\n\n    // add new user to channels\n    updateUserChannels(channelIds, userId);\n\n    // send email\n    sendEmail({\n      to: email,\n      subject: 'Invitation info',\n      template: {\n        name: 'invitation',\n        data: {\n          username,\n          password,\n        },\n      },\n    });\n  },\n});\n\n// update invitation info\nexport const edit = new ValidatedMethod({\n  name: 'users.edit',\n\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n\n    // check doc\n    check(doc, UpdateInvitationSchema);\n  },\n\n  run({ id, doc }) {\n    const {\n      twitterUsername,\n      position,\n      username,\n      avatar,\n      fullName,\n      email,\n      role,\n      channelIds,\n      password,\n      passwordConfirmation,\n    } = doc;\n\n    // update user channels channels\n    updateUserChannels(channelIds, id);\n\n    const user = Meteor.users.findOne(id);\n\n    // change password\n    if (doc.password) {\n      checkPasswordConfirmation(password, passwordConfirmation);\n\n      // set new password\n      Accounts.setPassword(id, password);\n    }\n\n    // if user is not owner then update profile infos\n    if (!user.isOwner) {\n      updateUserCommonInfos(id, {\n        username,\n        twitterUsername,\n        avatar,\n        position,\n        fullName,\n        email,\n      });\n\n      // update role\n      Meteor.users.update(id, { $set: { 'details.role': role } });\n    }\n  },\n});\n\n// edit profile\nexport const editProfile = new ValidatedMethod({\n  name: 'users.editProfile',\n  mixins: [ErxesMixin],\n  validate: ProfileSchema.validator(),\n\n  run(doc) {\n    // check password\n    const result = Accounts._checkPassword(Meteor.user(), doc.currentPassword);\n\n    if (result.error) {\n      throw new Meteor.Error('users.editProfile.invalidPassword', result.error.reason);\n    }\n\n    return updateUserCommonInfos(this.userId, doc);\n  },\n});\n\n// remove user\nexport const remove = new ValidatedMethod({\n  name: 'users.remove',\n  mixins: [ErxesMixin],\n\n  validate(userId) {\n    check(userId, String);\n  },\n\n  run(userId) {\n    const user = Meteor.users.findOne(userId);\n\n    // can not delete owner\n    if (user.isOwner) {\n      throw new Meteor.Error('users.remove.canNotDeleteOwner', 'You cannot delete the owner.');\n    }\n\n    // if the user involved in any channel then can not delete this user\n    if (Channels.find({ userId }).count() > 0) {\n      throw new Meteor.Error(\n        'users.remove.involvedInChannel',\n        'You cannot delete this user. This user belongs other channel.',\n      );\n    }\n\n    if (Channels.find({ memberIds: { $in: [userId] } }).count() > 0) {\n      throw new Meteor.Error(\n        'users.remove.involvedInChannel',\n        'You cannot delete this user. This user belongs other channel.',\n      );\n    }\n\n    // if there is no problem then delete it\n    Meteor.users.remove({ _id: userId });\n  },\n});\n\nexport const configEmailSignature = new ValidatedMethod({\n  name: 'users.configEmailSignature',\n  mixins: [ErxesMixin],\n  validate: EmailSignaturesSchema.validator(),\n\n  run({ signatures }) {\n    Meteor.users.update(this.userId, { $set: { emailSignatures: signatures } });\n  },\n});\n\n// get notification by email config\nexport const configGetNotificationByEmail = new ValidatedMethod({\n  name: 'users.configGetNotificationByEmail',\n  mixins: [ErxesMixin],\n\n  validate({ isAllowed }) {\n    check(isAllowed, Boolean);\n  },\n\n  run({ isAllowed }) {\n    Meteor.users.update(this.userId, {\n      $set: { 'details.getNotificationByEmail': isAllowed },\n    });\n  },\n});\n\n/**\n * Saves column selection config of customers list table\n * to the user's object\n */\nexport const configCustomerFields = new ValidatedMethod({\n  name: 'users.configCustomerFields',\n  mixins: [ErxesMixin],\n\n  validate({ fields }) {\n    check(fields, Array);\n\n    // Check if the fields are correctly named\n    const schemaFields = Customers.getPublicFields();\n    fields.forEach(({ key }) => {\n      const isCorrectField = schemaFields.find(f => f.key === key);\n      if (!isCorrectField) {\n        throw new Meteor.Error(\n          'users.configs.wrongCsutomerField',\n          'Wrong customer field declaration.',\n        );\n      }\n    });\n  },\n\n  run({ fields }) {\n    Meteor.users.update(this.userId, {\n      $set: { 'configs.customerFields': fields },\n    });\n  },\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Counts } from 'meteor/tmeasday:publish-counts';\n\nconst publicFields = {\n  isOwner: 1,\n  username: 1,\n  details: 1,\n  emailSignatures: 1,\n  emails: 1,\n  configs: 1,\n};\n\nMeteor.publish(null, function loggedInUserFields() {\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  return Meteor.users.find(this.userId, { fields: publicFields });\n});\n\nMeteor.publish('users.list', function usersList(params) {\n  check(params, {\n    ids: Match.Optional([String]),\n    limit: Match.Optional(Number),\n  });\n\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  Counts.publish(this, 'users.list.count', Meteor.users.find(), {\n    noReady: true,\n  });\n\n  return Meteor.users.find({}, { fields: publicFields, limit: params.limit });\n});\n","export const ROLES = {\n  ADMIN: 'admin',\n  CONTRIBUTOR: 'contributor',\n};\n","import { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { ROLES } from './constants';\n\n// user common infos schema\nconst CommonInfo = {\n  avatar: {\n    type: String,\n    optional: true,\n  },\n  fullName: {\n    type: String,\n  },\n  position: {\n    type: String,\n    optional: true,\n  },\n  username: {\n    type: String,\n  },\n  twitterUsername: {\n    type: String,\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n  },\n};\n\n// ************* invitation  ***************** //\nconst InvitationCommon = Object.assign({}, CommonInfo, {\n  // owner, admin, contributor\n  role: {\n    type: String,\n    allowedValues: [ROLES.ADMIN, ROLES.CONTRIBUTOR],\n  },\n\n  // channels to invite\n  channelIds: {\n    type: [String],\n    optional: true,\n  },\n});\n\nexport const CreateInvitationSchema = new SimpleSchema([\n  InvitationCommon,\n  {\n    password: {\n      type: String,\n    },\n    passwordConfirmation: {\n      type: String,\n    },\n  },\n]);\n\nexport const UpdateInvitationSchema = new SimpleSchema([\n  InvitationCommon,\n  {\n    password: {\n      type: String,\n      optional: true,\n    },\n    passwordConfirmation: {\n      type: String,\n      optional: true,\n    },\n  },\n]);\n\n// profile\nexport const ProfileSchema = new SimpleSchema([\n  CommonInfo,\n  {\n    currentPassword: {\n      type: String,\n      optional: true,\n    },\n  },\n]);\n\n// email signatures\nexport const EmailSignaturesSchema = new SimpleSchema({\n  signatures: {\n    type: [\n      new SimpleSchema({\n        brandId: {\n          type: String,\n          regEx: SimpleSchema.RegEx.Id,\n        },\n        signature: {\n          type: String,\n        },\n      }),\n    ],\n  },\n});\n","import { Mongo } from 'meteor/mongo';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\n// Email template collection\nclass Collection extends Mongo.Collection {}\n\nexport const EmailTemplates = new Collection('email_templates');\n\nEmailTemplates.schema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  content: {\n    type: String,\n  },\n});\n\nEmailTemplates.attachSchema(EmailTemplates.schema);\n","import { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { EmailTemplates } from './emailTemplates';\n\n// email template add\nexport const add = new ValidatedMethod({\n  name: 'emailTemplates.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, EmailTemplates.schema);\n  },\n\n  run({ doc }) {\n    return EmailTemplates.insert(doc);\n  },\n});\n\n// email template edit\nexport const edit = new ValidatedMethod({\n  name: 'emailTemplates.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, EmailTemplates.schema);\n  },\n\n  run({ id, doc }) {\n    return EmailTemplates.update(id, { $set: doc });\n  },\n});\n\n// email template remove\nexport const remove = new ValidatedMethod({\n  name: 'emailTemplates.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return EmailTemplates.remove({ _id: id });\n  },\n});\n","import { Match, check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { uploadFile } from './utils';\n\n// save binary data to amazon s3\n\nexport const uploadFileMethod = new ValidatedMethod({\n  name: 'uploadFile',\n\n  validate({ name, data }) {\n    check(name, String);\n    check(data, Match.Any);\n  },\n\n  run(doc) {\n    return uploadFile(doc);\n  },\n});\n","import AWS from 'aws-sdk';\nimport Handlebars from 'handlebars';\nimport { Meteor } from 'meteor/meteor';\nimport { Email } from 'meteor/email';\nimport { HTTP } from 'meteor/http';\nimport { Notifications } from 'meteor/erxes-notifications';\n\n// save binary data to amazon s3\nexport const uploadFile = ({ name, data }) => {\n  const { accessKeyId, secretAccessKey, bucket, prefix = '' } = Meteor.settings.services.aws;\n\n  // check credentials\n  if (!(accessKeyId || secretAccessKey || bucket)) {\n    return {\n      status: 'error',\n      data: 'Security credentials are not configured',\n    };\n  }\n\n  // initialize s3\n  const s3 = new AWS.S3({ accessKeyId, secretAccessKey });\n\n  // wait for putObject response\n  const syncPutObject = Meteor.wrapAsync(s3.putObject, s3);\n\n  // generate unique name\n  const fileName = `${prefix}${Math.random()}${name}`;\n\n  // create buffer from file data\n  const buffer = new Buffer(data);\n\n  // call putObject\n  const response = syncPutObject({\n    Bucket: bucket,\n    Key: fileName,\n    Body: buffer,\n    ACL: 'public-read',\n  });\n\n  response.url = `https://s3.amazonaws.com/${bucket}/${fileName}`;\n\n  return response;\n};\n\n// send email helpers ====================\nfunction applyTemplate(data, templateName) {\n  let template = Assets.getText(`emailTemplates/${templateName}.html`);\n\n  template = Handlebars.compile(template);\n\n  return template(data);\n}\n\nexport const sendEmail = ({ to, subject, template }) => {\n  const { isCustom, data, name } = template;\n\n  // generate email content by given template\n  const content = applyTemplate(data, name);\n\n  let html = '';\n\n  // for example brand related emails can be totally different\n  if (isCustom) {\n    html = content;\n\n    // invitation, notification emails can be same\n  } else {\n    html = applyTemplate({ content }, 'base');\n  }\n\n  // do not send email in test mode\n  if (Meteor.isTest) {\n    return;\n  }\n\n  Email.send({\n    from: Meteor.settings.company.noReplyEmail,\n    to,\n    subject,\n    html,\n  });\n};\n\n// send notification helper\nexport const sendNotification = _doc => {\n  const doc = _doc;\n\n  // Splitting receivers\n  const receivers = doc.receivers;\n  delete doc.receivers;\n\n  // Inserting entry to every receiver\n  receivers.forEach(receiverId => {\n    doc.receiver = receiverId;\n\n    // create notification\n    const response = Notifications.create(Object.assign({}, doc));\n\n    // if receiver did not disable to get this notification\n    if (response === 'ok') {\n      const receiver = Meteor.users.findOne({ _id: receiverId });\n      const details = receiver.details;\n\n      // if receiver did not disable email notification then send email\n      if (!(details && details.getNotificationByEmail === false)) {\n        sendEmail({\n          to: receiver.emails[0].address,\n          subject: 'Notification',\n          template: {\n            name: 'notification',\n            data: {\n              notification: doc,\n            },\n          },\n        });\n      }\n    }\n  });\n};\n\n// send to post to graphql server\nexport const mutate = query =>\n  HTTP.call('POST', Meteor.settings.public.APOLLO_CLIENT_URL, {\n    headers: { 'Content-Type': 'application/json' },\n    data: { query },\n  });\n\n// notify subscription server new message\nexport const apolloNotifyNewMessage = messageId => {\n  // Don't do anyting in test mode\n  if (Meteor.isTest) {\n    return;\n  }\n\n  mutate(\n    `\n    mutation {\n      conversationMessageInserted(_id: \"${messageId}\")\n    }\n  `,\n  );\n};\n","import { Meteor } from 'meteor/meteor';\nimport { ROLES } from '/imports/api/users/constants';\n\nconst RESTRICTED_METHODS = [\n  'users.invite',\n  'users.updateAccessInfo',\n  'users.remove',\n  'brands.add',\n  'brands.edit',\n  'brands.remove',\n  'brands.configEmail',\n  'channels.add',\n  'channels.edit',\n  'channels.remove',\n  'forms.add',\n  'forms.edit',\n  'forms.remove',\n  'integrations.add',\n  'integrations.edit',\n  'integrations.remove',\n  'integrations.addMessenger',\n  'integrations.addTwitter',\n  'integrations.addFacebook',\n];\n\n// all validated methods mixin\n// check login, permissions etc ..\nexport function ErxesMixin(_options) {\n  const options = _options;\n\n  // save real run\n  const runFunc = _options.run;\n\n  // override run\n  options.run = function run(...params) {\n    // check login required\n    if (!this.userId) {\n      throw new Meteor.Error('loginRequired', 'Login required.');\n    }\n\n    if (Meteor.isServer) {\n      const user = Meteor.users.findOne(this.userId);\n\n      // check contributor permissions\n      if (\n        user.details &&\n        user.details.role === ROLES.CONTRIBUTOR &&\n        RESTRICTED_METHODS.includes(_options.name)\n      ) {\n        throw new Meteor.Error('permissionDenied', 'Permission denied.');\n      }\n    }\n\n    return runFunc.call(this, ...params);\n  };\n\n  return options;\n}\n\nexport const wait = ms => {\n  const start = new Date().getTime();\n  let end = start;\n\n  while (end < start + ms) {\n    end = new Date().getTime();\n  }\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { Brands } from '/imports/api/brands/brands';\nimport { Channels } from '/imports/api/channels/channels';\nimport { Integrations } from '/imports/api/integrations/integrations';\n\n// if the database is empty on server start, create some sample data.\nMeteor.startup(() => {\n  if (Meteor.users.find().count() !== 0) {\n    return;\n  }\n\n  const { user, brand, integration, channel } = Meteor.settings.initialData;\n\n  const userId = Accounts.createUser(user);\n  const brandId = Brands.insert(Object.assign({ userId }, brand));\n  const integrationId = Integrations.insert(Object.assign({ brandId }, integration));\n  Channels.insert(\n    Object.assign(\n      {\n        userId,\n        memberIds: [userId],\n        integrationIds: [integrationId],\n      },\n      channel,\n    ),\n  );\n});\n","import { SyncedCron } from 'meteor/percolate:synced-cron';\n\n// Set up some rate limiting and other important security settings.\nimport './security.js';\n\n// This defines all the collections, publications and methods that the application provides\n// as an API to the client.\nimport './register-api.js';\n\n// This defines a starting set of data to be loaded if the app is loaded with an empty db.\nimport './fixtures.js';\n\nimport './notifications.js';\n\nSyncedCron.start();\n","import { Notifications } from 'meteor/erxes-notifications';\n\nconst Conversations = {\n  name: 'conversations',\n  description: 'Conversations',\n  types: [\n    {\n      name: 'conversationStateChange',\n      text: 'State change',\n    },\n    {\n      name: 'conversationAssigneeChange',\n      text: 'Assignee change',\n    },\n    {\n      name: 'conversationAddMessage',\n      text: 'Add message',\n    },\n  ],\n};\n\nconst Channels = {\n  name: 'channels',\n  description: 'Channels',\n  types: [\n    {\n      name: 'channelMembersChange',\n      text: 'Members change',\n    },\n  ],\n};\n\nNotifications.registerModule(Conversations);\nNotifications.registerModule(Channels);\n","import '/imports/api/users/schemas';\nimport '/imports/api/users/server/publications';\nimport '/imports/api/users/server/config';\nimport '/imports/api/users/server/hooks';\nimport '/imports/api/users/server/methods';\n\nimport '/imports/api/server/methods';\n\nimport '/imports/api/brands/server/methods';\nimport '/imports/api/customers/server/methods';\nimport '/imports/api/channels/server/methods';\nimport '/imports/api/integrations/server/methods';\nimport '/imports/api/integrations/social/server';\nimport '/imports/api/conversations/server/methods';\nimport '/imports/api/conversations/server/cronJobs';\nimport '/imports/api/tags/server/methods';\nimport '/imports/api/forms/server/methods';\nimport '/imports/api/responseTemplates/server/methods';\nimport '/imports/api/emailTemplates/methods';\nimport '/imports/api/engage/server/methods';\nimport '/imports/api/engage/server/cronJobs';\n","import { Meteor } from 'meteor/meteor';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { _ } from 'meteor/underscore';\n\n// Don't let people write arbitrary data to their 'profile' field from the client\nMeteor.users.deny({\n  update() {\n    return true;\n  },\n});\n\n// Get a list of all accounts methods by running `Meteor.server.method_handlers` in meteor shell\nconst AUTH_METHODS = [\n  'login',\n  'logout',\n  'logoutOtherClients',\n  'getNewToken',\n  'removeOtherTokens',\n  'configureLoginService',\n  'changePassword',\n  'forgotPassword',\n  'resetPassword',\n  'verifyEmail',\n  'createUser',\n  'ATRemoveService',\n  'ATCreateUserServer',\n  'ATResendVerificationEmail',\n];\n\nif (Meteor.isServer) {\n  // Only allow 2 login attempts per connection per 5 seconds\n  DDPRateLimiter.addRule(\n    {\n      name(name) {\n        return _.contains(AUTH_METHODS, name);\n      },\n\n      // Rate limit per connection ID\n      connectionId() {\n        return true;\n      },\n    },\n    2,\n    5000,\n  );\n}\n","import '/imports/startup/server';\n"]}}]