[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar SRP = Package.srp.SRP;\nvar SHA256 = Package.sha.SHA256;\nvar EJSON = Package.ejson.EJSON;\nvar DDP = Package['ddp-client'].DDP;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-password\":{\"password_client.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/accounts-password/password_client.js                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Used in the various functions below to handle errors consistently                                          // 1\nfunction reportError(error, callback) {                                                                       // 2\n  if (callback) {                                                                                             // 3\n    callback(error);                                                                                          // 4\n  } else {                                                                                                    // 5\n    throw error;                                                                                              // 6\n  }                                                                                                           // 7\n}                                                                                                             // 8\n                                                                                                              //\n; // Attempt to log in with a password.                                                                       // 8\n//                                                                                                            // 11\n// @param selector {String|Object} One of the following:                                                      // 12\n//   - {username: (username)}                                                                                 // 13\n//   - {email: (email)}                                                                                       // 14\n//   - a string which may be a username or email, depending on whether                                        // 15\n//     it contains \"@\".                                                                                       // 16\n// @param password {String}                                                                                   // 17\n// @param callback {Function(error|undefined)}                                                                // 18\n/**                                                                                                           // 20\n * @summary Log the user in with a password.                                                                  //\n * @locus Client                                                                                              //\n * @param {Object | String} user                                                                              //\n *   Either a string interpreted as a username or an email; or an object with a                               //\n *   single key: `email`, `username` or `id`. Username or email match in a case                               //\n *   insensitive manner.                                                                                      //\n * @param {String} password The user's password.                                                              //\n * @param {Function} [callback] Optional callback.                                                            //\n *   Called with no arguments on success, or with a single `Error` argument                                   //\n *   on failure.                                                                                              //\n * @importFromPackage meteor                                                                                  //\n */                                                                                                           //\n                                                                                                              //\nMeteor.loginWithPassword = function (selector, password, callback) {                                          // 33\n  if (typeof selector === 'string') if (selector.indexOf('@') === -1) selector = {                            // 34\n    username: selector                                                                                        // 36\n  };else selector = {                                                                                         // 36\n    email: selector                                                                                           // 38\n  };                                                                                                          // 38\n  Accounts.callLoginMethod({                                                                                  // 40\n    methodArguments: [{                                                                                       // 41\n      user: selector,                                                                                         // 42\n      password: Accounts._hashPassword(password)                                                              // 43\n    }],                                                                                                       // 41\n    userCallback: function (error, result) {                                                                  // 45\n      if (error && error.error === 400 && error.reason === 'old password format') {                           // 46\n        // The \"reason\" string should match the error thrown in the                                           // 48\n        // password login handler in password_server.js.                                                      // 49\n        // XXX COMPAT WITH 0.8.1.3                                                                            // 51\n        // If this user's last login was with a previous version of                                           // 52\n        // Meteor that used SRP, then the server throws this error to                                         // 53\n        // indicate that we should try again. The error includes the                                          // 54\n        // user's SRP identity. We provide a value derived from the                                           // 55\n        // identity and the password to prove to the server that we know                                      // 56\n        // the password without requiring a full SRP flow, as well as                                         // 57\n        // SHA256(password), which the server bcrypts and stores in                                           // 58\n        // place of the old SRP information for this user.                                                    // 59\n        srpUpgradePath({                                                                                      // 60\n          upgradeError: error,                                                                                // 61\n          userSelector: selector,                                                                             // 62\n          plaintextPassword: password                                                                         // 63\n        }, callback);                                                                                         // 60\n      } else if (error) {                                                                                     // 65\n        reportError(error, callback);                                                                         // 67\n      } else {                                                                                                // 68\n        callback && callback();                                                                               // 69\n      }                                                                                                       // 70\n    }                                                                                                         // 71\n  });                                                                                                         // 40\n};                                                                                                            // 73\n                                                                                                              //\nAccounts._hashPassword = function (password) {                                                                // 75\n  return {                                                                                                    // 76\n    digest: SHA256(password),                                                                                 // 77\n    algorithm: \"sha-256\"                                                                                      // 78\n  };                                                                                                          // 76\n}; // XXX COMPAT WITH 0.8.1.3                                                                                 // 80\n// The server requested an upgrade from the old SRP password format,                                          // 83\n// so supply the needed SRP identity to login. Options:                                                       // 84\n//   - upgradeError: the error object that the server returned to tell                                        // 85\n//     us to upgrade from SRP to bcrypt.                                                                      // 86\n//   - userSelector: selector to retrieve the user object                                                     // 87\n//   - plaintextPassword: the password as a string                                                            // 88\n                                                                                                              //\n                                                                                                              //\nvar srpUpgradePath = function (options, callback) {                                                           // 89\n  var details;                                                                                                // 90\n                                                                                                              //\n  try {                                                                                                       // 91\n    details = EJSON.parse(options.upgradeError.details);                                                      // 92\n  } catch (e) {}                                                                                              // 93\n                                                                                                              //\n  if (!(details && details.format === 'srp')) {                                                               // 94\n    reportError(new Meteor.Error(400, \"Password is old. Please reset your \" + \"password.\"), callback);        // 95\n  } else {                                                                                                    // 98\n    Accounts.callLoginMethod({                                                                                // 99\n      methodArguments: [{                                                                                     // 100\n        user: options.userSelector,                                                                           // 101\n        srp: SHA256(details.identity + \":\" + options.plaintextPassword),                                      // 102\n        password: Accounts._hashPassword(options.plaintextPassword)                                           // 103\n      }],                                                                                                     // 100\n      userCallback: callback                                                                                  // 105\n    });                                                                                                       // 99\n  }                                                                                                           // 107\n}; // Attempt to log in as a new user.                                                                        // 108\n/**                                                                                                           // 112\n * @summary Create a new user.                                                                                //\n * @locus Anywhere                                                                                            //\n * @param {Object} options                                                                                    //\n * @param {String} options.username A unique name for this user.                                              //\n * @param {String} options.email The user's email address.                                                    //\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.    //\n * @param {Object} options.profile The user's profile, typically including the `name` field.                  //\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base                                                                           //\n */                                                                                                           //\n                                                                                                              //\nAccounts.createUser = function (options, callback) {                                                          // 123\n  options = _.clone(options); // we'll be modifying options                                                   // 124\n                                                                                                              //\n  if (typeof options.password !== 'string') throw new Error(\"options.password must be a string\");             // 126\n                                                                                                              //\n  if (!options.password) {                                                                                    // 128\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);                         // 129\n  } // Replace password with the hashed password.                                                             // 130\n                                                                                                              //\n                                                                                                              //\n  options.password = Accounts._hashPassword(options.password);                                                // 133\n  Accounts.callLoginMethod({                                                                                  // 135\n    methodName: 'createUser',                                                                                 // 136\n    methodArguments: [options],                                                                               // 137\n    userCallback: callback                                                                                    // 138\n  });                                                                                                         // 135\n}; // Change password. Must be logged in.                                                                     // 140\n//                                                                                                            // 143\n// @param oldPassword {String|null} By default servers no longer allow                                        // 144\n//   changing password without the old password, but they could so we                                         // 145\n//   support passing no password to the server and letting it decide.                                         // 146\n// @param newPassword {String}                                                                                // 147\n// @param callback {Function(error|undefined)}                                                                // 148\n/**                                                                                                           // 150\n * @summary Change the current user's password. Must be logged in.                                            //\n * @locus Client                                                                                              //\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base                                                                           //\n */                                                                                                           //\n                                                                                                              //\nAccounts.changePassword = function (oldPassword, newPassword, callback) {                                     // 158\n  if (!Meteor.user()) {                                                                                       // 159\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);                         // 160\n  }                                                                                                           // 161\n                                                                                                              //\n  check(newPassword, String);                                                                                 // 163\n                                                                                                              //\n  if (!newPassword) {                                                                                         // 164\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);                         // 165\n  }                                                                                                           // 166\n                                                                                                              //\n  Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], function (error, result) {\n    if (error || !result) {                                                                                   // 173\n      if (error && error.error === 400 && error.reason === 'old password format') {                           // 174\n        // XXX COMPAT WITH 0.8.1.3                                                                            // 176\n        // The server is telling us to upgrade from SRP to bcrypt, as                                         // 177\n        // in Meteor.loginWithPassword.                                                                       // 178\n        srpUpgradePath({                                                                                      // 179\n          upgradeError: error,                                                                                // 180\n          userSelector: {                                                                                     // 181\n            id: Meteor.userId()                                                                               // 181\n          },                                                                                                  // 181\n          plaintextPassword: oldPassword                                                                      // 182\n        }, function (err) {                                                                                   // 179\n          if (err) {                                                                                          // 184\n            reportError(err, callback);                                                                       // 185\n          } else {                                                                                            // 186\n            // Now that we've successfully migrated from srp to                                               // 187\n            // bcrypt, try changing the password again.                                                       // 188\n            Accounts.changePassword(oldPassword, newPassword, callback);                                      // 189\n          }                                                                                                   // 190\n        });                                                                                                   // 191\n      } else {                                                                                                // 192\n        // A normal error, not an error telling us to upgrade to bcrypt                                       // 193\n        reportError(error || new Error(\"No result from changePassword.\"), callback);                          // 194\n      }                                                                                                       // 196\n    } else {                                                                                                  // 197\n      callback && callback();                                                                                 // 198\n    }                                                                                                         // 199\n  });                                                                                                         // 200\n}; // Sends an email to a user with a link that can be used to reset                                          // 202\n// their password                                                                                             // 205\n//                                                                                                            // 206\n// @param options {Object}                                                                                    // 207\n//   - email: (email)                                                                                         // 208\n// @param callback (optional) {Function(error|undefined)}                                                     // 209\n/**                                                                                                           // 211\n * @summary Request a forgot password email.                                                                  //\n * @locus Client                                                                                              //\n * @param {Object} options                                                                                    //\n * @param {String} options.email The email address to send a password reset link.                             //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base                                                                           //\n */                                                                                                           //\n                                                                                                              //\nAccounts.forgotPassword = function (options, callback) {                                                      // 219\n  if (!options.email) {                                                                                       // 220\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);                           // 221\n  }                                                                                                           // 222\n                                                                                                              //\n  if (callback) {                                                                                             // 224\n    Accounts.connection.call(\"forgotPassword\", options, callback);                                            // 225\n  } else {                                                                                                    // 226\n    Accounts.connection.call(\"forgotPassword\", options);                                                      // 227\n  }                                                                                                           // 228\n}; // Resets a password based on a token originally created by                                                // 229\n// Accounts.forgotPassword, and then logs in the matching user.                                               // 232\n//                                                                                                            // 233\n// @param token {String}                                                                                      // 234\n// @param newPassword {String}                                                                                // 235\n// @param callback (optional) {Function(error|undefined)}                                                     // 236\n/**                                                                                                           // 238\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.       //\n * @locus Client                                                                                              //\n * @param {String} token The token retrieved from the reset password URL.                                     //\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base                                                                           //\n */                                                                                                           //\n                                                                                                              //\nAccounts.resetPassword = function (token, newPassword, callback) {                                            // 246\n  check(token, String);                                                                                       // 247\n  check(newPassword, String);                                                                                 // 248\n                                                                                                              //\n  if (!newPassword) {                                                                                         // 250\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);                         // 251\n  }                                                                                                           // 252\n                                                                                                              //\n  Accounts.callLoginMethod({                                                                                  // 254\n    methodName: 'resetPassword',                                                                              // 255\n    methodArguments: [token, Accounts._hashPassword(newPassword)],                                            // 256\n    userCallback: callback                                                                                    // 257\n  });                                                                                                         // 254\n}; // Verifies a user's email address based on a token originally                                             // 258\n// created by Accounts.sendVerificationEmail                                                                  // 261\n//                                                                                                            // 262\n// @param token {String}                                                                                      // 263\n// @param callback (optional) {Function(error|undefined)}                                                     // 264\n/**                                                                                                           // 266\n * @summary Marks the user's email address as verified. Logs the user in afterwards.                          //\n * @locus Client                                                                                              //\n * @param {String} token The token retrieved from the verification URL.                                       //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base                                                                           //\n */                                                                                                           //\n                                                                                                              //\nAccounts.verifyEmail = function (token, callback) {                                                           // 273\n  if (!token) {                                                                                               // 274\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);                                // 275\n  }                                                                                                           // 276\n                                                                                                              //\n  Accounts.callLoginMethod({                                                                                  // 278\n    methodName: 'verifyEmail',                                                                                // 279\n    methodArguments: [token],                                                                                 // 280\n    userCallback: callback                                                                                    // 281\n  });                                                                                                         // 278\n};                                                                                                            // 282\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/accounts-password/password_client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-password'] = {};\n\n})();\n","servePath":"/packages/accounts-password.js","sourceMap":{"version":3,"sources":["/packages/accounts-password/password_client.js"],"names":["reportError","error","callback","Meteor","loginWithPassword","selector","password","indexOf","username","email","Accounts","callLoginMethod","methodArguments","user","_hashPassword","userCallback","result","reason","srpUpgradePath","upgradeError","userSelector","plaintextPassword","digest","SHA256","algorithm","options","details","EJSON","parse","e","format","Error","srp","identity","createUser","_","clone","methodName","changePassword","oldPassword","newPassword","check","String","connection","apply","id","userId","err","forgotPassword","call","resetPassword","token","verifyEmail"],"mappings":"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","file":"/packages/accounts-password.js","sourcesContent":["// Used in the various functions below to handle errors consistently\nfunction reportError(error, callback) {\n   if (callback) {\n     callback(error);\n   } else {\n     throw error;\n   }\n};\n\n// Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} user\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\nMeteor.loginWithPassword = function (selector, password, callback) {\n  if (typeof selector === 'string')\n    if (selector.indexOf('@') === -1)\n      selector = {username: selector};\n    else\n      selector = {email: selector};\n\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password)\n    }],\n    userCallback: function (error, result) {\n      if (error && error.error === 400 &&\n          error.reason === 'old password format') {\n        // The \"reason\" string should match the error thrown in the\n        // password login handler in password_server.js.\n\n        // XXX COMPAT WITH 0.8.1.3\n        // If this user's last login was with a previous version of\n        // Meteor that used SRP, then the server throws this error to\n        // indicate that we should try again. The error includes the\n        // user's SRP identity. We provide a value derived from the\n        // identity and the password to prove to the server that we know\n        // the password without requiring a full SRP flow, as well as\n        // SHA256(password), which the server bcrypts and stores in\n        // place of the old SRP information for this user.\n        srpUpgradePath({\n          upgradeError: error,\n          userSelector: selector,\n          plaintextPassword: password\n        }, callback);\n      }\n      else if (error) {\n        reportError(error, callback);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n};\n\nAccounts._hashPassword = function (password) {\n  return {\n    digest: SHA256(password),\n    algorithm: \"sha-256\"\n  };\n};\n\n// XXX COMPAT WITH 0.8.1.3\n// The server requested an upgrade from the old SRP password format,\n// so supply the needed SRP identity to login. Options:\n//   - upgradeError: the error object that the server returned to tell\n//     us to upgrade from SRP to bcrypt.\n//   - userSelector: selector to retrieve the user object\n//   - plaintextPassword: the password as a string\nvar srpUpgradePath = function (options, callback) {\n  var details;\n  try {\n    details = EJSON.parse(options.upgradeError.details);\n  } catch (e) {}\n  if (!(details && details.format === 'srp')) {\n    reportError(\n      new Meteor.Error(400, \"Password is old. Please reset your \" +\n                       \"password.\"), callback);\n  } else {\n    Accounts.callLoginMethod({\n      methodArguments: [{\n        user: options.userSelector,\n        srp: SHA256(details.identity + \":\" + options.plaintextPassword),\n        password: Accounts._hashPassword(options.plaintextPassword)\n      }],\n      userCallback: callback\n    });\n  }\n};\n\n// Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options); // we'll be modifying options\n\n  if (typeof options.password !== 'string')\n    throw new Error(\"options.password must be a string\");\n  if (!options.password) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  // Replace password with the hashed password.\n  options.password = Accounts._hashPassword(options.password);\n\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n};\n\n// Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.changePassword = function (oldPassword, newPassword, callback) {\n  if (!Meteor.user()) {\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);\n  }\n\n  check(newPassword, String);\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.connection.apply(\n    'changePassword',\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\n     Accounts._hashPassword(newPassword)],\n    function (error, result) {\n      if (error || !result) {\n        if (error && error.error === 400 &&\n            error.reason === 'old password format') {\n          // XXX COMPAT WITH 0.8.1.3\n          // The server is telling us to upgrade from SRP to bcrypt, as\n          // in Meteor.loginWithPassword.\n          srpUpgradePath({\n            upgradeError: error,\n            userSelector: { id: Meteor.userId() },\n            plaintextPassword: oldPassword\n          }, function (err) {\n            if (err) {\n              reportError(err, callback);\n            } else {\n              // Now that we've successfully migrated from srp to\n              // bcrypt, try changing the password again.\n              Accounts.changePassword(oldPassword, newPassword, callback);\n            }\n          });\n        } else {\n          // A normal error, not an error telling us to upgrade to bcrypt\n          reportError(\n            error || new Error(\"No result from changePassword.\"), callback);\n        }\n      } else {\n        callback && callback();\n      }\n    }\n  );\n};\n\n// Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.forgotPassword = function(options, callback) {\n  if (!options.email) {\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);\n  }\n\n  if (callback) {\n    Accounts.connection.call(\"forgotPassword\", options, callback);\n  } else {\n    Accounts.connection.call(\"forgotPassword\", options);\n  }\n};\n\n// Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.resetPassword = function(token, newPassword, callback) {\n  check(token, String);\n  check(newPassword, String);\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback});\n};\n\n// Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.verifyEmail = function(token, callback) {\n  if (!token) {\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback});\n};\n"]}}]