[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Factory;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"dburles:factory\":{\"factory.js\":[\"babel-runtime/helpers/classCallCheck\",function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/dburles_factory/factory.js                                                                        //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                       //\n                                                                                                              //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                              //\n                                                                                                              //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }             //\n                                                                                                              //\n/* global LocalCollection */ /* global Factory:true */var factories = {};                                     // 1\n                                                                                                              //\nFactory = function () {                                                                                       // 6\n  function Factory(name, collection, attributes) {                                                            // 7\n    (0, _classCallCheck3.default)(this, Factory);                                                             // 7\n    this.name = name;                                                                                         // 8\n    this.collection = collection;                                                                             // 9\n    this.attributes = attributes;                                                                             // 10\n    this.afterHooks = [];                                                                                     // 11\n    this.sequence = 0;                                                                                        // 12\n  }                                                                                                           // 13\n                                                                                                              //\n  Factory.prototype.after = function () {                                                                     // 6\n    function after(fn) {                                                                                      // 6\n      this.afterHooks.push(fn);                                                                               // 16\n      return this;                                                                                            // 17\n    }                                                                                                         // 18\n                                                                                                              //\n    return after;                                                                                             // 6\n  }();                                                                                                        // 6\n                                                                                                              //\n  return Factory;                                                                                             // 6\n}();                                                                                                          // 6\n                                                                                                              //\nFactory.define = function (name, collection, attributes) {                                                    // 21\n  factories[name] = new Factory(name, collection, attributes);                                                // 22\n  return factories[name];                                                                                     // 23\n};                                                                                                            // 24\n                                                                                                              //\nFactory.get = function (name) {                                                                               // 26\n  var factory = factories[name];                                                                              // 27\n                                                                                                              //\n  if (!factory) {                                                                                             // 28\n    throw new Error(\"Factory: There is no factory named \" + name);                                            // 29\n  }                                                                                                           // 30\n                                                                                                              //\n  return factory;                                                                                             // 31\n};                                                                                                            // 32\n                                                                                                              //\nFactory._build = function (name) {                                                                            // 34\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                    // 34\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                   // 34\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                       // 34\n  var factory = Factory.get(name);                                                                            // 35\n  var result = {}; // \"raw\" attributes without functions evaluated, or dotted properties resolved             // 36\n                                                                                                              //\n  var extendedAttributes = _.extend({}, factory.attributes, attributes); // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)                                              // 42\n                                                                                                              //\n                                                                                                              //\n  var makeRelation = function (relName) {                                                                     // 43\n    if (options.insert) {                                                                                     // 44\n      return Factory.create(relName, {}, userOptions)._id;                                                    // 45\n    }                                                                                                         // 46\n                                                                                                              //\n    if (options.tree) {                                                                                       // 47\n      return Factory._build(relName, {}, userOptions, {                                                       // 48\n        tree: true                                                                                            // 48\n      });                                                                                                     // 48\n    } // fake an id on build                                                                                  // 49\n                                                                                                              //\n                                                                                                              //\n    return Random.id();                                                                                       // 51\n  };                                                                                                          // 52\n                                                                                                              //\n  var getValue = function (value) {                                                                           // 54\n    return value instanceof Factory ? makeRelation(value.name) : value;                                       // 55\n  };                                                                                                          // 56\n                                                                                                              //\n  var getValueFromFunction = function (func) {                                                                // 58\n    var api = {                                                                                               // 59\n      sequence: function (fn) {                                                                               // 59\n        return fn(factory.sequence);                                                                          // 59\n      }                                                                                                       // 59\n    };                                                                                                        // 59\n    var fnRes = func.call(result, api, userOptions);                                                          // 60\n    return getValue(fnRes);                                                                                   // 61\n  };                                                                                                          // 62\n                                                                                                              //\n  factory.sequence += 1;                                                                                      // 64\n                                                                                                              //\n  var walk = function (record, object) {                                                                      // 66\n    _.each(object, function (value, key) {                                                                    // 67\n      var newValue = value; // is this a Factory instance?                                                    // 68\n                                                                                                              //\n      if (value instanceof Factory) {                                                                         // 70\n        newValue = makeRelation(value.name);                                                                  // 71\n      } else if (_.isArray(value)) {                                                                          // 72\n        newValue = value.map(function (element) {                                                             // 73\n          if (_.isFunction(element)) {                                                                        // 74\n            return getValueFromFunction(element);                                                             // 75\n          }                                                                                                   // 76\n                                                                                                              //\n          return getValue(element);                                                                           // 77\n        });                                                                                                   // 78\n      } else if (_.isFunction(value)) {                                                                       // 79\n        newValue = getValueFromFunction(value); // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {                               // 82\n        record[key] = record[key] || {};                                                                      // 83\n        return walk(record[key], value);                                                                      // 84\n      }                                                                                                       // 85\n                                                                                                              //\n      var modifier = {                                                                                        // 87\n        $set: {}                                                                                              // 87\n      };                                                                                                      // 87\n                                                                                                              //\n      if (key !== '_id') {                                                                                    // 89\n        modifier.$set[key] = newValue;                                                                        // 90\n      }                                                                                                       // 91\n                                                                                                              //\n      LocalCollection._modify(record, modifier);                                                              // 93\n    });                                                                                                       // 94\n  };                                                                                                          // 95\n                                                                                                              //\n  walk(result, extendedAttributes);                                                                           // 97\n                                                                                                              //\n  if (!options.tree) {                                                                                        // 99\n    result._id = extendedAttributes._id || Random.id();                                                       // 100\n  }                                                                                                           // 101\n                                                                                                              //\n  return result;                                                                                              // 102\n};                                                                                                            // 103\n                                                                                                              //\nFactory.build = function (name) {                                                                             // 105\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                    // 105\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                   // 105\n  return Factory._build(name, attributes, userOptions);                                                       // 106\n};                                                                                                            // 107\n                                                                                                              //\nFactory.tree = function (name, attributes) {                                                                  // 109\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                   // 109\n  return Factory._build(name, attributes, userOptions, {                                                      // 110\n    tree: true                                                                                                // 110\n  });                                                                                                         // 110\n};                                                                                                            // 111\n                                                                                                              //\nFactory._create = function (name, doc) {                                                                      // 113\n  var collection = Factory.get(name).collection;                                                              // 114\n  var insertId = collection.insert(doc);                                                                      // 115\n  var record = collection.findOne(insertId);                                                                  // 116\n  return record;                                                                                              // 117\n};                                                                                                            // 118\n                                                                                                              //\nFactory.create = function (name) {                                                                            // 120\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                    // 120\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                   // 120\n                                                                                                              //\n  var doc = Factory._build(name, attributes, userOptions, {                                                   // 121\n    insert: true                                                                                              // 121\n  });                                                                                                         // 121\n                                                                                                              //\n  var record = Factory._create(name, doc);                                                                    // 122\n                                                                                                              //\n  Factory.get(name).afterHooks.forEach(function (cb) {                                                        // 124\n    return cb(record);                                                                                        // 124\n  });                                                                                                         // 124\n  return record;                                                                                              // 126\n};                                                                                                            // 127\n                                                                                                              //\nFactory.extend = function (name) {                                                                            // 129\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                    // 129\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);                                         // 130\n};                                                                                                            // 131\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/dburles:factory/factory.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['dburles:factory'] = {}, {\n  Factory: Factory\n});\n\n})();\n","servePath":"/packages/dburles_factory.js","sourceMap":{"version":3,"sources":["/packages/dburles:factory/factory.js"],"names":["factories","Factory","name","collection","attributes","afterHooks","sequence","after","fn","push","define","get","factory","Error","_build","userOptions","options","result","extendedAttributes","_","extend","makeRelation","insert","create","relName","_id","tree","Random","id","getValue","value","getValueFromFunction","api","fnRes","func","call","walk","record","object","each","key","newValue","isArray","map","isFunction","element","Object","prototype","toString","modifier","$set","LocalCollection","_modify","build","_create","doc","insertId","findOne","forEach","cb","clone"],"mappings":"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","file":"/packages/dburles_factory.js","sourcesContent":["/* global LocalCollection */\n/* global Factory:true */\n\nconst factories = {};\n\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n  if (! factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n  return factory;\n};\n\nFactory._build = (name, attributes = {}, userOptions = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {};\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName, {}, userOptions)._id;\n    }\n    if (options.tree) {\n      return Factory._build(relName, {}, userOptions, {tree: true});\n    }\n    // fake an id on build\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = { sequence: fn => fn(factory.sequence) };\n    const fnRes = func.call(result, api, userOptions);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value;\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value);\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {$set: {}};\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (! options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n  return result;\n};\n\nFactory.build = (name, attributes = {}, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions);\n};\n\nFactory.tree = (name, attributes, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions, {tree: true});\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}, userOptions = {}) => {\n  const doc = Factory._build(name, attributes, userOptions, {insert: true});\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n"]}}]