[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar _ = Package.underscore._;\nvar Counts = Package['tmeasday:publish-counts'].Counts;\nvar publishCount = Package['tmeasday:publish-counts'].publishCount;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"erxes-notifications\":{\"server\":{\"main.js\":[\"../notifications\",\"./api\",\"./methods\",\"./publications\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/erxes-notifications/server/main.js                                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n  Notifications: function () {                                                                               // 1\n    return Notifications;                                                                                    // 1\n  },                                                                                                         // 1\n  Configs: function () {                                                                                     // 1\n    return Configs;                                                                                          // 1\n  }                                                                                                          // 1\n});                                                                                                          // 1\nvar Notifications = void 0,                                                                                  // 1\n    Configs = void 0;                                                                                        // 1\nmodule.importSync(\"../notifications\", {                                                                      // 1\n  Notifications: function (v) {                                                                              // 1\n    Notifications = v;                                                                                       // 1\n  },                                                                                                         // 1\n  Configs: function (v) {                                                                                    // 1\n    Configs = v;                                                                                             // 1\n  }                                                                                                          // 1\n}, 0);                                                                                                       // 1\nmodule.importSync(\"./api\");                                                                                  // 1\nmodule.importSync(\"./methods\");                                                                              // 1\nmodule.importSync(\"./publications\");                                                                         // 1\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"api.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/underscore\",\"../notifications\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/erxes-notifications/server/api.js                                                                //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar _this = this;                                                                                            //\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.importSync(\"meteor/meteor\", {                                                                         // 1\n  Meteor: function (v) {                                                                                     // 1\n    Meteor = v;                                                                                              // 1\n  }                                                                                                          // 1\n}, 0);                                                                                                       // 1\nvar check = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/check\", {                                                                          // 1\n  check: function (v) {                                                                                      // 1\n    check = v;                                                                                               // 1\n  }                                                                                                          // 1\n}, 1);                                                                                                       // 1\n                                                                                                             //\nvar _ = void 0;                                                                                              // 1\n                                                                                                             //\nmodule.importSync(\"meteor/underscore\", {                                                                     // 1\n  _: function (v) {                                                                                          // 1\n    _ = v;                                                                                                   // 1\n  }                                                                                                          // 1\n}, 2);                                                                                                       // 1\nvar Notifications = void 0,                                                                                  // 1\n    Configs = void 0;                                                                                        // 1\nmodule.importSync(\"../notifications\", {                                                                      // 1\n  Notifications: function (v) {                                                                              // 1\n    Notifications = v;                                                                                       // 1\n  },                                                                                                         // 1\n  Configs: function (v) {                                                                                    // 1\n    Configs = v;                                                                                             // 1\n  }                                                                                                          // 1\n}, 3);                                                                                                       // 1\n// will contain all type of notifications information then it will be filled dynamically                     // 7\nNotifications.Modules = [];                                                                                  // 8\n                                                                                                             //\nNotifications.registerModule = function (module) {                                                           // 10\n  var schema = {                                                                                             // 11\n    name: String,                                                                                            // 12\n    description: String,                                                                                     // 13\n    types: [{                                                                                                // 15\n      name: String,                                                                                          // 16\n      text: String                                                                                           // 16\n    }]                                                                                                       // 16\n  };                                                                                                         // 11\n  check(module, schema);                                                                                     // 20\n                                                                                                             //\n  var prevModule = _.find(Notifications.Modules, function (moduleInList) {                                   // 22\n    return moduleInList.name === module.name;                                                                // 24\n  }); // module name is already exists                                                                       // 24\n                                                                                                             //\n                                                                                                             //\n  if (prevModule) {                                                                                          // 28\n    throw new Meteor.Error(module.name + \" notification module already exists\");                             // 29\n  } // notif type name is already exists                                                                     // 30\n                                                                                                             //\n                                                                                                             //\n  var allNotifTypes = [];                                                                                    // 34\n                                                                                                             //\n  _.each(Notifications.Modules, function (moduleInList) {                                                    // 36\n    allNotifTypes = _.union(allNotifTypes, moduleInList.types);                                              // 37\n  });                                                                                                        // 38\n                                                                                                             //\n  var allNotifTypeNames = _.pluck(allNotifTypes, 'name');                                                    // 40\n                                                                                                             //\n  var typeNames = _.pluck(module.types, 'name'); // module.types and allNotifTypes must be nothing in common\n                                                                                                             //\n                                                                                                             //\n  if (!_.isEmpty(_.intersection(allNotifTypeNames, typeNames))) {                                            // 44\n    throw new Meteor.Error(\"Some items in \" + typeNames.toString() + \" are already exists\");                 // 45\n  }                                                                                                          // 48\n                                                                                                             //\n  Notifications.Modules.unshift(module);                                                                     // 50\n};                                                                                                           // 51\n                                                                                                             //\nNotifications.create = function (_modifier) {                                                                // 54\n  var modifier = _modifier;                                                                                  // 55\n  check(modifier, Notifications.Schema); // Setting auto values                                              // 57\n                                                                                                             //\n  modifier.isRead = false;                                                                                   // 60\n  modifier.createdUser = modifier.createdUser || _this.userId;                                               // 61\n  modifier.date = new Date(); // if receiver is configured to get this notification                          // 62\n                                                                                                             //\n  var config = Configs.findOne({                                                                             // 65\n    user: modifier.receiver,                                                                                 // 66\n    notifType: modifier.notifType                                                                            // 67\n  }); // receiver disabled this notification                                                                 // 65\n                                                                                                             //\n  if (config && !config.isAllowed) {                                                                         // 71\n    return 'error';                                                                                          // 72\n  }                                                                                                          // 73\n                                                                                                             //\n  Notifications.insert(modifier);                                                                            // 75\n  return 'ok';                                                                                               // 77\n};                                                                                                           // 78\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods.js\":[\"meteor/meteor\",\"meteor/check\",\"../notifications\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/erxes-notifications/server/methods.js                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar _Meteor$methods;                                                                                         //\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.importSync(\"meteor/meteor\", {                                                                         // 1\n  Meteor: function (v) {                                                                                     // 1\n    Meteor = v;                                                                                              // 1\n  }                                                                                                          // 1\n}, 0);                                                                                                       // 1\nvar check = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/check\", {                                                                          // 1\n  check: function (v) {                                                                                      // 1\n    check = v;                                                                                               // 1\n  }                                                                                                          // 1\n}, 1);                                                                                                       // 1\nvar Notifications = void 0,                                                                                  // 1\n    Configs = void 0;                                                                                        // 1\nmodule.importSync(\"../notifications\", {                                                                      // 1\n  Notifications: function (v) {                                                                              // 1\n    Notifications = v;                                                                                       // 1\n  },                                                                                                         // 1\n  Configs: function (v) {                                                                                    // 1\n    Configs = v;                                                                                             // 1\n  }                                                                                                          // 1\n}, 2);                                                                                                       // 1\nMeteor.methods((_Meteor$methods = {}, _Meteor$methods['notifications.markAsRead'] = function (ids) {         // 6\n  check(ids, [String]);                                                                                      // 8\n  Notifications.update({                                                                                     // 10\n    _id: {                                                                                                   // 11\n      $in: ids                                                                                               // 11\n    }                                                                                                        // 11\n  }, {                                                                                                       // 11\n    $set: {                                                                                                  // 12\n      isRead: true                                                                                           // 12\n    }                                                                                                        // 12\n  }, {                                                                                                       // 12\n    multi: true                                                                                              // 13\n  });                                                                                                        // 13\n}, _Meteor$methods['notifications.getModules'] = function () {                                               // 15\n  return Notifications.Modules;                                                                              // 18\n}, _Meteor$methods['notifications.saveConfig'] = function (notifType, isAllowed) {                           // 19\n  check(notifType, String);                                                                                  // 22\n  check(isAllowed, Boolean);                                                                                 // 23\n  var selector = {                                                                                           // 25\n    user: this.userId,                                                                                       // 25\n    notifType: notifType                                                                                     // 25\n  };                                                                                                         // 25\n  var oldOne = Configs.findOne(selector); // if already inserted then update isAllowed field                 // 27\n                                                                                                             //\n  if (oldOne) {                                                                                              // 30\n    Configs.update({                                                                                         // 31\n      _id: oldOne._id                                                                                        // 31\n    }, {                                                                                                     // 31\n      $set: {                                                                                                // 31\n        isAllowed: isAllowed                                                                                 // 31\n      }                                                                                                      // 31\n    }); // if it is first time then insert                                                                   // 31\n  } else {                                                                                                   // 34\n    selector.isAllowed = isAllowed;                                                                          // 35\n    Configs.insert(selector);                                                                                // 36\n  }                                                                                                          // 37\n}, _Meteor$methods));                                                                                        // 38\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"publications.js\":[\"meteor/meteor\",\"meteor/check\",\"meteor/tmeasday:publish-counts\",\"../notifications\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/erxes-notifications/server/publications.js                                                       //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.importSync(\"meteor/meteor\", {                                                                         // 1\n  Meteor: function (v) {                                                                                     // 1\n    Meteor = v;                                                                                              // 1\n  }                                                                                                          // 1\n}, 0);                                                                                                       // 1\nvar Match = void 0,                                                                                          // 1\n    check = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/check\", {                                                                          // 1\n  Match: function (v) {                                                                                      // 1\n    Match = v;                                                                                               // 1\n  },                                                                                                         // 1\n  check: function (v) {                                                                                      // 1\n    check = v;                                                                                               // 1\n  }                                                                                                          // 1\n}, 1);                                                                                                       // 1\nvar Counts = void 0;                                                                                         // 1\nmodule.importSync(\"meteor/tmeasday:publish-counts\", {                                                        // 1\n  Counts: function (v) {                                                                                     // 1\n    Counts = v;                                                                                              // 1\n  }                                                                                                          // 1\n}, 2);                                                                                                       // 1\nvar Notifications = void 0,                                                                                  // 1\n    Configs = void 0;                                                                                        // 1\nmodule.importSync(\"../notifications\", {                                                                      // 1\n  Notifications: function (v) {                                                                              // 1\n    Notifications = v;                                                                                       // 1\n  },                                                                                                         // 1\n  Configs: function (v) {                                                                                    // 1\n    Configs = v;                                                                                             // 1\n  }                                                                                                          // 1\n}, 3);                                                                                                       // 1\n// latest notifications list                                                                                 // 10\nMeteor.publish('notifications.latest', function () {                                                         // 11\n  function notifs(params) {                                                                                  // 11\n    check(params, {                                                                                          // 12\n      limit: Match.Integer,                                                                                  // 13\n      requireRead: Boolean,                                                                                  // 14\n      title: Match.Optional(String)                                                                          // 15\n    });                                                                                                      // 12\n    var limit = params.limit,                                                                                // 11\n        requireRead = params.requireRead,                                                                    // 11\n        title = params.title;                                                                                // 11\n    var filters = {                                                                                          // 20\n      receiver: this.userId                                                                                  // 20\n    };                                                                                                       // 20\n    Counts.publish(this, 'notifications.list.count', Notifications.find(), {                                 // 22\n      noReady: true                                                                                          // 26\n    });                                                                                                      // 26\n                                                                                                             //\n    if (requireRead) {                                                                                       // 29\n      filters.isRead = false;                                                                                // 30\n    }                                                                                                        // 31\n                                                                                                             //\n    if (title) {                                                                                             // 33\n      filters.title = title;                                                                                 // 34\n    }                                                                                                        // 35\n                                                                                                             //\n    return Notifications.find(filters, {                                                                     // 37\n      sort: {                                                                                                // 37\n        date: -1                                                                                             // 37\n      },                                                                                                     // 37\n      limit: limit                                                                                           // 37\n    });                                                                                                      // 37\n  }                                                                                                          // 38\n                                                                                                             //\n  return notifs;                                                                                             // 11\n}()); // unread count                                                                                        // 11\n                                                                                                             //\nMeteor.publish('notifications.unreadCount', function () {                                                    // 42\n  function notifCount() {                                                                                    // 42\n    var cursor = Notifications.find({                                                                        // 43\n      receiver: this.userId,                                                                                 // 44\n      isRead: false                                                                                          // 45\n    });                                                                                                      // 43\n    Counts.publish(this, 'ureadNotificationsCount', cursor);                                                 // 48\n  }                                                                                                          // 49\n                                                                                                             //\n  return notifCount;                                                                                         // 42\n}()); // notifications config                                                                                // 42\n                                                                                                             //\nMeteor.publish('notifications.configs', function () {                                                        // 53\n  function notificationsConfig() {                                                                           // 53\n    return Configs.find({                                                                                    // 54\n      user: this.userId                                                                                      // 55\n    });                                                                                                      // 54\n  }                                                                                                          // 57\n                                                                                                             //\n  return notificationsConfig;                                                                                // 53\n}());                                                                                                        // 53\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"notifications.js\":[\"meteor/mongo\",\"meteor/aldeed:simple-schema\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/erxes-notifications/notifications.js                                                             //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n  Notifications: function () {                                                                               // 1\n    return Notifications;                                                                                    // 1\n  },                                                                                                         // 1\n  Configs: function () {                                                                                     // 1\n    return Configs;                                                                                          // 1\n  }                                                                                                          // 1\n});                                                                                                          // 1\nvar Mongo = void 0;                                                                                          // 1\nmodule.importSync(\"meteor/mongo\", {                                                                          // 1\n  Mongo: function (v) {                                                                                      // 1\n    Mongo = v;                                                                                               // 1\n  }                                                                                                          // 1\n}, 0);                                                                                                       // 1\nvar SimpleSchema = void 0;                                                                                   // 1\nmodule.importSync(\"meteor/aldeed:simple-schema\", {                                                           // 1\n  SimpleSchema: function (v) {                                                                               // 1\n    SimpleSchema = v;                                                                                        // 1\n  }                                                                                                          // 1\n}, 1);                                                                                                       // 1\nvar Notifications = new Mongo.Collection('notifications');                                                   // 6\nvar Configs = new Mongo.Collection('notifications_configs');                                                 // 7\n// schemas                                                                                                   // 9\nNotifications.Schema = new SimpleSchema({                                                                    // 10\n  notifType: {                                                                                               // 11\n    type: String,                                                                                            // 12\n    optional: true                                                                                           // 13\n  },                                                                                                         // 11\n  title: {                                                                                                   // 16\n    type: String                                                                                             // 17\n  },                                                                                                         // 16\n  link: {                                                                                                    // 20\n    type: String,                                                                                            // 21\n    optional: true                                                                                           // 22\n  },                                                                                                         // 20\n  content: {                                                                                                 // 25\n    type: String                                                                                             // 26\n  },                                                                                                         // 25\n  createdUser: {                                                                                             // 29\n    type: String,                                                                                            // 30\n    optional: true                                                                                           // 31\n  },                                                                                                         // 29\n  receiver: {                                                                                                // 34\n    type: String                                                                                             // 35\n  }                                                                                                          // 34\n});                                                                                                          // 10\nvar BaseExtra = new SimpleSchema({                                                                           // 40\n  date: {                                                                                                    // 41\n    type: 'date'                                                                                             // 42\n  },                                                                                                         // 41\n  isRead: {                                                                                                  // 45\n    type: Boolean                                                                                            // 46\n  }                                                                                                          // 45\n});                                                                                                          // 40\nConfigs.Schema = new SimpleSchema({                                                                          // 51\n  // to whom this config is related                                                                          // 52\n  user: {                                                                                                    // 53\n    type: String                                                                                             // 54\n  },                                                                                                         // 53\n  // which module's type it is. For example: indocuments                                                     // 57\n  notifType: {                                                                                               // 58\n    type: String                                                                                             // 59\n  },                                                                                                         // 58\n  isAllowed: {                                                                                               // 62\n    type: Boolean                                                                                            // 63\n  }                                                                                                          // 62\n}); // attach schemas                                                                                        // 51\n                                                                                                             //\nNotifications.attachSchema(Notifications.Schema);                                                            // 69\nNotifications.attachSchema(BaseExtra);                                                                       // 70\nConfigs.attachSchema(Configs.Schema);                                                                        // 71\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/erxes-notifications/server/main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['erxes-notifications'] = exports;\n\n})();\n","servePath":"/packages/erxes-notifications.js","sourceMap":{"version":3,"sources":["/packages/erxes-notifications/server/main.js","/packages/erxes-notifications/server/api.js","/packages/erxes-notifications/server/methods.js","/packages/erxes-notifications/server/publications.js","/packages/erxes-notifications/notifications.js"],"names":["module","export","Notifications","Configs","importSync","v","Meteor","check","_","Modules","registerModule","schema","name","String","description","types","text","prevModule","find","moduleInList","Error","allNotifTypes","each","union","allNotifTypeNames","pluck","typeNames","isEmpty","intersection","toString","unshift","create","_modifier","modifier","Schema","isRead","createdUser","userId","date","Date","config","findOne","user","receiver","notifType","isAllowed","insert","methods","ids","update","_id","$in","$set","multi","Boolean","selector","oldOne","Match","Counts","publish","notifs","params","limit","Integer","requireRead","title","Optional","filters","noReady","sort","notifCount","cursor","notificationsConfig","Mongo","SimpleSchema","Collection","type","optional","link","content","BaseExtra","attachSchema"],"mappings":"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","file":"/packages/erxes-notifications.js","sourcesContent":["import { Notifications, Configs } from '../notifications';\nimport './api';\nimport './methods';\nimport './publications';\n\nexport {\n  Notifications,\n  Configs,\n};\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\n\nimport { Notifications, Configs } from '../notifications';\n\n// will contain all type of notifications information then it will be filled dynamically\nNotifications.Modules = [];\n\nNotifications.registerModule = (module) => {\n  const schema = {\n    name: String,\n    description: String,\n\n    types: [\n      { name: String, text: String },\n    ],\n  };\n\n  check(module, schema);\n\n  const prevModule = _.find(\n    Notifications.Modules,\n    (moduleInList) => moduleInList.name === module.name\n  );\n\n  // module name is already exists\n  if (prevModule) {\n    throw new Meteor.Error(`${module.name} notification module already exists`);\n  }\n\n  // notif type name is already exists\n\n  let allNotifTypes = [];\n\n  _.each(Notifications.Modules, (moduleInList) => {\n    allNotifTypes = _.union(allNotifTypes, moduleInList.types);\n  });\n\n  const allNotifTypeNames = _.pluck(allNotifTypes, 'name');\n  const typeNames = _.pluck(module.types, 'name');\n\n  // module.types and allNotifTypes must be nothing in common\n  if (!_.isEmpty(_.intersection(allNotifTypeNames, typeNames))) {\n    throw new Meteor.Error(\n      `Some items in ${typeNames.toString()} are already exists`\n    );\n  }\n\n  Notifications.Modules.unshift(module);\n};\n\n\nNotifications.create = (_modifier) => {\n  const modifier = _modifier;\n\n  check(modifier, Notifications.Schema);\n\n  // Setting auto values\n  modifier.isRead = false;\n  modifier.createdUser = modifier.createdUser || this.userId;\n  modifier.date = new Date();\n\n  // if receiver is configured to get this notification\n  const config = Configs.findOne({\n    user: modifier.receiver,\n    notifType: modifier.notifType,\n  });\n\n  // receiver disabled this notification\n  if (config && !config.isAllowed) {\n    return 'error';\n  }\n\n  Notifications.insert(modifier);\n\n  return 'ok';\n};\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nimport { Notifications, Configs } from '../notifications';\n\nMeteor.methods({\n  ['notifications.markAsRead'](ids) {\n    check(ids, [String]);\n\n    Notifications.update(\n      { _id: { $in: ids } },\n      { $set: { isRead: true } },\n      { multi: true }\n    );\n  },\n\n  ['notifications.getModules']() {\n    return Notifications.Modules;\n  },\n\n  ['notifications.saveConfig'](notifType, isAllowed) {\n    check(notifType, String);\n    check(isAllowed, Boolean);\n\n    const selector = { user: this.userId, notifType };\n\n    const oldOne = Configs.findOne(selector);\n\n    // if already inserted then update isAllowed field\n    if (oldOne) {\n      Configs.update({ _id: oldOne._id }, { $set: { isAllowed } });\n\n    // if it is first time then insert\n    } else {\n      selector.isAllowed = isAllowed;\n      Configs.insert(selector);\n    }\n  },\n});\n","/* eslint-disable new-cap */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Counts } from 'meteor/tmeasday:publish-counts';\n\nimport { Notifications, Configs } from '../notifications';\n\n\n// latest notifications list\nMeteor.publish('notifications.latest', function notifs(params) {\n  check(params, {\n    limit: Match.Integer,\n    requireRead: Boolean,\n    title: Match.Optional(String),\n  });\n\n  const { limit, requireRead, title } = params;\n\n  const filters = { receiver: this.userId };\n\n  Counts.publish(\n    this,\n    'notifications.list.count',\n    Notifications.find(),\n    { noReady: true },\n  );\n\n  if (requireRead) {\n    filters.isRead = false;\n  }\n\n  if (title) {\n    filters.title = title;\n  }\n\n  return Notifications.find(filters, { sort: { date: -1 }, limit });\n});\n\n\n// unread count\nMeteor.publish('notifications.unreadCount', function notifCount() {\n  const cursor = Notifications.find({\n    receiver: this.userId,\n    isRead: false,\n  });\n\n  Counts.publish(this, 'ureadNotificationsCount', cursor);\n});\n\n\n// notifications config\nMeteor.publish('notifications.configs', function notificationsConfig() {\n  return Configs.find({\n    user: this.userId,\n  });\n});\n","import { Mongo } from 'meteor/mongo';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\n\n// collections\nexport const Notifications = new Mongo.Collection('notifications');\nexport const Configs = new Mongo.Collection('notifications_configs');\n\n// schemas\nNotifications.Schema = new SimpleSchema({\n  notifType: {\n    type: String,\n    optional: true,\n  },\n\n  title: {\n    type: String,\n  },\n\n  link: {\n    type: String,\n    optional: true,\n  },\n\n  content: {\n    type: String,\n  },\n\n  createdUser: {\n    type: String,\n    optional: true,\n  },\n\n  receiver: {\n    type: String,\n  },\n});\n\n\nconst BaseExtra = new SimpleSchema({\n  date: {\n    type: 'date',\n  },\n\n  isRead: {\n    type: Boolean,\n  },\n});\n\n\nConfigs.Schema = new SimpleSchema({\n  // to whom this config is related\n  user: {\n    type: String,\n  },\n\n  // which module's type it is. For example: indocuments\n  notifType: {\n    type: String,\n  },\n\n  isAllowed: {\n    type: Boolean,\n  },\n});\n\n\n// attach schemas\nNotifications.attachSchema(Notifications.Schema);\nNotifications.attachSchema(BaseExtra);\nConfigs.attachSchema(Configs.Schema);\n"]}}]