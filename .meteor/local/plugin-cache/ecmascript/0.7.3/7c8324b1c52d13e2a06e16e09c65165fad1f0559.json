{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["Match","check"],"specifiers":[{"kind":"named","imported":"Match","local":"Match"},{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/tmeasday:publish-counts","imported":["Counts"],"specifiers":[{"kind":"named","imported":"Counts","local":"Counts"}]},{"source":"../notifications","imported":["Notifications","Configs"],"specifiers":[{"kind":"named","imported":"Notifications","local":"Notifications"},{"kind":"named","imported":"Configs","local":"Configs"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/erxes-notifications/server/publications.js","filenameRelative":"/packages/erxes-notifications/server/publications.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/erxes-notifications/server/publications.js.map","sourceFileName":"/packages/erxes-notifications/server/publications.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"publications"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Match = void 0,\n    check = void 0;\nmodule.importSync(\"meteor/check\", {\n  Match: function (v) {\n    Match = v;\n  },\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Counts = void 0;\nmodule.importSync(\"meteor/tmeasday:publish-counts\", {\n  Counts: function (v) {\n    Counts = v;\n  }\n}, 2);\nvar Notifications = void 0,\n    Configs = void 0;\nmodule.importSync(\"../notifications\", {\n  Notifications: function (v) {\n    Notifications = v;\n  },\n  Configs: function (v) {\n    Configs = v;\n  }\n}, 3);\n// latest notifications list\nMeteor.publish('notifications.latest', function () {\n  function notifs(params) {\n    check(params, {\n      limit: Match.Integer,\n      requireRead: Boolean,\n      title: Match.Optional(String)\n    });\n    var limit = params.limit,\n        requireRead = params.requireRead,\n        title = params.title;\n    var filters = {\n      receiver: this.userId\n    };\n    Counts.publish(this, 'notifications.list.count', Notifications.find(), {\n      noReady: true\n    });\n\n    if (requireRead) {\n      filters.isRead = false;\n    }\n\n    if (title) {\n      filters.title = title;\n    }\n\n    return Notifications.find(filters, {\n      sort: {\n        date: -1\n      },\n      limit: limit\n    });\n  }\n\n  return notifs;\n}()); // unread count\n\nMeteor.publish('notifications.unreadCount', function () {\n  function notifCount() {\n    var cursor = Notifications.find({\n      receiver: this.userId,\n      isRead: false\n    });\n    Counts.publish(this, 'ureadNotificationsCount', cursor);\n  }\n\n  return notifCount;\n}()); // notifications config\n\nMeteor.publish('notifications.configs', function () {\n  function notificationsConfig() {\n    return Configs.find({\n      user: this.userId\n    });\n  }\n\n  return notificationsConfig;\n}());","map":{"version":3,"sources":["/packages/erxes-notifications/server/publications.js"],"names":["Meteor","module","importSync","v","Match","check","Counts","Notifications","Configs","publish","notifs","params","limit","Integer","requireRead","Boolean","title","Optional","String","filters","receiver","userId","find","noReady","isRead","sort","date","notifCount","cursor","notificationsConfig","user"],"mappings":"AAAA,IAAIA,eAAJ;AAAWC,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACF,UAAO,UAASG,CAAT,EAAW;AAACH,aAAOG,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIC,cAAJ;AAAA,IAAUC,cAAV;AAAgBJ,OAAOC,UAAP,CAAkB,cAAlB,EAAiC;AAACE,SAAM,UAASD,CAAT,EAAW;AAACC,YAAMD,CAAN;AAAQ,GAA3B;AAA4BE,SAAM,UAASF,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAAtD,CAAjC,EAAyF,CAAzF;AAA4F,IAAIG,eAAJ;AAAWL,OAAOC,UAAP,CAAkB,gCAAlB,EAAmD;AAACI,UAAO,UAASH,CAAT,EAAW;AAACG,aAAOH,CAAP;AAAS;AAA7B,CAAnD,EAAkF,CAAlF;AAAqF,IAAII,sBAAJ;AAAA,IAAkBC,gBAAlB;AAA0BP,OAAOC,UAAP,CAAkB,kBAAlB,EAAqC;AAACK,iBAAc,UAASJ,CAAT,EAAW;AAACI,oBAAcJ,CAAd;AAAgB,GAA3C;AAA4CK,WAAQ,UAASL,CAAT,EAAW;AAACK,cAAQL,CAAR;AAAU;AAA1E,CAArC,EAAiH,CAAjH;AASrT;AACAH,OAAOS,OAAP,CAAe,sBAAf;AAAuC,WAASC,MAAT,CAAgBC,MAAhB,EAAwB;AAC7DN,UAAMM,MAAN,EAAc;AACZC,aAAOR,MAAMS,OADD;AAEZC,mBAAaC,OAFD;AAGZC,aAAOZ,MAAMa,QAAN,CAAeC,MAAf;AAHK,KAAd;AAD6D,QAOrDN,KAPqD,GAOvBD,MAPuB,CAOrDC,KAPqD;AAAA,QAO9CE,WAP8C,GAOvBH,MAPuB,CAO9CG,WAP8C;AAAA,QAOjCE,KAPiC,GAOvBL,MAPuB,CAOjCK,KAPiC;AAS7D,QAAMG,UAAU;AAAEC,gBAAU,KAAKC;AAAjB,KAAhB;AAEAf,WAAOG,OAAP,CACE,IADF,EAEE,0BAFF,EAGEF,cAAce,IAAd,EAHF,EAIE;AAAEC,eAAS;AAAX,KAJF;;AAOA,QAAIT,WAAJ,EAAiB;AACfK,cAAQK,MAAR,GAAiB,KAAjB;AACD;;AAED,QAAIR,KAAJ,EAAW;AACTG,cAAQH,KAAR,GAAgBA,KAAhB;AACD;;AAED,WAAOT,cAAce,IAAd,CAAmBH,OAAnB,EAA4B;AAAEM,YAAM;AAAEC,cAAM,CAAC;AAAT,OAAR;AAAsBd;AAAtB,KAA5B,CAAP;AACD;;AA3BD,SAAgDF,MAAhD;AAAA,K,CA8BA;;AACAV,OAAOS,OAAP,CAAe,2BAAf;AAA4C,WAASkB,UAAT,GAAsB;AAChE,QAAMC,SAASrB,cAAce,IAAd,CAAmB;AAChCF,gBAAU,KAAKC,MADiB;AAEhCG,cAAQ;AAFwB,KAAnB,CAAf;AAKAlB,WAAOG,OAAP,CAAe,IAAf,EAAqB,yBAArB,EAAgDmB,MAAhD;AACD;;AAPD,SAAqDD,UAArD;AAAA,K,CAUA;;AACA3B,OAAOS,OAAP,CAAe,uBAAf;AAAwC,WAASoB,mBAAT,GAA+B;AACrE,WAAOrB,QAAQc,IAAR,CAAa;AAClBQ,YAAM,KAAKT;AADO,KAAb,CAAP;AAGD;;AAJD,SAAiDQ,mBAAjD;AAAA","file":"/packages/erxes-notifications/server/publications.js.map","sourcesContent":["/* eslint-disable new-cap */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Counts } from 'meteor/tmeasday:publish-counts';\n\nimport { Notifications, Configs } from '../notifications';\n\n\n// latest notifications list\nMeteor.publish('notifications.latest', function notifs(params) {\n  check(params, {\n    limit: Match.Integer,\n    requireRead: Boolean,\n    title: Match.Optional(String),\n  });\n\n  const { limit, requireRead, title } = params;\n\n  const filters = { receiver: this.userId };\n\n  Counts.publish(\n    this,\n    'notifications.list.count',\n    Notifications.find(),\n    { noReady: true },\n  );\n\n  if (requireRead) {\n    filters.isRead = false;\n  }\n\n  if (title) {\n    filters.title = title;\n  }\n\n  return Notifications.find(filters, { sort: { date: -1 }, limit });\n});\n\n\n// unread count\nMeteor.publish('notifications.unreadCount', function notifCount() {\n  const cursor = Notifications.find({\n    receiver: this.userId,\n    isRead: false,\n  });\n\n  Counts.publish(this, 'ureadNotificationsCount', cursor);\n});\n\n\n// notifications config\nMeteor.publish('notifications.configs', function notificationsConfig() {\n  return Configs.find({\n    user: this.userId,\n  });\n});\n"]},"hash":"7c8324b1c52d13e2a06e16e09c65165fad1f0559"}
