{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./constants","imported":["TAG_TYPES"],"specifiers":[{"kind":"named","imported":"TAG_TYPES","local":"TAG_TYPES"}]}],"exports":{"exported":["Tags","FormSchema","TagItemSchema"],"specifiers":[{"kind":"local","local":"Tags","exported":"Tags"},{"kind":"local","local":"FormSchema","exported":"FormSchema"},{"kind":"local","local":"TagItemSchema","exported":"TagItemSchema"}]}}},"options":{"filename":"/imports/api/tags/tags.js","filenameRelative":"/imports/api/tags/tags.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/tags/tags.js.map","sourceFileName":"/imports/api/tags/tags.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tags"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Tags: function () {\n    return Tags;\n  },\n  FormSchema: function () {\n    return FormSchema;\n  },\n  TagItemSchema: function () {\n    return TagItemSchema;\n  }\n});\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 3);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 4);\nvar TAG_TYPES = void 0;\nmodule.importSync(\"./constants\", {\n  TAG_TYPES: function (v) {\n    TAG_TYPES = v;\n  }\n}, 5);\n\nvar TagsCollection = function (_Mongo$Collection) {\n  (0, _inherits3.default)(TagsCollection, _Mongo$Collection);\n\n  function TagsCollection() {\n    (0, _classCallCheck3.default)(this, TagsCollection);\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));\n  }\n\n  TagsCollection.prototype.insert = function () {\n    function insert(doc, callback) {\n      // extend doc with auto values\n      var tag = Object.assign({\n        createdAt: new Date(),\n        objectCount: 0\n      }, doc);\n\n      if (!this.validateUniqueness(null, tag)) {\n        throw new Meteor.Error('tags.insert.restricted', 'Tag duplicated');\n      }\n\n      return _Mongo$Collection.prototype.insert.call(this, tag, callback);\n    }\n\n    return insert;\n  }();\n\n  TagsCollection.prototype.update = function () {\n    function update(selector, modifier) {\n      var set = modifier.$set || {};\n\n      if (!this.validateUniqueness(selector, set)) {\n        throw new Meteor.Error('tags.update.restricted', 'Tag duplicated');\n      }\n\n      return _Mongo$Collection.prototype.update.call(this, selector, modifier);\n    }\n\n    return update;\n  }();\n\n  TagsCollection.prototype.validateUniqueness = function () {\n    function validateUniqueness(selector, data) {\n      var name = data.name,\n          type = data.type;\n      var filter = {\n        name: name,\n        type: type\n      };\n\n      if (!name || !type) {\n        return true;\n      } // can't update name & type same time more than one tags.\n\n\n      if (selector && this.find(selector).count() > 1) {\n        return false;\n      }\n\n      var obj = selector && this.findOne(selector);\n\n      if (obj) {\n        filter._id = {\n          $ne: obj._id\n        };\n      }\n\n      if (this.findOne(filter)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return validateUniqueness;\n  }();\n\n  return TagsCollection;\n}(Mongo.Collection);\n\nvar Tags = new TagsCollection('tags');\nTags.deny({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\nvar FormSchema = new SimpleSchema({\n  name: {\n    type: String\n  },\n  type: {\n    type: String,\n    allowedValues: TAG_TYPES.ALL_LIST\n  },\n  colorCode: {\n    type: String\n  }\n});\nTags.schema = new SimpleSchema([FormSchema, {\n  createdAt: {\n    type: Date\n  },\n  objectCount: {\n    type: Number\n  }\n}]);\nTags.attachSchema(Tags.schema); // helper for conversation, customer, engage message etc ...\n\nvar TagItemSchema = new SimpleSchema({\n  type: {\n    type: String\n  },\n  targetIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id\n  },\n  tagIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\nTags.publicFields = {\n  name: 1,\n  type: 1,\n  createdAt: 1,\n  colorCode: 1\n};\nFactory.define('tag', Tags, {\n  name: function () {\n    return Random.id();\n  },\n  type: function () {\n    return TAG_TYPES.CONVERSATION;\n  },\n  colorCode: function () {\n    return '#000';\n  }\n});","map":{"version":3,"sources":["/imports/api/tags/tags.js"],"names":["module","export","Tags","FormSchema","TagItemSchema","Mongo","importSync","v","Meteor","Random","Factory","SimpleSchema","TAG_TYPES","TagsCollection","insert","doc","callback","tag","Object","assign","createdAt","Date","objectCount","validateUniqueness","Error","update","selector","modifier","set","$set","data","name","type","filter","find","count","obj","findOne","_id","$ne","Collection","deny","remove","String","allowedValues","ALL_LIST","colorCode","schema","Number","attachSchema","targetIds","regEx","RegEx","Id","tagIds","publicFields","define","id","CONVERSATION"],"mappings":"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","file":"/imports/api/tags/tags.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { TAG_TYPES } from './constants';\n\nclass TagsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    // extend doc with auto values\n    const tag = Object.assign(\n      {\n        createdAt: new Date(),\n        objectCount: 0,\n      },\n      doc,\n    );\n\n    if (!this.validateUniqueness(null, tag)) {\n      throw new Meteor.Error('tags.insert.restricted', 'Tag duplicated');\n    }\n\n    return super.insert(tag, callback);\n  }\n\n  update(selector, modifier) {\n    const set = modifier.$set || {};\n\n    if (!this.validateUniqueness(selector, set)) {\n      throw new Meteor.Error('tags.update.restricted', 'Tag duplicated');\n    }\n\n    return super.update(selector, modifier);\n  }\n\n  validateUniqueness(selector, data) {\n    const { name, type } = data;\n    const filter = { name, type };\n\n    if (!name || !type) {\n      return true;\n    }\n\n    // can't update name & type same time more than one tags.\n    if (selector && this.find(selector).count() > 1) {\n      return false;\n    }\n\n    const obj = selector && this.findOne(selector);\n    if (obj) {\n      filter._id = { $ne: obj._id };\n    }\n\n    if (this.findOne(filter)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\nexport const Tags = new TagsCollection('tags');\n\nTags.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nexport const FormSchema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  type: {\n    type: String,\n    allowedValues: TAG_TYPES.ALL_LIST,\n  },\n  colorCode: {\n    type: String,\n  },\n});\n\nTags.schema = new SimpleSchema([\n  FormSchema,\n  {\n    createdAt: {\n      type: Date,\n    },\n    objectCount: {\n      type: Number,\n    },\n  },\n]);\n\nTags.attachSchema(Tags.schema);\n\n// helper for conversation, customer, engage message etc ...\nexport const TagItemSchema = new SimpleSchema({\n  type: {\n    type: String,\n  },\n  targetIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  tagIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nTags.publicFields = {\n  name: 1,\n  type: 1,\n  createdAt: 1,\n  colorCode: 1,\n};\n\nFactory.define('tag', Tags, {\n  name: () => Random.id(),\n  type: () => TAG_TYPES.CONVERSATION,\n  colorCode: () => '#000',\n});\n"]},"hash":"05f842e9ba535e3955b588c6ca486a79dc001a59"}
