{"metadata":{"usedHelpers":["extends","taggedTemplateLiteralLoose","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"/imports/api/engage/constants","imported":["MESSENGER_KINDS","SENT_AS_CHOICES","MESSAGE_KINDS"],"specifiers":[{"kind":"named","imported":"MESSENGER_KINDS","local":"MESSENGER_KINDS"},{"kind":"named","imported":"SENT_AS_CHOICES","local":"SENT_AS_CHOICES"},{"kind":"named","imported":"MESSAGE_KINDS","local":"MESSAGE_KINDS"}]},{"source":"../utils","imported":["methodCallback"],"specifiers":[{"kind":"named","imported":"methodCallback","local":"methodCallback"}]},{"source":"../components","imported":["Widget"],"specifiers":[{"kind":"named","imported":"Widget","local":"Widget"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/engage/containers/Widget.js","filenameRelative":"/imports/react-ui/engage/containers/Widget.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/engage/containers/Widget.js.map","sourceFileName":"/imports/react-ui/engage/containers/Widget.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Widget"},"ignored":false,"code":"var _taggedTemplateLiteralLoose2 = require(\"babel-runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _templateObject = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query emailTemplates {\\n        emailTemplates {\\n          _id\\n          name\\n          content\\n        }\\n      }\\n    \"], [\"\\n      query emailTemplates {\\n        emailTemplates {\\n          _id\\n          name\\n          content\\n        }\\n      }\\n    \"]),\n    _templateObject2 = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query brands {\\n        brands {\\n          _id\\n          name\\n        }\\n      }\\n    \"], [\"\\n      query brands {\\n        brands {\\n          _id\\n          name\\n        }\\n      }\\n    \"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 2);\nvar MESSENGER_KINDS = void 0,\n    SENT_AS_CHOICES = void 0,\n    MESSAGE_KINDS = void 0;\nmodule.importSync(\"/imports/api/engage/constants\", {\n  MESSENGER_KINDS: function (v) {\n    MESSENGER_KINDS = v;\n  },\n  SENT_AS_CHOICES: function (v) {\n    SENT_AS_CHOICES = v;\n  },\n  MESSAGE_KINDS: function (v) {\n    MESSAGE_KINDS = v;\n  }\n}, 3);\nvar methodCallback = void 0;\nmodule.importSync(\"../utils\", {\n  methodCallback: function (v) {\n    methodCallback = v;\n  }\n}, 4);\nvar Widget = void 0;\nmodule.importSync(\"../components\", {\n  Widget: function (v) {\n    Widget = v;\n  }\n}, 5);\n\nvar WidgetContainer = function (props) {\n  var emailTemplatesQuery = props.emailTemplatesQuery,\n      brandsQuery = props.brandsQuery;\n\n  if (emailTemplatesQuery.loading || brandsQuery.loading) {\n    return null;\n  }\n\n  var emailTemplates = emailTemplatesQuery.emailTemplates;\n  var brands = brandsQuery.brands; // save\n\n  var save = function (doc, callback) {\n    doc.kind = MESSAGE_KINDS.MANUAL;\n    doc.isLive = true;\n    return Meteor.call('engage.messages.add', {\n      doc: doc\n    }, function (error, result) {\n      methodCallback(error, result);\n\n      if (!error) {\n        callback();\n      }\n    });\n  };\n\n  var updatedProps = (0, _extends3.default)({}, props, {\n    emailTemplates: emailTemplates,\n    brands: brands,\n    save: save,\n    messengerKinds: MESSENGER_KINDS.SELECT_OPTIONS,\n    sentAsChoices: SENT_AS_CHOICES.SELECT_OPTIONS\n  });\n  return React.createElement(Widget, updatedProps);\n};\n\nWidgetContainer.propTypes = {\n  emailTemplatesQuery: PropTypes.object,\n  brandsQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(_templateObject), {\n  name: 'emailTemplatesQuery'\n}), graphql(gql(_templateObject2), {\n  name: 'brandsQuery'\n}))(WidgetContainer));","map":{"version":3,"sources":["/imports/react-ui/engage/containers/Widget.js"],"names":["React","module","importSync","v","PropTypes","compose","gql","graphql","MESSENGER_KINDS","SENT_AS_CHOICES","MESSAGE_KINDS","methodCallback","Widget","WidgetContainer","emailTemplatesQuery","props","brandsQuery","loading","emailTemplates","brands","save","doc","callback","kind","MANUAL","isLive","Meteor","call","error","result","updatedProps","messengerKinds","SELECT_OPTIONS","sentAsChoices","propTypes","object","export","exports","default","name"],"mappings":"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","file":"/imports/react-ui/engage/containers/Widget.js.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { MESSENGER_KINDS, SENT_AS_CHOICES, MESSAGE_KINDS } from '/imports/api/engage/constants';\nimport { methodCallback } from '../utils';\nimport { Widget } from '../components';\n\nconst WidgetContainer = props => {\n  const { emailTemplatesQuery, brandsQuery } = props;\n\n  if (emailTemplatesQuery.loading || brandsQuery.loading) {\n    return null;\n  }\n\n  const emailTemplates = emailTemplatesQuery.emailTemplates;\n  const brands = brandsQuery.brands;\n\n  // save\n  const save = (doc, callback) => {\n    doc.kind = MESSAGE_KINDS.MANUAL;\n    doc.isLive = true;\n\n    return Meteor.call('engage.messages.add', { doc }, (error, result) => {\n      methodCallback(error, result);\n\n      if (!error) {\n        callback();\n      }\n    });\n  };\n\n  const updatedProps = {\n    ...props,\n    emailTemplates,\n    brands,\n    save,\n    messengerKinds: MESSENGER_KINDS.SELECT_OPTIONS,\n    sentAsChoices: SENT_AS_CHOICES.SELECT_OPTIONS,\n  };\n\n  return <Widget {...updatedProps} />;\n};\n\nWidgetContainer.propTypes = {\n  emailTemplatesQuery: PropTypes.object,\n  brandsQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(\n    gql`\n      query emailTemplates {\n        emailTemplates {\n          _id\n          name\n          content\n        }\n      }\n    `,\n    { name: 'emailTemplatesQuery' },\n  ),\n  graphql(\n    gql`\n      query brands {\n        brands {\n          _id\n          name\n        }\n      }\n    `,\n    { name: 'brandsQuery' },\n  ),\n)(WidgetContainer);\n"]},"hash":"df84518b1387156f673d54401c736d65a70a1865"}
