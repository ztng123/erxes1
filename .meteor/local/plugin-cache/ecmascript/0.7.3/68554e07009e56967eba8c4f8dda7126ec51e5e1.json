{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"/imports/api/customers/segments","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Segments"}]},{"source":"/imports/api/tags/utils","imported":["TagsCollection","tagsHelper","tagSchemaOptions"],"specifiers":[{"kind":"named","imported":"TagsCollection","local":"TagsCollection"},{"kind":"named","imported":"tagsHelper","local":"tagsHelper"},{"kind":"named","imported":"tagSchemaOptions","local":"tagSchemaOptions"}]},{"source":"./constants","imported":["MESSAGE_KINDS","MESSENGER_KINDS","METHODS","SENT_AS_CHOICES"],"specifiers":[{"kind":"named","imported":"MESSAGE_KINDS","local":"MESSAGE_KINDS"},{"kind":"named","imported":"MESSENGER_KINDS","local":"MESSENGER_KINDS"},{"kind":"named","imported":"METHODS","local":"METHODS"},{"kind":"named","imported":"SENT_AS_CHOICES","local":"SENT_AS_CHOICES"}]}],"exports":{"exported":["Messages"],"specifiers":[{"kind":"local","local":"Messages","exported":"Messages"}]}}},"options":{"filename":"/imports/api/engage/engage.js","filenameRelative":"/imports/api/engage/engage.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/engage/engage.js.map","sourceFileName":"/imports/api/engage/engage.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"engage"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Messages: function () {\n    return Messages;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 1);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 2);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 3);\nvar Segments = void 0;\nmodule.importSync(\"/imports/api/customers/segments\", {\n  \"default\": function (v) {\n    Segments = v;\n  }\n}, 4);\nvar TagsCollection = void 0,\n    tagsHelper = void 0,\n    tagSchemaOptions = void 0;\nmodule.importSync(\"/imports/api/tags/utils\", {\n  TagsCollection: function (v) {\n    TagsCollection = v;\n  },\n  tagsHelper: function (v) {\n    tagsHelper = v;\n  },\n  tagSchemaOptions: function (v) {\n    tagSchemaOptions = v;\n  }\n}, 5);\nvar MESSAGE_KINDS = void 0,\n    MESSENGER_KINDS = void 0,\n    METHODS = void 0,\n    SENT_AS_CHOICES = void 0;\nmodule.importSync(\"./constants\", {\n  MESSAGE_KINDS: function (v) {\n    MESSAGE_KINDS = v;\n  },\n  MESSENGER_KINDS: function (v) {\n    MESSENGER_KINDS = v;\n  },\n  METHODS: function (v) {\n    METHODS = v;\n  },\n  SENT_AS_CHOICES: function (v) {\n    SENT_AS_CHOICES = v;\n  }\n}, 6);\nvar Messages = new TagsCollection('engage_messages');\nMessages.TAG_TYPE = 'engageMessage';\nvar EmailSchema = new SimpleSchema({\n  templateId: {\n    type: String,\n    optional: true\n  },\n  subject: {\n    type: String\n  },\n  content: {\n    type: String\n  }\n}); // visistor auto message's per rule schema\n\nvar RuleSchema = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  // browserLanguage, currentUrl, etc ...\n  kind: {\n    type: String\n  },\n  // Browser language, Current url etc ...\n  text: {\n    type: String\n  },\n  // is, isNot, startsWith\n  condition: {\n    type: String\n  },\n  value: {\n    type: String,\n    optional: true\n  }\n});\nvar MessengerSchema = new SimpleSchema({\n  brandId: {\n    type: String\n  },\n  kind: {\n    type: String,\n    allowedValues: MESSENGER_KINDS.ALL_LIST,\n    optional: true\n  },\n  sentAs: {\n    type: String,\n    allowedValues: SENT_AS_CHOICES.ALL_LIST\n  },\n  content: {\n    type: String\n  },\n  rules: {\n    type: [RuleSchema],\n    optional: true\n  }\n});\nMessages.schema = new SimpleSchema((0, _extends3.default)({\n  // auto, visitorAuto, manual\n  kind: {\n    type: String,\n    allowedValues: MESSAGE_KINDS.ALL_LIST\n  },\n  // targets\n  segmentId: {\n    type: String,\n    optional: true\n  },\n  customerIds: {\n    type: [String],\n    optional: true\n  },\n  title: {\n    type: String\n  },\n  fromUserId: {\n    type: String\n  },\n  // messenger, email etc ...\n  method: {\n    type: String,\n    allowedValues: METHODS.ALL_LIST\n  },\n  // email kind fields\n  email: {\n    type: EmailSchema,\n    optional: true\n  },\n  // messenger kind fields\n  messenger: {\n    type: MessengerSchema,\n    optional: true\n  },\n  isDraft: {\n    type: Boolean,\n    optional: true\n  },\n  isLive: {\n    type: Boolean,\n    optional: true\n  },\n  stopDate: {\n    type: Date,\n    optional: true\n  }\n}, tagSchemaOptions()));\nMessages.schemaExtra = new SimpleSchema({\n  createdUserId: {\n    type: String\n  },\n  createdDate: {\n    type: Date\n  },\n  // read customer ids\n  messengerReceivedCustomerIds: {\n    type: [String],\n    optional: true\n  },\n  // for example, save each customers's email delivery reports by messageId\n  deliveryReports: {\n    type: Object,\n    blackbox: true,\n    optional: true\n  }\n});\nMessages.helpers((0, _extends3.default)({\n  fromUser: function () {\n    return Meteor.users.findOne(this.fromUserId) || {};\n  },\n  segment: function () {\n    return Segments.findOne(this.segmentId) || {};\n  }\n}, tagsHelper));\nMessages.attachSchema(Messages.schema);\nMessages.attachSchema(Messages.schemaExtra);\nFactory.define('engage.messages', Messages, {\n  title: function () {\n    return faker.random.word();\n  }\n});","map":{"version":3,"sources":["/imports/api/engage/engage.js"],"names":["module","export","Messages","Meteor","importSync","v","faker","Factory","SimpleSchema","Segments","TagsCollection","tagsHelper","tagSchemaOptions","MESSAGE_KINDS","MESSENGER_KINDS","METHODS","SENT_AS_CHOICES","TAG_TYPE","EmailSchema","templateId","type","String","optional","subject","content","RuleSchema","_id","kind","text","condition","value","MessengerSchema","brandId","allowedValues","ALL_LIST","sentAs","rules","schema","segmentId","customerIds","title","fromUserId","method","email","messenger","isDraft","Boolean","isLive","stopDate","Date","schemaExtra","createdUserId","createdDate","messengerReceivedCustomerIds","deliveryReports","Object","blackbox","helpers","fromUser","users","findOne","segment","attachSchema","define","random","word"],"mappings":"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","file":"/imports/api/engage/engage.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport faker from 'faker';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport Segments from '/imports/api/customers/segments';\nimport { TagsCollection, tagsHelper, tagSchemaOptions } from '/imports/api/tags/utils';\nimport { MESSAGE_KINDS, MESSENGER_KINDS, METHODS, SENT_AS_CHOICES } from './constants';\n\nexport const Messages = new TagsCollection('engage_messages');\n\nMessages.TAG_TYPE = 'engageMessage';\n\nconst EmailSchema = new SimpleSchema({\n  templateId: {\n    type: String,\n    optional: true,\n  },\n  subject: {\n    type: String,\n  },\n  content: {\n    type: String,\n  },\n});\n\n// visistor auto message's per rule schema\nconst RuleSchema = new SimpleSchema({\n  _id: { type: String },\n\n  // browserLanguage, currentUrl, etc ...\n  kind: { type: String },\n\n  // Browser language, Current url etc ...\n  text: { type: String },\n\n  // is, isNot, startsWith\n  condition: { type: String },\n\n  value: { type: String, optional: true },\n});\n\nconst MessengerSchema = new SimpleSchema({\n  brandId: {\n    type: String,\n  },\n  kind: {\n    type: String,\n    allowedValues: MESSENGER_KINDS.ALL_LIST,\n    optional: true,\n  },\n  sentAs: {\n    type: String,\n    allowedValues: SENT_AS_CHOICES.ALL_LIST,\n  },\n  content: {\n    type: String,\n  },\n  rules: {\n    type: [RuleSchema],\n    optional: true,\n  },\n});\n\nMessages.schema = new SimpleSchema({\n  // auto, visitorAuto, manual\n  kind: {\n    type: String,\n    allowedValues: MESSAGE_KINDS.ALL_LIST,\n  },\n\n  // targets\n  segmentId: {\n    type: String,\n    optional: true,\n  },\n  customerIds: {\n    type: [String],\n    optional: true,\n  },\n\n  title: {\n    type: String,\n  },\n  fromUserId: {\n    type: String,\n  },\n\n  // messenger, email etc ...\n  method: {\n    type: String,\n    allowedValues: METHODS.ALL_LIST,\n  },\n\n  // email kind fields\n  email: {\n    type: EmailSchema,\n    optional: true,\n  },\n\n  // messenger kind fields\n  messenger: {\n    type: MessengerSchema,\n    optional: true,\n  },\n\n  isDraft: {\n    type: Boolean,\n    optional: true,\n  },\n  isLive: {\n    type: Boolean,\n    optional: true,\n  },\n  stopDate: {\n    type: Date,\n    optional: true,\n  },\n  ...tagSchemaOptions(),\n});\n\nMessages.schemaExtra = new SimpleSchema({\n  createdUserId: {\n    type: String,\n  },\n\n  createdDate: {\n    type: Date,\n  },\n\n  // read customer ids\n  messengerReceivedCustomerIds: {\n    type: [String],\n    optional: true,\n  },\n\n  // for example, save each customers's email delivery reports by messageId\n  deliveryReports: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n});\n\nMessages.helpers({\n  fromUser() {\n    return Meteor.users.findOne(this.fromUserId) || {};\n  },\n\n  segment() {\n    return Segments.findOne(this.segmentId) || {};\n  },\n\n  ...tagsHelper,\n});\n\nMessages.attachSchema(Messages.schema);\nMessages.attachSchema(Messages.schemaExtra);\n\nFactory.define('engage.messages', Messages, {\n  title: () => faker.random.word(),\n});\n"]},"hash":"68554e07009e56967eba8c4f8dda7126ec51e5e1"}
