{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-base/accounts_reconnect_tests.js","filenameRelative":"/packages/accounts-base/accounts_reconnect_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-base/accounts_reconnect_tests.js.map","sourceFileName":"/packages/accounts-base/accounts_reconnect_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"accounts_reconnect_tests"},"ignored":false,"code":"if (Meteor.isServer) {\n  Meteor.methods({\n    getConnectionUserId: function () {\n      return this.userId;\n    }\n  });\n}\n\nif (Meteor.isClient) {\n  Tinytest.addAsync('accounts - reconnect auto-login', function (test, done) {\n    var username1 = 'testuser1-' + Random.id();\n    var username2 = 'testuser2-' + Random.id();\n    var password1 = 'password1-' + Random.id();\n    var password2 = 'password2-' + Random.id();\n    var timeoutHandle;\n    var onLoginStopper;\n    loginAsUser1();\n\n    function loginAsUser1() {\n      Accounts.createUser({\n        username: username1,\n        password: password1\n      }, onUser1LoggedIn);\n    }\n\n    function onUser1LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user1');\n      Accounts.createUser({\n        username: username2,\n        password: password2\n      }, onUser2LoggedIn);\n    }\n\n    function onUser2LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user2');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnect);\n      Meteor.disconnect();\n      Meteor.reconnect();\n    }\n\n    function onUser2LoggedInAfterReconnect() {\n      onLoginStopper.stop();\n      Meteor.loginWithPassword('non-existent-user', 'or-wrong-password', onFailedLogin);\n    }\n\n    function onFailedLogin(err) {\n      test.instanceOf(err, Meteor.Error, 'No Meteor.Error on login failure');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnectAfterFailedLogin);\n      Meteor.disconnect();\n      Meteor.reconnect();\n      timeoutHandle = Meteor.setTimeout(failTest, 1000);\n    }\n\n    function failTest() {\n      onLoginStopper.stop();\n      test.fail('Issue #4970 has occured.');\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function onUser2LoggedInAfterReconnectAfterFailedLogin() {\n      onLoginStopper.stop();\n      Meteor.clearTimeout(timeoutHandle);\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function checkFinalState(err, connectionUserId) {\n      test.isUndefined(err, 'Unexpected error calling getConnectionUserId');\n      test.equal(connectionUserId, Meteor.userId(), 'userId is different on client and server');\n      done();\n    }\n  });\n}","map":{"version":3,"sources":["/packages/accounts-base/accounts_reconnect_tests.js"],"names":["Meteor","isServer","methods","getConnectionUserId","userId","isClient","Tinytest","addAsync","test","done","username1","Random","id","username2","password1","password2","timeoutHandle","onLoginStopper","loginAsUser1","Accounts","createUser","username","password","onUser1LoggedIn","err","isUndefined","onUser2LoggedIn","onLogin","onUser2LoggedInAfterReconnect","disconnect","reconnect","stop","loginWithPassword","onFailedLogin","instanceOf","Error","onUser2LoggedInAfterReconnectAfterFailedLogin","setTimeout","failTest","fail","call","checkFinalState","clearTimeout","connectionUserId","equal"],"mappings":"AAAA,IAAIA,OAAOC,QAAX,EAAqB;AACnBD,SAAOE,OAAP,CAAe;AACbC,yBAAqB,YAAW;AAC9B,aAAO,KAAKC,MAAZ;AACD;AAHY,GAAf;AAKD;;AAED,IAAIJ,OAAOK,QAAX,EAAqB;AACnBC,WAASC,QAAT,CAAkB,iCAAlB,EAAqD,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACxE,QAAIC,YAAY,eAAeC,OAAOC,EAAP,EAA/B;AACA,QAAIC,YAAY,eAAeF,OAAOC,EAAP,EAA/B;AACA,QAAIE,YAAY,eAAeH,OAAOC,EAAP,EAA/B;AACA,QAAIG,YAAY,eAAeJ,OAAOC,EAAP,EAA/B;AACA,QAAII,aAAJ;AACA,QAAIC,cAAJ;AAEAC;;AAEA,aAASA,YAAT,GAAwB;AACtBC,eAASC,UAAT,CAAoB;AAClBC,kBAAUX,SADQ;AAElBY,kBAAUR;AAFQ,OAApB,EAGGS,eAHH;AAID;;AAED,aAASA,eAAT,CAAyBC,GAAzB,EAA8B;AAC5BhB,WAAKiB,WAAL,CAAiBD,GAAjB,EAAsB,sCAAtB;AACAL,eAASC,UAAT,CAAoB;AAClBC,kBAAUR,SADQ;AAElBS,kBAAUP;AAFQ,OAApB,EAGGW,eAHH;AAID;;AAED,aAASA,eAAT,CAAyBF,GAAzB,EAA8B;AAC5BhB,WAAKiB,WAAL,CAAiBD,GAAjB,EAAsB,sCAAtB;AACAP,uBAAiBE,SAASQ,OAAT,CAAiBC,6BAAjB,CAAjB;AACA5B,aAAO6B,UAAP;AACA7B,aAAO8B,SAAP;AACD;;AAED,aAASF,6BAAT,GAAyC;AACvCX,qBAAec,IAAf;AACA/B,aAAOgC,iBAAP,CAAyB,mBAAzB,EAA8C,mBAA9C,EACEC,aADF;AAED;;AAED,aAASA,aAAT,CAAuBT,GAAvB,EAA4B;AAC1BhB,WAAK0B,UAAL,CAAgBV,GAAhB,EAAqBxB,OAAOmC,KAA5B,EAAmC,kCAAnC;AACAlB,uBAAiBE,SAASQ,OAAT,CAAiBS,6CAAjB,CAAjB;AACApC,aAAO6B,UAAP;AACA7B,aAAO8B,SAAP;AACAd,sBAAgBhB,OAAOqC,UAAP,CAAkBC,QAAlB,EAA4B,IAA5B,CAAhB;AACD;;AAED,aAASA,QAAT,GAAoB;AAClBrB,qBAAec,IAAf;AACAvB,WAAK+B,IAAL,CAAU,0BAAV;AACAvC,aAAOwC,IAAP,CAAY,qBAAZ,EAAmCC,eAAnC;AACD;;AAED,aAASL,6CAAT,GAAyD;AACvDnB,qBAAec,IAAf;AACA/B,aAAO0C,YAAP,CAAoB1B,aAApB;AACAhB,aAAOwC,IAAP,CAAY,qBAAZ,EAAmCC,eAAnC;AACD;;AAED,aAASA,eAAT,CAAyBjB,GAAzB,EAA8BmB,gBAA9B,EAAgD;AAC9CnC,WAAKiB,WAAL,CAAiBD,GAAjB,EAAsB,8CAAtB;AACAhB,WAAKoC,KAAL,CAAWD,gBAAX,EAA6B3C,OAAOI,MAAP,EAA7B,EACE,0CADF;AAEAK;AACD;AACF,GAhED;AAiED","file":"/packages/accounts-base/accounts_reconnect_tests.js.map","sourcesContent":["if (Meteor.isServer) {\n  Meteor.methods({\n    getConnectionUserId: function() {\n      return this.userId;\n    }\n  });\n}\n\nif (Meteor.isClient) {\n  Tinytest.addAsync('accounts - reconnect auto-login', function(test, done) {\n    var username1 = 'testuser1-' + Random.id();\n    var username2 = 'testuser2-' + Random.id();\n    var password1 = 'password1-' + Random.id();\n    var password2 = 'password2-' + Random.id();\n    var timeoutHandle;\n    var onLoginStopper;\n\n    loginAsUser1();\n\n    function loginAsUser1() {\n      Accounts.createUser({\n        username: username1,\n        password: password1\n      }, onUser1LoggedIn);\n    }\n\n    function onUser1LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user1');\n      Accounts.createUser({\n        username: username2,\n        password: password2\n      }, onUser2LoggedIn);\n    }\n\n    function onUser2LoggedIn(err) {\n      test.isUndefined(err, 'Unexpected error logging in as user2');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnect);\n      Meteor.disconnect();\n      Meteor.reconnect();\n    }\n\n    function onUser2LoggedInAfterReconnect() {\n      onLoginStopper.stop();\n      Meteor.loginWithPassword('non-existent-user', 'or-wrong-password',\n        onFailedLogin);\n    }\n\n    function onFailedLogin(err) {\n      test.instanceOf(err, Meteor.Error, 'No Meteor.Error on login failure');\n      onLoginStopper = Accounts.onLogin(onUser2LoggedInAfterReconnectAfterFailedLogin);\n      Meteor.disconnect();\n      Meteor.reconnect();\n      timeoutHandle = Meteor.setTimeout(failTest, 1000);\n    }\n\n    function failTest() {\n      onLoginStopper.stop();\n      test.fail('Issue #4970 has occured.');\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function onUser2LoggedInAfterReconnectAfterFailedLogin() {\n      onLoginStopper.stop();\n      Meteor.clearTimeout(timeoutHandle);\n      Meteor.call('getConnectionUserId', checkFinalState);\n    }\n\n    function checkFinalState(err, connectionUserId) {\n      test.isUndefined(err, 'Unexpected error calling getConnectionUserId');\n      test.equal(connectionUserId, Meteor.userId(),\n        'userId is different on client and server');\n      done();\n    }\n  });\n}\n"]},"hash":"be726b9b1c901df133d529e66474b7fc4d58a0e2"}
