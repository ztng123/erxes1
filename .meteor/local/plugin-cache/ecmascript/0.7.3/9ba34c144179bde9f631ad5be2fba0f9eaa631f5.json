{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"twit","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Twit"}]},{"source":"social-oauth-client","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"soc"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/imports/api/server/utils","imported":["apolloNotifyNewMessage"],"specifiers":[{"kind":"named","imported":"apolloNotifyNewMessage","local":"apolloNotifyNewMessage"}]},{"source":"/imports/api/integrations/integrations","imported":["Integrations"],"specifiers":[{"kind":"named","imported":"Integrations","local":"Integrations"}]},{"source":"/imports/api/integrations/constants","imported":["KIND_CHOICES"],"specifiers":[{"kind":"named","imported":"KIND_CHOICES","local":"KIND_CHOICES"}]},{"source":"/imports/api/conversations/conversations","imported":["Conversations"],"specifiers":[{"kind":"named","imported":"Conversations","local":"Conversations"}]},{"source":"/imports/api/conversations/messages","imported":["Messages"],"specifiers":[{"kind":"named","imported":"Messages","local":"Messages"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"/imports/api/conversations/constants","imported":["CONVERSATION_STATUSES"],"specifiers":[{"kind":"named","imported":"CONVERSATION_STATUSES","local":"CONVERSATION_STATUSES"}]}],"exports":{"exported":["getOrCreateCommonConversation","getOrCreateDirectMessageConversation","TwitMap","tweetReply"],"specifiers":[{"kind":"local","local":"getOrCreateCommonConversation","exported":"getOrCreateCommonConversation"},{"kind":"local","local":"getOrCreateDirectMessageConversation","exported":"getOrCreateDirectMessageConversation"},{"kind":"local","local":"TwitMap","exported":"TwitMap"},{"kind":"local","local":"tweetReply","exported":"tweetReply"}]}}},"options":{"filename":"/imports/api/integrations/social/server/twitter.js","filenameRelative":"/imports/api/integrations/social/server/twitter.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/integrations/social/server/twitter.js.map","sourceFileName":"/imports/api/integrations/social/server/twitter.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"twitter"},"ignored":false,"code":"module.export({\n  getOrCreateCommonConversation: function () {\n    return getOrCreateCommonConversation;\n  },\n  getOrCreateDirectMessageConversation: function () {\n    return getOrCreateDirectMessageConversation;\n  },\n  TwitMap: function () {\n    return TwitMap;\n  },\n  tweetReply: function () {\n    return tweetReply;\n  }\n});\nvar Twit = void 0;\nmodule.importSync(\"twit\", {\n  \"default\": function (v) {\n    Twit = v;\n  }\n}, 0);\nvar soc = void 0;\nmodule.importSync(\"social-oauth-client\", {\n  \"default\": function (v) {\n    soc = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar apolloNotifyNewMessage = void 0;\nmodule.importSync(\"/imports/api/server/utils\", {\n  apolloNotifyNewMessage: function (v) {\n    apolloNotifyNewMessage = v;\n  }\n}, 3);\nvar Integrations = void 0;\nmodule.importSync(\"/imports/api/integrations/integrations\", {\n  Integrations: function (v) {\n    Integrations = v;\n  }\n}, 4);\nvar KIND_CHOICES = void 0;\nmodule.importSync(\"/imports/api/integrations/constants\", {\n  KIND_CHOICES: function (v) {\n    KIND_CHOICES = v;\n  }\n}, 5);\nvar Conversations = void 0;\nmodule.importSync(\"/imports/api/conversations/conversations\", {\n  Conversations: function (v) {\n    Conversations = v;\n  }\n}, 6);\nvar Messages = void 0;\nmodule.importSync(\"/imports/api/conversations/messages\", {\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 7);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 8);\nvar CONVERSATION_STATUSES = void 0;\nmodule.importSync(\"/imports/api/conversations/constants\", {\n  CONVERSATION_STATUSES: function (v) {\n    CONVERSATION_STATUSES = v;\n  }\n}, 9);\n\n/*\n * get or create customer using twitter data\n */var getOrCreateCustomer = function (integrationId, user) {\n  var customer = Customers.findOne({\n    integrationId: integrationId,\n    'twitterData.id': user.id\n  });\n\n  if (customer) {\n    return customer._id;\n  } // create customer\n\n\n  return Customers.insert({\n    name: user.name,\n    integrationId: integrationId,\n    twitterData: {\n      id: user.id,\n      idStr: user.id_str,\n      name: user.name,\n      screenName: user.screen_name,\n      profileImageUrl: user.profile_image_url\n    }\n  });\n}; /*\n    * create new message\n    */\n\nvar createMessage = function (conversation, content, user) {\n  if (conversation) {\n    // create new message\n    var messageId = Messages.insert({\n      conversationId: conversation._id,\n      customerId: getOrCreateCustomer(conversation.integrationId, user),\n      content: content,\n      internal: false\n    }); // notify subscription server new message\n\n    apolloNotifyNewMessage(messageId);\n    return messageId;\n  }\n}; /*\n    * new message received in old converation, update status adn readUsers\n    */\n\nvar updateConversation = function (_id) {\n  Conversations.update({\n    _id: _id\n  }, {\n    $set: {\n      // reset read state\n      readUserIds: [],\n      // if closed, reopen\n      status: CONVERSATION_STATUSES.OPEN\n    }\n  });\n}; /*\n    * create new conversation by regular tweet\n    */\n\nvar getOrCreateCommonConversation = function (data, integration) {\n  var conversation = void 0;\n\n  if (data.in_reply_to_status_id) {\n    // find conversation by tweet id\n    conversation = Conversations.findOne({\n      'twitterData.id': data.in_reply_to_status_id\n    }); // if closed, reopen it\n\n    updateConversation(conversation._id); // create new conversation\n  } else {\n    var conversationId = Conversations.insert({\n      content: data.text,\n      integrationId: integration._id,\n      customerId: getOrCreateCustomer(integration._id, data.user),\n      status: CONVERSATION_STATUSES.NEW,\n      // save tweet id\n      twitterData: {\n        id: data.id,\n        idStr: data.id_str,\n        screenName: data.user.screen_name,\n        isDirectMessage: false\n      }\n    });\n    conversation = Conversations.findOne(conversationId);\n  } // create new message\n\n\n  return createMessage(conversation, data.text, data.user);\n};\n\nvar getOrCreateDirectMessageConversation = function (data, integration) {\n  var conversation = Conversations.findOne({\n    'twitterData.isDirectMessage': true,\n    $or: [{\n      'twitterData.directMessage.senderId': data.sender_id,\n      'twitterData.directMessage.recipientId': data.recipient_id\n    }, {\n      'twitterData.directMessage.senderId': data.recipient_id,\n      'twitterData.directMessage.recipientId': data.sender_id\n    }]\n  });\n\n  if (conversation) {\n    // if closed, reopen it\n    updateConversation(conversation._id); // create new conversation\n  } else {\n    var conversationId = Conversations.insert({\n      content: data.text,\n      integrationId: integration._id,\n      customerId: getOrCreateCustomer(integration._id, data.sender),\n      status: CONVERSATION_STATUSES.NEW,\n      // save tweet id\n      twitterData: {\n        id: data.id,\n        idStr: data.id_str,\n        screenName: data.sender.screen_name,\n        isDirectMessage: true,\n        directMessage: {\n          senderId: data.sender_id,\n          senderIdStr: data.sender_id_str,\n          recipientId: data.recipient_id,\n          recipientIdStr: data.recipient_id_str\n        }\n      }\n    });\n    conversation = Conversations.findOne(conversationId);\n  } // create new message\n\n\n  return createMessage(conversation, data.text, data.sender);\n};\n\nvar TwitMap = {};\n\nvar trackIntegration = function (integration) {\n  var integrationUserId = integration.twitterData.id;\n  var _Meteor$settings$serv = Meteor.settings.services.twitter,\n      consumerKey = _Meteor$settings$serv.consumerKey,\n      consumerSecret = _Meteor$settings$serv.consumerSecret; // Twit instance\n\n  var twit = new Twit({\n    consumer_key: consumerKey,\n    consumer_secret: consumerSecret,\n    access_token: integration.twitterData.token,\n    access_token_secret: integration.twitterData.tokenSecret\n  }); // save twit instance\n\n  TwitMap[integration._id] = twit; // create stream\n\n  var stream = twit.stream('user'); // listen for timeline\n\n  stream.on('tweet', Meteor.bindEnvironment(function (data) {\n    // When situations like integration is deleted but trackIntegration\n    // version of that integration is still running, new conversations being\n    // created using non existing integrationId\n    if (!Integrations.findOne({\n      _id: integration._id\n    })) {\n      return null;\n    } // if user is replying to some tweet\n\n\n    if (data.in_reply_to_status_id) {\n      var conversation = Conversations.findOne({\n        'twitterData.id': data.in_reply_to_status_id\n      }); // and that tweet must exists\n\n      if (conversation) {\n        return getOrCreateCommonConversation(data, integration);\n      }\n    }\n\n    data.entities.user_mentions.forEach(function (mention) {\n      // listen for only mentioned tweets\n      if (mention.id === integrationUserId) {\n        getOrCreateCommonConversation(data, integration);\n      }\n    });\n    return null;\n  })); // listen for direct messages\n\n  stream.on('direct_message', Meteor.bindEnvironment(function (data) {\n    // When situations like integration is deleted but trackIntegration\n    // version of that integration is still running, new conversations being\n    // created using non existing integrationId\n    if (!Integrations.findOne({\n      _id: integration._id\n    })) {\n      return;\n    }\n\n    getOrCreateDirectMessageConversation(data.direct_message, integration);\n  }));\n}; // track all twitter integrations for the first time\n\n\nIntegrations.find({\n  kind: KIND_CHOICES.TWITTER\n}).forEach(function (integration) {\n  trackIntegration(integration);\n});\n\nvar postCallback = function (error) {\n  if (error) {\n    throw Error(error.message);\n  }\n}; /*\n    * post reply to twitter\n    */\n\nvar tweetReply = function (conversation, text) {\n  var twit = TwitMap[conversation.integrationId];\n  var twitterData = conversation.twitterData; // send direct message\n\n  if (conversation.twitterData.isDirectMessage) {\n    return twit.post('direct_messages/new', {\n      user_id: twitterData.directMessage.senderIdStr,\n      text: text\n    }, Meteor.bindEnvironment(postCallback));\n  } // send reply\n\n\n  return twit.post('statuses/update', {\n    status: \"@\" + twitterData.screenName + \" \" + text,\n    // replying tweet id\n    in_reply_to_status_id: twitterData.idStr\n  }, Meteor.bindEnvironment(postCallback));\n};\n\n// twitter oauth ===============\nvar _Meteor$settings$serv2 = Meteor.settings.services.twitter,\n    consumerKey = _Meteor$settings$serv2.consumerKey,\n    consumerSecret = _Meteor$settings$serv2.consumerSecret,\n    redirectUrl = _Meteor$settings$serv2.redirectUrl;\nvar socTwitter = new soc.Twitter({\n  CONSUMER_KEY: consumerKey,\n  CONSUMER_SECRET: consumerSecret,\n  REDIRECT_URL: redirectUrl\n});\nMeteor.methods({\n  'integrations.getTwitterAuthorizeUrl': function () {\n    return socTwitter.getAuthorizeUrl();\n  }\n});\nmodule.export(\"default\", exports.default = {\n  trackIntegration: trackIntegration,\n  tweetReply: tweetReply,\n  soc: socTwitter,\n  authenticate: function (queryParams, callback) {\n    // after user clicked authenticate button\n    socTwitter.callback({\n      query: queryParams\n    }).then(Meteor.bindEnvironment(function (data) {\n      // return integration info\n      callback({\n        name: data.info.name,\n        twitterData: {\n          id: data.info.id,\n          token: data.tokens.auth.token,\n          tokenSecret: data.tokens.auth.token_secret\n        }\n      });\n    }));\n  }\n});","map":{"version":3,"sources":["/imports/api/integrations/social/server/twitter.js"],"names":["module","export","getOrCreateCommonConversation","getOrCreateDirectMessageConversation","TwitMap","tweetReply","Twit","importSync","v","soc","Meteor","apolloNotifyNewMessage","Integrations","KIND_CHOICES","Conversations","Messages","Customers","CONVERSATION_STATUSES","getOrCreateCustomer","integrationId","user","customer","findOne","id","_id","insert","name","twitterData","idStr","id_str","screenName","screen_name","profileImageUrl","profile_image_url","createMessage","conversation","content","messageId","conversationId","customerId","internal","updateConversation","update","$set","readUserIds","status","OPEN","data","integration","in_reply_to_status_id","text","NEW","isDirectMessage","$or","sender_id","recipient_id","sender","directMessage","senderId","senderIdStr","sender_id_str","recipientId","recipientIdStr","recipient_id_str","trackIntegration","integrationUserId","settings","services","twitter","consumerKey","consumerSecret","twit","consumer_key","consumer_secret","access_token","token","access_token_secret","tokenSecret","stream","on","bindEnvironment","entities","user_mentions","forEach","mention","direct_message","find","kind","TWITTER","postCallback","error","Error","message","post","user_id","redirectUrl","socTwitter","Twitter","CONSUMER_KEY","CONSUMER_SECRET","REDIRECT_URL","methods","getAuthorizeUrl","exports","default","authenticate","queryParams","callback","query","then","info","tokens","auth","token_secret"],"mappings":"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","file":"/imports/api/integrations/social/server/twitter.js.map","sourcesContent":["import Twit from 'twit';\nimport soc from 'social-oauth-client';\nimport { Meteor } from 'meteor/meteor';\nimport { apolloNotifyNewMessage } from '/imports/api/server/utils';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { KIND_CHOICES } from '/imports/api/integrations/constants';\nimport { Conversations } from '/imports/api/conversations/conversations';\nimport { Messages } from '/imports/api/conversations/messages';\nimport { Customers } from '/imports/api/customers/customers';\nimport { CONVERSATION_STATUSES } from '/imports/api/conversations/constants';\n\n/*\n * get or create customer using twitter data\n */\nconst getOrCreateCustomer = (integrationId, user) => {\n  const customer = Customers.findOne({\n    integrationId,\n    'twitterData.id': user.id,\n  });\n\n  if (customer) {\n    return customer._id;\n  }\n\n  // create customer\n  return Customers.insert({\n    name: user.name,\n    integrationId,\n    twitterData: {\n      id: user.id,\n      idStr: user.id_str,\n      name: user.name,\n      screenName: user.screen_name,\n      profileImageUrl: user.profile_image_url,\n    },\n  });\n};\n\n/*\n * create new message\n */\nconst createMessage = (conversation, content, user) => {\n  if (conversation) {\n    // create new message\n    const messageId = Messages.insert({\n      conversationId: conversation._id,\n      customerId: getOrCreateCustomer(conversation.integrationId, user),\n      content,\n      internal: false,\n    });\n\n    // notify subscription server new message\n    apolloNotifyNewMessage(messageId);\n\n    return messageId;\n  }\n};\n\n/*\n * new message received in old converation, update status adn readUsers\n */\nconst updateConversation = _id => {\n  Conversations.update(\n    { _id },\n    {\n      $set: {\n        // reset read state\n        readUserIds: [],\n\n        // if closed, reopen\n        status: CONVERSATION_STATUSES.OPEN,\n      },\n    },\n  );\n};\n\n/*\n * create new conversation by regular tweet\n */\nexport const getOrCreateCommonConversation = (data, integration) => {\n  let conversation;\n\n  if (data.in_reply_to_status_id) {\n    // find conversation by tweet id\n    conversation = Conversations.findOne({\n      'twitterData.id': data.in_reply_to_status_id,\n    });\n\n    // if closed, reopen it\n    updateConversation(conversation._id);\n\n    // create new conversation\n  } else {\n    const conversationId = Conversations.insert({\n      content: data.text,\n      integrationId: integration._id,\n      customerId: getOrCreateCustomer(integration._id, data.user),\n      status: CONVERSATION_STATUSES.NEW,\n\n      // save tweet id\n      twitterData: {\n        id: data.id,\n        idStr: data.id_str,\n        screenName: data.user.screen_name,\n        isDirectMessage: false,\n      },\n    });\n\n    conversation = Conversations.findOne(conversationId);\n  }\n\n  // create new message\n  return createMessage(conversation, data.text, data.user);\n};\n\n/*\n * create new conversation by direct message\n */\nexport const getOrCreateDirectMessageConversation = (data, integration) => {\n  let conversation = Conversations.findOne({\n    'twitterData.isDirectMessage': true,\n    $or: [\n      {\n        'twitterData.directMessage.senderId': data.sender_id,\n        'twitterData.directMessage.recipientId': data.recipient_id,\n      },\n      {\n        'twitterData.directMessage.senderId': data.recipient_id,\n        'twitterData.directMessage.recipientId': data.sender_id,\n      },\n    ],\n  });\n\n  if (conversation) {\n    // if closed, reopen it\n    updateConversation(conversation._id);\n\n    // create new conversation\n  } else {\n    const conversationId = Conversations.insert({\n      content: data.text,\n      integrationId: integration._id,\n      customerId: getOrCreateCustomer(integration._id, data.sender),\n      status: CONVERSATION_STATUSES.NEW,\n\n      // save tweet id\n      twitterData: {\n        id: data.id,\n        idStr: data.id_str,\n        screenName: data.sender.screen_name,\n        isDirectMessage: true,\n        directMessage: {\n          senderId: data.sender_id,\n          senderIdStr: data.sender_id_str,\n          recipientId: data.recipient_id,\n          recipientIdStr: data.recipient_id_str,\n        },\n      },\n    });\n    conversation = Conversations.findOne(conversationId);\n  }\n\n  // create new message\n  return createMessage(conversation, data.text, data.sender);\n};\n\n// save twit instances by integration id\nexport const TwitMap = {};\n\nconst trackIntegration = integration => {\n  const integrationUserId = integration.twitterData.id;\n\n  const { consumerKey, consumerSecret } = Meteor.settings.services.twitter;\n\n  // Twit instance\n  const twit = new Twit({\n    consumer_key: consumerKey,\n    consumer_secret: consumerSecret,\n    access_token: integration.twitterData.token,\n    access_token_secret: integration.twitterData.tokenSecret,\n  });\n\n  // save twit instance\n  TwitMap[integration._id] = twit;\n\n  // create stream\n  const stream = twit.stream('user');\n\n  // listen for timeline\n  stream.on(\n    'tweet',\n    Meteor.bindEnvironment(data => {\n      // When situations like integration is deleted but trackIntegration\n      // version of that integration is still running, new conversations being\n      // created using non existing integrationId\n      if (!Integrations.findOne({ _id: integration._id })) {\n        return null;\n      }\n\n      // if user is replying to some tweet\n      if (data.in_reply_to_status_id) {\n        const conversation = Conversations.findOne({\n          'twitterData.id': data.in_reply_to_status_id,\n        });\n\n        // and that tweet must exists\n        if (conversation) {\n          return getOrCreateCommonConversation(data, integration);\n        }\n      }\n\n      data.entities.user_mentions.forEach(mention => {\n        // listen for only mentioned tweets\n        if (mention.id === integrationUserId) {\n          getOrCreateCommonConversation(data, integration);\n        }\n      });\n\n      return null;\n    }),\n  );\n\n  // listen for direct messages\n  stream.on(\n    'direct_message',\n    Meteor.bindEnvironment(data => {\n      // When situations like integration is deleted but trackIntegration\n      // version of that integration is still running, new conversations being\n      // created using non existing integrationId\n      if (!Integrations.findOne({ _id: integration._id })) {\n        return;\n      }\n\n      getOrCreateDirectMessageConversation(data.direct_message, integration);\n    }),\n  );\n};\n\n// track all twitter integrations for the first time\nIntegrations.find({ kind: KIND_CHOICES.TWITTER }).forEach(integration => {\n  trackIntegration(integration);\n});\n\nconst postCallback = error => {\n  if (error) {\n    throw Error(error.message);\n  }\n};\n\n/*\n * post reply to twitter\n */\nexport const tweetReply = (conversation, text) => {\n  const twit = TwitMap[conversation.integrationId];\n  const twitterData = conversation.twitterData;\n\n  // send direct message\n  if (conversation.twitterData.isDirectMessage) {\n    return twit.post(\n      'direct_messages/new',\n      {\n        user_id: twitterData.directMessage.senderIdStr,\n        text,\n      },\n      Meteor.bindEnvironment(postCallback),\n    );\n  }\n\n  // send reply\n  return twit.post(\n    'statuses/update',\n    {\n      status: `@${twitterData.screenName} ${text}`,\n\n      // replying tweet id\n      in_reply_to_status_id: twitterData.idStr,\n    },\n    Meteor.bindEnvironment(postCallback),\n  );\n};\n\n// twitter oauth ===============\nconst { consumerKey, consumerSecret, redirectUrl } = Meteor.settings.services.twitter;\nconst socTwitter = new soc.Twitter({\n  CONSUMER_KEY: consumerKey,\n  CONSUMER_SECRET: consumerSecret,\n  REDIRECT_URL: redirectUrl,\n});\n\nMeteor.methods({\n  'integrations.getTwitterAuthorizeUrl': () => socTwitter.getAuthorizeUrl(),\n});\n\nexport default {\n  trackIntegration,\n  tweetReply,\n  soc: socTwitter,\n\n  authenticate: (queryParams, callback) => {\n    // after user clicked authenticate button\n    socTwitter.callback({ query: queryParams }).then(\n      Meteor.bindEnvironment(data => {\n        // return integration info\n        callback({\n          name: data.info.name,\n          twitterData: {\n            id: data.info.id,\n            token: data.tokens.auth.token,\n            tokenSecret: data.tokens.auth.token_secret,\n          },\n        });\n      }),\n    );\n  },\n};\n"]},"hash":"9ba34c144179bde9f631ad5be2fba0f9eaa631f5"}
