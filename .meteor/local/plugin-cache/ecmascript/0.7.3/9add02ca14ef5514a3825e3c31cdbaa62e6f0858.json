{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"aws-sdk","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AWS"}]},{"source":"handlebars","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Handlebars"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/email","imported":["Email"],"specifiers":[{"kind":"named","imported":"Email","local":"Email"}]},{"source":"meteor/http","imported":["HTTP"],"specifiers":[{"kind":"named","imported":"HTTP","local":"HTTP"}]},{"source":"meteor/erxes-notifications","imported":["Notifications"],"specifiers":[{"kind":"named","imported":"Notifications","local":"Notifications"}]}],"exports":{"exported":["uploadFile","sendEmail","sendNotification","mutate","apolloNotifyNewMessage"],"specifiers":[{"kind":"local","local":"uploadFile","exported":"uploadFile"},{"kind":"local","local":"sendEmail","exported":"sendEmail"},{"kind":"local","local":"sendNotification","exported":"sendNotification"},{"kind":"local","local":"mutate","exported":"mutate"},{"kind":"local","local":"apolloNotifyNewMessage","exported":"apolloNotifyNewMessage"}]}}},"options":{"filename":"/imports/api/server/utils.js","filenameRelative":"/imports/api/server/utils.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/server/utils.js.map","sourceFileName":"/imports/api/server/utils.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"utils"},"ignored":false,"code":"module.export({\n  uploadFile: function () {\n    return uploadFile;\n  },\n  sendEmail: function () {\n    return sendEmail;\n  },\n  sendNotification: function () {\n    return sendNotification;\n  },\n  mutate: function () {\n    return mutate;\n  },\n  apolloNotifyNewMessage: function () {\n    return apolloNotifyNewMessage;\n  }\n});\nvar AWS = void 0;\nmodule.importSync(\"aws-sdk\", {\n  \"default\": function (v) {\n    AWS = v;\n  }\n}, 0);\nvar Handlebars = void 0;\nmodule.importSync(\"handlebars\", {\n  \"default\": function (v) {\n    Handlebars = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar Email = void 0;\nmodule.importSync(\"meteor/email\", {\n  Email: function (v) {\n    Email = v;\n  }\n}, 3);\nvar HTTP = void 0;\nmodule.importSync(\"meteor/http\", {\n  HTTP: function (v) {\n    HTTP = v;\n  }\n}, 4);\nvar Notifications = void 0;\nmodule.importSync(\"meteor/erxes-notifications\", {\n  Notifications: function (v) {\n    Notifications = v;\n  }\n}, 5);\n\nvar uploadFile = function (_ref) {\n  var name = _ref.name,\n      data = _ref.data;\n  var _Meteor$settings$serv = Meteor.settings.services.aws,\n      accessKeyId = _Meteor$settings$serv.accessKeyId,\n      secretAccessKey = _Meteor$settings$serv.secretAccessKey,\n      bucket = _Meteor$settings$serv.bucket,\n      _Meteor$settings$serv2 = _Meteor$settings$serv.prefix,\n      prefix = _Meteor$settings$serv2 === undefined ? '' : _Meteor$settings$serv2; // check credentials\n\n  if (!(accessKeyId || secretAccessKey || bucket)) {\n    return {\n      status: 'error',\n      data: 'Security credentials are not configured'\n    };\n  } // initialize s3\n\n\n  var s3 = new AWS.S3({\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey\n  }); // wait for putObject response\n\n  var syncPutObject = Meteor.wrapAsync(s3.putObject, s3); // generate unique name\n\n  var fileName = \"\" + prefix + Math.random() + name; // create buffer from file data\n\n  var buffer = new Buffer(data); // call putObject\n\n  var response = syncPutObject({\n    Bucket: bucket,\n    Key: fileName,\n    Body: buffer,\n    ACL: 'public-read'\n  });\n  response.url = \"https://s3.amazonaws.com/\" + bucket + \"/\" + fileName;\n  return response;\n};\n\n// send email helpers ====================\nfunction applyTemplate(data, templateName) {\n  var template = Assets.getText(\"emailTemplates/\" + templateName + \".html\");\n  template = Handlebars.compile(template);\n  return template(data);\n}\n\nvar sendEmail = function (_ref2) {\n  var to = _ref2.to,\n      subject = _ref2.subject,\n      template = _ref2.template;\n  var isCustom = template.isCustom,\n      data = template.data,\n      name = template.name; // generate email content by given template\n\n  var content = applyTemplate(data, name);\n  var html = ''; // for example brand related emails can be totally different\n\n  if (isCustom) {\n    html = content; // invitation, notification emails can be same\n  } else {\n    html = applyTemplate({\n      content: content\n    }, 'base');\n  } // do not send email in test mode\n\n\n  if (Meteor.isTest) {\n    return;\n  }\n\n  Email.send({\n    from: Meteor.settings.company.noReplyEmail,\n    to: to,\n    subject: subject,\n    html: html\n  });\n};\n\nvar sendNotification = function (_doc) {\n  var doc = _doc; // Splitting receivers\n\n  var receivers = doc.receivers;\n  delete doc.receivers; // Inserting entry to every receiver\n\n  receivers.forEach(function (receiverId) {\n    doc.receiver = receiverId; // create notification\n\n    var response = Notifications.create(Object.assign({}, doc)); // if receiver did not disable to get this notification\n\n    if (response === 'ok') {\n      var receiver = Meteor.users.findOne({\n        _id: receiverId\n      });\n      var details = receiver.details; // if receiver did not disable email notification then send email\n\n      if (!(details && details.getNotificationByEmail === false)) {\n        sendEmail({\n          to: receiver.emails[0].address,\n          subject: 'Notification',\n          template: {\n            name: 'notification',\n            data: {\n              notification: doc\n            }\n          }\n        });\n      }\n    }\n  });\n};\n\nvar mutate = function (query) {\n  return HTTP.call('POST', Meteor.settings.public.APOLLO_CLIENT_URL, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      query: query\n    }\n  });\n};\n\nvar apolloNotifyNewMessage = function (messageId) {\n  // Don't do anyting in test mode\n  if (Meteor.isTest) {\n    return;\n  }\n\n  mutate(\"\\n    mutation {\\n      conversationMessageInserted(_id: \\\"\" + messageId + \"\\\")\\n    }\\n  \");\n};","map":{"version":3,"sources":["/imports/api/server/utils.js"],"names":["module","export","uploadFile","sendEmail","sendNotification","mutate","apolloNotifyNewMessage","AWS","importSync","v","Handlebars","Meteor","Email","HTTP","Notifications","name","data","settings","services","aws","accessKeyId","secretAccessKey","bucket","prefix","status","s3","S3","syncPutObject","wrapAsync","putObject","fileName","Math","random","buffer","Buffer","response","Bucket","Key","Body","ACL","url","applyTemplate","templateName","template","Assets","getText","compile","to","subject","isCustom","content","html","isTest","send","from","company","noReplyEmail","doc","_doc","receivers","forEach","receiver","receiverId","create","Object","assign","users","findOne","_id","details","getNotificationByEmail","emails","address","notification","call","public","APOLLO_CLIENT_URL","headers","query","messageId"],"mappings":"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","file":"/imports/api/server/utils.js.map","sourcesContent":["import AWS from 'aws-sdk';\nimport Handlebars from 'handlebars';\nimport { Meteor } from 'meteor/meteor';\nimport { Email } from 'meteor/email';\nimport { HTTP } from 'meteor/http';\nimport { Notifications } from 'meteor/erxes-notifications';\n\n// save binary data to amazon s3\nexport const uploadFile = ({ name, data }) => {\n  const { accessKeyId, secretAccessKey, bucket, prefix = '' } = Meteor.settings.services.aws;\n\n  // check credentials\n  if (!(accessKeyId || secretAccessKey || bucket)) {\n    return {\n      status: 'error',\n      data: 'Security credentials are not configured',\n    };\n  }\n\n  // initialize s3\n  const s3 = new AWS.S3({ accessKeyId, secretAccessKey });\n\n  // wait for putObject response\n  const syncPutObject = Meteor.wrapAsync(s3.putObject, s3);\n\n  // generate unique name\n  const fileName = `${prefix}${Math.random()}${name}`;\n\n  // create buffer from file data\n  const buffer = new Buffer(data);\n\n  // call putObject\n  const response = syncPutObject({\n    Bucket: bucket,\n    Key: fileName,\n    Body: buffer,\n    ACL: 'public-read',\n  });\n\n  response.url = `https://s3.amazonaws.com/${bucket}/${fileName}`;\n\n  return response;\n};\n\n// send email helpers ====================\nfunction applyTemplate(data, templateName) {\n  let template = Assets.getText(`emailTemplates/${templateName}.html`);\n\n  template = Handlebars.compile(template);\n\n  return template(data);\n}\n\nexport const sendEmail = ({ to, subject, template }) => {\n  const { isCustom, data, name } = template;\n\n  // generate email content by given template\n  const content = applyTemplate(data, name);\n\n  let html = '';\n\n  // for example brand related emails can be totally different\n  if (isCustom) {\n    html = content;\n\n    // invitation, notification emails can be same\n  } else {\n    html = applyTemplate({ content }, 'base');\n  }\n\n  // do not send email in test mode\n  if (Meteor.isTest) {\n    return;\n  }\n\n  Email.send({\n    from: Meteor.settings.company.noReplyEmail,\n    to,\n    subject,\n    html,\n  });\n};\n\n// send notification helper\nexport const sendNotification = _doc => {\n  const doc = _doc;\n\n  // Splitting receivers\n  const receivers = doc.receivers;\n  delete doc.receivers;\n\n  // Inserting entry to every receiver\n  receivers.forEach(receiverId => {\n    doc.receiver = receiverId;\n\n    // create notification\n    const response = Notifications.create(Object.assign({}, doc));\n\n    // if receiver did not disable to get this notification\n    if (response === 'ok') {\n      const receiver = Meteor.users.findOne({ _id: receiverId });\n      const details = receiver.details;\n\n      // if receiver did not disable email notification then send email\n      if (!(details && details.getNotificationByEmail === false)) {\n        sendEmail({\n          to: receiver.emails[0].address,\n          subject: 'Notification',\n          template: {\n            name: 'notification',\n            data: {\n              notification: doc,\n            },\n          },\n        });\n      }\n    }\n  });\n};\n\n// send to post to graphql server\nexport const mutate = query =>\n  HTTP.call('POST', Meteor.settings.public.APOLLO_CLIENT_URL, {\n    headers: { 'Content-Type': 'application/json' },\n    data: { query },\n  });\n\n// notify subscription server new message\nexport const apolloNotifyNewMessage = messageId => {\n  // Don't do anyting in test mode\n  if (Meteor.isTest) {\n    return;\n  }\n\n  mutate(\n    `\n    mutation {\n      conversationMessageInserted(_id: \"${messageId}\")\n    }\n  `,\n  );\n};\n"]},"hash":"9add02ca14ef5514a3825e3c31cdbaa62e6f0858"}
