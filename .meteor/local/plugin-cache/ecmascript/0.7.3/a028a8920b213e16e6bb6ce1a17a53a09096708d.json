{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"../notifications","imported":["Notifications","Configs"],"specifiers":[{"kind":"named","imported":"Notifications","local":"Notifications"},{"kind":"named","imported":"Configs","local":"Configs"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/erxes-notifications/server/api.js","filenameRelative":"/packages/erxes-notifications/server/api.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/erxes-notifications/server/api.js.map","sourceFileName":"/packages/erxes-notifications/server/api.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"api"},"ignored":false,"code":"var _this = this;\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\n\nvar _ = void 0;\n\nmodule.importSync(\"meteor/underscore\", {\n  _: function (v) {\n    _ = v;\n  }\n}, 2);\nvar Notifications = void 0,\n    Configs = void 0;\nmodule.importSync(\"../notifications\", {\n  Notifications: function (v) {\n    Notifications = v;\n  },\n  Configs: function (v) {\n    Configs = v;\n  }\n}, 3);\n// will contain all type of notifications information then it will be filled dynamically\nNotifications.Modules = [];\n\nNotifications.registerModule = function (module) {\n  var schema = {\n    name: String,\n    description: String,\n    types: [{\n      name: String,\n      text: String\n    }]\n  };\n  check(module, schema);\n\n  var prevModule = _.find(Notifications.Modules, function (moduleInList) {\n    return moduleInList.name === module.name;\n  }); // module name is already exists\n\n\n  if (prevModule) {\n    throw new Meteor.Error(module.name + \" notification module already exists\");\n  } // notif type name is already exists\n\n\n  var allNotifTypes = [];\n\n  _.each(Notifications.Modules, function (moduleInList) {\n    allNotifTypes = _.union(allNotifTypes, moduleInList.types);\n  });\n\n  var allNotifTypeNames = _.pluck(allNotifTypes, 'name');\n\n  var typeNames = _.pluck(module.types, 'name'); // module.types and allNotifTypes must be nothing in common\n\n\n  if (!_.isEmpty(_.intersection(allNotifTypeNames, typeNames))) {\n    throw new Meteor.Error(\"Some items in \" + typeNames.toString() + \" are already exists\");\n  }\n\n  Notifications.Modules.unshift(module);\n};\n\nNotifications.create = function (_modifier) {\n  var modifier = _modifier;\n  check(modifier, Notifications.Schema); // Setting auto values\n\n  modifier.isRead = false;\n  modifier.createdUser = modifier.createdUser || _this.userId;\n  modifier.date = new Date(); // if receiver is configured to get this notification\n\n  var config = Configs.findOne({\n    user: modifier.receiver,\n    notifType: modifier.notifType\n  }); // receiver disabled this notification\n\n  if (config && !config.isAllowed) {\n    return 'error';\n  }\n\n  Notifications.insert(modifier);\n  return 'ok';\n};","map":{"version":3,"sources":["/packages/erxes-notifications/server/api.js"],"names":["Meteor","module","importSync","v","check","_","Notifications","Configs","Modules","registerModule","schema","name","String","description","types","text","prevModule","find","moduleInList","Error","allNotifTypes","each","union","allNotifTypeNames","pluck","typeNames","isEmpty","intersection","toString","unshift","create","_modifier","modifier","Schema","isRead","createdUser","userId","date","Date","config","findOne","user","receiver","notifType","isAllowed","insert"],"mappings":"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","file":"/packages/erxes-notifications/server/api.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\n\nimport { Notifications, Configs } from '../notifications';\n\n// will contain all type of notifications information then it will be filled dynamically\nNotifications.Modules = [];\n\nNotifications.registerModule = (module) => {\n  const schema = {\n    name: String,\n    description: String,\n\n    types: [\n      { name: String, text: String },\n    ],\n  };\n\n  check(module, schema);\n\n  const prevModule = _.find(\n    Notifications.Modules,\n    (moduleInList) => moduleInList.name === module.name\n  );\n\n  // module name is already exists\n  if (prevModule) {\n    throw new Meteor.Error(`${module.name} notification module already exists`);\n  }\n\n  // notif type name is already exists\n\n  let allNotifTypes = [];\n\n  _.each(Notifications.Modules, (moduleInList) => {\n    allNotifTypes = _.union(allNotifTypes, moduleInList.types);\n  });\n\n  const allNotifTypeNames = _.pluck(allNotifTypes, 'name');\n  const typeNames = _.pluck(module.types, 'name');\n\n  // module.types and allNotifTypes must be nothing in common\n  if (!_.isEmpty(_.intersection(allNotifTypeNames, typeNames))) {\n    throw new Meteor.Error(\n      `Some items in ${typeNames.toString()} are already exists`\n    );\n  }\n\n  Notifications.Modules.unshift(module);\n};\n\n\nNotifications.create = (_modifier) => {\n  const modifier = _modifier;\n\n  check(modifier, Notifications.Schema);\n\n  // Setting auto values\n  modifier.isRead = false;\n  modifier.createdUser = modifier.createdUser || this.userId;\n  modifier.date = new Date();\n\n  // if receiver is configured to get this notification\n  const config = Configs.findOne({\n    user: modifier.receiver,\n    notifType: modifier.notifType,\n  });\n\n  // receiver disabled this notification\n  if (config && !config.isAllowed) {\n    return 'error';\n  }\n\n  Notifications.insert(modifier);\n\n  return 'ok';\n};\n"]},"hash":"a028a8920b213e16e6bb6ce1a17a53a09096708d"}
