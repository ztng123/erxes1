{"metadata":{"usedHelpers":["extends","taggedTemplateLiteralLoose","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/imports/api/tags/constants","imported":["TAG_TYPES"],"specifiers":[{"kind":"named","imported":"TAG_TYPES","local":"TAG_TYPES"}]},{"source":"../components/Tagger","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Tagger"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/common/tagger/containers/Tagger.js","filenameRelative":"/imports/react-ui/common/tagger/containers/Tagger.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/common/tagger/containers/Tagger.js.map","sourceFileName":"/imports/react-ui/common/tagger/containers/Tagger.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Tagger"},"ignored":false,"code":"var _taggedTemplateLiteralLoose2 = require(\"babel-runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _Queries;\n\nvar _templateObject = (0, _taggedTemplateLiteralLoose3.default)([\"\\n  query GetConversations($params: ConversationListParams) {\\n    conversations(params: $params) {\\n      _id\\n      tagIds\\n    }\\n  }\\n\"], [\"\\n  query GetConversations($params: ConversationListParams) {\\n    conversations(params: $params) {\\n      _id\\n      tagIds\\n    }\\n  }\\n\"]),\n    _templateObject2 = (0, _taggedTemplateLiteralLoose3.default)([\"\\n  query GetCustomers($params: CustomerListParams) {\\n    customers(params: $params) {\\n      _id\\n      tagIds\\n    }\\n  }\\n\"], [\"\\n  query GetCustomers($params: CustomerListParams) {\\n    customers(params: $params) {\\n      _id\\n      tagIds\\n    }\\n  }\\n\"]),\n    _templateObject3 = (0, _taggedTemplateLiteralLoose3.default)([\"\\n  query GetEngageMessages($ids: [String]) {\\n    engageMessages(ids: $ids) {\\n      _id\\n      tagIds\\n    }\\n  }\\n\"], [\"\\n  query GetEngageMessages($ids: [String]) {\\n    engageMessages(ids: $ids) {\\n      _id\\n      tagIds\\n    }\\n  }\\n\"]),\n    _templateObject4 = (0, _taggedTemplateLiteralLoose3.default)([\"\\n  query GetTags($type: String!) {\\n    tags(type: $type) {\\n      _id\\n      name\\n      colorCode\\n    }\\n  }\\n\"], [\"\\n  query GetTags($type: String!) {\\n    tags(type: $type) {\\n      _id\\n      name\\n      colorCode\\n    }\\n  }\\n\"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar TAG_TYPES = void 0;\nmodule.importSync(\"/imports/api/tags/constants\", {\n  TAG_TYPES: function (v) {\n    TAG_TYPES = v;\n  }\n}, 4);\nvar Tagger = void 0;\nmodule.importSync(\"../components/Tagger\", {\n  \"default\": function (v) {\n    Tagger = v;\n  }\n}, 5);\nvar propTypes = {\n  type: PropTypes.string.isRequired,\n  targets: PropTypes.array.isRequired\n}; /**\n    * This higher order component is required for conditional queries.\n    * Based on prop `type` we need to change our target's query.\n    * @param {Object} props Component initial props\n    */\n\nfunction TaggerWithData(props) {\n  // Providing data to the component from API\n  var Component = compose( // Target objects (Conversations | Customers | Engage messages)\n  graphql(Queries[props.type], {\n    options: function () {\n      return {\n        variables: {\n          params: {\n            ids: props.targets\n          }\n        }\n      };\n    },\n    props: function (_ref) {\n      var _ref$data = _ref.data,\n          loading = _ref$data.loading,\n          conversations = _ref$data.conversations,\n          customers = _ref$data.customers;\n      return {\n        targetsLoading: loading,\n        targets: props.type === TAG_TYPES.CONVERSATION ? conversations : customers\n      };\n    }\n  }), // Tags\n  graphql(Tags, {\n    options: function (props) {\n      return {\n        variables: {\n          type: props.type\n        }\n      };\n    },\n    props: function (_ref2) {\n      var _ref2$data = _ref2.data,\n          loading = _ref2$data.loading,\n          tags = _ref2$data.tags;\n      return {\n        tagsLoading: loading,\n        tags: tags\n      };\n    }\n  }))(Tagger); // Other props\n\n  function tag(_ref3, callback) {\n    var type = _ref3.type,\n        targetIds = _ref3.targetIds,\n        tagIds = _ref3.tagIds;\n    return Meteor.call('tags.tag', {\n      type: type,\n      targetIds: targetIds,\n      tagIds: tagIds\n    }, callback);\n  } // Initial `props` are passed along with other props\n\n\n  return React.createElement(Component, (0, _extends3.default)({}, props, {\n    tag: tag\n  }));\n}\n\nTaggerWithData.propTypes = propTypes; /**\n                                       * Queries\n                                       */\nvar Conversations = gql(_templateObject);\nvar Customers = gql(_templateObject2);\nvar EngageMessages = gql(_templateObject3);\nvar Tags = gql(_templateObject4);\nvar Queries = (_Queries = {}, _Queries[TAG_TYPES.CONVERSATION] = Conversations, _Queries[TAG_TYPES.CUSTOMER] = Customers, _Queries[TAG_TYPES.ENGAGE_MESSAGE] = EngageMessages, _Queries);\nmodule.export(\"default\", exports.default = TaggerWithData);","map":{"version":3,"sources":["/imports/react-ui/common/tagger/containers/Tagger.js"],"names":["React","module","importSync","v","PropTypes","compose","gql","graphql","Meteor","TAG_TYPES","Tagger","propTypes","type","string","isRequired","targets","array","TaggerWithData","props","Component","Queries","options","variables","params","ids","data","loading","conversations","customers","targetsLoading","CONVERSATION","Tags","tags","tagsLoading","tag","callback","targetIds","tagIds","call","Conversations","Customers","EngageMessages","CUSTOMER","ENGAGE_MESSAGE","export","exports","default"],"mappings":"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","file":"/imports/react-ui/common/tagger/containers/Tagger.js.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { Meteor } from 'meteor/meteor';\nimport { TAG_TYPES } from '/imports/api/tags/constants';\nimport Tagger from '../components/Tagger';\n\nconst propTypes = {\n  type: PropTypes.string.isRequired,\n  targets: PropTypes.array.isRequired,\n};\n\n/**\n * This higher order component is required for conditional queries.\n * Based on prop `type` we need to change our target's query.\n * @param {Object} props Component initial props\n */\nfunction TaggerWithData(props) {\n  // Providing data to the component from API\n  const Component = compose(\n    // Target objects (Conversations | Customers | Engage messages)\n    graphql(Queries[props.type], {\n      options: () => ({\n        variables: { params: { ids: props.targets } },\n      }),\n      props: ({ data: { loading, conversations, customers } }) => ({\n        targetsLoading: loading,\n        targets: props.type === TAG_TYPES.CONVERSATION ? conversations : customers,\n      }),\n    }),\n    // Tags\n    graphql(Tags, {\n      options: props => ({\n        variables: { type: props.type },\n      }),\n      props: ({ data: { loading, tags } }) => ({\n        tagsLoading: loading,\n        tags,\n      }),\n    }),\n  )(Tagger);\n\n  // Other props\n  function tag({ type, targetIds, tagIds }, callback) {\n    return Meteor.call('tags.tag', { type, targetIds, tagIds }, callback);\n  }\n\n  // Initial `props` are passed along with other props\n  return <Component {...props} tag={tag} />;\n}\n\nTaggerWithData.propTypes = propTypes;\n\n/**\n * Queries\n */\nconst Conversations = gql`\n  query GetConversations($params: ConversationListParams) {\n    conversations(params: $params) {\n      _id\n      tagIds\n    }\n  }\n`;\n\nconst Customers = gql`\n  query GetCustomers($params: CustomerListParams) {\n    customers(params: $params) {\n      _id\n      tagIds\n    }\n  }\n`;\n\nconst EngageMessages = gql`\n  query GetEngageMessages($ids: [String]) {\n    engageMessages(ids: $ids) {\n      _id\n      tagIds\n    }\n  }\n`;\n\nconst Tags = gql`\n  query GetTags($type: String!) {\n    tags(type: $type) {\n      _id\n      name\n      colorCode\n    }\n  }\n`;\n\nconst Queries = {\n  [TAG_TYPES.CONVERSATION]: Conversations,\n  [TAG_TYPES.CUSTOMER]: Customers,\n  [TAG_TYPES.ENGAGE_MESSAGE]: EngageMessages,\n};\n\nexport default TaggerWithData;\n"]},"hash":"49ff99aade71b31d49a3451f9e8bbe989456ca38"}
