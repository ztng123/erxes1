{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["Match","check"],"specifiers":[{"kind":"named","imported":"Match","local":"Match"},{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"/imports/api/conversations/conversations","imported":["Conversations"],"specifiers":[{"kind":"named","imported":"Conversations","local":"Conversations"}]},{"source":"/imports/api/conversations/messages","imported":["Messages"],"specifiers":[{"kind":"named","imported":"Messages","local":"Messages"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"/imports/api/channels/channels","imported":["Channels"],"specifiers":[{"kind":"named","imported":"Channels","local":"Channels"}]},{"source":"../integrations","imported":["Integrations","messengerSchema","formSchema"],"specifiers":[{"kind":"named","imported":"Integrations","local":"Integrations"},{"kind":"named","imported":"messengerSchema","local":"messengerSchema"},{"kind":"named","imported":"formSchema","local":"formSchema"}]},{"source":"../constants","imported":["KIND_CHOICES"],"specifiers":[{"kind":"named","imported":"KIND_CHOICES","local":"KIND_CHOICES"}]}],"exports":{"exported":["addMessenger","editMessenger","addForm","editForm","remove","saveMessengerApperance","saveMessengerConfigs"],"specifiers":[{"kind":"local","local":"addMessenger","exported":"addMessenger"},{"kind":"local","local":"editMessenger","exported":"editMessenger"},{"kind":"local","local":"addForm","exported":"addForm"},{"kind":"local","local":"editForm","exported":"editForm"},{"kind":"local","local":"remove","exported":"remove"},{"kind":"local","local":"saveMessengerApperance","exported":"saveMessengerApperance"},{"kind":"local","local":"saveMessengerConfigs","exported":"saveMessengerConfigs"}]}}},"options":{"filename":"/imports/api/integrations/server/methods.js","filenameRelative":"/imports/api/integrations/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/integrations/server/methods.js.map","sourceFileName":"/imports/api/integrations/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  addMessenger: function () {\n    return addMessenger;\n  },\n  editMessenger: function () {\n    return editMessenger;\n  },\n  addForm: function () {\n    return addForm;\n  },\n  editForm: function () {\n    return editForm;\n  },\n  remove: function () {\n    return remove;\n  },\n  saveMessengerApperance: function () {\n    return saveMessengerApperance;\n  },\n  saveMessengerConfigs: function () {\n    return saveMessengerConfigs;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Match = void 0,\n    check = void 0;\nmodule.importSync(\"meteor/check\", {\n  Match: function (v) {\n    Match = v;\n  },\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 2);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 3);\nvar Conversations = void 0;\nmodule.importSync(\"/imports/api/conversations/conversations\", {\n  Conversations: function (v) {\n    Conversations = v;\n  }\n}, 4);\nvar Messages = void 0;\nmodule.importSync(\"/imports/api/conversations/messages\", {\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 5);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 6);\nvar Channels = void 0;\nmodule.importSync(\"/imports/api/channels/channels\", {\n  Channels: function (v) {\n    Channels = v;\n  }\n}, 7);\nvar Integrations = void 0,\n    messengerSchema = void 0,\n    formSchema = void 0;\nmodule.importSync(\"../integrations\", {\n  Integrations: function (v) {\n    Integrations = v;\n  },\n  messengerSchema: function (v) {\n    messengerSchema = v;\n  },\n  formSchema: function (v) {\n    formSchema = v;\n  }\n}, 8);\nvar KIND_CHOICES = void 0;\nmodule.importSync(\"../constants\", {\n  KIND_CHOICES: function (v) {\n    KIND_CHOICES = v;\n  }\n}, 9);\nvar addMessenger = new ValidatedMethod({\n  name: 'integrations.addMessenger',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var doc = _ref.doc;\n    check(doc, {\n      name: String,\n      brandId: String\n    });\n  },\n  run: function (_ref2) {\n    var doc = _ref2.doc;\n    return Integrations.insert(Object.assign(doc, {\n      kind: KIND_CHOICES.MESSENGER\n    }));\n  }\n});\nvar editMessenger = new ValidatedMethod({\n  name: 'integrations.editMessenger',\n  mixins: [ErxesMixin],\n  validate: function (_ref3) {\n    var _id = _ref3._id,\n        doc = _ref3.doc;\n    check(_id, String);\n    check(doc, {\n      name: String,\n      brandId: String\n    });\n  },\n  run: function (_ref4) {\n    var _id = _ref4._id,\n        doc = _ref4.doc;\n    return Integrations.update({\n      _id: _id\n    }, {\n      $set: doc\n    });\n  }\n});\n\nvar generateFormDoc = function (mainDoc, formDoc) {\n  return Object.assign(mainDoc, {\n    kind: KIND_CHOICES.FORM,\n    formData: formDoc\n  });\n}; // add form\n\n\nvar addForm = new ValidatedMethod({\n  name: 'integrations.addForm',\n  mixins: [ErxesMixin],\n  validate: function (_ref5) {\n    var mainDoc = _ref5.mainDoc,\n        formDoc = _ref5.formDoc;\n    check(mainDoc, {\n      name: String,\n      brandId: String,\n      formId: String\n    });\n    check(formDoc, formSchema);\n  },\n  run: function (_ref6) {\n    var mainDoc = _ref6.mainDoc,\n        formDoc = _ref6.formDoc;\n    return Integrations.insert(generateFormDoc(mainDoc, formDoc));\n  }\n});\nvar editForm = new ValidatedMethod({\n  name: 'integrations.editForm',\n  mixins: [ErxesMixin],\n  validate: function (_ref7) {\n    var _id = _ref7._id,\n        mainDoc = _ref7.mainDoc,\n        formDoc = _ref7.formDoc;\n    check(_id, String);\n    check(mainDoc, {\n      name: String,\n      brandId: String,\n      formId: String\n    });\n    check(formDoc, formSchema);\n  },\n  run: function (_ref8) {\n    var _id = _ref8._id,\n        mainDoc = _ref8.mainDoc,\n        formDoc = _ref8.formDoc;\n    return Integrations.update({\n      _id: _id\n    }, {\n      $set: generateFormDoc(mainDoc, formDoc)\n    });\n  }\n});\nvar remove = new ValidatedMethod({\n  name: 'integrations.remove',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    // check whether or not used in channels\n    if (Channels.find({\n      integrationIds: {\n        $in: [id]\n      }\n    }).count() > 0) {\n      throw new Meteor.Error('integrations.remove.usedInChannel', 'You cannot delete this integration. It belongs to other channel.');\n    } // conversations\n\n\n    var conversations = Conversations.find({\n      integrationId: id\n    }).fetch();\n    var conversationIds = conversations.map(function (c) {\n      return c._id;\n    }); // remove messages\n\n    Messages.remove({\n      conversationId: {\n        $in: conversationIds\n      }\n    }); // remove conversations\n\n    Conversations.remove({\n      integrationId: id\n    }); // remove customers\n\n    Customers.remove({\n      integrationId: id\n    });\n    return Integrations.remove(id);\n  }\n});\nvar saveMessengerApperance = new ValidatedMethod({\n  name: 'integrations.saveMessengerApperance',\n  mixins: [ErxesMixin],\n  validate: function (_ref9) {\n    var _id = _ref9._id,\n        doc = _ref9.doc;\n    check(_id, String);\n    check(doc, {\n      color: String,\n      wallpaper: Match.Optional(String),\n      logo: Match.Optional(String)\n    });\n  },\n  run: function (_ref10) {\n    var _id = _ref10._id,\n        doc = _ref10.doc;\n    return Integrations.update({\n      _id: _id\n    }, {\n      $set: {\n        uiOptions: doc\n      }\n    });\n  }\n});\nvar saveMessengerConfigs = new ValidatedMethod({\n  name: 'integrations.saveMessengerConfigs',\n  mixins: [ErxesMixin],\n  validate: function (_ref11) {\n    var _id = _ref11._id,\n        doc = _ref11.doc;\n    check(_id, String);\n    check(doc, messengerSchema);\n  },\n  run: function (_ref12) {\n    var _id = _ref12._id,\n        doc = _ref12.doc;\n    return Integrations.update({\n      _id: _id\n    }, {\n      $set: {\n        messengerData: doc\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/imports/api/integrations/server/methods.js"],"names":["module","export","addMessenger","editMessenger","addForm","editForm","remove","saveMessengerApperance","saveMessengerConfigs","Meteor","importSync","v","Match","check","ValidatedMethod","ErxesMixin","Conversations","Messages","Customers","Channels","Integrations","messengerSchema","formSchema","KIND_CHOICES","name","mixins","validate","doc","String","brandId","run","insert","Object","assign","kind","MESSENGER","_id","update","$set","generateFormDoc","mainDoc","formDoc","FORM","formData","formId","id","find","integrationIds","$in","count","Error","conversations","integrationId","fetch","conversationIds","map","c","conversationId","color","wallpaper","Optional","logo","uiOptions","messengerData"],"mappings":"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","file":"/imports/api/integrations/server/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Conversations } from '/imports/api/conversations/conversations';\nimport { Messages } from '/imports/api/conversations/messages';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Channels } from '/imports/api/channels/channels';\nimport { Integrations, messengerSchema, formSchema } from '../integrations';\nimport { KIND_CHOICES } from '../constants';\n\n// add messenger\nexport const addMessenger = new ValidatedMethod({\n  name: 'integrations.addMessenger',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, { name: String, brandId: String });\n  },\n\n  run({ doc }) {\n    return Integrations.insert(Object.assign(doc, { kind: KIND_CHOICES.MESSENGER }));\n  },\n});\n\n// edit messenger\nexport const editMessenger = new ValidatedMethod({\n  name: 'integrations.editMessenger',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, { name: String, brandId: String });\n  },\n\n  run({ _id, doc }) {\n    return Integrations.update({ _id }, { $set: doc });\n  },\n});\n\nconst generateFormDoc = (mainDoc, formDoc) =>\n  Object.assign(mainDoc, {\n    kind: KIND_CHOICES.FORM,\n    formData: formDoc,\n  });\n\n// add form\nexport const addForm = new ValidatedMethod({\n  name: 'integrations.addForm',\n  mixins: [ErxesMixin],\n\n  validate({ mainDoc, formDoc }) {\n    check(mainDoc, { name: String, brandId: String, formId: String });\n    check(formDoc, formSchema);\n  },\n\n  run({ mainDoc, formDoc }) {\n    return Integrations.insert(generateFormDoc(mainDoc, formDoc));\n  },\n});\n\n// edit form\nexport const editForm = new ValidatedMethod({\n  name: 'integrations.editForm',\n  mixins: [ErxesMixin],\n\n  validate({ _id, mainDoc, formDoc }) {\n    check(_id, String);\n    check(mainDoc, { name: String, brandId: String, formId: String });\n    check(formDoc, formSchema);\n  },\n\n  run({ _id, mainDoc, formDoc }) {\n    return Integrations.update({ _id }, { $set: generateFormDoc(mainDoc, formDoc) });\n  },\n});\n\n// integration remove\nexport const remove = new ValidatedMethod({\n  name: 'integrations.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    // check whether or not used in channels\n    if (Channels.find({ integrationIds: { $in: [id] } }).count() > 0) {\n      throw new Meteor.Error(\n        'integrations.remove.usedInChannel',\n        'You cannot delete this integration. It belongs to other channel.',\n      );\n    }\n\n    // conversations\n    const conversations = Conversations.find({ integrationId: id }).fetch();\n    const conversationIds = conversations.map(c => c._id);\n\n    // remove messages\n    Messages.remove({ conversationId: { $in: conversationIds } });\n\n    // remove conversations\n    Conversations.remove({ integrationId: id });\n\n    // remove customers\n    Customers.remove({ integrationId: id });\n\n    return Integrations.remove(id);\n  },\n});\n\nexport const saveMessengerApperance = new ValidatedMethod({\n  name: 'integrations.saveMessengerApperance',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, {\n      color: String,\n      wallpaper: Match.Optional(String),\n      logo: Match.Optional(String),\n    });\n  },\n\n  run({ _id, doc }) {\n    return Integrations.update({ _id }, { $set: { uiOptions: doc } });\n  },\n});\n\nexport const saveMessengerConfigs = new ValidatedMethod({\n  name: 'integrations.saveMessengerConfigs',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, messengerSchema);\n  },\n\n  run({ _id, doc }) {\n    return Integrations.update({ _id }, { $set: { messengerData: doc } });\n  },\n});\n"]},"hash":"4866d456e4332fa413ef320556960ad89106c877"}
