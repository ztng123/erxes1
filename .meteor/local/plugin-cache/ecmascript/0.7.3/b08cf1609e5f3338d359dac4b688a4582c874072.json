{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"/imports/api/integrations/integrations","imported":["Integrations"],"specifiers":[{"kind":"named","imported":"Integrations","local":"Integrations"}]},{"source":"/imports/api/tags/utils","imported":["TagsCollection","tagsHelper","tagSchemaOptions"],"specifiers":[{"kind":"named","imported":"TagsCollection","local":"TagsCollection"},{"kind":"named","imported":"tagsHelper","local":"tagsHelper"},{"kind":"named","imported":"tagSchemaOptions","local":"tagSchemaOptions"}]},{"source":"./constants","imported":["CONVERSATION_STATUSES","FACEBOOK_DATA_KINDS"],"specifiers":[{"kind":"named","imported":"CONVERSATION_STATUSES","local":"CONVERSATION_STATUSES"},{"kind":"named","imported":"FACEBOOK_DATA_KINDS","local":"FACEBOOK_DATA_KINDS"}]}],"exports":{"exported":["Conversations","addParticipator","ConversationIdsSchema","AssignSchema","ChangeStatusSchema"],"specifiers":[{"kind":"local","local":"Conversations","exported":"Conversations"},{"kind":"local","local":"addParticipator","exported":"addParticipator"},{"kind":"local","local":"ConversationIdsSchema","exported":"ConversationIdsSchema"},{"kind":"local","local":"AssignSchema","exported":"AssignSchema"},{"kind":"local","local":"ChangeStatusSchema","exported":"ChangeStatusSchema"}]}}},"options":{"filename":"/imports/api/conversations/conversations.js","filenameRelative":"/imports/api/conversations/conversations.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/conversations/conversations.js.map","sourceFileName":"/imports/api/conversations/conversations.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"conversations"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Conversations: function () {\n    return Conversations;\n  },\n  addParticipator: function () {\n    return addParticipator;\n  },\n  ConversationIdsSchema: function () {\n    return ConversationIdsSchema;\n  },\n  AssignSchema: function () {\n    return AssignSchema;\n  },\n  ChangeStatusSchema: function () {\n    return ChangeStatusSchema;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 3);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 4);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 5);\nvar Integrations = void 0;\nmodule.importSync(\"/imports/api/integrations/integrations\", {\n  Integrations: function (v) {\n    Integrations = v;\n  }\n}, 6);\nvar TagsCollection = void 0,\n    tagsHelper = void 0,\n    tagSchemaOptions = void 0;\nmodule.importSync(\"/imports/api/tags/utils\", {\n  TagsCollection: function (v) {\n    TagsCollection = v;\n  },\n  tagsHelper: function (v) {\n    tagsHelper = v;\n  },\n  tagSchemaOptions: function (v) {\n    tagSchemaOptions = v;\n  }\n}, 7);\nvar CONVERSATION_STATUSES = void 0,\n    FACEBOOK_DATA_KINDS = void 0;\nmodule.importSync(\"./constants\", {\n  CONVERSATION_STATUSES: function (v) {\n    CONVERSATION_STATUSES = v;\n  },\n  FACEBOOK_DATA_KINDS: function (v) {\n    FACEBOOK_DATA_KINDS = v;\n  }\n}, 8);\n\nvar ConversationsCollection = function (_TagsCollection) {\n  (0, _inherits3.default)(ConversationsCollection, _TagsCollection);\n\n  function ConversationsCollection() {\n    (0, _classCallCheck3.default)(this, ConversationsCollection);\n    return (0, _possibleConstructorReturn3.default)(this, _TagsCollection.apply(this, arguments));\n  }\n\n  ConversationsCollection.prototype.insert = function () {\n    function insert(doc, callback) {\n      var conversation = Object.assign({\n        createdAt: new Date(),\n        number: this.find().count() + 1,\n        messageCount: 0\n      }, doc);\n      return _TagsCollection.prototype.insert.call(this, conversation, callback);\n    }\n\n    return insert;\n  }();\n\n  return ConversationsCollection;\n}(TagsCollection);\n\nvar Conversations = new ConversationsCollection('conversations');\nConversations.TAG_TYPE = 'conversation';\nConversations.helpers((0, _extends3.default)({\n  customer: function () {\n    return Customers.findOne(this.customerId) || {};\n  },\n  user: function () {\n    return Meteor.users.findOne(this.userId);\n  },\n  integration: function () {\n    return Integrations.findOne(this.integrationId) || {};\n  },\n  assignedUser: function () {\n    return Meteor.users.findOne(this.assignedUserId);\n  },\n  participatedUsers: function () {\n    var query = {\n      _id: {\n        $in: this.participatedUserIds || []\n      }\n    };\n    return Meteor.users.find(query).fetch();\n  },\n  participatorCount: function () {\n    return this.participatedUserIds && this.participatedUserIds.length || 0;\n  }\n}, tagsHelper));\n\nvar addParticipator = function (_ref) {\n  var conversationId = _ref.conversationId,\n      userId = _ref.userId;\n\n  if (conversationId && userId) {\n    Conversations.update(conversationId, {\n      $addToSet: {\n        participatedUserIds: userId\n      }\n    });\n  }\n};\n\nConversations.deny({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n}); // twitter schema ====================\n\nvar twitterDirectMessageSchema = new SimpleSchema({\n  senderId: {\n    type: Number\n  },\n  senderIdStr: {\n    type: String\n  },\n  recipientId: {\n    type: Number\n  },\n  recipientIdStr: {\n    type: String\n  }\n});\nvar twitterSchema = new SimpleSchema({\n  id: {\n    type: Number,\n    optional: true\n  },\n  idStr: {\n    type: String,\n    optional: true\n  },\n  screenName: {\n    type: String,\n    optional: true\n  },\n  isDirectMessage: {\n    type: Boolean\n  },\n  directMessage: {\n    type: twitterDirectMessageSchema,\n    optional: true\n  }\n}); // facebook schema\n\nvar facebookSchema = new SimpleSchema({\n  kind: {\n    type: String,\n    allowedValues: FACEBOOK_DATA_KINDS.ALL_LIST\n  },\n  senderName: {\n    type: String,\n    optional: true\n  },\n  senderId: {\n    type: String\n  },\n  recipientId: {\n    type: String,\n    optional: true\n  },\n  // when wall post\n  postId: {\n    type: String,\n    optional: true\n  },\n  pageId: {\n    type: String\n  }\n});\nConversations.schema = new SimpleSchema((0, _extends3.default)({\n  content: {\n    type: String\n  },\n  integrationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  customerId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  userId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  twitterData: {\n    type: twitterSchema,\n    optional: true\n  },\n  facebookData: {\n    type: facebookSchema,\n    optional: true\n  },\n  assignedUserId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  status: {\n    type: String,\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST\n  },\n  participatedUserIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  // users's informed history\n  readUserIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  createdAt: {\n    type: Date\n  },\n  // number of total messages\n  messageCount: {\n    type: Number\n  },\n  // number of total conversations\n  number: {\n    type: Number\n  }\n}, tagSchemaOptions()));\nConversations.attachSchema(Conversations.schema); // Helper schemas. Using in method checks\n\nvar ConversationIdsSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\nvar AssignSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id\n  },\n  assignedUserId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\nvar ChangeStatusSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id\n  },\n  status: {\n    type: String,\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST\n  }\n});\nConversations.publicFields = {\n  number: 1,\n  assignedUserId: 1,\n  content: 1,\n  customerId: 1,\n  userId: 1,\n  integrationId: 1,\n  status: 1,\n  createdAt: 1,\n  messageCount: 1,\n  participatedUserIds: 1,\n  facebookData: 1,\n  readUserIds: 1,\n  tagIds: 1\n};\nFactory.define('conversation', Conversations, {\n  content: function () {\n    return faker.lorem.sentence();\n  },\n  customerId: function () {\n    return Random.id();\n  },\n  integrationId: function () {\n    return Factory.create('integration')._id;\n  },\n  status: function () {\n    return CONVERSATION_STATUSES.NEW;\n  }\n});","map":{"version":3,"sources":["/imports/api/conversations/conversations.js"],"names":["module","export","Conversations","addParticipator","ConversationIdsSchema","AssignSchema","ChangeStatusSchema","faker","importSync","v","Meteor","Random","Factory","SimpleSchema","Customers","Integrations","TagsCollection","tagsHelper","tagSchemaOptions","CONVERSATION_STATUSES","FACEBOOK_DATA_KINDS","ConversationsCollection","insert","doc","callback","conversation","Object","assign","createdAt","Date","number","find","count","messageCount","TAG_TYPE","helpers","customer","findOne","customerId","user","users","userId","integration","integrationId","assignedUser","assignedUserId","participatedUsers","query","_id","$in","participatedUserIds","fetch","participatorCount","length","conversationId","update","$addToSet","deny","remove","twitterDirectMessageSchema","senderId","type","Number","senderIdStr","String","recipientId","recipientIdStr","twitterSchema","id","optional","idStr","screenName","isDirectMessage","Boolean","directMessage","facebookSchema","kind","allowedValues","ALL_LIST","senderName","postId","pageId","schema","content","regEx","RegEx","Id","twitterData","facebookData","status","readUserIds","attachSchema","conversationIds","publicFields","tagIds","define","lorem","sentence","create","NEW"],"mappings":"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","file":"/imports/api/conversations/conversations.js.map","sourcesContent":["import faker from 'faker';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { TagsCollection, tagsHelper, tagSchemaOptions } from '/imports/api/tags/utils';\n\nimport { CONVERSATION_STATUSES, FACEBOOK_DATA_KINDS } from './constants';\n\nclass ConversationsCollection extends TagsCollection {\n  insert(doc, callback) {\n    const conversation = Object.assign(\n      {\n        createdAt: new Date(),\n        number: this.find().count() + 1,\n        messageCount: 0,\n      },\n      doc,\n    );\n\n    return super.insert(conversation, callback);\n  }\n}\n\nexport const Conversations = new ConversationsCollection('conversations');\n\nConversations.TAG_TYPE = 'conversation';\n\nConversations.helpers({\n  customer() {\n    return Customers.findOne(this.customerId) || {};\n  },\n  user() {\n    return Meteor.users.findOne(this.userId);\n  },\n  integration() {\n    return Integrations.findOne(this.integrationId) || {};\n  },\n  assignedUser() {\n    return Meteor.users.findOne(this.assignedUserId);\n  },\n  participatedUsers() {\n    const query = { _id: { $in: this.participatedUserIds || [] } };\n    return Meteor.users.find(query).fetch();\n  },\n  participatorCount() {\n    return (this.participatedUserIds && this.participatedUserIds.length) || 0;\n  },\n  ...tagsHelper,\n});\n\nexport const addParticipator = ({ conversationId, userId }) => {\n  if (conversationId && userId) {\n    Conversations.update(conversationId, {\n      $addToSet: { participatedUserIds: userId },\n    });\n  }\n};\n\nConversations.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\n// twitter schema ====================\nconst twitterDirectMessageSchema = new SimpleSchema({\n  senderId: {\n    type: Number,\n  },\n  senderIdStr: {\n    type: String,\n  },\n  recipientId: {\n    type: Number,\n  },\n  recipientIdStr: {\n    type: String,\n  },\n});\n\nconst twitterSchema = new SimpleSchema({\n  id: {\n    type: Number,\n    optional: true,\n  },\n  idStr: {\n    type: String,\n    optional: true,\n  },\n  screenName: {\n    type: String,\n    optional: true,\n  },\n  isDirectMessage: {\n    type: Boolean,\n  },\n  directMessage: {\n    type: twitterDirectMessageSchema,\n    optional: true,\n  },\n});\n\n// facebook schema\nconst facebookSchema = new SimpleSchema({\n  kind: {\n    type: String,\n    allowedValues: FACEBOOK_DATA_KINDS.ALL_LIST,\n  },\n  senderName: {\n    type: String,\n    optional: true,\n  },\n  senderId: {\n    type: String,\n  },\n  recipientId: {\n    type: String,\n    optional: true,\n  },\n\n  // when wall post\n  postId: {\n    type: String,\n    optional: true,\n  },\n\n  pageId: {\n    type: String,\n  },\n});\n\nConversations.schema = new SimpleSchema({\n  content: {\n    type: String,\n  },\n  integrationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  customerId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n  userId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  twitterData: {\n    type: twitterSchema,\n    optional: true,\n  },\n  facebookData: {\n    type: facebookSchema,\n    optional: true,\n  },\n  assignedUserId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n  status: {\n    type: String,\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST,\n  },\n  participatedUserIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n\n  // users's informed history\n  readUserIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n\n  createdAt: {\n    type: Date,\n  },\n\n  // number of total messages\n  messageCount: {\n    type: Number,\n  },\n\n  // number of total conversations\n  number: {\n    type: Number,\n  },\n\n  ...tagSchemaOptions(),\n});\n\nConversations.attachSchema(Conversations.schema);\n\n// Helper schemas. Using in method checks\nexport const ConversationIdsSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nexport const AssignSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  assignedUserId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nexport const ChangeStatusSchema = new SimpleSchema({\n  conversationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  status: {\n    type: String,\n    allowedValues: CONVERSATION_STATUSES.ALL_LIST,\n  },\n});\n\nConversations.publicFields = {\n  number: 1,\n  assignedUserId: 1,\n  content: 1,\n  customerId: 1,\n  userId: 1,\n  integrationId: 1,\n  status: 1,\n  createdAt: 1,\n  messageCount: 1,\n  participatedUserIds: 1,\n  facebookData: 1,\n  readUserIds: 1,\n  tagIds: 1,\n};\n\nFactory.define('conversation', Conversations, {\n  content: () => faker.lorem.sentence(),\n  customerId: () => Random.id(),\n  integrationId: () => Factory.create('integration')._id,\n  status: () => CONVERSATION_STATUSES.NEW,\n});\n"]},"hash":"b08cf1609e5f3338d359dac4b688a4582c874072"}
