{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"react-bootstrap","imported":["Button","Checkbox","ControlLabel"],"specifiers":[{"kind":"named","imported":"Button","local":"Button"},{"kind":"named","imported":"Checkbox","local":"Checkbox"},{"kind":"named","imported":"ControlLabel","local":"ControlLabel"}]},{"source":"meteor/erxes-notifier","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]},{"source":"/imports/api/client/uploadHandler","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"uploadHandler"}]},{"source":"./Editor","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Editor"}]},{"source":"../../containers","imported":["ResponseTemplate"],"specifiers":[{"kind":"named","imported":"ResponseTemplate","local":"ResponseTemplate"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/inbox/components/details/RespondBox.js","filenameRelative":"/imports/react-ui/inbox/components/details/RespondBox.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/inbox/components/details/RespondBox.js.map","sourceFileName":"/imports/react-ui/inbox/components/details/RespondBox.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"RespondBox"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    PropTypes = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar Button = void 0,\n    Checkbox = void 0,\n    ControlLabel = void 0;\nmodule.importSync(\"react-bootstrap\", {\n  Button: function (v) {\n    Button = v;\n  },\n  Checkbox: function (v) {\n    Checkbox = v;\n  },\n  ControlLabel: function (v) {\n    ControlLabel = v;\n  }\n}, 1);\nvar Alert = void 0;\nmodule.importSync(\"meteor/erxes-notifier\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 2);\nvar uploadHandler = void 0;\nmodule.importSync(\"/imports/api/client/uploadHandler\", {\n  \"default\": function (v) {\n    uploadHandler = v;\n  }\n}, 3);\nvar Editor = void 0;\nmodule.importSync(\"./Editor\", {\n  \"default\": function (v) {\n    Editor = v;\n  }\n}, 4);\nvar ResponseTemplate = void 0;\nmodule.importSync(\"../../containers\", {\n  ResponseTemplate: function (v) {\n    ResponseTemplate = v;\n  }\n}, 5);\nvar propTypes = {\n  conversation: PropTypes.object.isRequired,\n  sendMessage: PropTypes.func.isRequired,\n  setAttachmentPreview: PropTypes.func.isRequired,\n  teamMembers: PropTypes.object\n};\n\nvar RespondBox = function (_Component) {\n  (0, _inherits3.default)(RespondBox, _Component);\n\n  function RespondBox(props) {\n    (0, _classCallCheck3.default)(this, RespondBox);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.state = {\n      editorKey: 'editor',\n      isInternal: false,\n      attachments: [],\n      responseTemplate: '',\n      content: '',\n      mentionedUserIds: []\n    }; // on editor content change\n\n    _this.onEditorContentChange = _this.onEditorContentChange.bind(_this); // on new members mention\n\n    _this.onAddMention = _this.onAddMention.bind(_this); // on shift + enter press in editor\n\n    _this.onShifEnter = _this.onShifEnter.bind(_this);\n    _this.onSubmit = _this.onSubmit.bind(_this);\n    _this.toggleForm = _this.toggleForm.bind(_this);\n    _this.handleFileInput = _this.handleFileInput.bind(_this);\n    _this.onSelectTemplate = _this.onSelectTemplate.bind(_this);\n    return _this;\n  } // save editor current content to state\n\n\n  RespondBox.prototype.onEditorContentChange = function () {\n    function onEditorContentChange(content) {\n      this.setState({\n        content: content\n      });\n    }\n\n    return onEditorContentChange;\n  }(); // save mentioned user to state\n\n\n  RespondBox.prototype.onAddMention = function () {\n    function onAddMention(mentionedUserIds) {\n      this.setState({\n        mentionedUserIds: mentionedUserIds\n      });\n    }\n\n    return onAddMention;\n  }();\n\n  RespondBox.prototype.onSubmit = function () {\n    function onSubmit(e) {\n      e.preventDefault();\n      this.addMessage(); // redrawing editor after sned button, so editor content will be reseted\n\n      this.setState({\n        editorKey: this.state.editorKey + \"Key\"\n      });\n    }\n\n    return onSubmit;\n  }();\n\n  RespondBox.prototype.onSelectTemplate = function () {\n    function onSelectTemplate(responseTemplate) {\n      this.setState({\n        responseTemplate: responseTemplate.content,\n        // set attachment from response template files\n        attachments: responseTemplate.files\n      });\n    }\n\n    return onSelectTemplate;\n  }(); // on shift + enter press in editor\n\n\n  RespondBox.prototype.onShifEnter = function () {\n    function onShifEnter() {\n      this.addMessage();\n    }\n\n    return onShifEnter;\n  }();\n\n  RespondBox.prototype.handleFileInput = function () {\n    function handleFileInput(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var file = e.target.files[0];\n      uploadHandler({\n        file: file,\n        beforeUpload: function () {},\n        afterUpload: function (_ref) {\n          var response = _ref.response,\n              fileInfo = _ref.fileInfo;\n\n          // set attachments\n          _this2.state.attachments.push(Object.assign({\n            url: response.url\n          }, fileInfo)); // remove preview\n\n\n          _this2.props.setAttachmentPreview(null);\n        },\n        afterRead: function (_ref2) {\n          var result = _ref2.result,\n              fileInfo = _ref2.fileInfo;\n\n          _this2.props.setAttachmentPreview(Object.assign({\n            data: result\n          }, fileInfo));\n        }\n      });\n    }\n\n    return handleFileInput;\n  }();\n\n  RespondBox.prototype.addMessage = function () {\n    function addMessage() {\n      var _this3 = this;\n\n      var _props = this.props,\n          conversation = _props.conversation,\n          sendMessage = _props.sendMessage;\n      var _state = this.state,\n          isInternal = _state.isInternal,\n          attachments = _state.attachments,\n          content = _state.content,\n          mentionedUserIds = _state.mentionedUserIds;\n      var message = {\n        conversationId: conversation._id,\n        content: content || ' ',\n        internal: isInternal,\n        attachments: attachments,\n        mentionedUserIds: mentionedUserIds\n      };\n      sendMessage(message, function (error) {\n        if (error) {\n          return Alert.error(error.reason);\n        } // clear attachments\n\n\n        return _this3.setState({\n          attachments: []\n        });\n      });\n      this.setState({\n        // clear mentioned user ids\n        mentionedUserIds: []\n      });\n    }\n\n    return addMessage;\n  }();\n\n  RespondBox.prototype.toggleForm = function () {\n    function toggleForm() {\n      this.setState({\n        isInternal: !this.state.isInternal\n      });\n    }\n\n    return toggleForm;\n  }();\n\n  RespondBox.prototype.render = function () {\n    function render() {\n      var _state2 = this.state,\n          isInternal = _state2.isInternal,\n          responseTemplate = _state2.responseTemplate;\n      var integration = this.props.conversation.integration || {};\n      var Buttons = React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          Button,\n          {\n            type: \"submit\",\n            bsStyle: \"link\"\n          },\n          React.createElement(\"i\", {\n            className: \"ion-reply\"\n          }),\n          \" Send\"\n        ),\n        React.createElement(\n          ControlLabel,\n          {\n            className: \"btn btn-link btn-attach\"\n          },\n          React.createElement(\"i\", {\n            className: \"ion-android-attach\"\n          }),\n          \" Attach\",\n          React.createElement(\"input\", {\n            type: \"file\",\n            onChange: this.handleFileInput\n          })\n        ),\n        React.createElement(ResponseTemplate, {\n          brandId: integration.brandId,\n          attachments: this.state.attachments,\n          content: this.state.content,\n          onSelect: this.onSelectTemplate\n        })\n      ); // after file upload show indicator\n\n      var attachmentsIndicator = null;\n      var attachments = this.state.attachments || [];\n      var attachmentsCount = attachments.length;\n\n      if (attachmentsCount > 0) {\n        attachmentsIndicator = React.createElement(\n          \"div\",\n          {\n            className: \"attachment-indicator\"\n          },\n          attachments.map(function (attachment) {\n            return React.createElement(\n              \"div\",\n              {\n                className: \"attachment\",\n                key: attachment.name\n              },\n              React.createElement(\n                \"div\",\n                {\n                  className: \"preview\"\n                },\n                React.createElement(\"div\", {\n                  className: \"preview-img\",\n                  style: {\n                    backgroundImage: \"url('\" + attachment.url + \"')\"\n                  }\n                })\n              ),\n              React.createElement(\n                \"div\",\n                {\n                  className: \"file-name\"\n                },\n                attachment.name\n              ),\n              React.createElement(\n                \"div\",\n                {\n                  className: \"file-size\"\n                },\n                \"(\",\n                Math.round(attachment.size / 1000),\n                \"kB)\"\n              )\n            );\n          })\n        );\n      }\n\n      var formId = 'reply-form';\n      var placeholder = 'Type your message here...';\n\n      if (isInternal) {\n        formId = 'internal-note-form';\n        placeholder = 'Type your note here...';\n      }\n\n      return React.createElement(\n        \"div\",\n        {\n          className: \"respond-box\"\n        },\n        React.createElement(\n          \"form\",\n          {\n            id: formId,\n            onSubmit: this.onSubmit\n          },\n          React.createElement(Editor, {\n            key: this.state.editorKey,\n            onChange: this.onEditorContentChange,\n            onAddMention: this.onAddMention,\n            onShifEnter: this.onShifEnter,\n            placeholder: placeholder,\n            mentions: this.props.teamMembers,\n            showMentions: isInternal,\n            responseTemplate: responseTemplate\n          }),\n          attachmentsIndicator,\n          Buttons\n        ),\n        React.createElement(\n          Checkbox,\n          {\n            onChange: this.toggleForm\n          },\n          \"Internal note\"\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return RespondBox;\n}(Component);\n\nRespondBox.propTypes = propTypes;\nmodule.export(\"default\", exports.default = RespondBox);","map":{"version":3,"sources":["/imports/react-ui/inbox/components/details/RespondBox.js"],"names":["React","PropTypes","Component","module","importSync","v","Button","Checkbox","ControlLabel","Alert","uploadHandler","Editor","ResponseTemplate","propTypes","conversation","object","isRequired","sendMessage","func","setAttachmentPreview","teamMembers","RespondBox","props","state","editorKey","isInternal","attachments","responseTemplate","content","mentionedUserIds","onEditorContentChange","bind","onAddMention","onShifEnter","onSubmit","toggleForm","handleFileInput","onSelectTemplate","setState","e","preventDefault","addMessage","files","file","target","beforeUpload","afterUpload","response","fileInfo","push","Object","assign","url","afterRead","result","data","message","conversationId","_id","internal","error","reason","render","integration","Buttons","brandId","attachmentsIndicator","attachmentsCount","length","map","attachment","name","backgroundImage","Math","round","size","formId","placeholder","export","exports","default"],"mappings":"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","file":"/imports/react-ui/inbox/components/details/RespondBox.js.map","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport { Button, Checkbox, ControlLabel } from 'react-bootstrap';\nimport Alert from 'meteor/erxes-notifier';\n\nimport uploadHandler from '/imports/api/client/uploadHandler';\nimport Editor from './Editor';\nimport { ResponseTemplate } from '../../containers';\n\nconst propTypes = {\n  conversation: PropTypes.object.isRequired,\n  sendMessage: PropTypes.func.isRequired,\n  setAttachmentPreview: PropTypes.func.isRequired,\n  teamMembers: PropTypes.object,\n};\n\nclass RespondBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorKey: 'editor',\n      isInternal: false,\n      attachments: [],\n      responseTemplate: '',\n      content: '',\n      mentionedUserIds: [],\n    };\n\n    // on editor content change\n    this.onEditorContentChange = this.onEditorContentChange.bind(this);\n\n    // on new members mention\n    this.onAddMention = this.onAddMention.bind(this);\n\n    // on shift + enter press in editor\n    this.onShifEnter = this.onShifEnter.bind(this);\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleFileInput = this.handleFileInput.bind(this);\n    this.onSelectTemplate = this.onSelectTemplate.bind(this);\n  }\n\n  // save editor current content to state\n  onEditorContentChange(content) {\n    this.setState({ content });\n  }\n\n  // save mentioned user to state\n  onAddMention(mentionedUserIds) {\n    this.setState({ mentionedUserIds });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    this.addMessage();\n\n    // redrawing editor after sned button, so editor content will be reseted\n    this.setState({ editorKey: `${this.state.editorKey}Key` });\n  }\n\n  onSelectTemplate(responseTemplate) {\n    this.setState({\n      responseTemplate: responseTemplate.content,\n\n      // set attachment from response template files\n      attachments: responseTemplate.files,\n    });\n  }\n\n  // on shift + enter press in editor\n  onShifEnter() {\n    this.addMessage();\n  }\n\n  handleFileInput(e) {\n    e.preventDefault();\n\n    const file = e.target.files[0];\n\n    uploadHandler({\n      file,\n\n      beforeUpload: () => {},\n\n      afterUpload: ({ response, fileInfo }) => {\n        // set attachments\n        this.state.attachments.push(Object.assign({ url: response.url }, fileInfo));\n\n        // remove preview\n        this.props.setAttachmentPreview(null);\n      },\n\n      afterRead: ({ result, fileInfo }) => {\n        this.props.setAttachmentPreview(Object.assign({ data: result }, fileInfo));\n      },\n    });\n  }\n\n  addMessage() {\n    const { conversation, sendMessage } = this.props;\n    const { isInternal, attachments, content, mentionedUserIds } = this.state;\n\n    const message = {\n      conversationId: conversation._id,\n      content: content || ' ',\n      internal: isInternal,\n      attachments,\n      mentionedUserIds,\n    };\n\n    sendMessage(message, error => {\n      if (error) {\n        return Alert.error(error.reason);\n      }\n\n      // clear attachments\n      return this.setState({ attachments: [] });\n    });\n\n    this.setState({\n      // clear mentioned user ids\n      mentionedUserIds: [],\n    });\n  }\n\n  toggleForm() {\n    this.setState({\n      isInternal: !this.state.isInternal,\n    });\n  }\n\n  render() {\n    const { isInternal, responseTemplate } = this.state;\n    const integration = this.props.conversation.integration || {};\n\n    const Buttons = (\n      <div>\n        <Button type=\"submit\" bsStyle=\"link\">\n          <i className=\"ion-reply\" /> Send\n        </Button>\n\n        <ControlLabel className=\"btn btn-link btn-attach\">\n          <i className=\"ion-android-attach\" /> Attach\n          <input type=\"file\" onChange={this.handleFileInput} />\n        </ControlLabel>\n\n        <ResponseTemplate\n          brandId={integration.brandId}\n          attachments={this.state.attachments}\n          content={this.state.content}\n          onSelect={this.onSelectTemplate}\n        />\n      </div>\n    );\n\n    // after file upload show indicator\n    let attachmentsIndicator = null;\n\n    const attachments = this.state.attachments || [];\n    const attachmentsCount = attachments.length;\n\n    if (attachmentsCount > 0) {\n      attachmentsIndicator = (\n        <div className=\"attachment-indicator\">\n          {attachments.map(attachment => (\n            <div className=\"attachment\" key={attachment.name}>\n              <div className=\"preview\">\n                <div\n                  className=\"preview-img\"\n                  style={{ backgroundImage: `url('${attachment.url}')` }}\n                />\n              </div>\n              <div className=\"file-name\">\n                {attachment.name}\n              </div>\n              <div className=\"file-size\">\n                ({Math.round(attachment.size / 1000)}kB)\n              </div>\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    let formId = 'reply-form';\n    let placeholder = 'Type your message here...';\n\n    if (isInternal) {\n      formId = 'internal-note-form';\n      placeholder = 'Type your note here...';\n    }\n\n    return (\n      <div className=\"respond-box\">\n        <form id={formId} onSubmit={this.onSubmit}>\n          <Editor\n            key={this.state.editorKey}\n            onChange={this.onEditorContentChange}\n            onAddMention={this.onAddMention}\n            onShifEnter={this.onShifEnter}\n            placeholder={placeholder}\n            mentions={this.props.teamMembers}\n            showMentions={isInternal}\n            responseTemplate={responseTemplate}\n          />\n\n          {attachmentsIndicator}\n          {Buttons}\n        </form>\n\n        <Checkbox onChange={this.toggleForm}>Internal note</Checkbox>\n      </div>\n    );\n  }\n}\n\nRespondBox.propTypes = propTypes;\n\nexport default RespondBox;\n"]},"hash":"a3bf897fe39e1c0a2fc08c79d98ab6b359974416"}
