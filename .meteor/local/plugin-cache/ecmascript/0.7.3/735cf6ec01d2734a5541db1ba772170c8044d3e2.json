{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["checkAvailability"],"specifiers":[{"kind":"local","local":"checkAvailability","exported":"checkAvailability"}]}}},"options":{"filename":"/imports/api/integrations/utils.js","filenameRelative":"/imports/api/integrations/utils.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/integrations/utils.js.map","sourceFileName":"/imports/api/integrations/utils.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"utils"},"ignored":false,"code":"module.export({\n  checkAvailability: function () {\n    return checkAvailability;\n  }\n});\n\nvar getDayAsString = function (dayNumber) {\n  var day = void 0;\n\n  switch (dayNumber) {\n    case 1:\n      day = 'monday';\n      break;\n\n    case 2:\n      day = 'tuesday';\n      break;\n\n    case 3:\n      day = 'wednesday';\n      break;\n\n    case 4:\n      day = 'thursday';\n      break;\n\n    case 5:\n      day = 'friday';\n      break;\n\n    case 6:\n      day = 'saturday';\n      break;\n\n    case 7:\n      day = 'sunday';\n      break;\n  }\n\n  return day;\n};\n\nvar isDateInRange = function (date, from, to) {\n  var fromDate = new Date(Date.parse(date.toLocaleDateString() + \" \" + from));\n  var endDate = new Date(Date.parse(date.toLocaleDateString() + \" \" + to)); // check interval\n\n  if (fromDate <= date && endDate >= date) {\n    return true;\n  }\n\n  return false;\n};\n\nvar isWeekday = function (day) {\n  return ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'].includes(day);\n};\n\nvar isWeekend = function (day) {\n  return ['saturday', 'sunday'].includes(day);\n};\n\nvar checkAvailability = function (integration, date) {\n  // we can determine state from isOnline field value when method is manual\n  if (integration.availabilityMethod === 'manual') {\n    return integration.isOnline;\n  }\n\n  var day = getDayAsString(date.getDay()); // auto ====================\n  // check by everyday config\n\n  var everydayConf = integration.onlineHours.find(function (c) {\n    return c.day === 'everyday';\n  });\n\n  if (everydayConf) {\n    return isDateInRange(date, everydayConf.from, everydayConf.to);\n  } // check by weekdays config\n\n\n  var weekdaysConf = integration.onlineHours.find(function (c) {\n    return c.day === 'weekdays';\n  });\n\n  if (weekdaysConf && isWeekday(day)) {\n    return isDateInRange(date, weekdaysConf.from, weekdaysConf.to);\n  } // check by weekends config\n\n\n  var weekendsConf = integration.onlineHours.find(function (c) {\n    return c.day === 'weekends';\n  });\n\n  if (weekendsConf && isWeekend(day)) {\n    return isDateInRange(date, weekendsConf.from, weekendsConf.to);\n  } // check by regular day config\n\n\n  var dayConf = integration.onlineHours.find(function (c) {\n    return c.day === day;\n  });\n\n  if (dayConf) {\n    return isDateInRange(date, dayConf.from, dayConf.to);\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/imports/api/integrations/utils.js"],"names":["module","export","checkAvailability","getDayAsString","day","dayNumber","isDateInRange","date","from","to","fromDate","Date","parse","toLocaleDateString","endDate","isWeekday","includes","isWeekend","integration","availabilityMethod","isOnline","getDay","everydayConf","onlineHours","find","c","weekdaysConf","weekendsConf","dayConf"],"mappings":"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","file":"/imports/api/integrations/utils.js.map","sourcesContent":["const getDayAsString = dayNumber => {\n  let day;\n\n  switch (dayNumber) {\n    case 1:\n      day = 'monday';\n      break;\n\n    case 2:\n      day = 'tuesday';\n      break;\n\n    case 3:\n      day = 'wednesday';\n      break;\n\n    case 4:\n      day = 'thursday';\n      break;\n\n    case 5:\n      day = 'friday';\n      break;\n\n    case 6:\n      day = 'saturday';\n      break;\n\n    case 7:\n      day = 'sunday';\n      break;\n  }\n\n  return day;\n};\n\nconst isDateInRange = (date, from, to) => {\n  const fromDate = new Date(Date.parse(`${date.toLocaleDateString()} ${from}`));\n\n  const endDate = new Date(Date.parse(`${date.toLocaleDateString()} ${to}`));\n\n  // check interval\n  if (fromDate <= date && endDate >= date) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isWeekday = day => ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'].includes(day);\n\nconst isWeekend = day => ['saturday', 'sunday'].includes(day);\n\nexport const checkAvailability = (integration, date) => {\n  // we can determine state from isOnline field value when method is manual\n  if (integration.availabilityMethod === 'manual') {\n    return integration.isOnline;\n  }\n\n  const day = getDayAsString(date.getDay());\n\n  // auto ====================\n\n  // check by everyday config\n  const everydayConf = integration.onlineHours.find(c => c.day === 'everyday');\n\n  if (everydayConf) {\n    return isDateInRange(date, everydayConf.from, everydayConf.to);\n  }\n\n  // check by weekdays config\n  const weekdaysConf = integration.onlineHours.find(c => c.day === 'weekdays');\n\n  if (weekdaysConf && isWeekday(day)) {\n    return isDateInRange(date, weekdaysConf.from, weekdaysConf.to);\n  }\n\n  // check by weekends config\n  const weekendsConf = integration.onlineHours.find(c => c.day === 'weekends');\n\n  if (weekendsConf && isWeekend(day)) {\n    return isDateInRange(date, weekendsConf.from, weekendsConf.to);\n  }\n\n  // check by regular day config\n  const dayConf = integration.onlineHours.find(c => c.day === day);\n\n  if (dayConf) {\n    return isDateInRange(date, dayConf.from, dayConf.to);\n  }\n\n  return false;\n};\n"]},"hash":"735cf6ec01d2734a5541db1ba772170c8044d3e2"}
