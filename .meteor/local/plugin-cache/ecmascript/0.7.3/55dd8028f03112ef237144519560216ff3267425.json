{"metadata":{"usedHelpers":["extends","taggedTemplateLiteralLoose","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/imports/react-ui/common","imported":["Loader"],"specifiers":[{"kind":"named","imported":"Loader","local":"Loader"}]},{"source":"../components","imported":["SegmentsList"],"specifiers":[{"kind":"named","imported":"SegmentsList","local":"SegmentsList"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/segments/containers/SegmentsList.js","filenameRelative":"/imports/react-ui/segments/containers/SegmentsList.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/segments/containers/SegmentsList.js.map","sourceFileName":"/imports/react-ui/segments/containers/SegmentsList.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"SegmentsList"},"ignored":false,"code":"var _taggedTemplateLiteralLoose2 = require(\"babel-runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _templateObject = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query segments {\\n        segments {\\n          \", \"\\n          getSubSegments {\\n            \", \"\\n          }\\n        }\\n      }\\n    \"], [\"\\n      query segments {\\n        segments {\\n          \", \"\\n          getSubSegments {\\n            \", \"\\n          }\\n        }\\n      }\\n    \"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar Loader = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Loader: function (v) {\n    Loader = v;\n  }\n}, 4);\nvar SegmentsList = void 0;\nmodule.importSync(\"../components\", {\n  SegmentsList: function (v) {\n    SegmentsList = v;\n  }\n}, 5);\n\nvar SegmentListContainer = function (props) {\n  var segmentsQuery = props.segmentsQuery;\n\n  if (segmentsQuery.loading) {\n    return React.createElement(Loader, null);\n  }\n\n  var updatedProps = (0, _extends3.default)({}, props, {\n    segments: segmentsQuery.segments,\n    removeSegment: function (_ref, callback) {\n      var id = _ref.id;\n      Meteor.call('customers.removeSegment', id, function () {\n        segmentsQuery.refetch();\n        callback.apply(undefined, arguments);\n      });\n    }\n  });\n  return React.createElement(SegmentsList, updatedProps);\n};\n\nSegmentListContainer.propTypes = {\n  object: PropTypes.object,\n  segmentsQuery: PropTypes.object\n};\nvar segmentFields = \"\\n  _id\\n  name\\n  description\\n  subOf\\n  color\\n  connector\\n  conditions\\n\";\nmodule.export(\"default\", exports.default = compose(graphql(gql(_templateObject, segmentFields, segmentFields), {\n  name: 'segmentsQuery',\n  options: function () {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(SegmentListContainer));","map":{"version":3,"sources":["/imports/react-ui/segments/containers/SegmentsList.js"],"names":["React","module","importSync","v","PropTypes","compose","gql","graphql","Meteor","Loader","SegmentsList","SegmentListContainer","segmentsQuery","props","loading","updatedProps","segments","removeSegment","callback","id","call","refetch","propTypes","object","segmentFields","export","exports","default","name","options","fetchPolicy"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,UAAP,CAAkB,OAAlB,EAA0B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACH,YAAMG,CAAN;AAAQ;AAA7B,CAA1B,EAAyD,CAAzD;AAA4D,IAAIC,kBAAJ;AAAcH,OAAOC,UAAP,CAAkB,YAAlB,EAA+B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACC,gBAAUD,CAAV;AAAY;AAAjC,CAA/B,EAAkE,CAAlE;AAAqE,IAAIE,gBAAJ;AAAA,IAAYC,YAAZ;AAAA,IAAgBC,gBAAhB;AAAwBN,OAAOC,UAAP,CAAkB,cAAlB,EAAiC;AAACG,WAAQ,UAASF,CAAT,EAAW;AAACE,cAAQF,CAAR;AAAU,GAA/B;AAAgCG,OAAI,UAASH,CAAT,EAAW;AAACG,UAAIH,CAAJ;AAAM,GAAtD;AAAuDI,WAAQ,UAASJ,CAAT,EAAW;AAACI,cAAQJ,CAAR;AAAU;AAArF,CAAjC,EAAwH,CAAxH;AAA2H,IAAIK,eAAJ;AAAWP,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACM,UAAO,UAASL,CAAT,EAAW;AAACK,aAAOL,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIM,eAAJ;AAAWR,OAAOC,UAAP,CAAkB,0BAAlB,EAA6C;AAACO,UAAO,UAASN,CAAT,EAAW;AAACM,aAAON,CAAP;AAAS;AAA7B,CAA7C,EAA4E,CAA5E;AAA+E,IAAIO,qBAAJ;AAAiBT,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACQ,gBAAa,UAASP,CAAT,EAAW;AAACO,mBAAaP,CAAb;AAAe;AAAzC,CAAlC,EAA6E,CAA7E;;AAOte,IAAMQ,uBAAuB,iBAAS;AAAA,MAC5BC,aAD4B,GACVC,KADU,CAC5BD,aAD4B;;AAGpC,MAAIA,cAAcE,OAAlB,EAA2B;AACzB,WAAO,oBAAC,MAAD,OAAP;AACD;;AAED,MAAMC,0CACDF,KADC;AAEJG,cAAUJ,cAAcI,QAFpB;AAGJC,iBAHI,kBAGkBC,QAHlB,EAG4B;AAAA,UAAhBC,EAAgB,QAAhBA,EAAgB;AAC9BX,aAAOY,IAAP,CAAY,yBAAZ,EAAuCD,EAAvC,EAA2C,YAAe;AACxDP,sBAAcS,OAAd;AACAH;AACD,OAHD;AAID;AARG,IAAN;AAWA,SAAO,oBAAC,YAAD,EAAkBH,YAAlB,CAAP;AACD,CAnBD;;AAqBAJ,qBAAqBW,SAArB,GAAiC;AAC/BC,UAAQnB,UAAUmB,MADa;AAE/BX,iBAAeR,UAAUmB;AAFM,CAAjC;AAKA,IAAMC,+FAAN;AAjCAvB,OAAOwB,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GA2CTtB,QACbE,QACED,GADF,kBAIUkB,aAJV,EAMYA,aANZ,GAWE;AACEI,QAAM,eADR;AAEEC,WAAS;AAAA,WAAO;AACdC,mBAAa;AADC,KAAP;AAAA;AAFX,CAXF,CADa,EAmBbnB,oBAnBa,CA3Cf","file":"/imports/react-ui/segments/containers/SegmentsList.js.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { Meteor } from 'meteor/meteor';\nimport { Loader } from '/imports/react-ui/common';\nimport { SegmentsList } from '../components';\n\nconst SegmentListContainer = props => {\n  const { segmentsQuery } = props;\n\n  if (segmentsQuery.loading) {\n    return <Loader />;\n  }\n\n  const updatedProps = {\n    ...props,\n    segments: segmentsQuery.segments,\n    removeSegment({ id }, callback) {\n      Meteor.call('customers.removeSegment', id, (...params) => {\n        segmentsQuery.refetch();\n        callback(...params);\n      });\n    },\n  };\n\n  return <SegmentsList {...updatedProps} />;\n};\n\nSegmentListContainer.propTypes = {\n  object: PropTypes.object,\n  segmentsQuery: PropTypes.object,\n};\n\nconst segmentFields = `\n  _id\n  name\n  description\n  subOf\n  color\n  connector\n  conditions\n`;\n\nexport default compose(\n  graphql(\n    gql`\n      query segments {\n        segments {\n          ${segmentFields}\n          getSubSegments {\n            ${segmentFields}\n          }\n        }\n      }\n    `,\n    {\n      name: 'segmentsQuery',\n      options: () => ({\n        fetchPolicy: 'network-only',\n      }),\n    },\n  ),\n)(SegmentListContainer);\n"]},"hash":"55dd8028f03112ef237144519560216ff3267425"}
