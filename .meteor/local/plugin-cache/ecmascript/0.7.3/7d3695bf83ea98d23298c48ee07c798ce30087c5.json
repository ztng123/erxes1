{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"/imports/api/server/utils","imported":["sendNotification"],"specifiers":[{"kind":"named","imported":"sendNotification","local":"sendNotification"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"../channels","imported":["Channels"],"specifiers":[{"kind":"named","imported":"Channels","local":"Channels"}]}],"exports":{"exported":["add","edit","remove"],"specifiers":[{"kind":"local","local":"add","exported":"add"},{"kind":"local","local":"edit","exported":"edit"},{"kind":"local","local":"remove","exported":"remove"}]}}},"options":{"filename":"/imports/api/channels/server/methods.js","filenameRelative":"/imports/api/channels/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/channels/server/methods.js.map","sourceFileName":"/imports/api/channels/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  add: function () {\n    return add;\n  },\n  edit: function () {\n    return edit;\n  },\n  remove: function () {\n    return remove;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 2);\nvar sendNotification = void 0;\nmodule.importSync(\"/imports/api/server/utils\", {\n  sendNotification: function (v) {\n    sendNotification = v;\n  }\n}, 3);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 4);\nvar Channels = void 0;\nmodule.importSync(\"../channels\", {\n  Channels: function (v) {\n    Channels = v;\n  }\n}, 5);\n\nvar sendNotifications = function (channelId, _memberIds, userId) {\n  var memberIds = _memberIds || [];\n  var channel = Channels.findOne({\n    _id: channelId\n  });\n  var content = \"You have invited to '\" + channel.name + \"' channel.\";\n  sendNotification({\n    createdUser: userId,\n    notifType: 'channelMembersChange',\n    title: content,\n    content: content,\n    link: \"/inbox/\" + channel._id,\n    // exclude current user\n    receivers: memberIds.filter(function (id) {\n      return id !== userId;\n    })\n  });\n}; // channel add\n\n\nvar add = new ValidatedMethod({\n  name: 'channels.add',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var doc = _ref.doc;\n    // check doc\n    check(doc, Channels.schema);\n  },\n  run: function (_ref2) {\n    var doc = _ref2.doc;\n    var obj = Object.assign({\n      userId: this.userId\n    }, doc);\n    var channelId = Channels.insert(obj); // send notification\n\n    sendNotifications(channelId, doc.memberIds, this.userId);\n    return channelId;\n  }\n});\nvar edit = new ValidatedMethod({\n  name: 'channels.edit',\n  mixins: [ErxesMixin],\n  validate: function (_ref3) {\n    var id = _ref3.id,\n        doc = _ref3.doc;\n    check(id, String);\n    check(doc, Channels.schema);\n  },\n  run: function (_ref4) {\n    var id = _ref4.id,\n        doc = _ref4.doc;\n    var obj = Channels.findOne(id, {\n      fields: {\n        userId: 1\n      }\n    });\n\n    if (!obj) {\n      throw new Meteor.Error('channels.edit.notFound', 'Channel not found');\n    }\n\n    Object.assign(doc, {\n      memberIds: doc.memberIds || []\n    }); // add current user to members automatically\n\n    if (doc.memberIds.indexOf(this.userId) === -1) {\n      doc.memberIds.push(this.userId);\n    } // update action\n\n\n    Channels.update(id, {\n      $set: doc\n    });\n    var updatedChannel = Channels.findOne(id); // send notification\n\n    sendNotifications(id, updatedChannel.memberIds, this.userId);\n  }\n});\nvar remove = new ValidatedMethod({\n  name: 'channels.remove',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    var obj = Channels.findOne(id, {\n      fields: {\n        userId: 1\n      }\n    });\n\n    if (!obj) {\n      throw new Meteor.Error('channels.remove.notFound', 'Channel not found');\n    }\n\n    return Channels.remove(id);\n  }\n});","map":{"version":3,"sources":["/imports/api/channels/server/methods.js"],"names":["module","export","add","edit","remove","Meteor","importSync","v","check","ValidatedMethod","sendNotification","ErxesMixin","Channels","sendNotifications","channelId","_memberIds","userId","memberIds","channel","findOne","_id","content","name","createdUser","notifType","title","link","receivers","filter","id","mixins","validate","doc","schema","run","obj","Object","assign","insert","String","fields","Error","indexOf","push","update","$set","updatedChannel"],"mappings":"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","file":"/imports/api/channels/server/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { sendNotification } from '/imports/api/server/utils';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Channels } from '../channels';\n\nconst sendNotifications = (channelId, _memberIds, userId) => {\n  const memberIds = _memberIds || [];\n  const channel = Channels.findOne({ _id: channelId });\n\n  const content = `You have invited to '${channel.name}' channel.`;\n\n  sendNotification({\n    createdUser: userId,\n    notifType: 'channelMembersChange',\n    title: content,\n    content,\n    link: `/inbox/${channel._id}`,\n\n    // exclude current user\n    receivers: memberIds.filter(id => id !== userId),\n  });\n};\n\n// channel add\nexport const add = new ValidatedMethod({\n  name: 'channels.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    // check doc\n    check(doc, Channels.schema);\n  },\n\n  run({ doc }) {\n    const obj = Object.assign({ userId: this.userId }, doc);\n\n    const channelId = Channels.insert(obj);\n\n    // send notification\n    sendNotifications(channelId, doc.memberIds, this.userId);\n\n    return channelId;\n  },\n});\n\n// channel edit\nexport const edit = new ValidatedMethod({\n  name: 'channels.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Channels.schema);\n  },\n\n  run({ id, doc }) {\n    const obj = Channels.findOne(id, { fields: { userId: 1 } });\n\n    if (!obj) {\n      throw new Meteor.Error('channels.edit.notFound', 'Channel not found');\n    }\n\n    Object.assign(doc, { memberIds: doc.memberIds || [] });\n\n    // add current user to members automatically\n    if (doc.memberIds.indexOf(this.userId) === -1) {\n      doc.memberIds.push(this.userId);\n    }\n\n    // update action\n    Channels.update(id, { $set: doc });\n\n    const updatedChannel = Channels.findOne(id);\n\n    // send notification\n    sendNotifications(id, updatedChannel.memberIds, this.userId);\n  },\n});\n\n// channel remove\nexport const remove = new ValidatedMethod({\n  name: 'channels.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    const obj = Channels.findOne(id, { fields: { userId: 1 } });\n\n    if (!obj) {\n      throw new Meteor.Error('channels.remove.notFound', 'Channel not found');\n    }\n\n    return Channels.remove(id);\n  },\n});\n"]},"hash":"7d3695bf83ea98d23298c48ee07c798ce30087c5"}
