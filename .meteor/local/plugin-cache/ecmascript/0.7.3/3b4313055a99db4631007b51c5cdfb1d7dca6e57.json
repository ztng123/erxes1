{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"../engage","imported":["Messages"],"specifiers":[{"kind":"named","imported":"Messages","local":"Messages"}]},{"source":"../constants","imported":["MESSAGE_KINDS"],"specifiers":[{"kind":"named","imported":"MESSAGE_KINDS","local":"MESSAGE_KINDS"}]},{"source":"../utils","imported":["send"],"specifiers":[{"kind":"named","imported":"send","local":"send"}]}],"exports":{"exported":["messagesAdd","messagesEdit","messagesRemove","messagesSetLive","messagesSetPause","messagesSetLiveManual"],"specifiers":[{"kind":"local","local":"messagesAdd","exported":"messagesAdd"},{"kind":"local","local":"messagesEdit","exported":"messagesEdit"},{"kind":"local","local":"messagesRemove","exported":"messagesRemove"},{"kind":"local","local":"messagesSetLive","exported":"messagesSetLive"},{"kind":"local","local":"messagesSetPause","exported":"messagesSetPause"},{"kind":"local","local":"messagesSetLiveManual","exported":"messagesSetLiveManual"}]}}},"options":{"filename":"/imports/api/engage/server/methods.js","filenameRelative":"/imports/api/engage/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/engage/server/methods.js.map","sourceFileName":"/imports/api/engage/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  messagesAdd: function () {\n    return messagesAdd;\n  },\n  messagesEdit: function () {\n    return messagesEdit;\n  },\n  messagesRemove: function () {\n    return messagesRemove;\n  },\n  messagesSetLive: function () {\n    return messagesSetLive;\n  },\n  messagesSetPause: function () {\n    return messagesSetPause;\n  },\n  messagesSetLiveManual: function () {\n    return messagesSetLiveManual;\n  }\n});\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 0);\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 1);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 2);\nvar Messages = void 0;\nmodule.importSync(\"../engage\", {\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 3);\nvar MESSAGE_KINDS = void 0;\nmodule.importSync(\"../constants\", {\n  MESSAGE_KINDS: function (v) {\n    MESSAGE_KINDS = v;\n  }\n}, 4);\nvar send = void 0;\nmodule.importSync(\"../utils\", {\n  send: function (v) {\n    send = v;\n  }\n}, 5);\nvar messagesAdd = new ValidatedMethod({\n  name: 'engage.messages.add',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var doc = _ref.doc;\n    check(doc, Messages.schema);\n  },\n  run: function (_ref2) {\n    var doc = _ref2.doc;\n    doc.createdUserId = this.userId;\n    doc.createdDate = new Date();\n    doc.deliveryReports = {}; // create\n\n    var messageId = Messages.insert(doc); // if manual and live then send immediately\n\n    if (doc.kind === MESSAGE_KINDS.MANUAL && doc.isLive) {\n      var message = Messages.findOne(messageId);\n      send(message);\n    }\n\n    return {\n      messageId: messageId,\n      method: doc.method\n    };\n  }\n});\nvar messagesEdit = new ValidatedMethod({\n  name: 'engage.messages.edit',\n  mixins: [ErxesMixin],\n  validate: function (_ref3) {\n    var id = _ref3.id,\n        doc = _ref3.doc;\n    check(id, String);\n    check(doc, Messages.schema);\n  },\n  run: function (_ref4) {\n    var id = _ref4.id,\n        doc = _ref4.doc;\n    Messages.update(id, {\n      $set: doc\n    });\n    return {\n      messageId: id,\n      method: doc.method\n    };\n  }\n});\nvar messagesRemove = new ValidatedMethod({\n  name: 'engage.messages.remove',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    return Messages.remove(id);\n  }\n});\nvar messagesSetLive = new ValidatedMethod({\n  name: 'engage.messages.setLive',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    return Messages.update(id, {\n      $set: {\n        isLive: true,\n        isDraft: false\n      }\n    });\n  }\n});\nvar messagesSetPause = new ValidatedMethod({\n  name: 'engage.messages.setPause',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    return Messages.update(id, {\n      $set: {\n        isLive: false\n      }\n    });\n  }\n});\nvar messagesSetLiveManual = new ValidatedMethod({\n  name: 'engage.messages.setLiveManual',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    Messages.update(id, {\n      $set: {\n        isLive: true,\n        isDraft: false\n      }\n    });\n    var message = Messages.findOne(id); // if manual and live then send\n\n    send(message);\n  }\n});","map":{"version":3,"sources":["/imports/api/engage/server/methods.js"],"names":["module","export","messagesAdd","messagesEdit","messagesRemove","messagesSetLive","messagesSetPause","messagesSetLiveManual","check","importSync","v","ValidatedMethod","ErxesMixin","Messages","MESSAGE_KINDS","send","name","mixins","validate","doc","schema","run","createdUserId","userId","createdDate","Date","deliveryReports","messageId","insert","kind","MANUAL","isLive","message","findOne","method","id","String","update","$set","remove","isDraft"],"mappings":"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","file":"/imports/api/engage/server/methods.js.map","sourcesContent":["import { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Messages } from '../engage';\nimport { MESSAGE_KINDS } from '../constants';\nimport { send } from '../utils';\n\n// add messsage\nexport const messagesAdd = new ValidatedMethod({\n  name: 'engage.messages.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, Messages.schema);\n  },\n\n  run({ doc }) {\n    doc.createdUserId = this.userId;\n    doc.createdDate = new Date();\n    doc.deliveryReports = {};\n\n    // create\n    const messageId = Messages.insert(doc);\n\n    // if manual and live then send immediately\n    if (doc.kind === MESSAGE_KINDS.MANUAL && doc.isLive) {\n      const message = Messages.findOne(messageId);\n\n      send(message);\n    }\n\n    return { messageId, method: doc.method };\n  },\n});\n\n// edit message\nexport const messagesEdit = new ValidatedMethod({\n  name: 'engage.messages.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Messages.schema);\n  },\n\n  run({ id, doc }) {\n    Messages.update(id, { $set: doc });\n\n    return { messageId: id, method: doc.method };\n  },\n});\n\n// remove message\nexport const messagesRemove = new ValidatedMethod({\n  name: 'engage.messages.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Messages.remove(id);\n  },\n});\n\n// set live\nexport const messagesSetLive = new ValidatedMethod({\n  name: 'engage.messages.setLive',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Messages.update(id, { $set: { isLive: true, isDraft: false } });\n  },\n});\n\n// set pause\nexport const messagesSetPause = new ValidatedMethod({\n  name: 'engage.messages.setPause',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Messages.update(id, { $set: { isLive: false } });\n  },\n});\n\n// set live manual\nexport const messagesSetLiveManual = new ValidatedMethod({\n  name: 'engage.messages.setLiveManual',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    Messages.update(id, { $set: { isLive: true, isDraft: false } });\n\n    const message = Messages.findOne(id);\n\n    // if manual and live then send\n    send(message);\n  },\n});\n"]},"hash":"3b4313055a99db4631007b51c5cdfb1d7dca6e57"}
