{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"node4mailer","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"nodemailer"}]},{"source":"/imports/api/customers/queryBuilder","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"customerQueryBuilder"}]},{"source":"/imports/api/customers/segments","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Segments"}]},{"source":"/imports/api/emailTemplates/emailTemplates","imported":["EmailTemplates"],"specifiers":[{"kind":"named","imported":"EmailTemplates","local":"EmailTemplates"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"/imports/api/integrations/integrations","imported":["Integrations"],"specifiers":[{"kind":"named","imported":"Integrations","local":"Integrations"}]},{"source":"/imports/api/integrations/constants","imported":["KIND_CHOICES"],"specifiers":[{"kind":"named","imported":"KIND_CHOICES","local":"KIND_CHOICES"}]},{"source":"/imports/api/conversations/utils","imported":["createConversation","createMessage"],"specifiers":[{"kind":"named","imported":"createConversation","local":"createConversation"},{"kind":"named","imported":"createMessage","local":"createMessage"}]},{"source":"./constants","imported":["EMAIL_CONTENT_PLACEHOLDER","METHODS","MESSAGE_KINDS"],"specifiers":[{"kind":"named","imported":"EMAIL_CONTENT_PLACEHOLDER","local":"EMAIL_CONTENT_PLACEHOLDER"},{"kind":"named","imported":"METHODS","local":"METHODS"},{"kind":"named","imported":"MESSAGE_KINDS","local":"MESSAGE_KINDS"}]},{"source":"./engage","imported":["Messages"],"specifiers":[{"kind":"named","imported":"Messages","local":"Messages"}]}],"exports":{"exported":["replaceKeys","send"],"specifiers":[{"kind":"local","local":"replaceKeys","exported":"replaceKeys"},{"kind":"local","local":"send","exported":"send"}]}}},"options":{"filename":"/imports/api/engage/utils.js","filenameRelative":"/imports/api/engage/utils.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/engage/utils.js.map","sourceFileName":"/imports/api/engage/utils.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"utils"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  replaceKeys: function () {\n    return replaceKeys;\n  },\n  send: function () {\n    return send;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 1);\nvar nodemailer = void 0;\nmodule.importSync(\"node4mailer\", {\n  \"default\": function (v) {\n    nodemailer = v;\n  }\n}, 2);\nvar customerQueryBuilder = void 0;\nmodule.importSync(\"/imports/api/customers/queryBuilder\", {\n  \"default\": function (v) {\n    customerQueryBuilder = v;\n  }\n}, 3);\nvar Segments = void 0;\nmodule.importSync(\"/imports/api/customers/segments\", {\n  \"default\": function (v) {\n    Segments = v;\n  }\n}, 4);\nvar EmailTemplates = void 0;\nmodule.importSync(\"/imports/api/emailTemplates/emailTemplates\", {\n  EmailTemplates: function (v) {\n    EmailTemplates = v;\n  }\n}, 5);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 6);\nvar Integrations = void 0;\nmodule.importSync(\"/imports/api/integrations/integrations\", {\n  Integrations: function (v) {\n    Integrations = v;\n  }\n}, 7);\nvar KIND_CHOICES = void 0;\nmodule.importSync(\"/imports/api/integrations/constants\", {\n  KIND_CHOICES: function (v) {\n    KIND_CHOICES = v;\n  }\n}, 8);\nvar createConversation = void 0,\n    createMessage = void 0;\nmodule.importSync(\"/imports/api/conversations/utils\", {\n  createConversation: function (v) {\n    createConversation = v;\n  },\n  createMessage: function (v) {\n    createMessage = v;\n  }\n}, 9);\nvar EMAIL_CONTENT_PLACEHOLDER = void 0,\n    METHODS = void 0,\n    MESSAGE_KINDS = void 0;\nmodule.importSync(\"./constants\", {\n  EMAIL_CONTENT_PLACEHOLDER: function (v) {\n    EMAIL_CONTENT_PLACEHOLDER = v;\n  },\n  METHODS: function (v) {\n    METHODS = v;\n  },\n  MESSAGE_KINDS: function (v) {\n    MESSAGE_KINDS = v;\n  }\n}, 10);\nvar Messages = void 0;\nmodule.importSync(\"./engage\", {\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 11);\n\nvar replaceKeys = function (_ref) {\n  var content = _ref.content,\n      customer = _ref.customer,\n      user = _ref.user;\n  var result = content; // replace customer fields\n\n  result = result.replace(/{{\\s?customer.name\\s?}}/gi, customer.name);\n  result = result.replace(/{{\\s?customer.email\\s?}}/gi, customer.email); // replace user fields\n\n  result = result.replace(/{{\\s?user.fullName\\s?}}/gi, user.fullName);\n  result = result.replace(/{{\\s?user.position\\s?}}/gi, user.position);\n  result = result.replace(/{{\\s?user.email\\s?}}/gi, user.email);\n  return result;\n};\n\nvar findCustomers = function (_ref2) {\n  var customerIds = _ref2.customerIds,\n      segmentId = _ref2.segmentId;\n  // find matched customers\n  var customerQuery = {\n    _id: {\n      $in: customerIds || []\n    }\n  };\n\n  if (segmentId) {\n    customerQuery = customerQueryBuilder.segments(Segments.findOne(segmentId));\n  }\n\n  return Customers.find(customerQuery).fetch();\n};\n\nvar saveMatchedCustomerIds = function (messageId, customers) {\n  return Messages.update({\n    _id: messageId\n  }, {\n    $set: {\n      customerIds: customers.map(function (customer) {\n        return customer._id;\n      })\n    }\n  });\n};\n\nvar sendViaEmail = function (message) {\n  var fromUserId = message.fromUserId,\n      segmentId = message.segmentId,\n      customerIds = message.customerIds;\n  var _message$email = message.email,\n      templateId = _message$email.templateId,\n      subject = _message$email.subject,\n      content = _message$email.content;\n  var user = Meteor.users.findOne(fromUserId);\n  var userEmail = user.emails.pop();\n  var template = EmailTemplates.findOne(templateId); // find matched customers\n\n  var customers = findCustomers({\n    customerIds: customerIds,\n    segmentId: segmentId\n  }); // save matched customer ids\n\n  saveMatchedCustomerIds(message._id, customers); // create reusable transporter object using the default SMTP transport\n\n  var _ref3 = Meteor.settings.mail || {},\n      host = _ref3.host,\n      port = _ref3.port,\n      secure = _ref3.secure,\n      auth = _ref3.auth;\n\n  var transporter = nodemailer.createTransport({\n    host: host,\n    port: port,\n    secure: secure,\n    auth: auth\n  });\n  customers.forEach(function (customer) {\n    var _$set;\n\n    // replace keys in subject\n    var replacedSubject = replaceKeys({\n      content: subject,\n      customer: customer,\n      user: user\n    }); // replace keys such as {{ customer.name }} in content\n\n    var replacedContent = replaceKeys({\n      content: content,\n      customer: customer,\n      user: user\n    }); // if sender choosed some template then use it\n\n    if (template) {\n      replacedContent = template.content.replace(EMAIL_CONTENT_PLACEHOLDER, replacedContent);\n    }\n\n    var mailMessageId = Random.id(); // add new delivery report\n\n    Messages.update({\n      _id: message._id\n    }, {\n      $set: (_$set = {}, _$set[\"deliveryReports.\" + mailMessageId] = {\n        customerId: customer._id,\n        status: 'pending'\n      }, _$set)\n    }); // send email\n\n    transporter.sendMail({\n      from: userEmail.address,\n      to: customer.email,\n      subject: replacedSubject,\n      html: replacedContent,\n      messageId: mailMessageId\n    }, Meteor.bindEnvironment(function (error, info) {\n      var _$set2;\n\n      // set new status\n      var status = error ? 'failed' : 'sent'; // update status\n\n      Messages.update({\n        _id: message._id\n      }, {\n        $set: (_$set2 = {}, _$set2[\"deliveryReports.\" + info.messageId + \".status\"] = status, _$set2)\n      });\n    }));\n  });\n};\n\nvar sendViaMessenger = function (message) {\n  var fromUserId = message.fromUserId,\n      segmentId = message.segmentId,\n      customerIds = message.customerIds;\n  var _message$messenger = message.messenger,\n      brandId = _message$messenger.brandId,\n      content = _message$messenger.content;\n  var user = Meteor.users.findOne(fromUserId); // find integration\n\n  var integration = Integrations.findOne({\n    brandId: brandId,\n    kind: KIND_CHOICES.MESSENGER\n  });\n\n  if (!integration) {\n    return 'Integration not found';\n  } // find matched customers\n\n\n  var customers = findCustomers({\n    customerIds: customerIds,\n    segmentId: segmentId\n  }); // save matched customer ids\n\n  saveMatchedCustomerIds(message._id, customers);\n  customers.forEach(function (customer) {\n    // replace keys in content\n    var replacedContent = replaceKeys({\n      content: content,\n      customer: customer,\n      user: user\n    }); // create conversation\n\n    var conversationId = createConversation({\n      userId: fromUserId,\n      customerId: customer._id,\n      integrationId: integration._id,\n      content: replacedContent\n    }); // create message\n\n    createMessage({\n      engageData: (0, _extends3.default)({\n        messageId: message._id,\n        fromUserId: fromUserId\n      }, message.messenger),\n      conversationId: conversationId,\n      userId: fromUserId,\n      customerId: customer._id,\n      content: replacedContent\n    });\n  });\n};\n\nvar send = function (message) {\n  var method = message.method,\n      kind = message.kind;\n\n  if (method === METHODS.EMAIL) {\n    return sendViaEmail(message);\n  } // when kind is visitor auto, do not do anything\n\n\n  if (method === METHODS.MESSENGER && kind !== MESSAGE_KINDS.VISITOR_AUTO) {\n    return sendViaMessenger(message);\n  }\n};","map":{"version":3,"sources":["/imports/api/engage/utils.js"],"names":["module","export","replaceKeys","send","Meteor","importSync","v","Random","nodemailer","customerQueryBuilder","Segments","EmailTemplates","Customers","Integrations","KIND_CHOICES","createConversation","createMessage","EMAIL_CONTENT_PLACEHOLDER","METHODS","MESSAGE_KINDS","Messages","content","customer","user","result","replace","name","email","fullName","position","findCustomers","customerIds","segmentId","customerQuery","_id","$in","segments","findOne","find","fetch","saveMatchedCustomerIds","messageId","customers","update","$set","map","sendViaEmail","fromUserId","message","templateId","subject","users","userEmail","emails","pop","template","settings","mail","host","port","secure","auth","transporter","createTransport","forEach","replacedSubject","replacedContent","mailMessageId","id","customerId","status","sendMail","from","address","to","html","bindEnvironment","error","info","sendViaMessenger","messenger","brandId","integration","kind","MESSENGER","conversationId","userId","integrationId","engageData","method","EMAIL","VISITOR_AUTO"],"mappings":"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","file":"/imports/api/engage/utils.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\n// node4mailer is a small modification to nodemailer to run on Node 4 (and higher),\n// whereas official Nodemailer runs only on Node 6 (and higher).\n// after meteor supports node6, we need to change this\nimport nodemailer from 'node4mailer';\n\nimport customerQueryBuilder from '/imports/api/customers/queryBuilder';\nimport Segments from '/imports/api/customers/segments';\nimport { EmailTemplates } from '/imports/api/emailTemplates/emailTemplates';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { KIND_CHOICES } from '/imports/api/integrations/constants';\nimport { createConversation, createMessage } from '/imports/api/conversations/utils';\n\nimport { EMAIL_CONTENT_PLACEHOLDER, METHODS, MESSAGE_KINDS } from './constants';\nimport { Messages } from './engage';\n\nexport const replaceKeys = ({ content, customer, user }) => {\n  let result = content;\n\n  // replace customer fields\n  result = result.replace(/{{\\s?customer.name\\s?}}/gi, customer.name);\n  result = result.replace(/{{\\s?customer.email\\s?}}/gi, customer.email);\n\n  // replace user fields\n  result = result.replace(/{{\\s?user.fullName\\s?}}/gi, user.fullName);\n  result = result.replace(/{{\\s?user.position\\s?}}/gi, user.position);\n  result = result.replace(/{{\\s?user.email\\s?}}/gi, user.email);\n\n  return result;\n};\n\nconst findCustomers = ({ customerIds, segmentId }) => {\n  // find matched customers\n  let customerQuery = { _id: { $in: customerIds || [] } };\n\n  if (segmentId) {\n    customerQuery = customerQueryBuilder.segments(Segments.findOne(segmentId));\n  }\n\n  return Customers.find(customerQuery).fetch();\n};\n\nconst saveMatchedCustomerIds = (messageId, customers) =>\n  Messages.update(\n    { _id: messageId },\n    { $set: { customerIds: customers.map(customer => customer._id) } },\n  );\n\nconst sendViaEmail = message => {\n  const { fromUserId, segmentId, customerIds } = message;\n  const { templateId, subject, content } = message.email;\n\n  const user = Meteor.users.findOne(fromUserId);\n  const userEmail = user.emails.pop();\n  const template = EmailTemplates.findOne(templateId);\n\n  // find matched customers\n  const customers = findCustomers({ customerIds, segmentId });\n\n  // save matched customer ids\n  saveMatchedCustomerIds(message._id, customers);\n\n  // create reusable transporter object using the default SMTP transport\n  const { host, port, secure, auth } = Meteor.settings.mail || {};\n\n  const transporter = nodemailer.createTransport({ host, port, secure, auth });\n\n  customers.forEach(customer => {\n    // replace keys in subject\n    const replacedSubject = replaceKeys({ content: subject, customer, user });\n\n    // replace keys such as {{ customer.name }} in content\n    let replacedContent = replaceKeys({ content, customer, user });\n\n    // if sender choosed some template then use it\n    if (template) {\n      replacedContent = template.content.replace(EMAIL_CONTENT_PLACEHOLDER, replacedContent);\n    }\n\n    const mailMessageId = Random.id();\n\n    // add new delivery report\n    Messages.update(\n      { _id: message._id },\n      {\n        $set: {\n          [`deliveryReports.${mailMessageId}`]: {\n            customerId: customer._id,\n            status: 'pending',\n          },\n        },\n      },\n    );\n\n    // send email\n    transporter.sendMail(\n      {\n        from: userEmail.address,\n        to: customer.email,\n        subject: replacedSubject,\n        html: replacedContent,\n        messageId: mailMessageId,\n      },\n      Meteor.bindEnvironment((error, info) => {\n        // set new status\n        const status = error ? 'failed' : 'sent';\n\n        // update status\n        Messages.update(\n          { _id: message._id },\n          {\n            $set: {\n              [`deliveryReports.${info.messageId}.status`]: status,\n            },\n          },\n        );\n      }),\n    );\n  });\n};\n\nconst sendViaMessenger = message => {\n  const { fromUserId, segmentId, customerIds } = message;\n  const { brandId, content } = message.messenger;\n\n  const user = Meteor.users.findOne(fromUserId);\n\n  // find integration\n  const integration = Integrations.findOne({\n    brandId,\n    kind: KIND_CHOICES.MESSENGER,\n  });\n\n  if (!integration) {\n    return 'Integration not found';\n  }\n\n  // find matched customers\n  const customers = findCustomers({ customerIds, segmentId });\n\n  // save matched customer ids\n  saveMatchedCustomerIds(message._id, customers);\n\n  customers.forEach(customer => {\n    // replace keys in content\n    const replacedContent = replaceKeys({ content, customer, user });\n\n    // create conversation\n    const conversationId = createConversation({\n      userId: fromUserId,\n      customerId: customer._id,\n      integrationId: integration._id,\n      content: replacedContent,\n    });\n\n    // create message\n    createMessage({\n      engageData: {\n        messageId: message._id,\n        fromUserId,\n        ...message.messenger,\n      },\n      conversationId,\n      userId: fromUserId,\n      customerId: customer._id,\n      content: replacedContent,\n    });\n  });\n};\n\nexport const send = message => {\n  const { method, kind } = message;\n\n  if (method === METHODS.EMAIL) {\n    return sendViaEmail(message);\n  }\n\n  // when kind is visitor auto, do not do anything\n  if (method === METHODS.MESSENGER && kind !== MESSAGE_KINDS.VISITOR_AUTO) {\n    return sendViaMessenger(message);\n  }\n};\n"]},"hash":"ffbe9e1cdf74f8975cb161c6e82a255e43326ded"}
