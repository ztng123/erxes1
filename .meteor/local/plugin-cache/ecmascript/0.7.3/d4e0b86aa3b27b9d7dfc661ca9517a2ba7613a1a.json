{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"meteor/erxes-notifications","imported":["Configs"],"specifiers":[{"kind":"named","imported":"Configs","local":"Configs"}]},{"source":"react-komposer","imported":["compose"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"}]},{"source":"/imports/react-ui/utils","imported":["getTrackerLoader","composerOptions"],"specifiers":[{"kind":"named","imported":"getTrackerLoader","local":"getTrackerLoader"},{"kind":"named","imported":"composerOptions","local":"composerOptions"}]},{"source":"../components","imported":["NotificationSettings"],"specifiers":[{"kind":"named","imported":"NotificationSettings","local":"NotificationSettings"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/settings/profile/containers/NotificationSettings.js","filenameRelative":"/imports/react-ui/settings/profile/containers/NotificationSettings.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/settings/profile/containers/NotificationSettings.js.map","sourceFileName":"/imports/react-ui/settings/profile/containers/NotificationSettings.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"NotificationSettings"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar ReactiveVar = void 0;\nmodule.importSync(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 1);\nvar Configs = void 0;\nmodule.importSync(\"meteor/erxes-notifications\", {\n  Configs: function (v) {\n    Configs = v;\n  }\n}, 2);\nvar compose = void 0;\nmodule.importSync(\"react-komposer\", {\n  compose: function (v) {\n    compose = v;\n  }\n}, 3);\nvar getTrackerLoader = void 0,\n    composerOptions = void 0;\nmodule.importSync(\"/imports/react-ui/utils\", {\n  getTrackerLoader: function (v) {\n    getTrackerLoader = v;\n  },\n  composerOptions: function (v) {\n    composerOptions = v;\n  }\n}, 4);\nvar NotificationSettings = void 0;\nmodule.importSync(\"../components\", {\n  NotificationSettings: function (v) {\n    NotificationSettings = v;\n  }\n}, 5);\nvar modules = new ReactiveVar([]); // fetch modules\n\nMeteor.call('notifications.getModules', function (error, result) {\n  modules.set(result);\n});\n\nfunction composer(props, onData) {\n  var user = Meteor.user();\n\n  var save = function () {\n    var _Meteor;\n\n    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    (_Meteor = Meteor).call.apply(_Meteor, ['notifications.saveConfig'].concat(params));\n  };\n\n  var configGetNotificationByEmail = function () {\n    var _Meteor2;\n\n    for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      params[_key2] = arguments[_key2];\n    }\n\n    (_Meteor2 = Meteor).call.apply(_Meteor2, ['users.configGetNotificationByEmail'].concat(params));\n  }; // configs subscription\n\n\n  var configsHandler = Meteor.subscribe('notifications.configs');\n\n  if (user && configsHandler.ready()) {\n    // previously saved values\n    var configs = Configs.find().fetch(); // default value is checked\n\n    var getNotificationByEmail = user.details.getNotificationByEmail;\n\n    if (getNotificationByEmail === undefined) {\n      getNotificationByEmail = true;\n    }\n\n    onData(null, {\n      modules: modules.get(),\n      configs: configs,\n      save: save,\n      // previously configured value\n      getNotificationByEmail: getNotificationByEmail,\n      // action\n      configGetNotificationByEmail: configGetNotificationByEmail\n    });\n  }\n}\n\nmodule.export(\"default\", exports.default = compose(getTrackerLoader(composer), composerOptions({}))(NotificationSettings));","map":{"version":3,"sources":["/imports/react-ui/settings/profile/containers/NotificationSettings.js"],"names":["Meteor","module","importSync","v","ReactiveVar","Configs","compose","getTrackerLoader","composerOptions","NotificationSettings","modules","call","error","result","set","composer","props","onData","user","save","params","configGetNotificationByEmail","configsHandler","subscribe","ready","configs","find","fetch","getNotificationByEmail","details","undefined","get","export","exports","default"],"mappings":"AAAA,IAAIA,eAAJ;AAAWC,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACF,UAAO,UAASG,CAAT,EAAW;AAACH,aAAOG,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIC,oBAAJ;AAAgBH,OAAOC,UAAP,CAAkB,qBAAlB,EAAwC;AAACE,eAAY,UAASD,CAAT,EAAW;AAACC,kBAAYD,CAAZ;AAAc;AAAvC,CAAxC,EAAiF,CAAjF;AAAoF,IAAIE,gBAAJ;AAAYJ,OAAOC,UAAP,CAAkB,4BAAlB,EAA+C;AAACG,WAAQ,UAASF,CAAT,EAAW;AAACE,cAAQF,CAAR;AAAU;AAA/B,CAA/C,EAAgF,CAAhF;AAAmF,IAAIG,gBAAJ;AAAYL,OAAOC,UAAP,CAAkB,gBAAlB,EAAmC;AAACI,WAAQ,UAASH,CAAT,EAAW;AAACG,cAAQH,CAAR;AAAU;AAA/B,CAAnC,EAAoE,CAApE;AAAuE,IAAII,yBAAJ;AAAA,IAAqBC,wBAArB;AAAqCP,OAAOC,UAAP,CAAkB,yBAAlB,EAA4C;AAACK,oBAAiB,UAASJ,CAAT,EAAW;AAACI,uBAAiBJ,CAAjB;AAAmB,GAAjD;AAAkDK,mBAAgB,UAASL,CAAT,EAAW;AAACK,sBAAgBL,CAAhB;AAAkB;AAAhG,CAA5C,EAA8I,CAA9I;AAAiJ,IAAIM,6BAAJ;AAAyBR,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACO,wBAAqB,UAASN,CAAT,EAAW;AAACM,2BAAqBN,CAArB;AAAuB;AAAzD,CAAlC,EAA6F,CAA7F;AAOpjB,IAAMO,UAAU,IAAIN,WAAJ,CAAgB,EAAhB,CAAhB,C,CAEA;;AACAJ,OAAOW,IAAP,CAAY,0BAAZ,EAAwC,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACzDH,UAAQI,GAAR,CAAYD,MAAZ;AACD,CAFD;;AAIA,SAASE,QAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAC/B,MAAMC,OAAOlB,OAAOkB,IAAP,EAAb;;AAEA,MAAMC,OAAO,YAAe;AAAA;;AAAA,sCAAXC,MAAW;AAAXA,YAAW;AAAA;;AAC1B,uBAAOT,IAAP,iBAAY,0BAAZ,SAA2CS,MAA3C;AACD,GAFD;;AAIA,MAAMC,+BAA+B,YAAe;AAAA;;AAAA,uCAAXD,MAAW;AAAXA,YAAW;AAAA;;AAClD,wBAAOT,IAAP,kBAAY,oCAAZ,SAAqDS,MAArD;AACD,GAFD,CAP+B,CAW/B;;;AACA,MAAME,iBAAiBtB,OAAOuB,SAAP,CAAiB,uBAAjB,CAAvB;;AAEA,MAAIL,QAAQI,eAAeE,KAAf,EAAZ,EAAoC;AAClC;AACA,QAAMC,UAAUpB,QAAQqB,IAAR,GAAeC,KAAf,EAAhB,CAFkC,CAIlC;;AACA,QAAIC,yBAAyBV,KAAKW,OAAL,CAAaD,sBAA1C;;AAEA,QAAIA,2BAA2BE,SAA/B,EAA0C;AACxCF,+BAAyB,IAAzB;AACD;;AAEDX,WAAO,IAAP,EAAa;AACXP,eAASA,QAAQqB,GAAR,EADE;AAEXN,sBAFW;AAGXN,gBAHW;AAKX;AACAS,oDANW;AAQX;AACAP;AATW,KAAb;AAWD;AACF;;AAnDDpB,OAAO+B,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GAqDT5B,QAAQC,iBAAiBQ,QAAjB,CAAR,EAAoCP,gBAAgB,EAAhB,CAApC,EAAyDC,oBAAzD,CArDf","file":"/imports/react-ui/settings/profile/containers/NotificationSettings.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Configs } from 'meteor/erxes-notifications';\nimport { compose } from 'react-komposer';\nimport { getTrackerLoader, composerOptions } from '/imports/react-ui/utils';\nimport { NotificationSettings } from '../components';\n\nconst modules = new ReactiveVar([]);\n\n// fetch modules\nMeteor.call('notifications.getModules', (error, result) => {\n  modules.set(result);\n});\n\nfunction composer(props, onData) {\n  const user = Meteor.user();\n\n  const save = (...params) => {\n    Meteor.call('notifications.saveConfig', ...params);\n  };\n\n  const configGetNotificationByEmail = (...params) => {\n    Meteor.call('users.configGetNotificationByEmail', ...params);\n  };\n\n  // configs subscription\n  const configsHandler = Meteor.subscribe('notifications.configs');\n\n  if (user && configsHandler.ready()) {\n    // previously saved values\n    const configs = Configs.find().fetch();\n\n    // default value is checked\n    let getNotificationByEmail = user.details.getNotificationByEmail;\n\n    if (getNotificationByEmail === undefined) {\n      getNotificationByEmail = true;\n    }\n\n    onData(null, {\n      modules: modules.get(),\n      configs,\n      save,\n\n      // previously configured value\n      getNotificationByEmail,\n\n      // action\n      configGetNotificationByEmail,\n    });\n  }\n}\n\nexport default compose(getTrackerLoader(composer), composerOptions({}))(NotificationSettings);\n"]},"hash":"d4e0b86aa3b27b9d7dfc661ca9517a2ba7613a1a"}
