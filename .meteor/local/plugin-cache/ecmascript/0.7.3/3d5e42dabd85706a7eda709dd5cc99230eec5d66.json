{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]}],"exports":{"exported":["Brands","emailConfigSchema"],"specifiers":[{"kind":"local","local":"Brands","exported":"Brands"},{"kind":"local","local":"emailConfigSchema","exported":"emailConfigSchema"}]}}},"options":{"filename":"/imports/api/brands/brands.js","filenameRelative":"/imports/api/brands/brands.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/brands/brands.js.map","sourceFileName":"/imports/api/brands/brands.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"brands"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Brands: function () {\n    return Brands;\n  },\n  emailConfigSchema: function () {\n    return emailConfigSchema;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 3);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 4);\n\n// Brand collection\nvar BrandsCollection = function (_Mongo$Collection) {\n  (0, _inherits3.default)(BrandsCollection, _Mongo$Collection);\n\n  function BrandsCollection() {\n    (0, _classCallCheck3.default)(this, BrandsCollection);\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));\n  }\n\n  BrandsCollection.prototype.insert = function () {\n    function insert(doc, callback) {\n      var brand = Object.assign({}, doc); // generate code automatically\n\n      var code = Random.id().substr(0, 6);\n\n      while (this.findOne({\n        code: code\n      })) {\n        code = Random.id().substr(0, 6);\n      }\n\n      brand.code = code;\n      brand.createdAt = new Date();\n      brand.emailConfig = {\n        type: 'simple'\n      };\n      return _Mongo$Collection.prototype.insert.call(this, brand, callback);\n    }\n\n    return insert;\n  }();\n\n  return BrandsCollection;\n}(Mongo.Collection);\n\nvar Brands = new BrandsCollection('brands');\n// Deny all client-side updates since we will be using methods to manage\n// this collection\nBrands.deny({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\nvar emailConfigSchema = new SimpleSchema({\n  type: {\n    type: String,\n    allowedValues: ['simple', 'custom']\n  },\n  template: {\n    type: String,\n    optional: true\n  }\n});\nBrands.schema = new SimpleSchema({\n  name: {\n    type: String\n  },\n  description: {\n    type: String,\n    optional: true\n  }\n});\nBrands.schemaExtra = new SimpleSchema({\n  code: {\n    type: String\n  },\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  createdAt: {\n    type: Date\n  },\n  schema: {\n    type: Object,\n    blackbox: true,\n    optional: true\n  },\n  emailConfig: {\n    type: emailConfigSchema,\n    optional: true\n  }\n});\nBrands.attachSchema(Brands.schema);\nBrands.attachSchema(Brands.schemaExtra);\nBrands.publicFields = {\n  name: 1,\n  code: 1,\n  description: 1,\n  userId: 1,\n  createdAt: 1,\n  schema: 1,\n  emailConfig: 1\n};\nFactory.define('brand', Brands, {\n  name: function () {\n    return faker.random.word();\n  },\n  userId: function () {\n    return Random.id();\n  }\n});","map":{"version":3,"sources":["/imports/api/brands/brands.js"],"names":["module","export","Brands","emailConfigSchema","faker","importSync","v","Mongo","Random","Factory","SimpleSchema","BrandsCollection","insert","doc","callback","brand","Object","assign","code","id","substr","findOne","createdAt","Date","emailConfig","type","Collection","deny","update","remove","String","allowedValues","template","optional","schema","name","description","schemaExtra","userId","regEx","RegEx","Id","blackbox","attachSchema","publicFields","define","random","word"],"mappings":"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","file":"/imports/api/brands/brands.js.map","sourcesContent":["import faker from 'faker';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\n// Brand collection\nclass BrandsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    const brand = Object.assign({}, doc);\n\n    // generate code automatically\n    let code = Random.id().substr(0, 6);\n    while (this.findOne({ code })) {\n      code = Random.id().substr(0, 6);\n    }\n\n    brand.code = code;\n    brand.createdAt = new Date();\n    brand.emailConfig = { type: 'simple' };\n\n    return super.insert(brand, callback);\n  }\n}\n\nexport const Brands = new BrandsCollection('brands');\n\n// Deny all client-side updates since we will be using methods to manage\n// this collection\nBrands.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nexport const emailConfigSchema = new SimpleSchema({\n  type: {\n    type: String,\n    allowedValues: ['simple', 'custom'],\n  },\n  template: {\n    type: String,\n    optional: true,\n  },\n});\n\nBrands.schema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n});\n\nBrands.schemaExtra = new SimpleSchema({\n  code: {\n    type: String,\n  },\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  createdAt: {\n    type: Date,\n  },\n  schema: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n  emailConfig: {\n    type: emailConfigSchema,\n    optional: true,\n  },\n});\n\nBrands.attachSchema(Brands.schema);\nBrands.attachSchema(Brands.schemaExtra);\n\nBrands.publicFields = {\n  name: 1,\n  code: 1,\n  description: 1,\n  userId: 1,\n  createdAt: 1,\n  schema: 1,\n  emailConfig: 1,\n};\n\nFactory.define('brand', Brands, {\n  name: () => faker.random.word(),\n  userId: () => Random.id(),\n});\n"]},"hash":"3d5e42dabd85706a7eda709dd5cc99230eec5d66"}
