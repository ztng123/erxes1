{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"/imports/react-ui/engage/utils","imported":["methodCallback"],"specifiers":[{"kind":"named","imported":"methodCallback","local":"methodCallback"}]},{"source":"/imports/react-ui/common","imported":["Loading"],"specifiers":[{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"../components","imported":["AutoAndManualForm"],"specifiers":[{"kind":"named","imported":"AutoAndManualForm","local":"AutoAndManualForm"}]},{"source":"../graphql","imported":["queries"],"specifiers":[{"kind":"named","imported":"queries","local":"queries"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/engage/containers/AutoAndManualForm.js","filenameRelative":"/imports/react-ui/engage/containers/AutoAndManualForm.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/engage/containers/AutoAndManualForm.js.map","sourceFileName":"/imports/react-ui/engage/containers/AutoAndManualForm.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"AutoAndManualForm"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 2);\nvar methodCallback = void 0;\nmodule.importSync(\"/imports/react-ui/engage/utils\", {\n  methodCallback: function (v) {\n    methodCallback = v;\n  }\n}, 3);\nvar Loading = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 4);\nvar AutoAndManualForm = void 0;\nmodule.importSync(\"../components\", {\n  AutoAndManualForm: function (v) {\n    AutoAndManualForm = v;\n  }\n}, 5);\nvar queries = void 0;\nmodule.importSync(\"../graphql\", {\n  queries: function (v) {\n    queries = v;\n  }\n}, 6);\n\nvar AutoAndManualFormContainer = function (props) {\n  var engageMessageDetailQuery = props.engageMessageDetailQuery,\n      usersQuery = props.usersQuery,\n      segmentsQuery = props.segmentsQuery,\n      emailTemplatesQuery = props.emailTemplatesQuery,\n      messageId = props.messageId,\n      kind = props.kind,\n      customerCountsQuery = props.customerCountsQuery;\n\n  if (engageMessageDetailQuery.loading || usersQuery.loading || segmentsQuery.loading || emailTemplatesQuery.loading || customerCountsQuery.loading) {\n    return React.createElement(Loading, {\n      title: \"New message\",\n      spin: true,\n      sidebarSize: \"wide\"\n    });\n  }\n\n  var templates = emailTemplatesQuery.emailTemplates;\n  var message = engageMessageDetailQuery.engageMessageDetail;\n  var segments = segmentsQuery.segments;\n  var users = usersQuery.users; // TODO change query to get only customerCounts\n\n  var counts = customerCountsQuery.customerCounts.bySegment; // save\n\n  var save = function (doc) {\n    doc.kind = message ? message.kind : kind;\n\n    if (messageId) {\n      return Meteor.call('engage.messages.edit', {\n        id: messageId,\n        doc: doc\n      }, methodCallback);\n    }\n\n    return Meteor.call('engage.messages.add', {\n      doc: doc\n    }, methodCallback);\n  };\n\n  var updatedProps = (0, _extends3.default)({}, props, {\n    save: save,\n    message: message,\n    segments: segments,\n    templates: templates,\n    users: users,\n    counts: counts\n  });\n  return React.createElement(AutoAndManualForm, updatedProps);\n};\n\nAutoAndManualFormContainer.propTypes = {\n  messageId: PropTypes.string,\n  kind: PropTypes.string,\n  engageMessageDetailQuery: PropTypes.object,\n  usersQuery: PropTypes.object,\n  segmentsQuery: PropTypes.object,\n  emailTemplatesQuery: PropTypes.object,\n  customerCountsQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(queries.engageMessageDetail), {\n  name: 'engageMessageDetailQuery',\n  options: function (_ref) {\n    var messageId = _ref.messageId;\n    return {\n      fetchPolicy: 'network-only',\n      variables: {\n        _id: messageId\n      }\n    };\n  }\n}), graphql(gql(queries.users), {\n  name: 'usersQuery'\n}), graphql(gql(queries.emailTemplates), {\n  name: 'emailTemplatesQuery'\n}), graphql(gql(queries.segments), {\n  name: 'segmentsQuery'\n}), graphql(gql(queries.customerCounts), {\n  name: 'customerCountsQuery',\n  options: function () {\n    return {\n      variables: {\n        params: {}\n      }\n    };\n  }\n}))(AutoAndManualFormContainer));","map":{"version":3,"sources":["/imports/react-ui/engage/containers/AutoAndManualForm.js"],"names":["Meteor","module","importSync","v","React","PropTypes","compose","gql","graphql","methodCallback","Loading","AutoAndManualForm","queries","AutoAndManualFormContainer","engageMessageDetailQuery","props","usersQuery","segmentsQuery","emailTemplatesQuery","messageId","kind","customerCountsQuery","loading","templates","emailTemplates","message","engageMessageDetail","segments","users","counts","customerCounts","bySegment","save","doc","call","id","updatedProps","propTypes","string","object","export","exports","default","name","options","fetchPolicy","variables","_id","params"],"mappings":"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","file":"/imports/react-ui/engage/containers/AutoAndManualForm.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React, { PropTypes } from 'react';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { methodCallback } from '/imports/react-ui/engage/utils';\nimport { Loading } from '/imports/react-ui/common';\nimport { AutoAndManualForm } from '../components';\nimport { queries } from '../graphql';\n\nconst AutoAndManualFormContainer = props => {\n  const {\n    engageMessageDetailQuery,\n    usersQuery,\n    segmentsQuery,\n    emailTemplatesQuery,\n    messageId,\n    kind,\n    customerCountsQuery,\n  } = props;\n\n  if (\n    engageMessageDetailQuery.loading ||\n    usersQuery.loading ||\n    segmentsQuery.loading ||\n    emailTemplatesQuery.loading ||\n    customerCountsQuery.loading\n  ) {\n    return <Loading title=\"New message\" spin sidebarSize=\"wide\" />;\n  }\n  const templates = emailTemplatesQuery.emailTemplates;\n  const message = engageMessageDetailQuery.engageMessageDetail;\n  const segments = segmentsQuery.segments;\n  const users = usersQuery.users;\n\n  // TODO change query to get only customerCounts\n  const counts = customerCountsQuery.customerCounts.bySegment;\n\n  // save\n  const save = doc => {\n    doc.kind = message ? message.kind : kind;\n\n    if (messageId) {\n      return Meteor.call('engage.messages.edit', { id: messageId, doc }, methodCallback);\n    }\n\n    return Meteor.call('engage.messages.add', { doc }, methodCallback);\n  };\n\n  const updatedProps = {\n    ...props,\n    save,\n    message,\n    segments,\n    templates,\n    users,\n    counts,\n  };\n\n  return <AutoAndManualForm {...updatedProps} />;\n};\n\nAutoAndManualFormContainer.propTypes = {\n  messageId: PropTypes.string,\n  kind: PropTypes.string,\n  engageMessageDetailQuery: PropTypes.object,\n  usersQuery: PropTypes.object,\n  segmentsQuery: PropTypes.object,\n  emailTemplatesQuery: PropTypes.object,\n  customerCountsQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(gql(queries.engageMessageDetail), {\n    name: 'engageMessageDetailQuery',\n    options: ({ messageId }) => ({\n      fetchPolicy: 'network-only',\n      variables: {\n        _id: messageId,\n      },\n    }),\n  }),\n  graphql(gql(queries.users), { name: 'usersQuery' }),\n  graphql(gql(queries.emailTemplates), { name: 'emailTemplatesQuery' }),\n  graphql(gql(queries.segments), { name: 'segmentsQuery' }),\n  graphql(gql(queries.customerCounts), {\n    name: 'customerCountsQuery',\n    options: () => ({\n      variables: {\n        params: {},\n      },\n    }),\n  }),\n)(AutoAndManualFormContainer);\n"]},"hash":"a17b9b1bb1d1d05a1e7d8b39c758bab22cd07fe2"}
