{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/email_tests_setup.js","filenameRelative":"/packages/accounts-password/email_tests_setup.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/email_tests_setup.js.map","sourceFileName":"/packages/accounts-password/email_tests_setup.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"email_tests_setup"},"ignored":false,"code":"//\n// a mechanism to intercept emails sent to addressing including\n// the string \"intercept\", storing them in an array that can then\n// be retrieved using the getInterceptedEmails method\n//\nvar interceptedEmails = {}; // (email address) -> (array of options)\n// add html email templates that just contain the url\n\nAccounts.emailTemplates.resetPassword.html = Accounts.emailTemplates.enrollAccount.html = Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n  return url;\n}; // override the from address\n\n\nAccounts.emailTemplates.resetPassword.from = Accounts.emailTemplates.enrollAccount.from = Accounts.emailTemplates.verifyEmail.from = function (user) {\n  return 'test@meteor.com';\n}; // add a custom header to check against\n\n\nAccounts.emailTemplates.headers = {\n  'My-Custom-Header': 'Cool'\n};\nEmailTest.hookSend(function (options) {\n  var to = options.to;\n\n  if (!to || to.toUpperCase().indexOf('INTERCEPT') === -1) {\n    return true; // go ahead and send\n  } else {\n    if (!interceptedEmails[to]) interceptedEmails[to] = [];\n    interceptedEmails[to].push(options);\n    return false; // skip sending\n  }\n});\nMeteor.methods({\n  getInterceptedEmails: function (email) {\n    check(email, String);\n    return interceptedEmails[email];\n  },\n  addEmailForTestAndVerify: function (email) {\n    check(email, String);\n    Meteor.users.update({\n      _id: this.userId\n    }, {\n      $push: {\n        emails: {\n          address: email,\n          verified: false\n        }\n      }\n    });\n    Accounts.sendVerificationEmail(this.userId, email);\n  },\n  createUserOnServer: function (email) {\n    check(email, String);\n    var userId = Accounts.createUser({\n      email: email\n    });\n    Accounts.sendEnrollmentEmail(userId);\n    return Meteor.users.findOne(userId);\n  }\n});","map":{"version":3,"sources":["/packages/accounts-password/email_tests_setup.js"],"names":["interceptedEmails","Accounts","emailTemplates","resetPassword","html","enrollAccount","verifyEmail","user","url","from","headers","EmailTest","hookSend","options","to","toUpperCase","indexOf","push","Meteor","methods","getInterceptedEmails","email","check","String","addEmailForTestAndVerify","users","update","_id","userId","$push","emails","address","verified","sendVerificationEmail","createUserOnServer","createUser","sendEnrollmentEmail","findOne"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,oBAAoB,EAAxB,C,CAA4B;AAE5B;;AACAC,SAASC,cAAT,CAAwBC,aAAxB,CAAsCC,IAAtC,GACEH,SAASC,cAAT,CAAwBG,aAAxB,CAAsCD,IAAtC,GACAH,SAASC,cAAT,CAAwBI,WAAxB,CAAoCF,IAApC,GAA2C,UAAUG,IAAV,EAAgBC,GAAhB,EAAqB;AAC9D,SAAOA,GAAP;AACD,CAJH,C,CAMA;;;AACAP,SAASC,cAAT,CAAwBC,aAAxB,CAAsCM,IAAtC,GACER,SAASC,cAAT,CAAwBG,aAAxB,CAAsCI,IAAtC,GACER,SAASC,cAAT,CAAwBI,WAAxB,CAAoCG,IAApC,GAA2C,UAAUF,IAAV,EAAgB;AACzD,SAAO,iBAAP;AACD,CAJL,C,CAMA;;;AACAN,SAASC,cAAT,CAAwBQ,OAAxB,GAAkC;AAChC,sBAAqB;AADW,CAAlC;AAIAC,UAAUC,QAAV,CAAmB,UAAUC,OAAV,EAAmB;AACpC,MAAIC,KAAKD,QAAQC,EAAjB;;AACA,MAAI,CAACA,EAAD,IAAOA,GAAGC,WAAH,GAAiBC,OAAjB,CAAyB,WAAzB,MAA0C,CAAC,CAAtD,EAAyD;AACvD,WAAO,IAAP,CADuD,CAC1C;AACd,GAFD,MAEO;AACL,QAAI,CAAChB,kBAAkBc,EAAlB,CAAL,EACEd,kBAAkBc,EAAlB,IAAwB,EAAxB;AAEFd,sBAAkBc,EAAlB,EAAsBG,IAAtB,CAA2BJ,OAA3B;AACA,WAAO,KAAP,CALK,CAKS;AACf;AACF,CAXD;AAaAK,OAAOC,OAAP,CAAe;AACbC,wBAAsB,UAAUC,KAAV,EAAiB;AACrCC,UAAMD,KAAN,EAAaE,MAAb;AACA,WAAOvB,kBAAkBqB,KAAlB,CAAP;AACD,GAJY;AAMbG,4BAA0B,UAAUH,KAAV,EAAiB;AACzCC,UAAMD,KAAN,EAAaE,MAAb;AACAL,WAAOO,KAAP,CAAaC,MAAb,CACE;AAACC,WAAK,KAAKC;AAAX,KADF,EAEE;AAACC,aAAO;AAACC,gBAAQ;AAACC,mBAASV,KAAV;AAAiBW,oBAAU;AAA3B;AAAT;AAAR,KAFF;AAGA/B,aAASgC,qBAAT,CAA+B,KAAKL,MAApC,EAA4CP,KAA5C;AACD,GAZY;AAcba,sBAAoB,UAAUb,KAAV,EAAiB;AACnCC,UAAMD,KAAN,EAAaE,MAAb;AACA,QAAIK,SAAS3B,SAASkC,UAAT,CAAoB;AAACd,aAAOA;AAAR,KAApB,CAAb;AACApB,aAASmC,mBAAT,CAA6BR,MAA7B;AACA,WAAOV,OAAOO,KAAP,CAAaY,OAAb,CAAqBT,MAArB,CAAP;AACD;AAnBY,CAAf","file":"/packages/accounts-password/email_tests_setup.js.map","sourcesContent":["//\n// a mechanism to intercept emails sent to addressing including\n// the string \"intercept\", storing them in an array that can then\n// be retrieved using the getInterceptedEmails method\n//\nvar interceptedEmails = {}; // (email address) -> (array of options)\n\n// add html email templates that just contain the url\nAccounts.emailTemplates.resetPassword.html =\n  Accounts.emailTemplates.enrollAccount.html =\n  Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n    return url;\n  };\n\n// override the from address\nAccounts.emailTemplates.resetPassword.from =\n  Accounts.emailTemplates.enrollAccount.from =\n    Accounts.emailTemplates.verifyEmail.from = function (user) {\n      return 'test@meteor.com';\n    };\n\n// add a custom header to check against\nAccounts.emailTemplates.headers = {\n  'My-Custom-Header' : 'Cool'\n};\n\nEmailTest.hookSend(function (options) {\n  var to = options.to;\n  if (!to || to.toUpperCase().indexOf('INTERCEPT') === -1) {\n    return true; // go ahead and send\n  } else {\n    if (!interceptedEmails[to])\n      interceptedEmails[to] = [];\n\n    interceptedEmails[to].push(options);\n    return false; // skip sending\n  }\n});\n\nMeteor.methods({\n  getInterceptedEmails: function (email) {\n    check(email, String);\n    return interceptedEmails[email];\n  },\n\n  addEmailForTestAndVerify: function (email) {\n    check(email, String);\n    Meteor.users.update(\n      {_id: this.userId},\n      {$push: {emails: {address: email, verified: false}}});\n    Accounts.sendVerificationEmail(this.userId, email);\n  },\n\n  createUserOnServer: function (email) {\n    check(email, String);\n    var userId = Accounts.createUser({email: email});\n    Accounts.sendEnrollmentEmail(userId);\n    return Meteor.users.findOne(userId);\n  }\n});\n"]},"hash":"38409c2d145636e1ccac17131923d8cba79c0e82"}
