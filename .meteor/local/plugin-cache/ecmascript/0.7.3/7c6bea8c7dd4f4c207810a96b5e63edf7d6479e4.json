{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./constants","imported":["types","connectors","dateUnits"],"specifiers":[{"kind":"named","imported":"types","local":"types"},{"kind":"named","imported":"connectors","local":"connectors"},{"kind":"named","imported":"dateUnits","local":"dateUnits"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/api/customers/segments.js","filenameRelative":"/imports/api/customers/segments.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/customers/segments.js.map","sourceFileName":"/imports/api/customers/segments.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"segments"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar types = void 0,\n    connectors = void 0,\n    dateUnits = void 0;\nmodule.importSync(\"./constants\", {\n  types: function (v) {\n    types = v;\n  },\n  connectors: function (v) {\n    connectors = v;\n  },\n  dateUnits: function (v) {\n    dateUnits = v;\n  }\n}, 2);\nvar conditionSchema = new SimpleSchema({\n  field: {\n    type: String\n  },\n  operator: {\n    type: String\n  },\n  value: {\n    type: String,\n    optional: true\n  },\n  dateUnit: {\n    type: String,\n    optional: true,\n    allowedValues: Object.keys(dateUnits)\n  },\n  type: {\n    type: String,\n    allowedValues: Object.keys(types)\n  }\n});\nvar schema = new SimpleSchema({\n  name: {\n    type: String\n  },\n  description: {\n    type: String,\n    optional: true\n  },\n  subOf: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  color: {\n    type: String\n  },\n  connector: {\n    type: String,\n    allowedValues: Object.keys(connectors)\n  },\n  conditions: {\n    type: [conditionSchema]\n  }\n});\n\nvar SegmentsCollection = function (_Mongo$Collection) {\n  (0, _inherits3.default)(SegmentsCollection, _Mongo$Collection);\n\n  function SegmentsCollection() {\n    (0, _classCallCheck3.default)(this, SegmentsCollection);\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));\n  }\n\n  SegmentsCollection.prototype.insert = function () {\n    function insert(doc, callback) {\n      return _Mongo$Collection.prototype.insert.call(this, doc, callback);\n    }\n\n    return insert;\n  }();\n\n  SegmentsCollection.prototype.remove = function () {\n    function remove(selector, callback) {\n      return _Mongo$Collection.prototype.remove.call(this, selector, callback);\n    }\n\n    return remove;\n  }();\n\n  return SegmentsCollection;\n}(Mongo.Collection);\n\nvar Segments = new SegmentsCollection('segments');\nSegments.attachSchema(schema);\nSegments.helpers({\n  getParentSegment: function () {\n    return Segments.findOne(this.subOf);\n  },\n  getSubSegments: function () {\n    return Segments.find({\n      subOf: this._id\n    }).fetch();\n  }\n});\nmodule.export(\"default\", exports.default = Segments);","map":{"version":3,"sources":["/imports/api/customers/segments.js"],"names":["Mongo","module","importSync","v","SimpleSchema","types","connectors","dateUnits","conditionSchema","field","type","String","operator","value","optional","dateUnit","allowedValues","Object","keys","schema","name","description","subOf","regEx","RegEx","Id","color","connector","conditions","SegmentsCollection","insert","doc","callback","remove","selector","Collection","Segments","attachSchema","helpers","getParentSegment","findOne","getSubSegments","find","_id","fetch","export","exports","default"],"mappings":";;;;;;;;;;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,UAAP,CAAkB,cAAlB,EAAiC;AAACF,SAAM,UAASG,CAAT,EAAW;AAACH,YAAMG,CAAN;AAAQ;AAA3B,CAAjC,EAA8D,CAA9D;AAAiE,IAAIC,qBAAJ;AAAiBH,OAAOC,UAAP,CAAkB,6BAAlB,EAAgD;AAACE,gBAAa,UAASD,CAAT,EAAW;AAACC,mBAAaD,CAAb;AAAe;AAAzC,CAAhD,EAA2F,CAA3F;AAA8F,IAAIE,cAAJ;AAAA,IAAUC,mBAAV;AAAA,IAAqBC,kBAArB;AAA+BN,OAAOC,UAAP,CAAkB,aAAlB,EAAgC;AAACG,SAAM,UAASF,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ,GAA3B;AAA4BG,cAAW,UAASH,CAAT,EAAW;AAACG,iBAAWH,CAAX;AAAa,GAAhE;AAAiEI,aAAU,UAASJ,CAAT,EAAW;AAACI,gBAAUJ,CAAV;AAAY;AAAnG,CAAhC,EAAqI,CAArI;AAIzN,IAAMK,kBAAkB,IAAIJ,YAAJ,CAAiB;AACvCK,SAAO;AACLC,UAAMC;AADD,GADgC;AAIvCC,YAAU;AACRF,UAAMC;AADE,GAJ6B;AAOvCE,SAAO;AACLH,UAAMC,MADD;AAELG,cAAU;AAFL,GAPgC;AAWvCC,YAAU;AACRL,UAAMC,MADE;AAERG,cAAU,IAFF;AAGRE,mBAAeC,OAAOC,IAAP,CAAYX,SAAZ;AAHP,GAX6B;AAgBvCG,QAAM;AACJA,UAAMC,MADF;AAEJK,mBAAeC,OAAOC,IAAP,CAAYb,KAAZ;AAFX;AAhBiC,CAAjB,CAAxB;AAsBA,IAAMc,SAAS,IAAIf,YAAJ,CAAiB;AAC9BgB,QAAM;AACJV,UAAMC;AADF,GADwB;AAI9BU,eAAa;AACXX,UAAMC,MADK;AAEXG,cAAU;AAFC,GAJiB;AAQ9BQ,SAAO;AACLZ,UAAMC,MADD;AAELY,WAAOnB,aAAaoB,KAAb,CAAmBC,EAFrB;AAGLX,cAAU;AAHL,GARuB;AAa9BY,SAAO;AACLhB,UAAMC;AADD,GAbuB;AAgB9BgB,aAAW;AACTjB,UAAMC,MADG;AAETK,mBAAeC,OAAOC,IAAP,CAAYZ,UAAZ;AAFN,GAhBmB;AAoB9BsB,cAAY;AACVlB,UAAM,CAACF,eAAD;AADI;AApBkB,CAAjB,CAAf;;IAyBMqB,kB;;;;;;;;+BACJC,M;oBAAOC,G,EAAKC,Q,EAAU;AACpB,aAAO,4BAAMF,MAAN,YAAaC,GAAb,EAAkBC,QAAlB,CAAP;AACD;;;;;+BAEDC,M;oBAAOC,Q,EAAUF,Q,EAAU;AACzB,aAAO,4BAAMC,MAAN,YAAaC,QAAb,EAAuBF,QAAvB,CAAP;AACD;;;;;;EAP8BhC,MAAMmC,U;;AAUvC,IAAMC,WAAW,IAAIP,kBAAJ,CAAuB,UAAvB,CAAjB;AAEAO,SAASC,YAAT,CAAsBlB,MAAtB;AAEAiB,SAASE,OAAT,CAAiB;AACfC,kBADe,cACI;AACjB,WAAOH,SAASI,OAAT,CAAiB,KAAKlB,KAAtB,CAAP;AACD,GAHc;AAIfmB,gBAJe,cAIE;AACf,WAAOL,SAASM,IAAT,CAAc;AAAEpB,aAAO,KAAKqB;AAAd,KAAd,EAAmCC,KAAnC,EAAP;AACD;AANc,CAAjB;AAjEA3C,OAAO4C,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GA0ETX,QA1Ef","file":"/imports/api/customers/segments.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { types, connectors, dateUnits } from './constants';\n\nconst conditionSchema = new SimpleSchema({\n  field: {\n    type: String,\n  },\n  operator: {\n    type: String,\n  },\n  value: {\n    type: String,\n    optional: true,\n  },\n  dateUnit: {\n    type: String,\n    optional: true,\n    allowedValues: Object.keys(dateUnits),\n  },\n  type: {\n    type: String,\n    allowedValues: Object.keys(types),\n  },\n});\n\nconst schema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n  subOf: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true,\n  },\n  color: {\n    type: String,\n  },\n  connector: {\n    type: String,\n    allowedValues: Object.keys(connectors),\n  },\n  conditions: {\n    type: [conditionSchema],\n  },\n});\n\nclass SegmentsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    return super.insert(doc, callback);\n  }\n\n  remove(selector, callback) {\n    return super.remove(selector, callback);\n  }\n}\n\nconst Segments = new SegmentsCollection('segments');\n\nSegments.attachSchema(schema);\n\nSegments.helpers({\n  getParentSegment() {\n    return Segments.findOne(this.subOf);\n  },\n  getSubSegments() {\n    return Segments.find({ subOf: this._id }).fetch();\n  },\n});\n\nexport default Segments;\n"]},"hash":"7c6bea8c7dd4f4c207810a96b5e63edf7d6479e4"}
