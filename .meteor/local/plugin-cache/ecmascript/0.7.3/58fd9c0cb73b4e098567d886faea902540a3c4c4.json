{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","taggedTemplateLiteralLoose","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"/imports/api/tags/constants","imported":["TAG_TYPES"],"specifiers":[{"kind":"named","imported":"TAG_TYPES","local":"TAG_TYPES"}]},{"source":"/imports/react-ui/common","imported":["Bulk","Loading"],"specifiers":[{"kind":"named","imported":"Bulk","local":"Bulk"},{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"../components","imported":["MessageList"],"specifiers":[{"kind":"named","imported":"MessageList","local":"MessageList"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/engage/containers/MessageList.js","filenameRelative":"/imports/react-ui/engage/containers/MessageList.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/engage/containers/MessageList.js.map","sourceFileName":"/imports/react-ui/engage/containers/MessageList.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"MessageList"},"ignored":false,"code":"var _taggedTemplateLiteralLoose2 = require(\"babel-runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _templateObject = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query engageMessages($kind: String, $status: String, $tag: String) {\\n        engageMessages(kind: $kind, status: $status, tag: $tag) {\\n          _id\\n          title\\n          deliveryReports\\n          isDraft\\n          isLive\\n          createdDate\\n          segment {\\n            _id\\n            name\\n          }\\n          fromUser {\\n            _id\\n            details\\n          }\\n          tagIds\\n        }\\n      }\\n    \"], [\"\\n      query engageMessages($kind: String, $status: String, $tag: String) {\\n        engageMessages(kind: $kind, status: $status, tag: $tag) {\\n          _id\\n          title\\n          deliveryReports\\n          isDraft\\n          isLive\\n          createdDate\\n          segment {\\n            _id\\n            name\\n          }\\n          fromUser {\\n            _id\\n            details\\n          }\\n          tagIds\\n        }\\n      }\\n    \"]),\n    _templateObject2 = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query tags($type: String) {\\n        tags(type: $type) {\\n          _id\\n          name\\n          type\\n          colorCode\\n        }\\n      }\\n    \"], [\"\\n      query tags($type: String) {\\n        tags(type: $type) {\\n          _id\\n          name\\n          type\\n          colorCode\\n        }\\n      }\\n    \"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 1);\nvar TAG_TYPES = void 0;\nmodule.importSync(\"/imports/api/tags/constants\", {\n  TAG_TYPES: function (v) {\n    TAG_TYPES = v;\n  }\n}, 2);\nvar Bulk = void 0,\n    Loading = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Bulk: function (v) {\n    Bulk = v;\n  },\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 3);\nvar MessageList = void 0;\nmodule.importSync(\"../components\", {\n  MessageList: function (v) {\n    MessageList = v;\n  }\n}, 4);\n\nvar MessageListContainer = function (_Bulk) {\n  (0, _inherits3.default)(MessageListContainer, _Bulk);\n\n  function MessageListContainer() {\n    (0, _classCallCheck3.default)(this, MessageListContainer);\n    return (0, _possibleConstructorReturn3.default)(this, _Bulk.apply(this, arguments));\n  }\n\n  MessageListContainer.prototype.render = function () {\n    function render() {\n      var _props = this.props,\n          queryParams = _props.queryParams,\n          tagsQuery = _props.tagsQuery,\n          engageMessagesQuery = _props.engageMessagesQuery;\n\n      if (tagsQuery.loading || engageMessagesQuery.loading) {\n        return React.createElement(Loading, {\n          title: \"Engage\"\n        });\n      }\n\n      var updatedProps = {\n        kind: queryParams.kind,\n        messages: engageMessagesQuery.engageMessages,\n        tags: tagsQuery.tags,\n        bulk: this.state.bulk,\n        toggleBulk: this.toggleBulk,\n        emptyBulk: this.emptyBulk,\n        refetch: engageMessagesQuery.refetch\n      };\n      return React.createElement(MessageList, updatedProps);\n    }\n\n    return render;\n  }();\n\n  return MessageListContainer;\n}(Bulk);\n\nMessageListContainer.propTypes = {\n  type: PropTypes.string,\n  queryParams: PropTypes.object,\n  engageMessagesQuery: PropTypes.object,\n  tagsQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(_templateObject), {\n  name: 'engageMessagesQuery',\n  options: function (_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      fetchPolicy: 'network-only',\n      variables: {\n        kind: queryParams.kind,\n        status: queryParams.status,\n        tag: queryParams.tag\n      }\n    };\n  }\n}), graphql(gql(_templateObject2), {\n  name: 'tagsQuery',\n  options: function () {\n    return {\n      variables: {\n        type: TAG_TYPES.ENGAGE_MESSAGE\n      }\n    };\n  }\n}))(MessageListContainer));","map":{"version":3,"sources":["/imports/react-ui/engage/containers/MessageList.js"],"names":["React","PropTypes","module","importSync","v","compose","gql","graphql","TAG_TYPES","Bulk","Loading","MessageList","MessageListContainer","render","props","queryParams","tagsQuery","engageMessagesQuery","loading","updatedProps","kind","messages","engageMessages","tags","bulk","state","toggleBulk","emptyBulk","refetch","propTypes","type","string","object","export","exports","default","name","options","fetchPolicy","variables","status","tag","ENGAGE_MESSAGE"],"mappings":"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","file":"/imports/react-ui/engage/containers/MessageList.js.map","sourcesContent":["import React, { PropTypes } from 'react';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { TAG_TYPES } from '/imports/api/tags/constants';\nimport { Bulk, Loading } from '/imports/react-ui/common';\nimport { MessageList } from '../components';\n\nclass MessageListContainer extends Bulk {\n  render() {\n    const { queryParams, tagsQuery, engageMessagesQuery } = this.props;\n\n    if (tagsQuery.loading || engageMessagesQuery.loading) {\n      return <Loading title=\"Engage\" />;\n    }\n\n    const updatedProps = {\n      kind: queryParams.kind,\n      messages: engageMessagesQuery.engageMessages,\n      tags: tagsQuery.tags,\n      bulk: this.state.bulk,\n      toggleBulk: this.toggleBulk,\n      emptyBulk: this.emptyBulk,\n      refetch: engageMessagesQuery.refetch,\n    };\n\n    return <MessageList {...updatedProps} />;\n  }\n}\n\nMessageListContainer.propTypes = {\n  type: PropTypes.string,\n  queryParams: PropTypes.object,\n  engageMessagesQuery: PropTypes.object,\n  tagsQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(\n    gql`\n      query engageMessages($kind: String, $status: String, $tag: String) {\n        engageMessages(kind: $kind, status: $status, tag: $tag) {\n          _id\n          title\n          deliveryReports\n          isDraft\n          isLive\n          createdDate\n          segment {\n            _id\n            name\n          }\n          fromUser {\n            _id\n            details\n          }\n          tagIds\n        }\n      }\n    `,\n    {\n      name: 'engageMessagesQuery',\n      options: ({ queryParams }) => ({\n        fetchPolicy: 'network-only',\n        variables: {\n          kind: queryParams.kind,\n          status: queryParams.status,\n          tag: queryParams.tag,\n        },\n      }),\n    },\n  ),\n  graphql(\n    gql`\n      query tags($type: String) {\n        tags(type: $type) {\n          _id\n          name\n          type\n          colorCode\n        }\n      }\n    `,\n    {\n      name: 'tagsQuery',\n      options: () => ({\n        variables: {\n          type: TAG_TYPES.ENGAGE_MESSAGE,\n        },\n      }),\n    },\n  ),\n)(MessageListContainer);\n"]},"hash":"58fd9c0cb73b4e098567d886faea902540a3c4c4"}
