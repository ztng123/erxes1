{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"meteor/kadira:flow-router","imported":["FlowRouter"],"specifiers":[{"kind":"named","imported":"FlowRouter","local":"FlowRouter"}]},{"source":"strip","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"strip"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classNames"}]},{"source":"/imports/react-ui/common","imported":["NameCard","Tags"],"specifiers":[{"kind":"named","imported":"NameCard","local":"NameCard"},{"kind":"named","imported":"Tags","local":"Tags"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/common/conversationsList/SimpleRow.js","filenameRelative":"/imports/react-ui/common/conversationsList/SimpleRow.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/common/conversationsList/SimpleRow.js.map","sourceFileName":"/imports/react-ui/common/conversationsList/SimpleRow.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"SimpleRow"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    PropTypes = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 1);\nvar FlowRouter = void 0;\nmodule.importSync(\"meteor/kadira:flow-router\", {\n  FlowRouter: function (v) {\n    FlowRouter = v;\n  }\n}, 2);\nvar strip = void 0;\nmodule.importSync(\"strip\", {\n  \"default\": function (v) {\n    strip = v;\n  }\n}, 3);\nvar classNames = void 0;\nmodule.importSync(\"classnames\", {\n  \"default\": function (v) {\n    classNames = v;\n  }\n}, 4);\nvar NameCard = void 0,\n    Tags = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  NameCard: function (v) {\n    NameCard = v;\n  },\n  Tags: function (v) {\n    Tags = v;\n  }\n}, 5);\nvar propTypes = {\n  conversation: PropTypes.object.isRequired,\n  channelId: PropTypes.string,\n  isRead: PropTypes.bool,\n  toggleBulk: PropTypes.func\n};\n\nvar SimpleRow = function (_Component) {\n  (0, _inherits3.default)(SimpleRow, _Component);\n\n  function SimpleRow(props) {\n    (0, _classCallCheck3.default)(this, SimpleRow);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.goDetail = _this.goDetail.bind(_this);\n    _this.toggleBulk = _this.toggleBulk.bind(_this);\n    _this.renderCheckbox = _this.renderCheckbox.bind(_this);\n    return _this;\n  }\n\n  SimpleRow.prototype.toggleBulk = function () {\n    function toggleBulk(e) {\n      var _props = this.props,\n          toggleBulk = _props.toggleBulk,\n          conversation = _props.conversation;\n      toggleBulk(conversation, e.target.checked);\n    }\n\n    return toggleBulk;\n  }();\n\n  SimpleRow.prototype.goDetail = function () {\n    function goDetail() {\n      FlowRouter.go('inbox/details', {\n        id: this.props.conversation._id\n      }, FlowRouter.current().queryParams);\n    }\n\n    return goDetail;\n  }();\n\n  SimpleRow.prototype.renderCheckbox = function () {\n    function renderCheckbox() {\n      if (!this.props.toggleBulk) {\n        return null;\n      }\n\n      return React.createElement(\n        \"div\",\n        {\n          className: \"column\"\n        },\n        React.createElement(\"input\", {\n          type: \"checkbox\",\n          onChange: this.toggleBulk\n        })\n      );\n    }\n\n    return renderCheckbox;\n  }();\n\n  SimpleRow.prototype.render = function () {\n    function render() {\n      var _props2 = this.props,\n          conversation = _props2.conversation,\n          isRead = _props2.isRead;\n      var createdAt = conversation.createdAt,\n          content = conversation.content,\n          tags = conversation.tags;\n      var customer = conversation.customer || {};\n      var integration = conversation.integration || {};\n      var brand = integration.brand || {};\n      var brandName = brand.name;\n      var rowClasses = classNames('simple-row', {\n        unread: !isRead\n      }, 'baseline-row');\n      var isExistingCustomer = customer && customer._id;\n      return React.createElement(\n        \"li\",\n        {\n          className: rowClasses\n        },\n        this.renderCheckbox(),\n        React.createElement(\n          \"div\",\n          {\n            className: \"body\"\n          },\n          React.createElement(\n            \"div\",\n            {\n              className: \"items-horizontal\"\n            },\n            React.createElement(\n              \"div\",\n              {\n                className: \"column\"\n              },\n              isExistingCustomer && customer.name || isExistingCustomer && customer.email || isExistingCustomer && customer.phone ? React.createElement(NameCard.Avatar, {\n                size: 40,\n                customer: customer\n              }) : null\n            ),\n            React.createElement(\n              \"header\",\n              null,\n              React.createElement(\n                \"span\",\n                {\n                  className: \"customer-name\"\n                },\n                isExistingCustomer && customer.name\n              ),\n              React.createElement(\n                \"div\",\n                {\n                  className: \"customer-email\"\n                },\n                isExistingCustomer && customer.email || isExistingCustomer && customer.phone\n              )\n            )\n          ),\n          React.createElement(\n            \"div\",\n            {\n              className: \"content\",\n              onClick: this.goDetail\n            },\n            React.createElement(\n              \"span\",\n              {\n                className: \"brandname hidden-tb\"\n              },\n              \"to \",\n              brandName,\n              React.createElement(\n                \"time\",\n                null,\n                moment(createdAt).format('YYYY-MM-DD, HH:mm:ss')\n              ),\n              \"- \",\n              ' '\n            ),\n            strip(content)\n          ),\n          React.createElement(Tags, {\n            tags: tags,\n            size: \"small\"\n          })\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return SimpleRow;\n}(Component);\n\nSimpleRow.propTypes = propTypes;\nmodule.export(\"default\", exports.default = SimpleRow);","map":{"version":3,"sources":["/imports/react-ui/common/conversationsList/SimpleRow.js"],"names":["React","PropTypes","Component","module","importSync","v","moment","FlowRouter","strip","classNames","NameCard","Tags","propTypes","conversation","object","isRequired","channelId","string","isRead","bool","toggleBulk","func","SimpleRow","props","goDetail","bind","renderCheckbox","e","target","checked","go","id","_id","current","queryParams","render","createdAt","content","tags","customer","integration","brand","brandName","name","rowClasses","unread","isExistingCustomer","email","phone","format","export","exports","default"],"mappings":"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","file":"/imports/react-ui/common/conversationsList/SimpleRow.js.map","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport moment from 'moment';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport strip from 'strip';\nimport classNames from 'classnames';\nimport { NameCard, Tags } from '/imports/react-ui/common';\n\nconst propTypes = {\n  conversation: PropTypes.object.isRequired,\n  channelId: PropTypes.string,\n  isRead: PropTypes.bool,\n  toggleBulk: PropTypes.func,\n};\n\nclass SimpleRow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.goDetail = this.goDetail.bind(this);\n    this.toggleBulk = this.toggleBulk.bind(this);\n    this.renderCheckbox = this.renderCheckbox.bind(this);\n  }\n\n  toggleBulk(e) {\n    const { toggleBulk, conversation } = this.props;\n    toggleBulk(conversation, e.target.checked);\n  }\n\n  goDetail() {\n    FlowRouter.go(\n      'inbox/details',\n      { id: this.props.conversation._id },\n      FlowRouter.current().queryParams,\n    );\n  }\n\n  renderCheckbox() {\n    if (!this.props.toggleBulk) {\n      return null;\n    }\n\n    return (\n      <div className=\"column\">\n        <input type=\"checkbox\" onChange={this.toggleBulk} />\n      </div>\n    );\n  }\n\n  render() {\n    const { conversation, isRead } = this.props;\n    const { createdAt, content, tags } = conversation;\n    const customer = conversation.customer || {};\n    const integration = conversation.integration || {};\n    const brand = integration.brand || {};\n    const brandName = brand.name;\n    const rowClasses = classNames('simple-row', { unread: !isRead }, 'baseline-row');\n    const isExistingCustomer = customer && customer._id;\n\n    return (\n      <li className={rowClasses}>\n        {this.renderCheckbox()}\n        <div className=\"body\">\n          <div className=\"items-horizontal\">\n            <div className=\"column\">\n              {(isExistingCustomer && customer.name) ||\n                (isExistingCustomer && customer.email) ||\n                (isExistingCustomer && customer.phone)\n                ? <NameCard.Avatar size={40} customer={customer} />\n                : null}\n            </div>\n\n            <header>\n              <span className=\"customer-name\">\n                {isExistingCustomer && customer.name}\n              </span>\n              <div className=\"customer-email\">\n                {(isExistingCustomer && customer.email) || (isExistingCustomer && customer.phone)}\n              </div>\n            </header>\n          </div>\n          <div className=\"content\" onClick={this.goDetail}>\n            <span className=\"brandname hidden-tb\">\n              to {brandName}\n              <time>\n                {moment(createdAt).format('YYYY-MM-DD, HH:mm:ss')}\n              </time>\n              - {' '}\n            </span>\n            {strip(content)}\n          </div>\n          <Tags tags={tags} size=\"small\" />\n        </div>\n      </li>\n    );\n  }\n}\n\nSimpleRow.propTypes = propTypes;\n\nexport default SimpleRow;\n"]},"hash":"b80fd11c0f93e03b7a49ea34fbe451dde36ed890"}
