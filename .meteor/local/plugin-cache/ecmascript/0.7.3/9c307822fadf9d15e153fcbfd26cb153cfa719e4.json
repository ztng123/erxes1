{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mdg:validated-method/validated-method.js","filenameRelative":"/packages/mdg:validated-method/validated-method.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mdg:validated-method/validated-method.js.map","sourceFileName":"/packages/mdg:validated-method/validated-method.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"validated-method"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/* global ValidatedMethod:true */ValidatedMethod = function () {\n  function ValidatedMethod(options) {\n    var _connection$methods;\n\n    (0, _classCallCheck3.default)(this, ValidatedMethod);\n    // Default to no mixins\n    options.mixins = options.mixins || [];\n    check(options.mixins, [Function]);\n    check(options.name, String);\n    options = applyMixins(options, options.mixins); // connection argument defaults to Meteor, which is where Methods are defined on client and\n    // server\n\n    options.connection = options.connection || Meteor; // Allow validate: null shorthand for methods that take no arguments\n\n    if (options.validate === null) {\n      options.validate = function () {};\n    } // If this is null/undefined, make it an empty object\n\n\n    options.applyOptions = options.applyOptions || {};\n    check(options, Match.ObjectIncluding({\n      name: String,\n      validate: Function,\n      run: Function,\n      mixins: [Function],\n      connection: Object,\n      applyOptions: Object\n    })); // Default options passed to Meteor.apply, can be overridden with applyOptions\n\n    var defaultApplyOptions = {\n      // Make it possible to get the ID of an inserted item\n      returnStubValue: true,\n      // Don't call the server method if the client stub throws an error, so that we don't end\n      // up doing validations twice\n      throwStubExceptions: true\n    };\n    options.applyOptions = _.extend({}, defaultApplyOptions, options.applyOptions); // Attach all options to the ValidatedMethod instance\n\n    _.extend(this, options);\n\n    var method = this;\n    this.connection.methods((_connection$methods = {}, _connection$methods[options.name] = function (args) {\n      // Silence audit-argument-checks since arguments are always checked when using this package\n      check(args, Match.Any);\n      var methodInvocation = this;\n      return method._execute(methodInvocation, args);\n    }, _connection$methods));\n  }\n\n  ValidatedMethod.prototype.call = function () {\n    function call(args, callback) {\n      // Accept calling with just a callback\n      if (_.isFunction(args)) {\n        callback = args;\n        args = {};\n      }\n\n      try {\n        return this.connection.apply(this.name, [args], this.applyOptions, callback);\n      } catch (err) {\n        if (callback) {\n          // Get errors from the stub in the same way as from the server-side method\n          callback(err);\n        } else {\n          // No callback passed, throw instead of silently failing; this is what\n          // \"normal\" Methods do if you don't pass a callback.\n          throw err;\n        }\n      }\n    }\n\n    return call;\n  }();\n\n  ValidatedMethod.prototype._execute = function () {\n    function _execute(methodInvocation, args) {\n      methodInvocation = methodInvocation || {}; // Add `this.name` to reference the Method name\n\n      methodInvocation.name = this.name;\n      var validateResult = this.validate.bind(methodInvocation)(args);\n\n      if (typeof validateResult !== 'undefined') {\n        throw new Error(\"Returning from validate doesn't do anything; perhaps you meant to throw an error?\");\n      }\n\n      return this.run.bind(methodInvocation)(args);\n    }\n\n    return _execute;\n  }();\n\n  return ValidatedMethod;\n}(); // Mixins get a chance to transform the arguments before they are passed to the actual Method\n\n\nfunction applyMixins(args, mixins) {\n  // You can pass nested arrays so that people can ship mixin packs\n  var flatMixins = _.flatten(mixins); // Save name of the method here, so we can attach it to potential error messages\n\n\n  var _args = args,\n      name = _args.name;\n  flatMixins.forEach(function (mixin) {\n    args = mixin(args);\n\n    if (!Match.test(args, Object)) {\n      var functionName = mixin.toString().match(/function\\s(\\w+)/);\n      var msg = 'One of the mixins';\n\n      if (functionName) {\n        msg = \"The function '\" + functionName[1] + \"'\";\n      }\n\n      throw new Error(\"Error in \" + name + \" method: \" + msg + \" didn't return the options object.\");\n    }\n  });\n  return args;\n}","map":{"version":3,"sources":["/packages/mdg:validated-method/validated-method.js"],"names":["ValidatedMethod","options","mixins","check","Function","name","String","applyMixins","connection","Meteor","validate","applyOptions","Match","ObjectIncluding","run","Object","defaultApplyOptions","returnStubValue","throwStubExceptions","_","extend","method","methods","args","Any","methodInvocation","_execute","call","callback","isFunction","apply","err","validateResult","bind","Error","flatMixins","flatten","forEach","mixin","test","functionName","toString","match","msg"],"mappings":"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","file":"/packages/mdg:validated-method/validated-method.js.map","sourcesContent":["/* global ValidatedMethod:true */\n\nValidatedMethod = class ValidatedMethod {\n  constructor(options) {\n    // Default to no mixins\n    options.mixins = options.mixins || [];\n    check(options.mixins, [Function]);\n    check(options.name, String);\n    options = applyMixins(options, options.mixins);\n\n    // connection argument defaults to Meteor, which is where Methods are defined on client and\n    // server\n    options.connection = options.connection || Meteor;\n\n    // Allow validate: null shorthand for methods that take no arguments\n    if (options.validate === null) {\n      options.validate = function () {};\n    }\n\n    // If this is null/undefined, make it an empty object\n    options.applyOptions = options.applyOptions || {};\n\n    check(options, Match.ObjectIncluding({\n      name: String,\n      validate: Function,\n      run: Function,\n      mixins: [Function],\n      connection: Object,\n      applyOptions: Object,\n    }));\n\n    // Default options passed to Meteor.apply, can be overridden with applyOptions\n    const defaultApplyOptions = {\n      // Make it possible to get the ID of an inserted item\n      returnStubValue: true,\n\n      // Don't call the server method if the client stub throws an error, so that we don't end\n      // up doing validations twice\n      throwStubExceptions: true,\n    };\n\n    options.applyOptions = _.extend({}, defaultApplyOptions, options.applyOptions);\n\n    // Attach all options to the ValidatedMethod instance\n    _.extend(this, options);\n\n    const method = this;\n    this.connection.methods({\n      [options.name](args) {\n        // Silence audit-argument-checks since arguments are always checked when using this package\n        check(args, Match.Any);\n        const methodInvocation = this;\n\n        return method._execute(methodInvocation, args);\n      }\n    });\n  }\n\n  call(args, callback) {\n    // Accept calling with just a callback\n    if (_.isFunction(args)) {\n      callback = args;\n      args = {};\n    }\n\n    try {\n      return this.connection.apply(this.name, [args], this.applyOptions, callback);\n    } catch (err) {\n      if (callback) {\n        // Get errors from the stub in the same way as from the server-side method\n        callback(err);\n      } else {\n        // No callback passed, throw instead of silently failing; this is what\n        // \"normal\" Methods do if you don't pass a callback.\n        throw err;\n      }\n    }\n  }\n\n  _execute(methodInvocation, args) {\n    methodInvocation = methodInvocation || {};\n\n    // Add `this.name` to reference the Method name\n    methodInvocation.name = this.name;\n\n    const validateResult = this.validate.bind(methodInvocation)(args);\n\n    if (typeof validateResult !== 'undefined') {\n      throw new Error(`Returning from validate doesn't do anything; \\\nperhaps you meant to throw an error?`);\n    }\n\n    return this.run.bind(methodInvocation)(args);\n  }\n};\n\n// Mixins get a chance to transform the arguments before they are passed to the actual Method\nfunction applyMixins(args, mixins) {\n  // You can pass nested arrays so that people can ship mixin packs\n  const flatMixins = _.flatten(mixins);\n  // Save name of the method here, so we can attach it to potential error messages\n  const {name} = args;\n\n  flatMixins.forEach((mixin) => {\n    args = mixin(args);\n\n    if(!Match.test(args, Object)) {\n      const functionName = mixin.toString().match(/function\\s(\\w+)/);\n      let msg = 'One of the mixins';\n\n      if(functionName) {\n        msg = `The function '${functionName[1]}'`;\n      }\n\n      throw new Error(`Error in ${name} method: ${msg} didn't return the options object.`);\n    }\n  });\n\n  return args;\n}\n"]},"hash":"9c307822fadf9d15e153fcbfd26cb153cfa719e4"}
