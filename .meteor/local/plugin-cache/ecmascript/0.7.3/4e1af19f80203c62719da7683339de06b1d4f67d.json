{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/password_server.js","filenameRelative":"/packages/accounts-password/password_server.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/password_server.js.map","sourceFileName":"/packages/accounts-password/password_server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"password_server"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/// BCRYPT\nvar bcrypt = NpmModuleBcrypt;\nvar bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nvar bcryptCompare = Meteor.wrapAsync(bcrypt.compare); // User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords (unless they have a 'services.password.srp'\n// field, in which case they will be upgraded to bcrypt the next time\n// they log in).\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\nAccounts._bcryptRounds = 10; // Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\n\nvar getPasswordString = function (password) {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else {\n    // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" + \"Only 'sha-256' is allowed.\");\n    }\n\n    password = password.digest;\n  }\n\n  return password;\n}; // Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\n\n\nvar hashPassword = function (password) {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds);\n}; // Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\n\n\nAccounts._checkPassword = function (user, password) {\n  var result = {\n    userId: user._id\n  };\n  password = getPasswordString(password);\n\n  if (!bcryptCompare(password, user.services.password.bcrypt)) {\n    result.error = handleError(\"Incorrect password\", false);\n  }\n\n  return result;\n};\n\nvar checkPassword = Accounts._checkPassword; ///\n/// ERROR HANDLER\n///\n\nvar handleError = function (msg) {\n  var throwError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var error = new Meteor.Error(403, Accounts._options.ambiguousErrorMessages ? \"Login failure. Please check your login credentials.\" : msg);\n\n  if (throwError) {\n    throw error;\n  }\n\n  return error;\n}; ///\n/// LOGIN\n///\n\n\nAccounts._findUserByQuery = function (query) {\n  var user = null;\n\n  if (query.id) {\n    user = Meteor.users.findOne({\n      _id: query.id\n    });\n  } else {\n    var fieldName;\n    var fieldValue;\n\n    if (query.username) {\n      fieldName = 'username';\n      fieldValue = query.username;\n    } else if (query.email) {\n      fieldName = 'emails.address';\n      fieldValue = query.email;\n    } else {\n      throw new Error(\"shouldn't happen (validation missed something)\");\n    }\n\n    var selector = {};\n    selector[fieldName] = fieldValue;\n    user = Meteor.users.findOne(selector); // If user is not found, try a case insensitive lookup\n\n    if (!user) {\n      selector = selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n      var candidateUsers = Meteor.users.find(selector).fetch(); // No match if multiple candidates are found\n\n      if (candidateUsers.length === 1) {\n        user = candidateUsers[0];\n      }\n    }\n  }\n\n  return user;\n}; /**\n    * @summary Finds the user with the specified username.\n    * First tries to match username case sensitively; if that fails, it\n    * tries case insensitively; but if more than one user matches the case\n    * insensitive search, it returns null.\n    * @locus Server\n    * @param {String} username The username to look for\n    * @returns {Object} A user if found, else null\n    * @importFromPackage accounts-base\n    */\n\nAccounts.findUserByUsername = function (username) {\n  return Accounts._findUserByQuery({\n    username: username\n  });\n}; /**\n    * @summary Finds the user with the specified email.\n    * First tries to match email case sensitively; if that fails, it\n    * tries case insensitively; but if more than one user matches the case\n    * insensitive search, it returns null.\n    * @locus Server\n    * @param {String} email The email address to look for\n    * @returns {Object} A user if found, else null\n    * @importFromPackage accounts-base\n    */\n\nAccounts.findUserByEmail = function (email) {\n  return Accounts._findUserByQuery({\n    email: email\n  });\n}; // Generates a MongoDB selector that can be used to perform a fast case\n// insensitive lookup for the given fieldName and string. Since MongoDB does\n// not support case insensitive indexes, and case insensitive regex queries\n// are slow, we construct a set of prefix selectors for all permutations of\n// the first 4 characters ourselves. We first attempt to matching against\n// these, and because 'prefix expression' regex queries do use indexes (see\n// http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n// this has been found to greatly improve performance (from 1200ms to 5ms in a\n// test with 1.000.000 users).\n\n\nvar selectorForFastCaseInsensitiveLookup = function (fieldName, string) {\n  // Performance seems to improve up to 4 prefix characters\n  var prefix = string.substring(0, Math.min(string.length, 4));\n\n  var orClause = _.map(generateCasePermutationsForString(prefix), function (prefixPermutation) {\n    var selector = {};\n    selector[fieldName] = new RegExp('^' + Meteor._escapeRegExp(prefixPermutation));\n    return selector;\n  });\n\n  var caseInsensitiveClause = {};\n  caseInsensitiveClause[fieldName] = new RegExp('^' + Meteor._escapeRegExp(string) + '$', 'i');\n  return {\n    $and: [{\n      $or: orClause\n    }, caseInsensitiveClause]\n  };\n}; // Generates permutations of all case variations of a given string.\n\n\nvar generateCasePermutationsForString = function (string) {\n  var permutations = [''];\n\n  for (var i = 0; i < string.length; i++) {\n    var ch = string.charAt(i);\n    permutations = _.flatten(_.map(permutations, function (prefix) {\n      var lowerCaseChar = ch.toLowerCase();\n      var upperCaseChar = ch.toUpperCase(); // Don't add unneccesary permutations when ch is not a letter\n\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n\n  return permutations;\n};\n\nvar checkForCaseInsensitiveDuplicates = function (fieldName, displayName, fieldValue, ownUserId) {\n  // Some tests need the ability to add users with the same case insensitive\n  // value, hence the _skipCaseInsensitiveChecksForTest check\n  var skipCheck = _.has(Accounts._skipCaseInsensitiveChecksForTest, fieldValue);\n\n  if (fieldValue && !skipCheck) {\n    var matchedUsers = Meteor.users.find(selectorForFastCaseInsensitiveLookup(fieldName, fieldValue)).fetch();\n\n    if (matchedUsers.length > 0 && ( // If we don't have a userId yet, any match we find is a duplicate\n    !ownUserId || // Otherwise, check to see if there are multiple matches or a match\n    // that is not us\n    matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)) {\n      handleError(displayName + \" already exists.\");\n    }\n  }\n}; // XXX maybe this belongs in the check package\n\n\nvar NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\nvar userQueryValidator = Match.Where(function (user) {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (_.keys(user).length !== 1) throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\nvar passwordValidator = Match.OneOf(String, {\n  digest: String,\n  algorithm: String\n}); // Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\n\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (!options.password || options.srp) return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    password: passwordValidator\n  });\n\n  var user = Accounts._findUserByQuery(options.user);\n\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password || !(user.services.password.bcrypt || user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  if (!user.services.password.bcrypt) {\n    if (typeof options.password === \"string\") {\n      // The client has presented a plaintext password, and the user is\n      // not upgraded to bcrypt yet. We don't attempt to tell the client\n      // to upgrade to bcrypt, because it might be a standalone DDP\n      // client doesn't know how to do such a thing.\n      var verifier = user.services.password.srp;\n      var newVerifier = SRP.generateVerifier(options.password, {\n        identity: verifier.identity,\n        salt: verifier.salt\n      });\n\n      if (verifier.verifier !== newVerifier.verifier) {\n        return {\n          userId: Accounts._options.ambiguousErrorMessages ? null : user._id,\n          error: handleError(\"Incorrect password\", false)\n        };\n      }\n\n      return {\n        userId: user._id\n      };\n    } else {\n      // Tell the client to use the SRP upgrade process.\n      throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n        format: 'srp',\n        identity: user.services.password.srp.identity\n      }));\n    }\n  }\n\n  return checkPassword(user, options.password);\n}); // Handler to login using the SRP upgrade path. To use this login\n// handler, the client must provide:\n//   - srp: H(identity + \":\" + password)\n//   - password: a string or an object with properties 'digest' and 'algorithm'\n//\n// We use `options.srp` to verify that the client knows the correct\n// password without doing a full SRP flow. Once we've checked that, we\n// upgrade the user to bcrypt and remove the SRP information from the\n// user document.\n//\n// The client ends up using this login handler after trying the normal\n// login handler (above), which throws an error telling the client to\n// try the SRP upgrade path.\n//\n// XXX COMPAT WITH 0.8.1.3\n\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (!options.srp || !options.password) {\n    return undefined; // don't handle\n  }\n\n  check(options, {\n    user: userQueryValidator,\n    srp: String,\n    password: passwordValidator\n  });\n\n  var user = Accounts._findUserByQuery(options.user);\n\n  if (!user) {\n    handleError(\"User not found\");\n  } // Check to see if another simultaneous login has already upgraded\n  // the user record to bcrypt.\n\n\n  if (user.services && user.services.password && user.services.password.bcrypt) {\n    return checkPassword(user, options.password);\n  }\n\n  if (!(user.services && user.services.password && user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  var v1 = user.services.password.srp.verifier;\n  var v2 = SRP.generateVerifier(null, {\n    hashedIdentityAndPassword: options.srp,\n    salt: user.services.password.srp.salt\n  }).verifier;\n\n  if (v1 !== v2) {\n    return {\n      userId: Accounts._options.ambiguousErrorMessages ? null : user._id,\n      error: handleError(\"Incorrect password\", false)\n    };\n  } // Upgrade to bcrypt on successful login.\n\n\n  var salted = hashPassword(options.password);\n  Meteor.users.update(user._id, {\n    $unset: {\n      'services.password.srp': 1\n    },\n    $set: {\n      'services.password.bcrypt': salted\n    }\n  });\n  return {\n    userId: user._id\n  };\n}); ///\n/// CHANGING\n///\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\n\nAccounts.setUsername = function (userId, newUsername) {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n  var user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  var oldUsername = user.username; // Perform a case insensitive check for duplicates before update\n\n  checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $set: {\n      username: newUsername\n    }\n  }); // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        username: oldUsername\n      }\n    });\n    throw ex;\n  }\n}; // Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\n//\n// XXX COMPAT WITH 0.8.1.3\n// Like the login method, if the user hasn't been upgraded from SRP to\n// bcrypt yet, then this method will throw an 'old password format'\n// error. The client should call the SRP upgrade login handler and then\n// retry this method again.\n//\n// UNLIKE the login method, there is no way to avoid getting SRP upgrade\n// errors thrown. The reasoning for this is that clients using this\n// method directly will need to be updated anyway because we no longer\n// support the SRP flow that they would have been doing to use this\n// method previously.\n\n\nMeteor.methods({\n  changePassword: function (oldPassword, newPassword) {\n    check(oldPassword, passwordValidator);\n    check(newPassword, passwordValidator);\n\n    if (!this.userId) {\n      throw new Meteor.Error(401, \"Must be logged in\");\n    }\n\n    var user = Meteor.users.findOne(this.userId);\n\n    if (!user) {\n      handleError(\"User not found\");\n    }\n\n    if (!user.services || !user.services.password || !user.services.password.bcrypt && !user.services.password.srp) {\n      handleError(\"User has no password set\");\n    }\n\n    if (!user.services.password.bcrypt) {\n      throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n        format: 'srp',\n        identity: user.services.password.srp.identity\n      }));\n    }\n\n    var result = checkPassword(user, oldPassword);\n\n    if (result.error) {\n      throw result.error;\n    }\n\n    var hashed = hashPassword(newPassword); // It would be better if this removed ALL existing tokens and replaced\n    // the token for the current connection with a new one, but that would\n    // be tricky, so we'll settle for just replacing all tokens other than\n    // the one for the current connection.\n\n    var currentToken = Accounts._getLoginToken(this.connection.id);\n\n    Meteor.users.update({\n      _id: this.userId\n    }, {\n      $set: {\n        'services.password.bcrypt': hashed\n      },\n      $pull: {\n        'services.resume.loginTokens': {\n          hashedToken: {\n            $ne: currentToken\n          }\n        }\n      },\n      $unset: {\n        'services.password.reset': 1\n      }\n    });\n    return {\n      passwordChanged: true\n    };\n  }\n}); // Force change the users password.\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\n\nAccounts.setPassword = function (userId, newPlaintextPassword, options) {\n  options = _.extend({\n    logout: true\n  }, options);\n  var user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  var update = {\n    $unset: {\n      'services.password.srp': 1,\n      // XXX COMPAT WITH 0.8.1.3\n      'services.password.reset': 1\n    },\n    $set: {\n      'services.password.bcrypt': hashPassword(newPlaintextPassword)\n    }\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({\n    _id: user._id\n  }, update);\n}; ///\n/// RESETTING VIA EMAIL\n///\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\n\n\nMeteor.methods({\n  forgotPassword: function (options) {\n    check(options, {\n      email: String\n    });\n    var user = Accounts.findUserByEmail(options.email);\n\n    if (!user) {\n      handleError(\"User not found\");\n    }\n\n    var emails = _.pluck(user.emails || [], 'address');\n\n    var caseSensitiveEmail = _.find(emails, function (email) {\n      return email.toLowerCase() === options.email.toLowerCase();\n    });\n\n    Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n  }\n}); // send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\n\nAccounts.sendResetPasswordEmail = function (userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    handleError(\"Can't find user\");\n  } // pick the first email if we weren't passed an email.\n\n\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  } // make sure we have a valid email\n\n\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email)) {\n    handleError(\"No such email for user.\");\n  }\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when,\n    reason: 'reset'\n  };\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.password.reset\": tokenRecord\n    }\n  }); // before passing to template, update user object with new token\n\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  var resetPasswordUrl = Accounts.urls.resetPassword(token);\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.resetPassword.from ? Accounts.emailTemplates.resetPassword.from(user) : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.resetPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.resetPassword.text === 'function') {\n    options.text = Accounts.emailTemplates.resetPassword.text(user, resetPasswordUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.resetPassword.html === 'function') {\n    options.html = Accounts.emailTemplates.resetPassword.html(user, resetPasswordUrl);\n  }\n\n  if ((0, _typeof3.default)(Accounts.emailTemplates.headers) === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n}; // send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\n\nAccounts.sendEnrollmentEmail = function (userId, email) {\n  // XXX refactor! This is basically identical to sendResetPasswordEmail.\n  // Make sure the user exists, and email is in their addresses.\n  var user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    throw new Error(\"Can't find user\");\n  } // pick the first email if we weren't passed an email.\n\n\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  } // make sure we have a valid email\n\n\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email)) {\n    throw new Error(\"No such email for user.\");\n  }\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when,\n    reason: 'enroll'\n  };\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.password.reset\": tokenRecord\n    }\n  }); // before passing to template, update user object with new token\n\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  var enrollAccountUrl = Accounts.urls.enrollAccount(token);\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.enrollAccount.from ? Accounts.emailTemplates.enrollAccount.from(user) : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.enrollAccount.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.enrollAccount.text === 'function') {\n    options.text = Accounts.emailTemplates.enrollAccount.text(user, enrollAccountUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.enrollAccount.html === 'function') {\n    options.html = Accounts.emailTemplates.enrollAccount.html(user, enrollAccountUrl);\n  }\n\n  if ((0, _typeof3.default)(Accounts.emailTemplates.headers) === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n}; // Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\n\n\nMeteor.methods({\n  resetPassword: function (token, newPassword) {\n    var self = this;\n    return Accounts._loginMethod(self, \"resetPassword\", arguments, \"password\", function () {\n      check(token, String);\n      check(newPassword, passwordValidator);\n      var user = Meteor.users.findOne({\n        \"services.password.reset.token\": token\n      });\n\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n\n      var when = user.services.password.reset.when;\n      var reason = user.services.password.reset.reason;\n\n      var tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n\n      if (reason === \"enroll\") {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n\n      var currentTimeMs = Date.now();\n      if (currentTimeMs - when > tokenLifetimeMs) throw new Meteor.Error(403, \"Token expired\");\n      var email = user.services.password.reset.email;\n      if (!_.include(_.pluck(user.emails || [], 'address'), email)) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Token has invalid email address\")\n      };\n      var hashed = hashPassword(newPassword); // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n\n      var oldToken = Accounts._getLoginToken(self.connection.id);\n\n      Accounts._setLoginToken(user._id, self.connection, null);\n\n      var resetToOldToken = function () {\n        Accounts._setLoginToken(user._id, self.connection, oldToken);\n      };\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        var affectedRecords = Meteor.users.update({\n          _id: user._id,\n          'emails.address': email,\n          'services.password.reset.token': token\n        }, {\n          $set: {\n            'services.password.bcrypt': hashed,\n            'emails.$.verified': true\n          },\n          $unset: {\n            'services.password.reset': 1,\n            'services.password.srp': 1\n          }\n        });\n        if (affectedRecords !== 1) return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Invalid email\")\n        };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      } // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n\n\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {\n        userId: user._id\n      };\n    });\n  }\n}); ///\n/// EMAIL VERIFICATION\n///\n// send the user an email with a link that when opened marks that\n// address as verified\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @importFromPackage accounts-base\n */\n\nAccounts.sendVerificationEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user) throw new Error(\"Can't find user\"); // pick the first unverified address if we weren't passed an address.\n\n  if (!address) {\n    var email = _.find(user.emails || [], function (e) {\n      return !e.verified;\n    });\n\n    address = (email || {}).address;\n\n    if (!address) {\n      throw new Error(\"That user has no unverified email addresses.\");\n    }\n  } // make sure we have a valid address\n\n\n  if (!address || !_.contains(_.pluck(user.emails || [], 'address'), address)) throw new Error(\"No such email address for user.\");\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()\n  };\n  Meteor.users.update({\n    _id: userId\n  }, {\n    $push: {\n      'services.email.verificationTokens': tokenRecord\n    }\n  }); // before passing to template, update user object with new token\n\n  Meteor._ensure(user, 'services', 'email');\n\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n\n  user.services.email.verificationTokens.push(tokenRecord);\n  var verifyEmailUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.verifyEmail.from ? Accounts.emailTemplates.verifyEmail.from(user) : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.verifyEmail.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.verifyEmail.text === 'function') {\n    options.text = Accounts.emailTemplates.verifyEmail.text(user, verifyEmailUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.verifyEmail.html === 'function') options.html = Accounts.emailTemplates.verifyEmail.html(user, verifyEmailUrl);\n\n  if ((0, _typeof3.default)(Accounts.emailTemplates.headers) === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n}; // Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\n\n\nMeteor.methods({\n  verifyEmail: function (token) {\n    var self = this;\n    return Accounts._loginMethod(self, \"verifyEmail\", arguments, \"password\", function () {\n      check(token, String);\n      var user = Meteor.users.findOne({\n        'services.email.verificationTokens.token': token\n      });\n      if (!user) throw new Meteor.Error(403, \"Verify email link expired\");\n\n      var tokenRecord = _.find(user.services.email.verificationTokens, function (t) {\n        return t.token == token;\n      });\n\n      if (!tokenRecord) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Verify email link expired\")\n      };\n\n      var emailsRecord = _.find(user.emails, function (e) {\n        return e.address == tokenRecord.address;\n      });\n\n      if (!emailsRecord) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n      }; // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': tokenRecord.address\n      }, {\n        $set: {\n          'emails.$.verified': true\n        },\n        $pull: {\n          'services.email.verificationTokens': {\n            address: tokenRecord.address\n          }\n        }\n      });\n      return {\n        userId: user._id\n      };\n    });\n  }\n}); /**\n     * @summary Add an email address for a user. Use this instead of directly\n     * updating the database. The operation will fail if there is a different user\n     * with an email only differing in case. If the specified user has an existing\n     * email only differing in case however, we replace it.\n     * @locus Server\n     * @param {String} userId The ID of the user to update.\n     * @param {String} newEmail A new email address for the user.\n     * @param {Boolean} [verified] Optional - whether the new email address should\n     * be marked as verified. Defaults to false.\n     * @importFromPackage accounts-base\n     */\n\nAccounts.addEmail = function (userId, newEmail, verified) {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (_.isUndefined(verified)) {\n    verified = false;\n  }\n\n  var user = Meteor.users.findOne(userId);\n  if (!user) throw new Meteor.Error(403, \"User not found\"); // Allow users to change their own email to a version with a different case\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n\n  var caseInsensitiveRegExp = new RegExp('^' + Meteor._escapeRegExp(newEmail) + '$', 'i');\n\n  var didUpdateOwnEmail = _.any(user.emails, function (email, index) {\n    if (caseInsensitiveRegExp.test(email.address)) {\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': email.address\n      }, {\n        $set: {\n          'emails.$.address': newEmail,\n          'emails.$.verified': verified\n        }\n      });\n      return true;\n    }\n\n    return false;\n  }); // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n\n  if (didUpdateOwnEmail) {\n    return;\n  } // Perform a case insensitive check for duplicates before update\n\n\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  }); // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $pull: {\n        emails: {\n          address: newEmail\n        }\n      }\n    });\n    throw ex;\n  }\n}; /**\n    * @summary Remove an email address for a user. Use this instead of updating\n    * the database directly.\n    * @locus Server\n    * @param {String} userId The ID of the user to update.\n    * @param {String} email The email address to remove.\n    * @importFromPackage accounts-base\n    */\n\nAccounts.removeEmail = function (userId, email) {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n  var user = Meteor.users.findOne(userId);\n  if (!user) throw new Meteor.Error(403, \"User not found\");\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $pull: {\n      emails: {\n        address: email\n      }\n    }\n  });\n}; ///\n/// CREATING USERS\n///\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\n\n\nvar createUser = function (options) {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n  var username = options.username;\n  var email = options.email;\n  if (!username && !email) throw new Meteor.Error(400, \"Need to set a username or email\");\n  var user = {\n    services: {}\n  };\n\n  if (options.password) {\n    var hashed = hashPassword(options.password);\n    user.services.password = {\n      bcrypt: hashed\n    };\n  }\n\n  if (username) user.username = username;\n  if (email) user.emails = [{\n    address: email,\n    verified: false\n  }]; // Perform a case insensitive check before insert\n\n  checkForCaseInsensitiveDuplicates('username', 'Username', username);\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n  var userId = Accounts.insertUserDoc(options, user); // Perform another check after insert, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n  } catch (ex) {\n    // Remove inserted user if the check fails\n    Meteor.users.remove(userId);\n    throw ex;\n  }\n\n  return userId;\n}; // method for create user. Requests come from the client.\n\n\nMeteor.methods({\n  createUser: function (options) {\n    var self = this;\n    return Accounts._loginMethod(self, \"createUser\", arguments, \"password\", function () {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation) return {\n        error: new Meteor.Error(403, \"Signups forbidden\")\n      }; // Create user. result contains id and token.\n\n      var userId = createUser(options); // safety belt. createUser is supposed to throw on error. send 500 error\n      // instead of sending a verification email with empty userid.\n\n      if (!userId) throw new Error(\"createUser failed to insert new user\"); // If `Accounts._options.sendVerificationEmail` is set, register\n      // a token to verify the user's primary email, and send it to\n      // that address.\n\n      if (options.email && Accounts._options.sendVerificationEmail) Accounts.sendVerificationEmail(userId, options.email); // client gets logged in as the new user afterwards.\n\n      return {\n        userId: userId\n      };\n    });\n  }\n}); // Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\n\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options); // XXX allow an optional callback?\n\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n}; ///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\n\n\nMeteor.users._ensureIndex('services.email.verificationTokens.token', {\n  unique: 1,\n  sparse: 1\n});\n\nMeteor.users._ensureIndex('services.password.reset.token', {\n  unique: 1,\n  sparse: 1\n});","map":{"version":3,"sources":["/packages/accounts-password/password_server.js"],"names":["bcrypt","NpmModuleBcrypt","bcryptHash","Meteor","wrapAsync","hash","bcryptCompare","compare","Accounts","_bcryptRounds","getPasswordString","password","SHA256","algorithm","Error","digest","hashPassword","_checkPassword","user","result","userId","_id","services","error","handleError","checkPassword","msg","throwError","_options","ambiguousErrorMessages","_findUserByQuery","query","id","users","findOne","fieldName","fieldValue","username","email","selector","selectorForFastCaseInsensitiveLookup","candidateUsers","find","fetch","length","findUserByUsername","findUserByEmail","string","prefix","substring","Math","min","orClause","_","map","generateCasePermutationsForString","prefixPermutation","RegExp","_escapeRegExp","caseInsensitiveClause","$and","$or","permutations","i","ch","charAt","flatten","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase","checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","has","_skipCaseInsensitiveChecksForTest","matchedUsers","NonEmptyString","Match","Where","x","check","String","userQueryValidator","Optional","keys","passwordValidator","OneOf","registerLoginHandler","options","srp","undefined","verifier","newVerifier","SRP","generateVerifier","identity","salt","EJSON","stringify","format","v1","v2","hashedIdentityAndPassword","salted","update","$unset","$set","setUsername","newUsername","oldUsername","ex","methods","changePassword","oldPassword","newPassword","hashed","currentToken","_getLoginToken","connection","$pull","hashedToken","$ne","passwordChanged","setPassword","newPlaintextPassword","extend","logout","forgotPassword","emails","pluck","caseSensitiveEmail","sendResetPasswordEmail","address","contains","token","Random","secret","when","Date","tokenRecord","reason","_ensure","reset","resetPasswordUrl","urls","resetPassword","to","from","emailTemplates","subject","text","html","headers","Email","send","sendEnrollmentEmail","enrollAccountUrl","enrollAccount","self","_loginMethod","arguments","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","_getPasswordEnrollTokenLifetimeMs","currentTimeMs","now","include","oldToken","_setLoginToken","resetToOldToken","affectedRecords","err","_clearAllLoginTokens","sendVerificationEmail","e","verified","$push","verificationTokens","push","verifyEmailUrl","verifyEmail","t","emailsRecord","addEmail","newEmail","Boolean","isUndefined","caseInsensitiveRegExp","didUpdateOwnEmail","any","index","test","$addToSet","removeEmail","createUser","ObjectIncluding","insertUserDoc","remove","Object","forbidClientAccountCreation","callback","clone","_ensureIndex","unique","sparse"],"mappings":"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","file":"/packages/accounts-password/password_server.js.map","sourcesContent":["/// BCRYPT\n\nvar bcrypt = NpmModuleBcrypt;\nvar bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nvar bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords (unless they have a 'services.password.srp'\n// field, in which case they will be upgraded to bcrypt the next time\n// they log in).\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nvar getPasswordString = function (password) {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nvar hashPassword = function (password) {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds);\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\nAccounts._checkPassword = function (user, password) {\n  var result = {\n    userId: user._id\n  };\n\n  password = getPasswordString(password);\n\n  if (! bcryptCompare(password, user.services.password.bcrypt)) {\n    result.error = handleError(\"Incorrect password\", false);\n  }\n\n  return result;\n};\nvar checkPassword = Accounts._checkPassword;\n\n///\n/// ERROR HANDLER\n///\nconst handleError = (msg, throwError = true) => {\n  const error = new Meteor.Error(\n    403, \n    Accounts._options.ambiguousErrorMessages\n      ? \"Login failure. Please check your login credentials.\"\n      : msg\n  );\n  if (throwError) {\n    throw error;\n  }\n  return error;\n};\n\n///\n/// LOGIN\n///\n\nAccounts._findUserByQuery = function (query) {\n  var user = null;\n\n  if (query.id) {\n    user = Meteor.users.findOne({ _id: query.id });\n  } else {\n    var fieldName;\n    var fieldValue;\n    if (query.username) {\n      fieldName = 'username';\n      fieldValue = query.username;\n    } else if (query.email) {\n      fieldName = 'emails.address';\n      fieldValue = query.email;\n    } else {\n      throw new Error(\"shouldn't happen (validation missed something)\");\n    }\n    var selector = {};\n    selector[fieldName] = fieldValue;\n    user = Meteor.users.findOne(selector);\n    // If user is not found, try a case insensitive lookup\n    if (!user) {\n      selector = selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n      var candidateUsers = Meteor.users.find(selector).fetch();\n      // No match if multiple candidates are found\n      if (candidateUsers.length === 1) {\n        user = candidateUsers[0];\n      }\n    }\n  }\n\n  return user;\n};\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername = function (username) {\n  return Accounts._findUserByQuery({\n    username: username\n  });\n};\n\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail = function (email) {\n  return Accounts._findUserByQuery({\n    email: email\n  });\n};\n\n// Generates a MongoDB selector that can be used to perform a fast case\n// insensitive lookup for the given fieldName and string. Since MongoDB does\n// not support case insensitive indexes, and case insensitive regex queries\n// are slow, we construct a set of prefix selectors for all permutations of\n// the first 4 characters ourselves. We first attempt to matching against\n// these, and because 'prefix expression' regex queries do use indexes (see\n// http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n// this has been found to greatly improve performance (from 1200ms to 5ms in a\n// test with 1.000.000 users).\nvar selectorForFastCaseInsensitiveLookup = function (fieldName, string) {\n  // Performance seems to improve up to 4 prefix characters\n  var prefix = string.substring(0, Math.min(string.length, 4));\n  var orClause = _.map(generateCasePermutationsForString(prefix),\n    function (prefixPermutation) {\n      var selector = {};\n      selector[fieldName] =\n        new RegExp('^' + Meteor._escapeRegExp(prefixPermutation));\n      return selector;\n    });\n  var caseInsensitiveClause = {};\n  caseInsensitiveClause[fieldName] =\n    new RegExp('^' + Meteor._escapeRegExp(string) + '$', 'i')\n  return {$and: [{$or: orClause}, caseInsensitiveClause]};\n}\n\n// Generates permutations of all case variations of a given string.\nvar generateCasePermutationsForString = function (string) {\n  var permutations = [''];\n  for (var i = 0; i < string.length; i++) {\n    var ch = string.charAt(i);\n    permutations = _.flatten(_.map(permutations, function (prefix) {\n      var lowerCaseChar = ch.toLowerCase();\n      var upperCaseChar = ch.toUpperCase();\n      // Don't add unneccesary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n  return permutations;\n}\n\nvar checkForCaseInsensitiveDuplicates = function (fieldName, displayName, fieldValue, ownUserId) {\n  // Some tests need the ability to add users with the same case insensitive\n  // value, hence the _skipCaseInsensitiveChecksForTest check\n  var skipCheck = _.has(Accounts._skipCaseInsensitiveChecksForTest, fieldValue);\n\n  if (fieldValue && !skipCheck) {\n    var matchedUsers = Meteor.users.find(\n      selectorForFastCaseInsensitiveLookup(fieldName, fieldValue)).fetch();\n\n    if (matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n        // Otherwise, check to see if there are multiple matches or a match\n        // that is not us\n        (matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId))) {\n      handleError(displayName + \" already exists.\");\n    }\n  }\n};\n\n// XXX maybe this belongs in the check package\nvar NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\n\nvar userQueryValidator = Match.Where(function (user) {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (_.keys(user).length !== 1)\n    throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\n\nvar passwordValidator = Match.OneOf(\n  String,\n  { digest: String, algorithm: String }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (! options.password || options.srp)\n    return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    password: passwordValidator\n  });\n\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password ||\n      !(user.services.password.bcrypt || user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  if (!user.services.password.bcrypt) {\n    if (typeof options.password === \"string\") {\n      // The client has presented a plaintext password, and the user is\n      // not upgraded to bcrypt yet. We don't attempt to tell the client\n      // to upgrade to bcrypt, because it might be a standalone DDP\n      // client doesn't know how to do such a thing.\n      var verifier = user.services.password.srp;\n      var newVerifier = SRP.generateVerifier(options.password, {\n        identity: verifier.identity, salt: verifier.salt});\n\n      if (verifier.verifier !== newVerifier.verifier) {\n        return {\n          userId: Accounts._options.ambiguousErrorMessages ? null : user._id,\n          error: handleError(\"Incorrect password\", false)\n        };\n      }\n\n      return {userId: user._id};\n    } else {\n      // Tell the client to use the SRP upgrade process.\n      throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n        format: 'srp',\n        identity: user.services.password.srp.identity\n      }));\n    }\n  }\n\n  return checkPassword(\n    user,\n    options.password\n  );\n});\n\n// Handler to login using the SRP upgrade path. To use this login\n// handler, the client must provide:\n//   - srp: H(identity + \":\" + password)\n//   - password: a string or an object with properties 'digest' and 'algorithm'\n//\n// We use `options.srp` to verify that the client knows the correct\n// password without doing a full SRP flow. Once we've checked that, we\n// upgrade the user to bcrypt and remove the SRP information from the\n// user document.\n//\n// The client ends up using this login handler after trying the normal\n// login handler (above), which throws an error telling the client to\n// try the SRP upgrade path.\n//\n// XXX COMPAT WITH 0.8.1.3\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (!options.srp || !options.password) {\n    return undefined; // don't handle\n  }\n\n  check(options, {\n    user: userQueryValidator,\n    srp: String,\n    password: passwordValidator\n  });\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  // Check to see if another simultaneous login has already upgraded\n  // the user record to bcrypt.\n  if (user.services && user.services.password && user.services.password.bcrypt) {\n    return checkPassword(user, options.password);\n  }\n\n  if (!(user.services && user.services.password && user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  var v1 = user.services.password.srp.verifier;\n  var v2 = SRP.generateVerifier(\n    null,\n    {\n      hashedIdentityAndPassword: options.srp,\n      salt: user.services.password.srp.salt\n    }\n  ).verifier;\n  if (v1 !== v2) {\n    return {\n      userId: Accounts._options.ambiguousErrorMessages ? null : user._id,\n      error: handleError(\"Incorrect password\", false)\n    };\n  }\n\n  // Upgrade to bcrypt on successful login.\n  var salted = hashPassword(options.password);\n  Meteor.users.update(\n    user._id,\n    {\n      $unset: { 'services.password.srp': 1 },\n      $set: { 'services.password.bcrypt': salted }\n    }\n  );\n\n  return {userId: user._id};\n});\n\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername = function (userId, newUsername) {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  var oldUsername = user.username;\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n\n  Meteor.users.update({_id: user._id}, {$set: {username: newUsername}});\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id}, {$set: {username: oldUsername}});\n    throw ex;\n  }\n};\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\n//\n// XXX COMPAT WITH 0.8.1.3\n// Like the login method, if the user hasn't been upgraded from SRP to\n// bcrypt yet, then this method will throw an 'old password format'\n// error. The client should call the SRP upgrade login handler and then\n// retry this method again.\n//\n// UNLIKE the login method, there is no way to avoid getting SRP upgrade\n// errors thrown. The reasoning for this is that clients using this\n// method directly will need to be updated anyway because we no longer\n// support the SRP flow that they would have been doing to use this\n// method previously.\nMeteor.methods({changePassword: function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId) {\n    throw new Meteor.Error(401, \"Must be logged in\");\n  }\n\n  var user = Meteor.users.findOne(this.userId);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password ||\n      (!user.services.password.bcrypt && !user.services.password.srp)) {\n    handleError(\"User has no password set\");\n  }\n\n  if (! user.services.password.bcrypt) {\n    throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n      format: 'srp',\n      identity: user.services.password.srp.identity\n    }));\n  }\n\n  var result = checkPassword(user, oldPassword);\n  if (result.error) {\n    throw result.error;\n  }\n\n  var hashed = hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  var currentToken = Accounts._getLoginToken(this.connection.id);\n  Meteor.users.update(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPassword = function (userId, newPlaintextPassword, options) {\n  options = _.extend({logout: true}, options);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  var update = {\n    $unset: {\n      'services.password.srp': 1, // XXX COMPAT WITH 0.8.1.3\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({_id: user._id}, update);\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: function (options) {\n  check(options, {email: String});\n\n  var user = Accounts.findUserByEmail(options.email);\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  const emails = _.pluck(user.emails || [], 'address');\n  const caseSensitiveEmail = _.find(emails, email => {\n    return email.toLowerCase() === options.email.toLowerCase();\n  });\n\n  Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail = function (userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    handleError(\"Can't find user\");\n  }\n\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email)) {\n    handleError(\"No such email for user.\");\n  }\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when,\n    reason: 'reset'\n  };\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": tokenRecord\n  }});\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n\n  var resetPasswordUrl = Accounts.urls.resetPassword(token);\n\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.resetPassword.from\n      ? Accounts.emailTemplates.resetPassword.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.resetPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.resetPassword.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.resetPassword.text(user, resetPasswordUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.resetPassword.html === 'function') {\n    options.html =\n      Accounts.emailTemplates.resetPassword.html(user, resetPasswordUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail = function (userId, email) {\n  // XXX refactor! This is basically identical to sendResetPasswordEmail.\n\n  // Make sure the user exists, and email is in their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user) {\n    throw new Error(\"Can't find user\");\n  }\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email)) {\n    throw new Error(\"No such email for user.\");\n  }\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when,\n    reason: 'enroll'\n  };\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n\n  var enrollAccountUrl = Accounts.urls.enrollAccount(token);\n\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.enrollAccount.from\n      ? Accounts.emailTemplates.enrollAccount.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.enrollAccount.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.enrollAccount.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.enrollAccount.text(user, enrollAccountUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.enrollAccount.html === 'function') {\n    options.html =\n      Accounts.emailTemplates.enrollAccount.html(user, enrollAccountUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: function (token, newPassword) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"resetPassword\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n      check(newPassword, passwordValidator);\n\n      var user = Meteor.users.findOne({\n        \"services.password.reset.token\": token});\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n      var when = user.services.password.reset.when;\n      var reason = user.services.password.reset.reason;\n      var tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n      if (reason === \"enroll\") {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n      var currentTimeMs = Date.now();\n      if ((currentTimeMs - when) > tokenLifetimeMs)\n        throw new Meteor.Error(403, \"Token expired\");\n      var email = user.services.password.reset.email;\n      if (!_.include(_.pluck(user.emails || [], 'address'), email))\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Token has invalid email address\")\n        };\n\n      var hashed = hashPassword(newPassword);\n\n      // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n      var oldToken = Accounts._getLoginToken(self.connection.id);\n      Accounts._setLoginToken(user._id, self.connection, null);\n      var resetToOldToken = function () {\n        Accounts._setLoginToken(user._id, self.connection, oldToken);\n      };\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        var affectedRecords = Meteor.users.update(\n          {\n            _id: user._id,\n            'emails.address': email,\n            'services.password.reset.token': token\n          },\n          {$set: {'services.password.bcrypt': hashed,\n                  'emails.$.verified': true},\n           $unset: {'services.password.reset': 1,\n                    'services.password.srp': 1}});\n        if (affectedRecords !== 1)\n          return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Invalid email\")\n          };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      }\n\n      // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first unverified address if we weren't passed an address.\n  if (!address) {\n    var email = _.find(user.emails || [],\n                       function (e) { return !e.verified; });\n    address = (email || {}).address;\n\n    if (!address) {\n      throw new Error(\"That user has no unverified email addresses.\");\n    }\n  }\n  // make sure we have a valid address\n  if (!address || !_.contains(_.pluck(user.emails || [], 'address'), address))\n    throw new Error(\"No such email address for user.\");\n\n\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()};\n  Meteor.users.update(\n    {_id: userId},\n    {$push: {'services.email.verificationTokens': tokenRecord}});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  var verifyEmailUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.verifyEmail.from\n      ? Accounts.emailTemplates.verifyEmail.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.verifyEmail.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.verifyEmail.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.verifyEmail.text(user, verifyEmailUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.verifyEmail.html === 'function')\n    options.html =\n      Accounts.emailTemplates.verifyEmail.html(user, verifyEmailUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: function (token) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"verifyEmail\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n\n      var user = Meteor.users.findOne(\n        {'services.email.verificationTokens.token': token});\n      if (!user)\n        throw new Meteor.Error(403, \"Verify email link expired\");\n\n      var tokenRecord = _.find(user.services.email.verificationTokens,\n                               function (t) {\n                                 return t.token == token;\n                               });\n      if (!tokenRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link expired\")\n        };\n\n      var emailsRecord = _.find(user.emails, function (e) {\n        return e.address == tokenRecord.address;\n      });\n      if (!emailsRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n        };\n\n      // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n      Meteor.users.update(\n        {_id: user._id,\n         'emails.address': tokenRecord.address},\n        {$set: {'emails.$.verified': true},\n         $pull: {'services.email.verificationTokens': {address: tokenRecord.address}}});\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmail = function (userId, newEmail, verified) {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (_.isUndefined(verified)) {\n    verified = false;\n  }\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  var caseInsensitiveRegExp =\n    new RegExp('^' + Meteor._escapeRegExp(newEmail) + '$', 'i');\n\n  var didUpdateOwnEmail = _.any(user.emails, function(email, index) {\n    if (caseInsensitiveRegExp.test(email.address)) {\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': email.address\n      }, {$set: {\n        'emails.$.address': newEmail,\n        'emails.$.verified': verified\n      }});\n      return true;\n    }\n\n    return false;\n  });\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  });\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id},\n      {$pull: {emails: {address: newEmail}}});\n    throw ex;\n  }\n}\n\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail = function (userId, email) {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Meteor.users.update({_id: user._id},\n    {$pull: {emails: {address: email}}});\n}\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nvar createUser = function (options) {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n\n  var username = options.username;\n  var email = options.email;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  var user = {services: {}};\n  if (options.password) {\n    var hashed = hashPassword(options.password);\n    user.services.password = { bcrypt: hashed };\n  }\n\n  if (username)\n    user.username = username;\n  if (email)\n    user.emails = [{address: email, verified: false}];\n\n  // Perform a case insensitive check before insert\n  checkForCaseInsensitiveDuplicates('username', 'Username', username);\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n  var userId = Accounts.insertUserDoc(options, user);\n  // Perform another check after insert, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n  } catch (ex) {\n    // Remove inserted user if the check fails\n    Meteor.users.remove(userId);\n    throw ex;\n  }\n  return userId;\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: function (options) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"createUser\",\n    arguments,\n    \"password\",\n    function () {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation)\n        return {\n          error: new Meteor.Error(403, \"Signups forbidden\")\n        };\n\n      // Create user. result contains id and token.\n      var userId = createUser(options);\n      // safety belt. createUser is supposed to throw on error. send 500 error\n      // instead of sending a verification email with empty userid.\n      if (! userId)\n        throw new Error(\"createUser failed to insert new user\");\n\n      // If `Accounts._options.sendVerificationEmail` is set, register\n      // a token to verify the user's primary email, and send it to\n      // that address.\n      if (options.email && Accounts._options.sendVerificationEmail)\n        Accounts.sendVerificationEmail(userId, options.email);\n\n      // client gets logged in as the new user afterwards.\n      return {userId: userId};\n    }\n  );\n}});\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options);\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users._ensureIndex('services.email.verificationTokens.token',\n                          {unique: 1, sparse: 1});\nMeteor.users._ensureIndex('services.password.reset.token',\n                          {unique: 1, sparse: 1});\n"]},"hash":"4e1af19f80203c62719da7683339de06b1d4f67d"}
