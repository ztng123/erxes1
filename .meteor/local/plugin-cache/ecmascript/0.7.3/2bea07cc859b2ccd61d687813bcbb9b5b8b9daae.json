{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"react-bootstrap","imported":["Form","ButtonGroup","Button","Row","Col","FormGroup","ControlLabel","FormControl","Panel"],"specifiers":[{"kind":"named","imported":"Form","local":"Form"},{"kind":"named","imported":"ButtonGroup","local":"ButtonGroup"},{"kind":"named","imported":"Button","local":"Button"},{"kind":"named","imported":"Row","local":"Row"},{"kind":"named","imported":"Col","local":"Col"},{"kind":"named","imported":"FormGroup","local":"FormGroup"},{"kind":"named","imported":"ControlLabel","local":"ControlLabel"},{"kind":"named","imported":"FormControl","local":"FormControl"},{"kind":"named","imported":"Panel","local":"Panel"}]},{"source":"meteor/kadira:flow-router","imported":["FlowRouter"],"specifiers":[{"kind":"named","imported":"FlowRouter","local":"FlowRouter"}]},{"source":"meteor/erxes-notifier","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]},{"source":"/imports/react-ui/layout/components","imported":["Wrapper"],"specifiers":[{"kind":"named","imported":"Wrapper","local":"Wrapper"}]},{"source":"./Conditions","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Conditions"}]},{"source":"./AddConditionButton","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AddConditionButton"}]},{"source":"../containers","imported":["Preview"],"specifiers":[{"kind":"named","imported":"Preview","local":"Preview"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/segments/components/SegmentsForm.js","filenameRelative":"/imports/react-ui/segments/components/SegmentsForm.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/segments/components/SegmentsForm.js.map","sourceFileName":"/imports/react-ui/segments/components/SegmentsForm.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"SegmentsForm"},"ignored":false,"code":"var _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    PropTypes = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar Form = void 0,\n    ButtonGroup = void 0,\n    Button = void 0,\n    Row = void 0,\n    Col = void 0,\n    FormGroup = void 0,\n    ControlLabel = void 0,\n    FormControl = void 0,\n    Panel = void 0;\nmodule.importSync(\"react-bootstrap\", {\n  Form: function (v) {\n    Form = v;\n  },\n  ButtonGroup: function (v) {\n    ButtonGroup = v;\n  },\n  Button: function (v) {\n    Button = v;\n  },\n  Row: function (v) {\n    Row = v;\n  },\n  Col: function (v) {\n    Col = v;\n  },\n  FormGroup: function (v) {\n    FormGroup = v;\n  },\n  ControlLabel: function (v) {\n    ControlLabel = v;\n  },\n  FormControl: function (v) {\n    FormControl = v;\n  },\n  Panel: function (v) {\n    Panel = v;\n  }\n}, 1);\nvar FlowRouter = void 0;\nmodule.importSync(\"meteor/kadira:flow-router\", {\n  FlowRouter: function (v) {\n    FlowRouter = v;\n  }\n}, 2);\nvar Alert = void 0;\nmodule.importSync(\"meteor/erxes-notifier\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 3);\nvar Wrapper = void 0;\nmodule.importSync(\"/imports/react-ui/layout/components\", {\n  Wrapper: function (v) {\n    Wrapper = v;\n  }\n}, 4);\nvar Conditions = void 0;\nmodule.importSync(\"./Conditions\", {\n  \"default\": function (v) {\n    Conditions = v;\n  }\n}, 5);\nvar AddConditionButton = void 0;\nmodule.importSync(\"./AddConditionButton\", {\n  \"default\": function (v) {\n    AddConditionButton = v;\n  }\n}, 6);\nvar Preview = void 0;\nmodule.importSync(\"../containers\", {\n  Preview: function (v) {\n    Preview = v;\n  }\n}, 7);\nvar propTypes = {\n  fields: PropTypes.array.isRequired,\n  create: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired,\n  segment: PropTypes.object,\n  headSegments: PropTypes.array.isRequired\n};\n\nvar SegmentsForm = function (_Component) {\n  (0, _inherits3.default)(SegmentsForm, _Component);\n\n  SegmentsForm.generateRandomColorCode = function () {\n    function generateRandomColorCode() {\n      return \"#\" + Math.random().toString(16).slice(2, 8);\n    }\n\n    return generateRandomColorCode;\n  }();\n\n  function SegmentsForm(props) {\n    (0, _classCallCheck3.default)(this, SegmentsForm);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.state = props.segment ? props.segment : {\n      name: '',\n      description: '',\n      subOf: '',\n      color: SegmentsForm.generateRandomColorCode(),\n      conditions: [],\n      connector: 'any'\n    };\n    _this.addCondition = _this.addCondition.bind(_this);\n    _this.changeCondition = _this.changeCondition.bind(_this);\n    _this.removeCondition = _this.removeCondition.bind(_this);\n    _this.handleChange = _this.handleChange.bind(_this);\n    _this.handleNameChange = _this.handleNameChange.bind(_this);\n    _this.handleDescriptionChange = _this.handleDescriptionChange.bind(_this);\n    _this.handleColorChange = _this.handleColorChange.bind(_this);\n    _this.handleConnectorChange = _this.handleConnectorChange.bind(_this);\n    _this.save = _this.save.bind(_this);\n    return _this;\n  }\n\n  SegmentsForm.prototype.addCondition = function () {\n    function addCondition(condition) {\n      this.setState({\n        conditions: [].concat((0, _toConsumableArray3.default)(this.state.conditions), [condition])\n      });\n    }\n\n    return addCondition;\n  }();\n\n  SegmentsForm.prototype.changeCondition = function () {\n    function changeCondition(condition) {\n      this.setState({\n        conditions: this.state.conditions.map(function (c) {\n          return c.field === condition.field ? condition : c;\n        })\n      });\n    }\n\n    return changeCondition;\n  }();\n\n  SegmentsForm.prototype.removeCondition = function () {\n    function removeCondition(conditionField) {\n      this.setState({\n        conditions: this.state.conditions.filter(function (c) {\n          return c.field !== conditionField;\n        })\n      });\n    }\n\n    return removeCondition;\n  }();\n\n  SegmentsForm.prototype.handleChange = function () {\n    function handleChange(e) {\n      var _setState;\n\n      e.preventDefault();\n      this.setState((_setState = {}, _setState[e.target.name] = e.target.value, _setState));\n    }\n\n    return handleChange;\n  }();\n\n  SegmentsForm.prototype.handleNameChange = function () {\n    function handleNameChange(e) {\n      e.preventDefault();\n      this.setState({\n        name: e.target.value\n      });\n    }\n\n    return handleNameChange;\n  }();\n\n  SegmentsForm.prototype.handleDescriptionChange = function () {\n    function handleDescriptionChange(e) {\n      e.preventDefault();\n      this.setState({\n        description: e.target.value\n      });\n    }\n\n    return handleDescriptionChange;\n  }();\n\n  SegmentsForm.prototype.handleColorChange = function () {\n    function handleColorChange(e) {\n      e.preventDefault();\n      this.setState({\n        color: e.target.value\n      });\n    }\n\n    return handleColorChange;\n  }();\n\n  SegmentsForm.prototype.handleConnectorChange = function () {\n    function handleConnectorChange(e) {\n      e.preventDefault();\n      this.setState({\n        connector: e.target.value\n      });\n    }\n\n    return handleConnectorChange;\n  }();\n\n  SegmentsForm.prototype.save = function () {\n    function save(e) {\n      e.preventDefault();\n      var _props = this.props,\n          segment = _props.segment,\n          create = _props.create,\n          edit = _props.edit;\n      var submit = segment ? edit : create;\n      var _state = this.state,\n          name = _state.name,\n          description = _state.description,\n          subOf = _state.subOf,\n          color = _state.color,\n          connector = _state.connector,\n          conditions = _state.conditions;\n      var params = {\n        doc: {\n          name: name,\n          description: description,\n          color: color,\n          connector: connector,\n          conditions: conditions\n        }\n      };\n\n      if (subOf) {\n        params.doc.subOf = subOf;\n      }\n\n      Object.assign(params, segment ? {\n        id: segment._id\n      } : {});\n      submit(params, function (error) {\n        if (error) {\n          return Alert.error(error.reason);\n        }\n\n        var successMessage = segment ? 'Segment is successfully changed.' : 'New segment is successfully created.';\n        Alert.success(successMessage);\n        return FlowRouter.go('segments/list');\n      });\n    }\n\n    return save;\n  }();\n\n  SegmentsForm.prototype.render = function () {\n    function render() {\n      var _props2 = this.props,\n          fields = _props2.fields,\n          segment = _props2.segment;\n      var selectedFieldIds = this.state.conditions.map(function (c) {\n        return c.field;\n      }); // Change fields' selectedBy states\n      // const changedFields = fields.map(field =>\n      //   Object.assign(field, {\n      //     selectedBy: selectedFieldIds.indexOf(field._id) > -1 ? 'all' : 'none',\n      //   }),\n      // );\n      // Exclude fields that are already selected\n\n      var changedFields = fields.filter(function (field) {\n        return selectedFieldIds.indexOf(field._id) < 0;\n      });\n      var breadcrumb = [{\n        title: 'Segments',\n        link: '/segments'\n      }, {\n        title: segment ? 'Edit segment' : 'New segment'\n      }];\n      var actionBar = React.createElement(Wrapper.ActionBar, {\n        left: React.createElement(\n          ButtonGroup,\n          null,\n          React.createElement(\n            Button,\n            {\n              bsStyle: \"link\",\n              onClick: this.save\n            },\n            React.createElement(\"i\", {\n              className: \"ion-checkmark-circled\"\n            }),\n            \" Save\"\n          ),\n          React.createElement(\n            Button,\n            {\n              bsStyle: \"link\",\n              href: FlowRouter.path('segments/list')\n            },\n            React.createElement(\"i\", {\n              className: \"ion-close-circled\"\n            }),\n            \" Cancel\"\n          )\n        )\n      });\n      var content = React.createElement(\n        \"div\",\n        {\n          className: \"margined\"\n        },\n        React.createElement(\n          Row,\n          null,\n          React.createElement(\n            Col,\n            {\n              sm: 5\n            },\n            React.createElement(\n              Form,\n              {\n                onSubmit: this.save\n              },\n              React.createElement(\n                FormGroup,\n                null,\n                React.createElement(\n                  ControlLabel,\n                  null,\n                  \"Name\"\n                ),\n                React.createElement(FormControl, {\n                  name: \"name\",\n                  type: \"text\",\n                  required: true,\n                  value: this.state.name,\n                  onChange: this.handleNameChange\n                })\n              ),\n              React.createElement(\n                FormGroup,\n                null,\n                React.createElement(\n                  ControlLabel,\n                  null,\n                  \"Description\"\n                ),\n                React.createElement(FormControl, {\n                  name: \"description\",\n                  type: \"text\",\n                  value: this.state.description || '',\n                  onChange: this.handleDescriptionChange\n                })\n              ),\n              React.createElement(\n                FormGroup,\n                null,\n                React.createElement(\n                  ControlLabel,\n                  null,\n                  \"Sub segment of\"\n                ),\n                React.createElement(\n                  FormControl,\n                  {\n                    name: \"subOf\",\n                    componentClass: \"select\",\n                    value: this.state.subOf || '',\n                    onChange: this.handleChange\n                  },\n                  React.createElement(\n                    \"option\",\n                    {\n                      value: \"\"\n                    },\n                    \"[not selected]\"\n                  ),\n                  this.props.headSegments.map(function (segment) {\n                    return React.createElement(\n                      \"option\",\n                      {\n                        value: segment._id,\n                        key: segment._id\n                      },\n                      segment.name\n                    );\n                  })\n                )\n              ),\n              React.createElement(\n                FormGroup,\n                null,\n                React.createElement(\n                  ControlLabel,\n                  null,\n                  \"Color\"\n                ),\n                React.createElement(FormControl, {\n                  name: \"color\",\n                  type: \"color\",\n                  value: this.state.color,\n                  onChange: this.handleColorChange\n                })\n              )\n            )\n          ),\n          React.createElement(\n            Col,\n            {\n              sm: 7\n            },\n            React.createElement(\n              Panel,\n              {\n                header: React.createElement(\n                  \"div\",\n                  {\n                    className: \"clearfix\"\n                  },\n                  React.createElement(\n                    \"div\",\n                    {\n                      className: \"pull-left\"\n                    },\n                    \"Conditions\"\n                  ),\n                  React.createElement(\n                    \"div\",\n                    {\n                      className: \"pull-right\"\n                    },\n                    React.createElement(\n                      Form,\n                      {\n                        inline: true\n                      },\n                      React.createElement(\n                        FormControl,\n                        {\n                          componentClass: \"select\",\n                          value: this.state.connector,\n                          onChange: this.handleConnectorChange\n                        },\n                        React.createElement(\n                          \"option\",\n                          {\n                            value: \"any\"\n                          },\n                          \"any\"\n                        ),\n                        React.createElement(\n                          \"option\",\n                          {\n                            value: \"all\"\n                          },\n                          \"all\"\n                        )\n                      ),\n                      ' ',\n                      \"of the following conditions\"\n                    )\n                  )\n                ),\n                footer: React.createElement(AddConditionButton, {\n                  fields: changedFields,\n                  addCondition: this.addCondition\n                })\n              },\n              React.createElement(Conditions, {\n                parentSegmentId: this.state.subOf,\n                conditions: this.state.conditions,\n                changeCondition: this.changeCondition,\n                removeCondition: this.removeCondition\n              })\n            )\n          )\n        ),\n        React.createElement(\n          \"h3\",\n          null,\n          \"Preview\"\n        ),\n        React.createElement(Preview, {\n          segment: this.state\n        })\n      );\n      return React.createElement(\n        \"div\",\n        null,\n        React.createElement(Wrapper, {\n          header: React.createElement(Wrapper.Header, {\n            breadcrumb: breadcrumb\n          }),\n          actionBar: actionBar,\n          content: content\n        })\n      );\n    }\n\n    return render;\n  }();\n\n  return SegmentsForm;\n}(Component);\n\nSegmentsForm.propTypes = propTypes;\nmodule.export(\"default\", exports.default = SegmentsForm);","map":{"version":3,"sources":["/imports/react-ui/segments/components/SegmentsForm.js"],"names":["React","PropTypes","Component","module","importSync","v","Form","ButtonGroup","Button","Row","Col","FormGroup","ControlLabel","FormControl","Panel","FlowRouter","Alert","Wrapper","Conditions","AddConditionButton","Preview","propTypes","fields","array","isRequired","create","func","edit","segment","object","headSegments","SegmentsForm","generateRandomColorCode","Math","random","toString","slice","props","state","name","description","subOf","color","conditions","connector","addCondition","bind","changeCondition","removeCondition","handleChange","handleNameChange","handleDescriptionChange","handleColorChange","handleConnectorChange","save","condition","setState","map","c","field","conditionField","filter","e","preventDefault","target","value","submit","params","doc","Object","assign","id","_id","error","reason","successMessage","success","go","render","selectedFieldIds","changedFields","indexOf","breadcrumb","title","link","actionBar","path","content","export","exports","default"],"mappings":"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","file":"/imports/react-ui/segments/components/SegmentsForm.js.map","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport {\n  Form,\n  ButtonGroup,\n  Button,\n  Row,\n  Col,\n  FormGroup,\n  ControlLabel,\n  FormControl,\n  Panel,\n} from 'react-bootstrap';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport Alert from 'meteor/erxes-notifier';\nimport { Wrapper } from '/imports/react-ui/layout/components';\nimport Conditions from './Conditions';\nimport AddConditionButton from './AddConditionButton';\nimport { Preview } from '../containers';\n\nconst propTypes = {\n  fields: PropTypes.array.isRequired,\n  create: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired,\n  segment: PropTypes.object,\n  headSegments: PropTypes.array.isRequired,\n};\n\nclass SegmentsForm extends Component {\n  static generateRandomColorCode() {\n    return `#${Math.random().toString(16).slice(2, 8)}`;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = props.segment\n      ? props.segment\n      : {\n          name: '',\n          description: '',\n          subOf: '',\n          color: SegmentsForm.generateRandomColorCode(),\n          conditions: [],\n          connector: 'any',\n        };\n\n    this.addCondition = this.addCondition.bind(this);\n    this.changeCondition = this.changeCondition.bind(this);\n    this.removeCondition = this.removeCondition.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.handleConnectorChange = this.handleConnectorChange.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  addCondition(condition) {\n    this.setState({\n      conditions: [...this.state.conditions, condition],\n    });\n  }\n\n  changeCondition(condition) {\n    this.setState({\n      conditions: this.state.conditions.map(c => (c.field === condition.field ? condition : c)),\n    });\n  }\n\n  removeCondition(conditionField) {\n    this.setState({\n      conditions: this.state.conditions.filter(c => c.field !== conditionField),\n    });\n  }\n\n  handleChange(e) {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleNameChange(e) {\n    e.preventDefault();\n    this.setState({ name: e.target.value });\n  }\n\n  handleDescriptionChange(e) {\n    e.preventDefault();\n    this.setState({ description: e.target.value });\n  }\n\n  handleColorChange(e) {\n    e.preventDefault();\n    this.setState({ color: e.target.value });\n  }\n\n  handleConnectorChange(e) {\n    e.preventDefault();\n    this.setState({ connector: e.target.value });\n  }\n\n  save(e) {\n    e.preventDefault();\n\n    const { segment, create, edit } = this.props;\n\n    const submit = segment ? edit : create;\n    const { name, description, subOf, color, connector, conditions } = this.state;\n    const params = { doc: { name, description, color, connector, conditions } };\n    if (subOf) {\n      params.doc.subOf = subOf;\n    }\n    Object.assign(params, segment ? { id: segment._id } : {});\n\n    submit(params, error => {\n      if (error) {\n        return Alert.error(error.reason);\n      }\n\n      const successMessage = segment\n        ? 'Segment is successfully changed.'\n        : 'New segment is successfully created.';\n      Alert.success(successMessage);\n      return FlowRouter.go('segments/list');\n    });\n  }\n\n  render() {\n    const { fields, segment } = this.props;\n    const selectedFieldIds = this.state.conditions.map(c => c.field);\n\n    // Change fields' selectedBy states\n    // const changedFields = fields.map(field =>\n    //   Object.assign(field, {\n    //     selectedBy: selectedFieldIds.indexOf(field._id) > -1 ? 'all' : 'none',\n    //   }),\n    // );\n\n    // Exclude fields that are already selected\n    const changedFields = fields.filter(field => selectedFieldIds.indexOf(field._id) < 0);\n\n    const breadcrumb = [\n      { title: 'Segments', link: '/segments' },\n      { title: segment ? 'Edit segment' : 'New segment' },\n    ];\n\n    const actionBar = (\n      <Wrapper.ActionBar\n        left={\n          <ButtonGroup>\n            <Button bsStyle=\"link\" onClick={this.save}>\n              <i className=\"ion-checkmark-circled\" /> Save\n            </Button>\n            <Button bsStyle=\"link\" href={FlowRouter.path('segments/list')}>\n              <i className=\"ion-close-circled\" /> Cancel\n            </Button>\n          </ButtonGroup>\n        }\n      />\n    );\n\n    const content = (\n      <div className=\"margined\">\n        <Row>\n          <Col sm={5}>\n            <Form onSubmit={this.save}>\n              <FormGroup>\n                <ControlLabel>Name</ControlLabel>\n                <FormControl\n                  name=\"name\"\n                  type=\"text\"\n                  required\n                  value={this.state.name}\n                  onChange={this.handleNameChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <ControlLabel>Description</ControlLabel>\n                <FormControl\n                  name=\"description\"\n                  type=\"text\"\n                  value={this.state.description || ''}\n                  onChange={this.handleDescriptionChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <ControlLabel>Sub segment of</ControlLabel>\n                <FormControl\n                  name=\"subOf\"\n                  componentClass=\"select\"\n                  value={this.state.subOf || ''}\n                  onChange={this.handleChange}\n                >\n                  <option value=\"\">[not selected]</option>\n                  {this.props.headSegments.map(segment => (\n                    <option value={segment._id} key={segment._id}>\n                      {segment.name}\n                    </option>\n                  ))}\n                </FormControl>\n              </FormGroup>\n              <FormGroup>\n                <ControlLabel>Color</ControlLabel>\n                <FormControl\n                  name=\"color\"\n                  type=\"color\"\n                  value={this.state.color}\n                  onChange={this.handleColorChange}\n                />\n              </FormGroup>\n            </Form>\n          </Col>\n          <Col sm={7}>\n            <Panel\n              header={\n                <div className=\"clearfix\">\n                  <div className=\"pull-left\">Conditions</div>\n                  <div className=\"pull-right\">\n                    <Form inline>\n                      <FormControl\n                        componentClass=\"select\"\n                        value={this.state.connector}\n                        onChange={this.handleConnectorChange}\n                      >\n                        <option value=\"any\">any</option>\n                        <option value=\"all\">all</option>\n                      </FormControl>{' '}\n                      of the following conditions\n                    </Form>\n                  </div>\n                </div>\n              }\n              footer={\n                <AddConditionButton fields={changedFields} addCondition={this.addCondition} />\n              }\n            >\n              <Conditions\n                parentSegmentId={this.state.subOf}\n                conditions={this.state.conditions}\n                changeCondition={this.changeCondition}\n                removeCondition={this.removeCondition}\n              />\n            </Panel>\n          </Col>\n        </Row>\n\n        <h3>Preview</h3>\n        <Preview segment={this.state} />\n      </div>\n    );\n\n    return (\n      <div>\n        <Wrapper\n          header={<Wrapper.Header breadcrumb={breadcrumb} />}\n          actionBar={actionBar}\n          content={content}\n        />\n      </div>\n    );\n  }\n}\n\nSegmentsForm.propTypes = propTypes;\n\nexport default SegmentsForm;\n"]},"hash":"2bea07cc859b2ccd61d687813bcbb9b5b8b9daae"}
