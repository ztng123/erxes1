{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["uploadHandlerBase","params"],"specifiers":[{"kind":"local","local":"uploadHandlerBase","exported":"default"},{"kind":"local","local":"params","exported":"default"}]}}},"options":{"filename":"/imports/api/client/uploadHandlerBase.js","filenameRelative":"/imports/api/client/uploadHandlerBase.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/client/uploadHandlerBase.js.map","sourceFileName":"/imports/api/client/uploadHandlerBase.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"uploadHandlerBase"},"ignored":false,"code":"module.export({\n  \"default\": function () {\n    return uploadHandlerBase;\n  }\n});\n\nfunction uploadHandlerBase(params) {\n  var file = params.file,\n      afterRead = params.afterRead,\n      uploadAction = params.uploadAction; // initiate upload file reader\n\n  var uploadReader = new FileReader();\n  var fileInfo = {\n    name: file.name,\n    size: file.size,\n    type: file.type\n  }; // after read proccess done\n\n  uploadReader.onloadend = function () {\n    var data = new Uint8Array(uploadReader.result);\n    uploadAction({\n      data: data,\n      fileInfo: fileInfo\n    });\n  }; // begin read\n\n\n  uploadReader.readAsArrayBuffer(file); // read as data url for preview purposes\n\n  if (afterRead) {\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      afterRead({\n        result: reader.result,\n        fileInfo: fileInfo\n      });\n    };\n\n    reader.readAsDataURL(file);\n  }\n}","map":{"version":3,"sources":["/imports/api/client/uploadHandlerBase.js"],"names":["module","export","uploadHandlerBase","params","file","afterRead","uploadAction","uploadReader","FileReader","fileInfo","name","size","type","onloadend","data","Uint8Array","result","readAsArrayBuffer","reader","readAsDataURL"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIC,iBAAJ;AAAA;AAAT,CAAd;;AAIe,SAASA,iBAAT,CAA2BC,MAA3B,EAAmC;AAAA,MAG9CC,IAH8C,GAU5CD,MAV4C,CAG9CC,IAH8C;AAAA,MAM9CC,SAN8C,GAU5CF,MAV4C,CAM9CE,SAN8C;AAAA,MAS9CC,YAT8C,GAU5CH,MAV4C,CAS9CG,YAT8C,EAYhD;;AACA,MAAMC,eAAe,IAAIC,UAAJ,EAArB;AAEA,MAAMC,WAAW;AAAEC,UAAMN,KAAKM,IAAb;AAAmBC,UAAMP,KAAKO,IAA9B;AAAoCC,UAAMR,KAAKQ;AAA/C,GAAjB,CAfgD,CAiBhD;;AACAL,eAAaM,SAAb,GAAyB,YAAM;AAC7B,QAAMC,OAAO,IAAIC,UAAJ,CAAeR,aAAaS,MAA5B,CAAb;AAEAV,iBAAa;AAAEQ,gBAAF;AAAQL;AAAR,KAAb;AACD,GAJD,CAlBgD,CAwBhD;;;AACAF,eAAaU,iBAAb,CAA+Bb,IAA/B,EAzBgD,CA2BhD;;AACA,MAAIC,SAAJ,EAAe;AACb,QAAMa,SAAS,IAAIV,UAAJ,EAAf;;AAEAU,WAAOL,SAAP,GAAmB,YAAM;AACvBR,gBAAU;AACRW,gBAAQE,OAAOF,MADP;AAERP;AAFQ,OAAV;AAID,KALD;;AAOAS,WAAOC,aAAP,CAAqBf,IAArB;AACD;AACF","file":"/imports/api/client/uploadHandlerBase.js.map","sourcesContent":["/*\n * Using in both api & main projects\n */\n\nexport default function uploadHandlerBase(params) {\n  const {\n    // Blob object\n    file,\n\n    // for preview purpose\n    afterRead,\n\n    // main upload method\n    uploadAction,\n  } = params;\n\n  // initiate upload file reader\n  const uploadReader = new FileReader();\n\n  const fileInfo = { name: file.name, size: file.size, type: file.type };\n\n  // after read proccess done\n  uploadReader.onloadend = () => {\n    const data = new Uint8Array(uploadReader.result);\n\n    uploadAction({ data, fileInfo });\n  };\n\n  // begin read\n  uploadReader.readAsArrayBuffer(file);\n\n  // read as data url for preview purposes\n  if (afterRead) {\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      afterRead({\n        result: reader.result,\n        fileInfo,\n      });\n    };\n\n    reader.readAsDataURL(file);\n  }\n}\n"]},"hash":"6e80c9799a42ac0d817dec11d38d343270a6052a"}
