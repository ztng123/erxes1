{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"/imports/api/conversations/conversations","imported":["Conversations"],"specifiers":[{"kind":"named","imported":"Conversations","local":"Conversations"}]},{"source":"/imports/api/engage/engage","imported":["Messages"],"specifiers":[{"kind":"named","imported":"Messages","local":"Messages"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"../tags","imported":["Tags","FormSchema","TagItemSchema"],"specifiers":[{"kind":"named","imported":"Tags","local":"Tags"},{"kind":"named","imported":"FormSchema","local":"FormSchema"},{"kind":"named","imported":"TagItemSchema","local":"TagItemSchema"}]},{"source":"../constants","imported":["TAG_TYPES"],"specifiers":[{"kind":"named","imported":"TAG_TYPES","local":"TAG_TYPES"}]},{"source":"./api","imported":["tagObject"],"specifiers":[{"kind":"named","imported":"tagObject","local":"tagObject"}]}],"exports":{"exported":["add","edit","remove","tag"],"specifiers":[{"kind":"local","local":"add","exported":"add"},{"kind":"local","local":"edit","exported":"edit"},{"kind":"local","local":"remove","exported":"remove"},{"kind":"local","local":"tag","exported":"tag"}]}}},"options":{"filename":"/imports/api/tags/server/methods.js","filenameRelative":"/imports/api/tags/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/tags/server/methods.js.map","sourceFileName":"/imports/api/tags/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  add: function () {\n    return add;\n  },\n  edit: function () {\n    return edit;\n  },\n  remove: function () {\n    return remove;\n  },\n  tag: function () {\n    return tag;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 2);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 3);\nvar Conversations = void 0;\nmodule.importSync(\"/imports/api/conversations/conversations\", {\n  Conversations: function (v) {\n    Conversations = v;\n  }\n}, 4);\nvar Messages = void 0;\nmodule.importSync(\"/imports/api/engage/engage\", {\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 5);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 6);\nvar Tags = void 0,\n    FormSchema = void 0,\n    TagItemSchema = void 0;\nmodule.importSync(\"../tags\", {\n  Tags: function (v) {\n    Tags = v;\n  },\n  FormSchema: function (v) {\n    FormSchema = v;\n  },\n  TagItemSchema: function (v) {\n    TagItemSchema = v;\n  }\n}, 7);\nvar TAG_TYPES = void 0;\nmodule.importSync(\"../constants\", {\n  TAG_TYPES: function (v) {\n    TAG_TYPES = v;\n  }\n}, 8);\nvar tagObject = void 0;\nmodule.importSync(\"./api\", {\n  tagObject: function (v) {\n    tagObject = v;\n  }\n}, 9);\nvar add = new ValidatedMethod({\n  name: 'tags.add',\n  validate: FormSchema.validator(),\n  mixins: [ErxesMixin],\n  run: function (doc) {\n    return Tags.insert(doc);\n  }\n});\nvar edit = new ValidatedMethod({\n  name: 'tags.edit',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var id = _ref.id,\n        doc = _ref.doc;\n    check(id, String);\n    check(doc, FormSchema);\n  },\n  run: function (_ref2) {\n    var id = _ref2.id,\n        doc = _ref2.doc;\n\n    if (!Tags.findOne(id)) {\n      throw new Meteor.Error('tags.edit.notFound', 'Tag not found');\n    }\n\n    return Tags.update(id, {\n      $set: doc\n    });\n  }\n});\nvar remove = new ValidatedMethod({\n  name: 'tags.remove',\n  mixins: [ErxesMixin],\n  validate: function (ids) {\n    check(ids, [String]);\n  },\n  run: function (ids) {\n    var tagCount = Tags.find({\n      _id: {\n        $in: ids\n      }\n    }).count();\n\n    if (tagCount !== ids.length) {\n      throw new Meteor.Error('tags.remove.notFound', 'Tag not found');\n    }\n\n    var count = 0;\n    count += Customers.find({\n      tagIds: {\n        $in: ids\n      }\n    }).count();\n    count += Conversations.find({\n      tagIds: {\n        $in: ids\n      }\n    }).count();\n    count += Messages.find({\n      tagIds: {\n        $in: ids\n      }\n    }).count(); // can't remove a tag with tagged objects\n\n    if (count > 0) {\n      throw new Meteor.Error('tags.remove.restricted', \"Can't remove a tag with tagged object(s)\");\n    }\n\n    return Tags.remove({\n      _id: {\n        $in: ids\n      }\n    });\n  }\n});\nvar tag = new ValidatedMethod({\n  name: 'tags.tag',\n  mixins: [ErxesMixin],\n  validate: TagItemSchema.validator(),\n  run: function (_ref3) {\n    var type = _ref3.type,\n        targetIds = _ref3.targetIds,\n        tagIds = _ref3.tagIds;\n    var collection = Conversations;\n\n    if (type === TAG_TYPES.CUSTOMER) {\n      collection = Customers;\n    }\n\n    if (type === TAG_TYPES.ENGAGE_MESSAGE) {\n      collection = Messages;\n    }\n\n    tagObject({\n      tagIds: tagIds,\n      objectIds: targetIds,\n      collection: collection\n    });\n  }\n});","map":{"version":3,"sources":["/imports/api/tags/server/methods.js"],"names":["module","export","add","edit","remove","tag","Meteor","importSync","v","check","ValidatedMethod","Customers","Conversations","Messages","ErxesMixin","Tags","FormSchema","TagItemSchema","TAG_TYPES","tagObject","name","validate","validator","mixins","run","doc","insert","id","String","findOne","Error","update","$set","ids","tagCount","find","_id","$in","count","length","tagIds","type","targetIds","collection","CUSTOMER","ENGAGE_MESSAGE","objectIds"],"mappings":"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","file":"/imports/api/tags/server/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Customers } from '/imports/api/customers/customers';\nimport { Conversations } from '/imports/api/conversations/conversations';\nimport { Messages } from '/imports/api/engage/engage';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Tags, FormSchema, TagItemSchema } from '../tags';\nimport { TAG_TYPES } from '../constants';\nimport { tagObject } from './api';\n\nexport const add = new ValidatedMethod({\n  name: 'tags.add',\n  validate: FormSchema.validator(),\n  mixins: [ErxesMixin],\n\n  run(doc) {\n    return Tags.insert(doc);\n  },\n});\n\nexport const edit = new ValidatedMethod({\n  name: 'tags.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, FormSchema);\n  },\n\n  run({ id, doc }) {\n    if (!Tags.findOne(id)) {\n      throw new Meteor.Error('tags.edit.notFound', 'Tag not found');\n    }\n\n    return Tags.update(id, { $set: doc });\n  },\n});\n\nexport const remove = new ValidatedMethod({\n  name: 'tags.remove',\n  mixins: [ErxesMixin],\n\n  validate(ids) {\n    check(ids, [String]);\n  },\n\n  run(ids) {\n    const tagCount = Tags.find({ _id: { $in: ids } }).count();\n\n    if (tagCount !== ids.length) {\n      throw new Meteor.Error('tags.remove.notFound', 'Tag not found');\n    }\n\n    let count = 0;\n\n    count += Customers.find({ tagIds: { $in: ids } }).count();\n    count += Conversations.find({ tagIds: { $in: ids } }).count();\n    count += Messages.find({ tagIds: { $in: ids } }).count();\n\n    // can't remove a tag with tagged objects\n    if (count > 0) {\n      throw new Meteor.Error('tags.remove.restricted', \"Can't remove a tag with tagged object(s)\");\n    }\n\n    return Tags.remove({ _id: { $in: ids } });\n  },\n});\n\n// actual tag action\nexport const tag = new ValidatedMethod({\n  name: 'tags.tag',\n  mixins: [ErxesMixin],\n  validate: TagItemSchema.validator(),\n\n  run({ type, targetIds, tagIds }) {\n    let collection = Conversations;\n\n    if (type === TAG_TYPES.CUSTOMER) {\n      collection = Customers;\n    }\n\n    if (type === TAG_TYPES.ENGAGE_MESSAGE) {\n      collection = Messages;\n    }\n\n    tagObject({\n      tagIds,\n      objectIds: targetIds,\n      collection,\n    });\n  },\n});\n"]},"hash":"6304edbd91625e6f2f7fa930664ff82f68c3f754"}
