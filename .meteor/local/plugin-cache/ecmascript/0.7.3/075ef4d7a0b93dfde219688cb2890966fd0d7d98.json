{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"./messageCountDenormalizer.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"messageCountDenormalizer"}]},{"source":"./conversations","imported":["addParticipator"],"specifiers":[{"kind":"named","imported":"addParticipator","local":"addParticipator"}]}],"exports":{"exported":["Messages","FormSchema"],"specifiers":[{"kind":"local","local":"Messages","exported":"Messages"},{"kind":"local","local":"FormSchema","exported":"FormSchema"}]}}},"options":{"filename":"/imports/api/conversations/messages.js","filenameRelative":"/imports/api/conversations/messages.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/conversations/messages.js.map","sourceFileName":"/imports/api/conversations/messages.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"messages"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Messages: function () {\n    return Messages;\n  },\n  FormSchema: function () {\n    return FormSchema;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 2);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 3);\n\nvar _ = void 0;\n\nmodule.importSync(\"meteor/underscore\", {\n  _: function (v) {\n    _ = v;\n  }\n}, 4);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 5);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 6);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 7);\nvar messageCountDenormalizer = void 0;\nmodule.importSync(\"./messageCountDenormalizer.js\", {\n  \"default\": function (v) {\n    messageCountDenormalizer = v;\n  }\n}, 8);\nvar addParticipator = void 0;\nmodule.importSync(\"./conversations\", {\n  addParticipator: function (v) {\n    addParticipator = v;\n  }\n}, 9);\n\nvar MessagesCollection = function (_Mongo$Collection) {\n  (0, _inherits3.default)(MessagesCollection, _Mongo$Collection);\n\n  function MessagesCollection() {\n    (0, _classCallCheck3.default)(this, MessagesCollection);\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));\n  }\n\n  MessagesCollection.prototype.insert = function () {\n    function insert(doc, callback) {\n      var message = Object.assign({\n        createdAt: new Date()\n      }, doc);\n\n      var result = _Mongo$Collection.prototype.insert.call(this, message, callback);\n\n      messageCountDenormalizer.afterInsertMessage(message); // add created user to participators\n\n      if (message.userId) {\n        addParticipator({\n          conversationId: message.conversationId,\n          userId: message.userId\n        });\n      } // add mentioned users to participators\n\n\n      _.each(message.mentionedUserIds || [], function (userId) {\n        addParticipator({\n          conversationId: message.conversationId,\n          userId: userId\n        });\n      });\n\n      return result;\n    }\n\n    return insert;\n  }();\n\n  MessagesCollection.prototype.remove = function () {\n    function remove(selector) {\n      var messages = this.find(selector).fetch();\n\n      var result = _Mongo$Collection.prototype.remove.call(this, selector);\n\n      messageCountDenormalizer.afterRemoveMessages(messages);\n      return result;\n    }\n\n    return remove;\n  }();\n\n  return MessagesCollection;\n}(Mongo.Collection);\n\nvar Messages = new MessagesCollection('conversation_messages');\nMessages.helpers({\n  customer: function () {\n    return Customers.findOne(this.customerId);\n  },\n  user: function () {\n    return Meteor.users.findOne(this.userId);\n  }\n});\nMessages.deny({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\nvar FormSchema = new SimpleSchema({\n  // only required when there is no attachments\n  content: {\n    type: String,\n    defaultValue: '',\n    optional: true\n  },\n  attachments: {\n    type: [new SimpleSchema({\n      url: {\n        type: String,\n        optional: true\n      },\n      type: {\n        type: String,\n        optional: true\n      },\n      name: {\n        type: String,\n        optional: true\n      },\n      size: {\n        type: Number,\n        optional: true\n      }\n    })],\n    optional: true\n  },\n  mentionedUserIds: {\n    type: [String],\n    optional: true\n  },\n  conversationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  internal: {\n    type: Boolean\n  }\n});\nvar facebookSchema = new SimpleSchema({\n  commentId: {\n    type: String,\n    optional: true\n  },\n  // comment, reaction, etc ...\n  item: {\n    type: String,\n    optional: true\n  },\n  // when share photo\n  photoId: {\n    type: String,\n    optional: true\n  },\n  // when share video\n  videoId: {\n    type: String,\n    optional: true\n  },\n  link: {\n    type: String,\n    optional: true\n  },\n  reactionType: {\n    type: String,\n    optional: true\n  },\n  senderId: {\n    type: String,\n    optional: true\n  },\n  senderName: {\n    type: String,\n    optional: true\n  }\n});\nMessages.schema = new SimpleSchema([FormSchema, {\n  customerId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  userId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  createdAt: {\n    type: Date\n  },\n  isCustomerRead: {\n    type: Boolean,\n    optional: true\n  },\n  engageData: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  formWidgetData: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  facebookData: {\n    type: facebookSchema,\n    optional: true\n  }\n}]);\nMessages.attachSchema(Messages.schema);\nMessages.publicFields = {\n  content: 1,\n  attachments: 1,\n  mentionedUserIds: 1,\n  conversationId: 1,\n  customerId: 1,\n  userId: 1,\n  createdAt: 1,\n  engageData: 1,\n  formWidgetData: 1,\n  facebookData: 1,\n  internal: 1\n};\nFactory.define('message', Messages, {\n  content: function () {\n    return faker.lorem.sentence();\n  },\n  conversationId: function () {\n    return Random.id();\n  },\n  customerId: function () {\n    return Random.id();\n  },\n  userId: function () {\n    return Random.id();\n  },\n  internal: function () {\n    return false;\n  }\n});","map":{"version":3,"sources":["/imports/api/conversations/messages.js"],"names":["module","export","Messages","FormSchema","faker","importSync","v","Meteor","Mongo","Random","_","Factory","SimpleSchema","Customers","messageCountDenormalizer","addParticipator","MessagesCollection","insert","doc","callback","message","Object","assign","createdAt","Date","result","afterInsertMessage","userId","conversationId","each","mentionedUserIds","remove","selector","messages","find","fetch","afterRemoveMessages","Collection","helpers","customer","findOne","customerId","user","users","deny","update","content","type","String","defaultValue","optional","attachments","url","name","size","Number","regEx","RegEx","Id","internal","Boolean","facebookSchema","commentId","item","photoId","videoId","link","reactionType","senderId","senderName","schema","isCustomerRead","engageData","blackbox","formWidgetData","facebookData","attachSchema","publicFields","define","lorem","sentence","id"],"mappings":"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","file":"/imports/api/conversations/messages.js.map","sourcesContent":["import faker from 'faker';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\n\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\nimport { Customers } from '/imports/api/customers/customers';\nimport messageCountDenormalizer from './messageCountDenormalizer.js';\n\nimport { addParticipator } from './conversations';\n\nclass MessagesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    const message = Object.assign({ createdAt: new Date() }, doc);\n\n    const result = super.insert(message, callback);\n\n    messageCountDenormalizer.afterInsertMessage(message);\n\n    // add created user to participators\n    if (message.userId) {\n      addParticipator({\n        conversationId: message.conversationId,\n        userId: message.userId,\n      });\n    }\n\n    // add mentioned users to participators\n    _.each(message.mentionedUserIds || [], userId => {\n      addParticipator({\n        conversationId: message.conversationId,\n        userId,\n      });\n    });\n\n    return result;\n  }\n\n  remove(selector) {\n    const messages = this.find(selector).fetch();\n    const result = super.remove(selector);\n\n    messageCountDenormalizer.afterRemoveMessages(messages);\n\n    return result;\n  }\n}\n\nexport const Messages = new MessagesCollection('conversation_messages');\n\nMessages.helpers({\n  customer() {\n    return Customers.findOne(this.customerId);\n  },\n\n  user() {\n    return Meteor.users.findOne(this.userId);\n  },\n});\n\nMessages.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nexport const FormSchema = new SimpleSchema({\n  // only required when there is no attachments\n  content: {\n    type: String,\n    defaultValue: '',\n    optional: true,\n  },\n\n  attachments: {\n    type: [\n      new SimpleSchema({\n        url: { type: String, optional: true },\n        type: { type: String, optional: true },\n        name: { type: String, optional: true },\n        size: { type: Number, optional: true },\n      }),\n    ],\n\n    optional: true,\n  },\n\n  mentionedUserIds: {\n    type: [String],\n    optional: true,\n  },\n\n  conversationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n\n  internal: {\n    type: Boolean,\n  },\n});\n\nconst facebookSchema = new SimpleSchema({\n  commentId: {\n    type: String,\n    optional: true,\n  },\n\n  // comment, reaction, etc ...\n  item: {\n    type: String,\n    optional: true,\n  },\n\n  // when share photo\n  photoId: {\n    type: String,\n    optional: true,\n  },\n\n  // when share video\n  videoId: {\n    type: String,\n    optional: true,\n  },\n\n  link: {\n    type: String,\n    optional: true,\n  },\n\n  reactionType: {\n    type: String,\n    optional: true,\n  },\n\n  senderId: {\n    type: String,\n    optional: true,\n  },\n\n  senderName: {\n    type: String,\n    optional: true,\n  },\n});\n\nMessages.schema = new SimpleSchema([\n  FormSchema,\n  {\n    customerId: {\n      type: String,\n      optional: true,\n      regEx: SimpleSchema.RegEx.Id,\n    },\n\n    userId: {\n      type: String,\n      optional: true,\n      regEx: SimpleSchema.RegEx.Id,\n    },\n\n    createdAt: {\n      type: Date,\n    },\n\n    isCustomerRead: {\n      type: Boolean,\n      optional: true,\n    },\n\n    engageData: {\n      type: Object,\n      optional: true,\n      blackbox: true,\n    },\n\n    formWidgetData: {\n      type: Object,\n      optional: true,\n      blackbox: true,\n    },\n\n    facebookData: {\n      type: facebookSchema,\n      optional: true,\n    },\n  },\n]);\n\nMessages.attachSchema(Messages.schema);\n\nMessages.publicFields = {\n  content: 1,\n  attachments: 1,\n  mentionedUserIds: 1,\n  conversationId: 1,\n  customerId: 1,\n  userId: 1,\n  createdAt: 1,\n  engageData: 1,\n  formWidgetData: 1,\n  facebookData: 1,\n  internal: 1,\n};\n\nFactory.define('message', Messages, {\n  content: () => faker.lorem.sentence(),\n  conversationId: () => Random.id(),\n  customerId: () => Random.id(),\n  userId: () => Random.id(),\n  internal: () => false,\n});\n"]},"hash":"075ef4d7a0b93dfde219688cb2890966fd0d7d98"}
