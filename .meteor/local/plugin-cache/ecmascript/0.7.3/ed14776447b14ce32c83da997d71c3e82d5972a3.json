{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react-komposer","imported":["compose"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"}]},{"source":"/imports/react-ui/utils","imported":["getTrackerLoader"],"specifiers":[{"kind":"named","imported":"getTrackerLoader","local":"getTrackerLoader"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"../components","imported":["ManageColumns"],"specifiers":[{"kind":"named","imported":"ManageColumns","local":"ManageColumns"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/customers/containers/ManageColumns.js","filenameRelative":"/imports/react-ui/customers/containers/ManageColumns.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/customers/containers/ManageColumns.js.map","sourceFileName":"/imports/react-ui/customers/containers/ManageColumns.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ManageColumns"},"ignored":false,"code":"var compose = void 0;\nmodule.importSync(\"react-komposer\", {\n  compose: function (v) {\n    compose = v;\n  }\n}, 0);\nvar getTrackerLoader = void 0;\nmodule.importSync(\"/imports/react-ui/utils\", {\n  getTrackerLoader: function (v) {\n    getTrackerLoader = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 3);\nvar ManageColumns = void 0;\nmodule.importSync(\"../components\", {\n  ManageColumns: function (v) {\n    ManageColumns = v;\n  }\n}, 4);\n\nfunction composer(props, onData) {\n  // If there's no customer fields config, all fields will be selected\n  var selected = Meteor.user() && Meteor.user().configs && Meteor.user().configs.customerFields || Customers.getPublicFields();\n\n  var saveConfig = function (fields) {\n    Meteor.call('users.configCustomerFields', {\n      fields: fields\n    });\n  };\n\n  onData(null, {\n    fields: Customers.getPublicFields().map(function (_ref) {\n      var key = _ref.key,\n          label = _ref.label;\n      return {\n        _id: key,\n        title: label,\n        selectedBy: selected.find(function (s) {\n          return s.key === key;\n        }) ? 'all' : 'none'\n      };\n    }),\n    saveConfig: saveConfig\n  });\n}\n\nmodule.export(\"default\", exports.default = compose(getTrackerLoader(composer))(ManageColumns));","map":{"version":3,"sources":["/imports/react-ui/customers/containers/ManageColumns.js"],"names":["compose","module","importSync","v","getTrackerLoader","Meteor","Customers","ManageColumns","composer","props","onData","selected","user","configs","customerFields","getPublicFields","saveConfig","call","fields","map","key","label","_id","title","selectedBy","find","s","export","exports","default"],"mappings":"AAAA,IAAIA,gBAAJ;AAAYC,OAAOC,UAAP,CAAkB,gBAAlB,EAAmC;AAACF,WAAQ,UAASG,CAAT,EAAW;AAACH,cAAQG,CAAR;AAAU;AAA/B,CAAnC,EAAoE,CAApE;AAAuE,IAAIC,yBAAJ;AAAqBH,OAAOC,UAAP,CAAkB,yBAAlB,EAA4C;AAACE,oBAAiB,UAASD,CAAT,EAAW;AAACC,uBAAiBD,CAAjB;AAAmB;AAAjD,CAA5C,EAA+F,CAA/F;AAAkG,IAAIE,eAAJ;AAAWJ,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACG,UAAO,UAASF,CAAT,EAAW;AAACE,aAAOF,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIG,kBAAJ;AAAcL,OAAOC,UAAP,CAAkB,kCAAlB,EAAqD;AAACI,aAAU,UAASH,CAAT,EAAW;AAACG,gBAAUH,CAAV;AAAY;AAAnC,CAArD,EAA0F,CAA1F;AAA6F,IAAII,sBAAJ;AAAkBN,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACK,iBAAc,UAASJ,CAAT,EAAW;AAACI,oBAAcJ,CAAd;AAAgB;AAA3C,CAAlC,EAA+E,CAA/E;;AAMtZ,SAASK,QAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAC/B;AACA,MAAMC,WACHN,OAAOO,IAAP,MAAiBP,OAAOO,IAAP,GAAcC,OAA/B,IAA0CR,OAAOO,IAAP,GAAcC,OAAd,CAAsBC,cAAjE,IACAR,UAAUS,eAAV,EAFF;;AAGA,MAAMC,aAAa,kBAAU;AAC3BX,WAAOY,IAAP,CAAY,4BAAZ,EAA0C;AAAEC;AAAF,KAA1C;AACD,GAFD;;AAIAR,SAAO,IAAP,EAAa;AACXQ,YAAQZ,UAAUS,eAAV,GAA4BI,GAA5B,CAAgC;AAAA,UAAGC,GAAH,QAAGA,GAAH;AAAA,UAAQC,KAAR,QAAQA,KAAR;AAAA,aAAqB;AAC3DC,aAAKF,GADsD;AAE3DG,eAAOF,KAFoD;AAG3DG,oBAAYb,SAASc,IAAT,CAAc;AAAA,iBAAKC,EAAEN,GAAF,KAAUA,GAAf;AAAA,SAAd,IAAoC,KAApC,GAA4C;AAHG,OAArB;AAAA,KAAhC,CADG;AAMXJ;AANW,GAAb;AAQD;;AAvBDf,OAAO0B,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GAyBT7B,QAAQI,iBAAiBI,QAAjB,CAAR,EAAoCD,aAApC,CAzBf","file":"/imports/react-ui/customers/containers/ManageColumns.js.map","sourcesContent":["import { compose } from 'react-komposer';\nimport { getTrackerLoader } from '/imports/react-ui/utils';\nimport { Meteor } from 'meteor/meteor';\nimport { Customers } from '/imports/api/customers/customers';\nimport { ManageColumns } from '../components';\n\nfunction composer(props, onData) {\n  // If there's no customer fields config, all fields will be selected\n  const selected =\n    (Meteor.user() && Meteor.user().configs && Meteor.user().configs.customerFields) ||\n    Customers.getPublicFields();\n  const saveConfig = fields => {\n    Meteor.call('users.configCustomerFields', { fields });\n  };\n\n  onData(null, {\n    fields: Customers.getPublicFields().map(({ key, label }) => ({\n      _id: key,\n      title: label,\n      selectedBy: selected.find(s => s.key === key) ? 'all' : 'none',\n    })),\n    saveConfig,\n  });\n}\n\nexport default compose(getTrackerLoader(composer))(ManageColumns);\n"]},"hash":"ed14776447b14ce32c83da997d71c3e82d5972a3"}
