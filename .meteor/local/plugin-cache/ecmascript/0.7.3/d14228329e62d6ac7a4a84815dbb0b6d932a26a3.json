{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"meteor/kadira:flow-router","imported":["FlowRouter"],"specifiers":[{"kind":"named","imported":"FlowRouter","local":"FlowRouter"}]},{"source":"meteor/erxes-notifier","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]},{"source":"../..","imported":["FilterableList"],"specifiers":[{"kind":"named","imported":"FilterableList","local":"FilterableList"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/common/tagger/components/Tagger.js","filenameRelative":"/imports/react-ui/common/tagger/components/Tagger.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/common/tagger/components/Tagger.js.map","sourceFileName":"/imports/react-ui/common/tagger/components/Tagger.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Tagger"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    PropTypes = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar FlowRouter = void 0;\nmodule.importSync(\"meteor/kadira:flow-router\", {\n  FlowRouter: function (v) {\n    FlowRouter = v;\n  }\n}, 1);\nvar Alert = void 0;\nmodule.importSync(\"meteor/erxes-notifier\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 2);\nvar FilterableList = void 0;\nmodule.importSync(\"../..\", {\n  FilterableList: function (v) {\n    FilterableList = v;\n  }\n}, 3);\nvar propTypes = {\n  type: PropTypes.string.isRequired,\n  tagsLoading: PropTypes.bool,\n  targetsLoading: PropTypes.bool,\n  tags: PropTypes.array,\n  targets: PropTypes.array,\n  tag: PropTypes.func.isRequired,\n  afterSave: PropTypes.func,\n  event: PropTypes.oneOf(['onClick', 'onExit']),\n  className: PropTypes.string\n};\n\nvar Tagger = function (_Component) {\n  (0, _inherits3.default)(Tagger, _Component);\n\n  function Tagger(props) {\n    (0, _classCallCheck3.default)(this, Tagger);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.state = {\n      tagsForList: _this.generateTagsParams(props.tags, props.targets)\n    };\n    _this.tag = _this.tag.bind(_this);\n    return _this;\n  }\n\n  Tagger.prototype.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      this.setState({\n        tagsForList: this.generateTagsParams(nextProps.tags, nextProps.targets)\n      });\n    }\n\n    return componentWillReceiveProps;\n  }(); /**\n        * Returns array of tags object\n        */\n\n  Tagger.prototype.generateTagsParams = function () {\n    function generateTagsParams() {\n      var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var targets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      return tags.map(function (_ref) {\n        var _id = _ref._id,\n            name = _ref.name,\n            colorCode = _ref.colorCode;\n        // Current tag's selection state (all, some or none)\n        var count = targets.reduce(function (memo, target) {\n          return memo + (target.tagIds && target.tagIds.indexOf(_id) > -1);\n        }, 0);\n        var state = 'none';\n\n        if (count > 0) {\n          if (count === targets.length) {\n            state = 'all';\n          } else if (count < targets.length) {\n            state = 'some';\n          }\n        }\n\n        return {\n          _id: _id,\n          title: name,\n          iconClass: 'ion-pricetag',\n          iconColor: colorCode,\n          selectedBy: state\n        };\n      });\n    }\n\n    return generateTagsParams;\n  }();\n\n  Tagger.prototype.tag = function () {\n    function tag(tags) {\n      var _props = this.props,\n          tag = _props.tag,\n          targets = _props.targets,\n          type = _props.type,\n          afterSave = _props.afterSave; // detect changes\n\n      var tagsForList = this.state.tagsForList;\n      var unchanged = tagsForList.reduce(function (prev, current, index) {\n        return prev && current.selectedBy === tags[index].selectedBy;\n      }, true);\n\n      if (unchanged) {\n        return;\n      }\n\n      var param = {\n        type: type,\n        targetIds: targets.map(function (t) {\n          return t._id;\n        }),\n        tagIds: tags.filter(function (t) {\n          return t.selectedBy === 'all';\n        }).map(function (t) {\n          return t._id;\n        })\n      };\n      tag(param, function (error) {\n        if (error) {\n          return Alert.error(error.reason);\n        }\n\n        var message = targets.length > 1 ? \"Selected \" + type + \"s have been tagged!\" : \"The \" + type + \" has been tagged!\";\n        Alert.success(message);\n\n        if (afterSave) {\n          afterSave();\n        }\n      });\n    }\n\n    return tag;\n  }();\n\n  Tagger.prototype.render = function () {\n    function render() {\n      var _props4;\n\n      var _props2 = this.props,\n          targetsLoading = _props2.targetsLoading,\n          tagsLoading = _props2.tagsLoading;\n\n      if (targetsLoading || tagsLoading) {\n        return React.createElement(\n          \"div\",\n          null,\n          \"Loading ...\"\n        );\n      }\n\n      var _props3 = this.props,\n          className = _props3.className,\n          event = _props3.event,\n          type = _props3.type;\n      var links = [{\n        title: 'Manage tags',\n        href: FlowRouter.path('tags/list', {\n          type: type\n        })\n      }];\n      var props = (_props4 = {\n        className: className,\n        links: links,\n        items: JSON.parse(JSON.stringify(this.state.tagsForList))\n      }, _props4[event] = this.tag, _props4);\n      return React.createElement(FilterableList, props);\n    }\n\n    return render;\n  }();\n\n  return Tagger;\n}(Component);\n\nTagger.propTypes = propTypes;\nmodule.export(\"default\", exports.default = Tagger);","map":{"version":3,"sources":["/imports/react-ui/common/tagger/components/Tagger.js"],"names":["React","PropTypes","Component","module","importSync","v","FlowRouter","Alert","FilterableList","propTypes","type","string","isRequired","tagsLoading","bool","targetsLoading","tags","array","targets","tag","func","afterSave","event","oneOf","className","Tagger","props","state","tagsForList","generateTagsParams","bind","componentWillReceiveProps","nextProps","setState","map","_id","name","colorCode","count","reduce","memo","target","tagIds","indexOf","length","title","iconClass","iconColor","selectedBy","unchanged","prev","current","index","param","targetIds","t","filter","error","reason","message","success","render","links","href","path","items","JSON","parse","stringify","export","exports","default"],"mappings":"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","file":"/imports/react-ui/common/tagger/components/Tagger.js.map","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport Alert from 'meteor/erxes-notifier';\nimport { FilterableList } from '../..';\n\nconst propTypes = {\n  type: PropTypes.string.isRequired,\n  tagsLoading: PropTypes.bool,\n  targetsLoading: PropTypes.bool,\n  tags: PropTypes.array,\n  targets: PropTypes.array,\n  tag: PropTypes.func.isRequired,\n  afterSave: PropTypes.func,\n  event: PropTypes.oneOf(['onClick', 'onExit']),\n  className: PropTypes.string,\n};\n\nclass Tagger extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tagsForList: this.generateTagsParams(props.tags, props.targets),\n    };\n\n    this.tag = this.tag.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      tagsForList: this.generateTagsParams(nextProps.tags, nextProps.targets),\n    });\n  }\n\n  /**\n   * Returns array of tags object\n   */\n  generateTagsParams(tags = [], targets = []) {\n    return tags.map(({ _id, name, colorCode }) => {\n      // Current tag's selection state (all, some or none)\n      const count = targets.reduce(\n        (memo, target) => memo + (target.tagIds && target.tagIds.indexOf(_id) > -1),\n        0,\n      );\n\n      let state = 'none';\n      if (count > 0) {\n        if (count === targets.length) {\n          state = 'all';\n        } else if (count < targets.length) {\n          state = 'some';\n        }\n      }\n\n      return {\n        _id,\n        title: name,\n        iconClass: 'ion-pricetag',\n        iconColor: colorCode,\n        selectedBy: state,\n      };\n    });\n  }\n\n  tag(tags) {\n    const { tag, targets, type, afterSave } = this.props;\n\n    // detect changes\n    const { tagsForList } = this.state;\n    const unchanged = tagsForList.reduce(\n      (prev, current, index) => prev && current.selectedBy === tags[index].selectedBy,\n      true,\n    );\n    if (unchanged) {\n      return;\n    }\n\n    const param = {\n      type,\n      targetIds: targets.map(t => t._id),\n      tagIds: tags.filter(t => t.selectedBy === 'all').map(t => t._id),\n    };\n\n    tag(param, error => {\n      if (error) {\n        return Alert.error(error.reason);\n      }\n\n      const message = targets.length > 1\n        ? `Selected ${type}s have been tagged!`\n        : `The ${type} has been tagged!`;\n      Alert.success(message);\n\n      if (afterSave) {\n        afterSave();\n      }\n    });\n  }\n\n  render() {\n    const { targetsLoading, tagsLoading } = this.props;\n    if (targetsLoading || tagsLoading) {\n      return <div>Loading ...</div>;\n    }\n\n    const { className, event, type } = this.props;\n\n    const links = [\n      {\n        title: 'Manage tags',\n        href: FlowRouter.path('tags/list', { type }),\n      },\n    ];\n\n    const props = {\n      className,\n      links,\n      items: JSON.parse(JSON.stringify(this.state.tagsForList)),\n      [event]: this.tag,\n    };\n\n    return <FilterableList {...props} />;\n  }\n}\n\nTagger.propTypes = propTypes;\n\nexport default Tagger;\n"]},"hash":"d14228329e62d6ac7a4a84815dbb0b6d932a26a3"}
