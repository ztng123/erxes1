{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"../segments","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Segments"}]},{"source":"../customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]}],"exports":{"exported":["createSegment","editSegment","removeSegment","createInternalNote","removeInternalNote"],"specifiers":[{"kind":"local","local":"createSegment","exported":"createSegment"},{"kind":"local","local":"editSegment","exported":"editSegment"},{"kind":"local","local":"removeSegment","exported":"removeSegment"},{"kind":"local","local":"createInternalNote","exported":"createInternalNote"},{"kind":"local","local":"removeInternalNote","exported":"removeInternalNote"}]}}},"options":{"filename":"/imports/api/customers/server/methods.js","filenameRelative":"/imports/api/customers/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/customers/server/methods.js.map","sourceFileName":"/imports/api/customers/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  createSegment: function () {\n    return createSegment;\n  },\n  editSegment: function () {\n    return editSegment;\n  },\n  removeSegment: function () {\n    return removeSegment;\n  },\n  createInternalNote: function () {\n    return createInternalNote;\n  },\n  removeInternalNote: function () {\n    return removeInternalNote;\n  }\n});\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 3);\nvar Segments = void 0;\nmodule.importSync(\"../segments\", {\n  \"default\": function (v) {\n    Segments = v;\n  }\n}, 4);\nvar Customers = void 0;\nmodule.importSync(\"../customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 5);\nvar createSegment = new ValidatedMethod({\n  name: 'customers.createSegment',\n  mixins: [ErxesMixin],\n  validate: Segments.simpleSchema().validator(),\n  run: function (doc) {\n    return Segments.insert(doc);\n  }\n});\nvar editSegment = new ValidatedMethod({\n  name: 'customers.editSegment',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var id = _ref.id,\n        doc = _ref.doc;\n    check(id, String);\n    check(doc, Segments.simpleSchema());\n  },\n  run: function (_ref2) {\n    var id = _ref2.id,\n        doc = _ref2.doc;\n    return Segments.update(id, {\n      $set: doc\n    });\n  }\n});\nvar removeSegment = new ValidatedMethod({\n  name: 'customers.removeSegment',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    return Segments.remove(id);\n  }\n});\nvar createInternalNote = new ValidatedMethod({\n  name: 'customers.createInternalNote',\n  mixins: [ErxesMixin],\n  validate: function (_ref3) {\n    var customerId = _ref3.customerId,\n        internalNote = _ref3.internalNote;\n    check(customerId, String);\n    check(internalNote, String);\n  },\n  run: function (_ref4) {\n    var customerId = _ref4.customerId,\n        internalNote = _ref4.internalNote;\n    var internalNoteObj = {\n      _id: Random.id(),\n      content: internalNote,\n      createdBy: this.userId,\n      createdDate: new Date()\n    };\n    Customers.update(customerId, {\n      $addToSet: {\n        internalNotes: internalNoteObj\n      }\n    });\n  }\n});\nvar removeInternalNote = new ValidatedMethod({\n  name: 'customers.removeInternalNote',\n  mixins: [ErxesMixin],\n  validate: function (_ref5) {\n    var customerId = _ref5.customerId,\n        internalNoteId = _ref5.internalNoteId;\n    check(customerId, String);\n    check(internalNoteId, String);\n  },\n  run: function (_ref6) {\n    var _this = this;\n\n    var customerId = _ref6.customerId,\n        internalNoteId = _ref6.internalNoteId;\n    var notes = Customers.findOne(customerId).internalNotes || [];\n    var canDelete = !!notes.find(function (n) {\n      return n.createdBy === _this.userId;\n    });\n\n    if (!canDelete) {\n      throw new Meteor.Error('permissionDenied', 'Permission denied.');\n    }\n\n    Customers.update(customerId, {\n      $pull: {\n        internalNotes: {\n          _id: internalNoteId\n        }\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/imports/api/customers/server/methods.js"],"names":["module","export","createSegment","editSegment","removeSegment","createInternalNote","removeInternalNote","ValidatedMethod","importSync","v","check","Random","ErxesMixin","Segments","Customers","name","mixins","validate","simpleSchema","validator","run","doc","insert","id","String","update","$set","remove","customerId","internalNote","internalNoteObj","_id","content","createdBy","userId","createdDate","Date","$addToSet","internalNotes","internalNoteId","notes","findOne","canDelete","find","n","Meteor","Error","$pull"],"mappings":"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","file":"/imports/api/customers/server/methods.js.map","sourcesContent":["import { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { check } from 'meteor/check';\nimport { Random } from 'meteor/random';\nimport { ErxesMixin } from '/imports/api/utils';\nimport Segments from '../segments';\nimport { Customers } from '../customers';\n\n/**\n * Segments\n */\n\nexport const createSegment = new ValidatedMethod({\n  name: 'customers.createSegment',\n  mixins: [ErxesMixin],\n\n  validate: Segments.simpleSchema().validator(),\n\n  run(doc) {\n    return Segments.insert(doc);\n  },\n});\n\nexport const editSegment = new ValidatedMethod({\n  name: 'customers.editSegment',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Segments.simpleSchema());\n  },\n\n  run({ id, doc }) {\n    return Segments.update(id, { $set: doc });\n  },\n});\n\nexport const removeSegment = new ValidatedMethod({\n  name: 'customers.removeSegment',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    return Segments.remove(id);\n  },\n});\n\n/**\n * Internal notes\n */\n\nexport const createInternalNote = new ValidatedMethod({\n  name: 'customers.createInternalNote',\n  mixins: [ErxesMixin],\n\n  validate({ customerId, internalNote }) {\n    check(customerId, String);\n    check(internalNote, String);\n  },\n\n  run({ customerId, internalNote }) {\n    const internalNoteObj = {\n      _id: Random.id(),\n      content: internalNote,\n      createdBy: this.userId,\n      createdDate: new Date(),\n    };\n\n    Customers.update(customerId, { $addToSet: { internalNotes: internalNoteObj } });\n  },\n});\n\nexport const removeInternalNote = new ValidatedMethod({\n  name: 'customers.removeInternalNote',\n  mixins: [ErxesMixin],\n\n  validate({ customerId, internalNoteId }) {\n    check(customerId, String);\n    check(internalNoteId, String);\n  },\n\n  run({ customerId, internalNoteId }) {\n    const notes = Customers.findOne(customerId).internalNotes || [];\n    const canDelete = !!notes.find(n => n.createdBy === this.userId);\n\n    if (!canDelete) {\n      throw new Meteor.Error('permissionDenied', 'Permission denied.');\n    }\n\n    Customers.update(customerId, { $pull: { internalNotes: { _id: internalNoteId } } });\n  },\n});\n"]},"hash":"2867a7456979568f4d2c3e5f5a1695f032f16e64"}
