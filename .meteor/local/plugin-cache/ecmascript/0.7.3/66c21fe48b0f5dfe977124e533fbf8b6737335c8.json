{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"./Row","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ListRow"}]},{"source":"./SimpleRow","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SimpleRow"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/common/conversationsList/ConversationsList.js","filenameRelative":"/imports/react-ui/common/conversationsList/ConversationsList.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/common/conversationsList/ConversationsList.js.map","sourceFileName":"/imports/react-ui/common/conversationsList/ConversationsList.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ConversationsList"},"ignored":false,"code":"var React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar ListRow = void 0;\nmodule.importSync(\"./Row\", {\n  \"default\": function (v) {\n    ListRow = v;\n  }\n}, 2);\nvar SimpleRow = void 0;\nmodule.importSync(\"./SimpleRow\", {\n  \"default\": function (v) {\n    SimpleRow = v;\n  }\n}, 3);\nvar propTypes = {\n  conversations: PropTypes.array.isRequired,\n  user: PropTypes.object.isRequired,\n  toggleBulk: PropTypes.func,\n  channelId: PropTypes.string,\n  simple: PropTypes.bool\n};\n\nfunction Conversations(_ref) {\n  var conversations = _ref.conversations,\n      user = _ref.user,\n      toggleBulk = _ref.toggleBulk,\n      channelId = _ref.channelId,\n      simple = _ref.simple;\n  var _user$details$starred = user.details.starredConversationIds,\n      starredConversationIds = _user$details$starred === undefined ? [] : _user$details$starred;\n  return React.createElement(\n    \"ul\",\n    {\n      className: \"conversations-list\"\n    },\n    conversations.map(function (c) {\n      return simple ? React.createElement(SimpleRow, {\n        key: c._id,\n        conversation: c,\n        toggleBulk: toggleBulk,\n        isRead: c.readUserIds && c.readUserIds.indexOf(user._id) > -1,\n        channelId: channelId\n      }) : React.createElement(ListRow, {\n        key: c._id,\n        conversation: c,\n        isRead: c.readUserIds && c.readUserIds.indexOf(user._id) > -1,\n        starred: starredConversationIds.indexOf(c._id) !== -1,\n        isParticipated: !!c.participatedUserIds && c.participatedUserIds.indexOf(user._id) > -1,\n        toggleBulk: toggleBulk,\n        channelId: channelId\n      });\n    })\n  );\n}\n\nConversations.propTypes = propTypes;\nmodule.export(\"default\", exports.default = Conversations);","map":{"version":3,"sources":["/imports/react-ui/common/conversationsList/ConversationsList.js"],"names":["React","module","importSync","v","PropTypes","ListRow","SimpleRow","propTypes","conversations","array","isRequired","user","object","toggleBulk","func","channelId","string","simple","bool","Conversations","details","starredConversationIds","map","c","_id","readUserIds","indexOf","participatedUserIds","export","exports","default"],"mappings":"AAAA,IAAIA,cAAJ;AAAUC,OAAOC,UAAP,CAAkB,OAAlB,EAA0B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACH,YAAMG,CAAN;AAAQ;AAA7B,CAA1B,EAAyD,CAAzD;AAA4D,IAAIC,kBAAJ;AAAcH,OAAOC,UAAP,CAAkB,YAAlB,EAA+B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACC,gBAAUD,CAAV;AAAY;AAAjC,CAA/B,EAAkE,CAAlE;AAAqE,IAAIE,gBAAJ;AAAYJ,OAAOC,UAAP,CAAkB,OAAlB,EAA0B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACE,cAAQF,CAAR;AAAU;AAA/B,CAA1B,EAA2D,CAA3D;AAA8D,IAAIG,kBAAJ;AAAcL,OAAOC,UAAP,CAAkB,aAAlB,EAAgC;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACG,gBAAUH,CAAV;AAAY;AAAjC,CAAhC,EAAmE,CAAnE;AAKjP,IAAMI,YAAY;AAChBC,iBAAeJ,UAAUK,KAAV,CAAgBC,UADf;AAEhBC,QAAMP,UAAUQ,MAAV,CAAiBF,UAFP;AAGhBG,cAAYT,UAAUU,IAHN;AAIhBC,aAAWX,UAAUY,MAJL;AAKhBC,UAAQb,UAAUc;AALF,CAAlB;;AAQA,SAASC,aAAT,OAA+E;AAAA,MAAtDX,aAAsD,QAAtDA,aAAsD;AAAA,MAAvCG,IAAuC,QAAvCA,IAAuC;AAAA,MAAjCE,UAAiC,QAAjCA,UAAiC;AAAA,MAArBE,SAAqB,QAArBA,SAAqB;AAAA,MAAVE,MAAU,QAAVA,MAAU;AAAA,8BACrCN,KAAKS,OADgC,CACrEC,sBADqE;AAAA,MACrEA,sBADqE,yCAC5C,EAD4C;AAG7E,SACE;AAAA;AAAA;AAAI,iBAAU;AAAd;AACGb,kBAAcc,GAAd,CACC;AAAA,aACGL,SACG,oBAAC,SAAD;AACE,aAAKM,EAAEC,GADT;AAEE,sBAAcD,CAFhB;AAGE,oBAAYV,UAHd;AAIE,gBAAQU,EAAEE,WAAF,IAAiBF,EAAEE,WAAF,CAAcC,OAAd,CAAsBf,KAAKa,GAA3B,IAAkC,CAAC,CAJ9D;AAKE,mBAAWT;AALb,QADH,GAQG,oBAAC,OAAD;AACE,aAAKQ,EAAEC,GADT;AAEE,sBAAcD,CAFhB;AAGE,gBAAQA,EAAEE,WAAF,IAAiBF,EAAEE,WAAF,CAAcC,OAAd,CAAsBf,KAAKa,GAA3B,IAAkC,CAAC,CAH9D;AAIE,iBAASH,uBAAuBK,OAAvB,CAA+BH,EAAEC,GAAjC,MAA0C,CAAC,CAJtD;AAKE,wBACE,CAAC,CAACD,EAAEI,mBAAJ,IAA2BJ,EAAEI,mBAAF,CAAsBD,OAAtB,CAA8Bf,KAAKa,GAAnC,IAA0C,CAAC,CAN1E;AAQE,oBAAYX,UARd;AASE,mBAAWE;AATb,QATN;AAAA,KADD;AADH,GADF;AA0BD;;AAEDI,cAAcZ,SAAd,GAA0BA,SAA1B;AA5CAN,OAAO2B,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GA8CTX,aA9Cf","file":"/imports/react-ui/common/conversationsList/ConversationsList.js.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListRow from './Row';\nimport SimpleRow from './SimpleRow';\n\nconst propTypes = {\n  conversations: PropTypes.array.isRequired,\n  user: PropTypes.object.isRequired,\n  toggleBulk: PropTypes.func,\n  channelId: PropTypes.string,\n  simple: PropTypes.bool,\n};\n\nfunction Conversations({ conversations, user, toggleBulk, channelId, simple }) {\n  const { starredConversationIds = [] } = user.details;\n\n  return (\n    <ul className=\"conversations-list\">\n      {conversations.map(\n        c =>\n          (simple\n            ? <SimpleRow\n                key={c._id}\n                conversation={c}\n                toggleBulk={toggleBulk}\n                isRead={c.readUserIds && c.readUserIds.indexOf(user._id) > -1}\n                channelId={channelId}\n              />\n            : <ListRow\n                key={c._id}\n                conversation={c}\n                isRead={c.readUserIds && c.readUserIds.indexOf(user._id) > -1}\n                starred={starredConversationIds.indexOf(c._id) !== -1}\n                isParticipated={\n                  !!c.participatedUserIds && c.participatedUserIds.indexOf(user._id) > -1\n                }\n                toggleBulk={toggleBulk}\n                channelId={channelId}\n              />),\n      )}\n    </ul>\n  );\n}\n\nConversations.propTypes = propTypes;\n\nexport default Conversations;\n"]},"hash":"66c21fe48b0f5dfe977124e533fbf8b6737335c8"}
