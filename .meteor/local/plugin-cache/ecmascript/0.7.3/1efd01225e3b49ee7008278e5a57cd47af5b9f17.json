{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/kadira:flow-router","imported":["FlowRouter"],"specifiers":[{"kind":"named","imported":"FlowRouter","local":"FlowRouter"}]},{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"/imports/api/tags/constants","imported":["TAG_TYPES"],"specifiers":[{"kind":"named","imported":"TAG_TYPES","local":"TAG_TYPES"}]},{"source":"../components","imported":["Sidebar"],"specifiers":[{"kind":"named","imported":"Sidebar","local":"Sidebar"}]},{"source":"../graphql","imported":["queries","subscriptions"],"specifiers":[{"kind":"named","imported":"queries","local":"queries"},{"kind":"named","imported":"subscriptions","local":"subscriptions"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/inbox/containers/Sidebar.js","filenameRelative":"/imports/react-ui/inbox/containers/Sidebar.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/inbox/containers/Sidebar.js.map","sourceFileName":"/imports/react-ui/inbox/containers/Sidebar.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Sidebar"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar FlowRouter = void 0;\nmodule.importSync(\"meteor/kadira:flow-router\", {\n  FlowRouter: function (v) {\n    FlowRouter = v;\n  }\n}, 1);\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 2);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 3);\nvar TAG_TYPES = void 0;\nmodule.importSync(\"/imports/api/tags/constants\", {\n  TAG_TYPES: function (v) {\n    TAG_TYPES = v;\n  }\n}, 4);\nvar Sidebar = void 0;\nmodule.importSync(\"../components\", {\n  Sidebar: function (v) {\n    Sidebar = v;\n  }\n}, 5);\nvar queries = void 0,\n    subscriptions = void 0;\nmodule.importSync(\"../graphql\", {\n  queries: function (v) {\n    queries = v;\n  },\n  subscriptions: function (v) {\n    subscriptions = v;\n  }\n}, 6);\n\nvar SidebarContainer = function (_React$Component) {\n  (0, _inherits3.default)(SidebarContainer, _React$Component);\n\n  function SidebarContainer() {\n    (0, _classCallCheck3.default)(this, SidebarContainer);\n    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));\n  }\n\n  SidebarContainer.prototype.componentWillMount = function () {\n    function componentWillMount() {\n      var _this2 = this;\n\n      this.props.conversationCountsQuery.subscribeToMore({\n        // listen for all conversation changes\n        document: gql(subscriptions.conversationsChanged),\n        updateQuery: function () {\n          _this2.props.conversationCountsQuery.refetch();\n        }\n      });\n    }\n\n    return componentWillMount;\n  }();\n\n  SidebarContainer.prototype.render = function () {\n    function render() {\n      var _props = this.props,\n          conversationCountsQuery = _props.conversationCountsQuery,\n          channelsQuery = _props.channelsQuery,\n          tagsQuery = _props.tagsQuery,\n          brandsQuery = _props.brandsQuery;\n      var defaultCounts = {\n        byIntegrationTypes: {},\n        byTags: {},\n        byChannels: {},\n        byBrands: {}\n      }; // show only available channels's related brands\n\n      var channels = channelsQuery.channels || [];\n      var brands = brandsQuery.brands || [];\n      var tags = tagsQuery.tags || [];\n      var counts = conversationCountsQuery.conversationCounts || defaultCounts;\n      var updatedProps = (0, _extends3.default)({}, this.props, {\n        tags: tags,\n        channels: channels,\n        brands: brands,\n        channelsReady: !channelsQuery.loading,\n        tagsReady: !tagsQuery.loading,\n        brandsReady: !brandsQuery.loading,\n        counts: counts\n      });\n      return React.createElement(Sidebar, updatedProps);\n    }\n\n    return render;\n  }();\n\n  return SidebarContainer;\n}(React.Component);\n\nSidebarContainer.propTypes = {\n  channelsQuery: PropTypes.object,\n  tagsQuery: PropTypes.object,\n  brandsQuery: PropTypes.object,\n  conversationCountsQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(queries.channelList), {\n  name: 'channelsQuery',\n  options: function () {\n    var userId = Meteor.userId();\n    return {\n      variables: {\n        memberIds: [userId]\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.brandList), {\n  name: 'brandsQuery',\n  options: function () {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.tagList), {\n  name: 'tagsQuery',\n  options: function () {\n    return {\n      variables: {\n        type: TAG_TYPES.CONVERSATION\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}), graphql(gql(queries.conversationCounts), {\n  name: 'conversationCountsQuery',\n  options: function () {\n    return {\n      variables: {\n        params: FlowRouter.current().queryParams\n      },\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(SidebarContainer));","map":{"version":3,"sources":["/imports/react-ui/inbox/containers/Sidebar.js"],"names":["Meteor","module","importSync","v","FlowRouter","React","PropTypes","compose","gql","graphql","TAG_TYPES","Sidebar","queries","subscriptions","SidebarContainer","componentWillMount","props","conversationCountsQuery","subscribeToMore","document","conversationsChanged","updateQuery","refetch","render","channelsQuery","tagsQuery","brandsQuery","defaultCounts","byIntegrationTypes","byTags","byChannels","byBrands","channels","brands","tags","counts","conversationCounts","updatedProps","channelsReady","loading","tagsReady","brandsReady","Component","propTypes","object","export","exports","default","channelList","name","options","userId","variables","memberIds","fetchPolicy","brandList","tagList","type","CONVERSATION","params","current","queryParams"],"mappings":"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","file":"/imports/react-ui/inbox/containers/Sidebar.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport React, { PropTypes } from 'react';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { TAG_TYPES } from '/imports/api/tags/constants';\nimport { Sidebar } from '../components';\nimport { queries, subscriptions } from '../graphql';\n\nclass SidebarContainer extends React.Component {\n  componentWillMount() {\n    this.props.conversationCountsQuery.subscribeToMore({\n      // listen for all conversation changes\n      document: gql(subscriptions.conversationsChanged),\n\n      updateQuery: () => {\n        this.props.conversationCountsQuery.refetch();\n      },\n    });\n  }\n\n  render() {\n    const { conversationCountsQuery, channelsQuery, tagsQuery, brandsQuery } = this.props;\n\n    const defaultCounts = { byIntegrationTypes: {}, byTags: {}, byChannels: {}, byBrands: {} };\n\n    // show only available channels's related brands\n    const channels = channelsQuery.channels || [];\n    const brands = brandsQuery.brands || [];\n    const tags = tagsQuery.tags || [];\n    const counts = conversationCountsQuery.conversationCounts || defaultCounts;\n\n    const updatedProps = {\n      ...this.props,\n      tags,\n      channels,\n      brands,\n      channelsReady: !channelsQuery.loading,\n      tagsReady: !tagsQuery.loading,\n      brandsReady: !brandsQuery.loading,\n      counts,\n    };\n\n    return <Sidebar {...updatedProps} />;\n  }\n}\n\nSidebarContainer.propTypes = {\n  channelsQuery: PropTypes.object,\n  tagsQuery: PropTypes.object,\n  brandsQuery: PropTypes.object,\n  conversationCountsQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(gql(queries.channelList), {\n    name: 'channelsQuery',\n    options: () => {\n      const userId = Meteor.userId();\n\n      return {\n        variables: {\n          memberIds: [userId],\n        },\n        fetchPolicy: 'network-only',\n      };\n    },\n  }),\n  graphql(gql(queries.brandList), {\n    name: 'brandsQuery',\n    options: () => ({\n      fetchPolicy: 'network-only',\n    }),\n  }),\n  graphql(gql(queries.tagList), {\n    name: 'tagsQuery',\n    options: () => {\n      return {\n        variables: {\n          type: TAG_TYPES.CONVERSATION,\n        },\n        fetchPolicy: 'network-only',\n      };\n    },\n  }),\n  graphql(gql(queries.conversationCounts), {\n    name: 'conversationCountsQuery',\n    options: () => {\n      return {\n        variables: {\n          params: FlowRouter.current().queryParams,\n        },\n        fetchPolicy: 'network-only',\n      };\n    },\n  }),\n)(SidebarContainer);\n"]},"hash":"1efd01225e3b49ee7008278e5a57cd47af5b9f17"}
