{"metadata":{"usedHelpers":["extends","taggedTemplateLiteralLoose","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"/imports/react-ui/common","imported":["Spinner"],"specifiers":[{"kind":"named","imported":"Spinner","local":"Spinner"}]},{"source":"../components","imported":["ChannelForm"],"specifiers":[{"kind":"named","imported":"ChannelForm","local":"ChannelForm"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/settings/channels/containers/ChannelForm.js","filenameRelative":"/imports/react-ui/settings/channels/containers/ChannelForm.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/settings/channels/containers/ChannelForm.js.map","sourceFileName":"/imports/react-ui/settings/channels/containers/ChannelForm.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ChannelForm"},"ignored":false,"code":"var _taggedTemplateLiteralLoose2 = require(\"babel-runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _templateObject = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query integrations {\\n        integrations {\\n          _id\\n          name\\n          brand {\\n            _id\\n            name\\n          }\\n          channels {\\n            _id\\n            name\\n          }\\n        }\\n      }\\n    \"], [\"\\n      query integrations {\\n        integrations {\\n          _id\\n          name\\n          brand {\\n            _id\\n            name\\n          }\\n          channels {\\n            _id\\n            name\\n          }\\n        }\\n      }\\n    \"]),\n    _templateObject2 = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query brands {\\n        brands {\\n          _id\\n          name\\n        }\\n      }\\n    \"], [\"\\n      query brands {\\n        brands {\\n          _id\\n          name\\n        }\\n      }\\n    \"]),\n    _templateObject3 = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query users {\\n        users {\\n          _id\\n          details\\n        }\\n      }\\n    \"], [\"\\n      query users {\\n        users {\\n          _id\\n          details\\n        }\\n      }\\n    \"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 1);\nvar Spinner = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Spinner: function (v) {\n    Spinner = v;\n  }\n}, 2);\nvar ChannelForm = void 0;\nmodule.importSync(\"../components\", {\n  ChannelForm: function (v) {\n    ChannelForm = v;\n  }\n}, 3);\n\nvar ChannelFormContainer = function (props) {\n  var object = props.object,\n      integrationsQuery = props.integrationsQuery,\n      usersQuery = props.usersQuery,\n      brandsQuery = props.brandsQuery;\n\n  if (usersQuery.loading || brandsQuery.loading || integrationsQuery.loading) {\n    return React.createElement(Spinner, null);\n  }\n\n  var integrations = integrationsQuery.integrations || [];\n  var members = usersQuery.users || [];\n  var selectedIntegrations = [];\n  var selectedMembers = [];\n\n  if (object) {\n    selectedIntegrations = integrations.filter(function (integ) {\n      return object.integrationIds.includes(integ._id);\n    });\n    selectedMembers = members.filter(function (u) {\n      return object.memberIds.includes(u._id);\n    });\n  }\n\n  var updatedProps = (0, _extends3.default)({}, props, {\n    integrations: integrations,\n    members: members,\n    selectedIntegrations: selectedIntegrations,\n    selectedMembers: selectedMembers\n  });\n  return React.createElement(ChannelForm, updatedProps);\n};\n\nChannelFormContainer.propTypes = {\n  object: PropTypes.object,\n  integrationsQuery: PropTypes.object,\n  brandsQuery: PropTypes.object,\n  usersQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(_templateObject), {\n  name: 'integrationsQuery'\n}), graphql(gql(_templateObject2), {\n  name: 'brandsQuery'\n}), graphql(gql(_templateObject3), {\n  name: 'usersQuery'\n}))(ChannelFormContainer));","map":{"version":3,"sources":["/imports/react-ui/settings/channels/containers/ChannelForm.js"],"names":["React","PropTypes","module","importSync","v","compose","gql","graphql","Spinner","ChannelForm","ChannelFormContainer","object","props","integrationsQuery","usersQuery","brandsQuery","loading","integrations","members","users","selectedIntegrations","selectedMembers","filter","integrationIds","includes","integ","_id","memberIds","u","updatedProps","propTypes","export","exports","default","name"],"mappings":";;;;;;;;;;;;;;AAAA,IAAIA,cAAJ;AAAA,IAAUC,kBAAV;AAAoBC,OAAOC,UAAP,CAAkB,OAAlB,EAA0B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACJ,YAAMI,CAAN;AAAQ,GAA7B;AAA8BH,aAAU,UAASG,CAAT,EAAW;AAACH,gBAAUG,CAAV;AAAY;AAAhE,CAA1B,EAA4F,CAA5F;AAA+F,IAAIC,gBAAJ;AAAA,IAAYC,YAAZ;AAAA,IAAgBC,gBAAhB;AAAwBL,OAAOC,UAAP,CAAkB,cAAlB,EAAiC;AAACE,WAAQ,UAASD,CAAT,EAAW;AAACC,cAAQD,CAAR;AAAU,GAA/B;AAAgCE,OAAI,UAASF,CAAT,EAAW;AAACE,UAAIF,CAAJ;AAAM,GAAtD;AAAuDG,WAAQ,UAASH,CAAT,EAAW;AAACG,cAAQH,CAAR;AAAU;AAArF,CAAjC,EAAwH,CAAxH;AAA2H,IAAII,gBAAJ;AAAYN,OAAOC,UAAP,CAAkB,0BAAlB,EAA6C;AAACK,WAAQ,UAASJ,CAAT,EAAW;AAACI,cAAQJ,CAAR;AAAU;AAA/B,CAA7C,EAA8E,CAA9E;AAAiF,IAAIK,oBAAJ;AAAgBP,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACM,eAAY,UAASL,CAAT,EAAW;AAACK,kBAAYL,CAAZ;AAAc;AAAvC,CAAlC,EAA2E,CAA3E;;AAKnX,IAAMM,uBAAuB,iBAAS;AAAA,MAC5BC,MAD4B,GAC2BC,KAD3B,CAC5BD,MAD4B;AAAA,MACpBE,iBADoB,GAC2BD,KAD3B,CACpBC,iBADoB;AAAA,MACDC,UADC,GAC2BF,KAD3B,CACDE,UADC;AAAA,MACWC,WADX,GAC2BH,KAD3B,CACWG,WADX;;AAGpC,MAAID,WAAWE,OAAX,IAAsBD,YAAYC,OAAlC,IAA6CH,kBAAkBG,OAAnE,EAA4E;AAC1E,WAAO,oBAAC,OAAD,OAAP;AACD;;AAED,MAAMC,eAAeJ,kBAAkBI,YAAlB,IAAkC,EAAvD;AACA,MAAMC,UAAUJ,WAAWK,KAAX,IAAoB,EAApC;AAEA,MAAIC,uBAAuB,EAA3B;AACA,MAAIC,kBAAkB,EAAtB;;AAEA,MAAIV,MAAJ,EAAY;AACVS,2BAAuBH,aAAaK,MAAb,CAAoB;AAAA,aAASX,OAAOY,cAAP,CAAsBC,QAAtB,CAA+BC,MAAMC,GAArC,CAAT;AAAA,KAApB,CAAvB;AACAL,sBAAkBH,QAAQI,MAAR,CAAe;AAAA,aAAKX,OAAOgB,SAAP,CAAiBH,QAAjB,CAA0BI,EAAEF,GAA5B,CAAL;AAAA,KAAf,CAAlB;AACD;;AAED,MAAMG,0CACDjB,KADC;AAEJK,8BAFI;AAGJC,oBAHI;AAIJE,8CAJI;AAKJC;AALI,IAAN;AAQA,SAAO,oBAAC,WAAD,EAAiBQ,YAAjB,CAAP;AACD,CA3BD;;AA6BAnB,qBAAqBoB,SAArB,GAAiC;AAC/BnB,UAAQV,UAAUU,MADa;AAE/BE,qBAAmBZ,UAAUU,MAFE;AAG/BI,eAAad,UAAUU,MAHQ;AAI/BG,cAAYb,UAAUU;AAJS,CAAjC;AAlCAT,OAAO6B,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GAyCT5B,QACbE,QACED,GADF,mBAiBE;AAAE4B,QAAM;AAAR,CAjBF,CADa,EAoBb3B,QACED,GADF,oBASE;AAAE4B,QAAM;AAAR,CATF,CApBa,EA+Bb3B,QACED,GADF,oBASE;AAAE4B,QAAM;AAAR,CATF,CA/Ba,EA0CbxB,oBA1Ca,CAzCf","file":"/imports/react-ui/settings/channels/containers/ChannelForm.js.map","sourcesContent":["import React, { PropTypes } from 'react';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { Spinner } from '/imports/react-ui/common';\nimport { ChannelForm } from '../components';\n\nconst ChannelFormContainer = props => {\n  const { object, integrationsQuery, usersQuery, brandsQuery } = props;\n\n  if (usersQuery.loading || brandsQuery.loading || integrationsQuery.loading) {\n    return <Spinner />;\n  }\n\n  const integrations = integrationsQuery.integrations || [];\n  const members = usersQuery.users || [];\n\n  let selectedIntegrations = [];\n  let selectedMembers = [];\n\n  if (object) {\n    selectedIntegrations = integrations.filter(integ => object.integrationIds.includes(integ._id));\n    selectedMembers = members.filter(u => object.memberIds.includes(u._id));\n  }\n\n  const updatedProps = {\n    ...props,\n    integrations,\n    members,\n    selectedIntegrations,\n    selectedMembers,\n  };\n\n  return <ChannelForm {...updatedProps} />;\n};\n\nChannelFormContainer.propTypes = {\n  object: PropTypes.object,\n  integrationsQuery: PropTypes.object,\n  brandsQuery: PropTypes.object,\n  usersQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(\n    gql`\n      query integrations {\n        integrations {\n          _id\n          name\n          brand {\n            _id\n            name\n          }\n          channels {\n            _id\n            name\n          }\n        }\n      }\n    `,\n    { name: 'integrationsQuery' },\n  ),\n  graphql(\n    gql`\n      query brands {\n        brands {\n          _id\n          name\n        }\n      }\n    `,\n    { name: 'brandsQuery' },\n  ),\n  graphql(\n    gql`\n      query users {\n        users {\n          _id\n          details\n        }\n      }\n    `,\n    { name: 'usersQuery' },\n  ),\n)(ChannelFormContainer);\n"]},"hash":"94345d0f6ae9c2edd14f0d1fa6c2e9b6d718c794"}
