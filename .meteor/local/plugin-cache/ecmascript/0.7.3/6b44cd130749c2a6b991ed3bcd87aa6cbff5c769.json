{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"react-select-plus","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Select"}]},{"source":"react-bootstrap","imported":["FormGroup","ControlLabel","FormControl"],"specifiers":[{"kind":"named","imported":"FormGroup","local":"FormGroup"},{"kind":"named","imported":"ControlLabel","local":"ControlLabel"},{"kind":"named","imported":"FormControl","local":"FormControl"}]},{"source":"/imports/react-ui/common","imported":["Tip"],"specifiers":[{"kind":"named","imported":"Tip","local":"Tip"}]},{"source":"../../common/components","imported":["Form"],"specifiers":[{"kind":"named","imported":"Form","local":"CommonForm"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/settings/channels/components/ChannelForm.js","filenameRelative":"/imports/react-ui/settings/channels/components/ChannelForm.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/settings/channels/components/ChannelForm.js.map","sourceFileName":"/imports/react-ui/settings/channels/components/ChannelForm.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ChannelForm"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar Select = void 0;\nmodule.importSync(\"react-select-plus\", {\n  \"default\": function (v) {\n    Select = v;\n  }\n}, 1);\nvar FormGroup = void 0,\n    ControlLabel = void 0,\n    FormControl = void 0;\nmodule.importSync(\"react-bootstrap\", {\n  FormGroup: function (v) {\n    FormGroup = v;\n  },\n  ControlLabel: function (v) {\n    ControlLabel = v;\n  },\n  FormControl: function (v) {\n    FormControl = v;\n  }\n}, 2);\nvar Tip = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Tip: function (v) {\n    Tip = v;\n  }\n}, 3);\nvar CommonForm = void 0;\nmodule.importSync(\"../../common/components\", {\n  Form: function (v) {\n    CommonForm = v;\n  }\n}, 4);\n\nvar ChannelForm = function (_CommonForm) {\n  (0, _inherits3.default)(ChannelForm, _CommonForm);\n\n  function ChannelForm(props) {\n    (0, _classCallCheck3.default)(this, ChannelForm);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _CommonForm.call(this, props));\n\n    _this.generateIntegrationsParams = _this.generateIntegrationsParams.bind(_this);\n    _this.generateMembersParams = _this.generateMembersParams.bind(_this);\n    _this.generateDoc = _this.generateDoc.bind(_this);\n    _this.collectValues = _this.collectValues.bind(_this);\n    _this.state = {\n      selectedIntegrations: _this.generateIntegrationsParams(props.selectedIntegrations),\n      selectedMembers: _this.generateMembersParams(props.selectedMembers)\n    };\n    return _this;\n  }\n\n  ChannelForm.prototype.collectValues = function () {\n    function collectValues(items) {\n      return items.map(function (item) {\n        return item.value;\n      });\n    }\n\n    return collectValues;\n  }();\n\n  ChannelForm.prototype.generateGroupedIntegrations = function () {\n    function generateGroupedIntegrations(integrations) {\n      var brandsMap = {};\n      integrations.forEach(function (integration) {\n        var brand = integration.brand || {};\n        var brandName = brand.name;\n\n        if (!brandsMap[brandName]) {\n          brandsMap[brandName] = [];\n        }\n\n        brandsMap[brandName].push({\n          channels: integration.channels,\n          value: integration._id,\n          label: integration.name,\n          kind: integration.kind\n        });\n      });\n      var results = [];\n      Object.keys(brandsMap).forEach(function (brandName) {\n        results.push({\n          label: brandName,\n          options: brandsMap[brandName]\n        });\n      });\n      return results;\n    }\n\n    return generateGroupedIntegrations;\n  }();\n\n  ChannelForm.prototype.generateIntegrationsParams = function () {\n    function generateIntegrationsParams(integrations) {\n      return integrations.map(function (integration) {\n        return {\n          channels: integration.channels,\n          value: integration._id,\n          label: integration.name,\n          kind: integration.kind,\n          groupId: integration.channelId\n        };\n      });\n    }\n\n    return generateIntegrationsParams;\n  }();\n\n  ChannelForm.prototype.generateMembersParams = function () {\n    function generateMembersParams(members) {\n      return members.map(function (member) {\n        return {\n          value: member._id,\n          label: member.details.fullName || ''\n        };\n      });\n    }\n\n    return generateMembersParams;\n  }();\n\n  ChannelForm.prototype.generateDoc = function () {\n    function generateDoc() {\n      return {\n        doc: {\n          name: document.getElementById('channel-name').value,\n          description: document.getElementById('channel-description').value,\n          memberIds: this.collectValues(this.state.selectedMembers),\n          integrationIds: this.collectValues(this.state.selectedIntegrations)\n        }\n      };\n    }\n\n    return generateDoc;\n  }();\n\n  ChannelForm.prototype.renderChannelTip = function () {\n    function renderChannelTip(channels) {\n      var array = channels || [];\n      var count = array.length;\n\n      if (count !== 0) {\n        var channelNames = array.map(function (c) {\n          return c.name;\n        });\n        return React.createElement(\n          Tip,\n          {\n            text: channelNames.toString()\n          },\n          React.createElement(\n            \"div\",\n            {\n              className: \"channel-round\"\n            },\n            React.createElement(\n              \"span\",\n              null,\n              count\n            )\n          )\n        );\n      }\n\n      return null;\n    }\n\n    return renderChannelTip;\n  }();\n\n  ChannelForm.prototype.renderContent = function () {\n    function renderContent() {\n      var _props = this.props,\n          integrations = _props.integrations,\n          members = _props.members,\n          object = _props.object;\n      var channel = object || {\n        memberIds: [],\n        integrationIds: []\n      };\n      var self = this;\n      return React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          FormGroup,\n          null,\n          React.createElement(\n            ControlLabel,\n            null,\n            \"Name\"\n          ),\n          React.createElement(FormControl, {\n            id: \"channel-name\",\n            defaultValue: channel.name,\n            type: \"text\",\n            required: true\n          })\n        ),\n        React.createElement(\n          FormGroup,\n          null,\n          React.createElement(\n            ControlLabel,\n            null,\n            \"Description\"\n          ),\n          React.createElement(FormControl, {\n            id: \"channel-description\",\n            componentClass: \"textarea\",\n            rows: 5,\n            defaultValue: channel.description\n          })\n        ),\n        React.createElement(\n          FormGroup,\n          null,\n          React.createElement(\n            ControlLabel,\n            null,\n            \"Integrations\"\n          ),\n          React.createElement(Select, {\n            placeholder: \"Choose integrations\",\n            onChange: function (items) {\n              self.setState({\n                selectedIntegrations: items\n              });\n            },\n            optionRenderer: function (option) {\n              return React.createElement(\n                \"div\",\n                {\n                  className: \"simple-option\"\n                },\n                React.createElement(\n                  \"span\",\n                  null,\n                  option.label\n                ),\n                React.createElement(\n                  \"span\",\n                  {\n                    className: \"kind\"\n                  },\n                  \" \",\n                  option.kind\n                ),\n                self.renderChannelTip(option.channels)\n              );\n            },\n            value: self.state.selectedIntegrations,\n            options: self.generateGroupedIntegrations(integrations),\n            multi: true\n          })\n        ),\n        React.createElement(\n          FormGroup,\n          null,\n          React.createElement(\n            ControlLabel,\n            null,\n            \"Members\"\n          ),\n          React.createElement(Select, {\n            placeholder: \"Choose members\",\n            onChange: function (items) {\n              self.setState({\n                selectedMembers: items\n              });\n            },\n            value: self.state.selectedMembers,\n            options: self.generateMembersParams(members),\n            multi: true\n          })\n        )\n      );\n    }\n\n    return renderContent;\n  }();\n\n  return ChannelForm;\n}(CommonForm);\n\nmodule.export(\"default\", exports.default = ChannelForm);","map":{"version":3,"sources":["/imports/react-ui/settings/channels/components/ChannelForm.js"],"names":["React","module","importSync","v","Select","FormGroup","ControlLabel","FormControl","Tip","CommonForm","Form","ChannelForm","props","generateIntegrationsParams","bind","generateMembersParams","generateDoc","collectValues","state","selectedIntegrations","selectedMembers","items","map","item","value","generateGroupedIntegrations","integrations","brandsMap","forEach","brand","integration","brandName","name","push","channels","_id","label","kind","results","Object","keys","options","groupId","channelId","members","member","details","fullName","doc","document","getElementById","description","memberIds","integrationIds","renderChannelTip","array","count","length","channelNames","c","toString","renderContent","object","channel","self","setState","option","export","exports","default"],"mappings":"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","file":"/imports/react-ui/settings/channels/components/ChannelForm.js.map","sourcesContent":["import React from 'react';\nimport Select from 'react-select-plus';\nimport { FormGroup, ControlLabel, FormControl } from 'react-bootstrap';\nimport { Tip } from '/imports/react-ui/common';\nimport { Form as CommonForm } from '../../common/components';\n\nclass ChannelForm extends CommonForm {\n  constructor(props) {\n    super(props);\n\n    this.generateIntegrationsParams = this.generateIntegrationsParams.bind(this);\n    this.generateMembersParams = this.generateMembersParams.bind(this);\n    this.generateDoc = this.generateDoc.bind(this);\n    this.collectValues = this.collectValues.bind(this);\n\n    this.state = {\n      selectedIntegrations: this.generateIntegrationsParams(props.selectedIntegrations),\n      selectedMembers: this.generateMembersParams(props.selectedMembers),\n    };\n  }\n\n  collectValues(items) {\n    return items.map(item => item.value);\n  }\n\n  generateGroupedIntegrations(integrations) {\n    const brandsMap = {};\n\n    integrations.forEach(integration => {\n      const brand = integration.brand || {};\n      const brandName = brand.name;\n\n      if (!brandsMap[brandName]) {\n        brandsMap[brandName] = [];\n      }\n\n      brandsMap[brandName].push({\n        channels: integration.channels,\n        value: integration._id,\n        label: integration.name,\n        kind: integration.kind,\n      });\n    });\n\n    const results = [];\n\n    Object.keys(brandsMap).forEach(brandName => {\n      results.push({\n        label: brandName,\n        options: brandsMap[brandName],\n      });\n    });\n\n    return results;\n  }\n\n  generateIntegrationsParams(integrations) {\n    return integrations.map(integration => ({\n      channels: integration.channels,\n      value: integration._id,\n      label: integration.name,\n      kind: integration.kind,\n      groupId: integration.channelId,\n    }));\n  }\n\n  generateMembersParams(members) {\n    return members.map(member => ({\n      value: member._id,\n      label: member.details.fullName || '',\n    }));\n  }\n\n  generateDoc() {\n    return {\n      doc: {\n        name: document.getElementById('channel-name').value,\n        description: document.getElementById('channel-description').value,\n        memberIds: this.collectValues(this.state.selectedMembers),\n        integrationIds: this.collectValues(this.state.selectedIntegrations),\n      },\n    };\n  }\n\n  renderChannelTip(channels) {\n    const array = channels || [];\n    const count = array.length;\n    if (count !== 0) {\n      const channelNames = array.map(c => c.name);\n      return (\n        <Tip text={channelNames.toString()}>\n          <div className=\"channel-round\">\n            <span>{count}</span>\n          </div>\n        </Tip>\n      );\n    }\n    return null;\n  }\n\n  renderContent() {\n    const { integrations, members, object } = this.props;\n    const channel = object || { memberIds: [], integrationIds: [] };\n    const self = this;\n\n    return (\n      <div>\n        <FormGroup>\n          <ControlLabel>Name</ControlLabel>\n\n          <FormControl id=\"channel-name\" defaultValue={channel.name} type=\"text\" required />\n        </FormGroup>\n\n        <FormGroup>\n          <ControlLabel>Description</ControlLabel>\n\n          <FormControl\n            id=\"channel-description\"\n            componentClass=\"textarea\"\n            rows={5}\n            defaultValue={channel.description}\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <ControlLabel>Integrations</ControlLabel>\n\n          <Select\n            placeholder=\"Choose integrations\"\n            onChange={items => {\n              self.setState({ selectedIntegrations: items });\n            }}\n            optionRenderer={option => (\n              <div className=\"simple-option\">\n                <span>{option.label}</span>\n                <span className=\"kind\"> {option.kind}</span>\n                {self.renderChannelTip(option.channels)}\n              </div>\n            )}\n            value={self.state.selectedIntegrations}\n            options={self.generateGroupedIntegrations(integrations)}\n            multi\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <ControlLabel>Members</ControlLabel>\n\n          <Select\n            placeholder=\"Choose members\"\n            onChange={items => {\n              self.setState({ selectedMembers: items });\n            }}\n            value={self.state.selectedMembers}\n            options={self.generateMembersParams(members)}\n            multi\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nexport default ChannelForm;\n"]},"hash":"6b44cd130749c2a6b991ed3bcd87aa6cbff5c769"}
