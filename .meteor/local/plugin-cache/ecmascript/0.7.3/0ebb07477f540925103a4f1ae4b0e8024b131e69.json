{"metadata":{"usedHelpers":["extends","inherits","possibleConstructorReturn","classCallCheck","slicedToArray","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"/imports/api/integrations/integrations","imported":["Integrations"],"specifiers":[{"kind":"named","imported":"Integrations","local":"Integrations"}]},{"source":"/imports/api/brands/brands","imported":["Brands"],"specifiers":[{"kind":"named","imported":"Brands","local":"Brands"}]},{"source":"/imports/api/tags/utils","imported":["TagsCollection","tagsHelper","tagSchemaOptions"],"specifiers":[{"kind":"named","imported":"TagsCollection","local":"TagsCollection"},{"kind":"named","imported":"tagsHelper","local":"tagsHelper"},{"kind":"named","imported":"tagSchemaOptions","local":"tagSchemaOptions"}]}],"exports":{"exported":["Customers"],"specifiers":[{"kind":"local","local":"Customers","exported":"Customers"}]}}},"options":{"filename":"/imports/api/customers/customers.js","filenameRelative":"/imports/api/customers/customers.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/customers/customers.js.map","sourceFileName":"/imports/api/customers/customers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"customers"},"ignored":false,"code":"var _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Customers: function () {\n    return Customers;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 1);\n\nvar _ = void 0;\n\nmodule.importSync(\"meteor/underscore\", {\n  _: function (v) {\n    _ = v;\n  }\n}, 2);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 3);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 4);\nvar Integrations = void 0;\nmodule.importSync(\"/imports/api/integrations/integrations\", {\n  Integrations: function (v) {\n    Integrations = v;\n  }\n}, 5);\nvar Brands = void 0;\nmodule.importSync(\"/imports/api/brands/brands\", {\n  Brands: function (v) {\n    Brands = v;\n  }\n}, 6);\nvar TagsCollection = void 0,\n    tagsHelper = void 0,\n    tagSchemaOptions = void 0;\nmodule.importSync(\"/imports/api/tags/utils\", {\n  TagsCollection: function (v) {\n    TagsCollection = v;\n  },\n  tagsHelper: function (v) {\n    tagsHelper = v;\n  },\n  tagSchemaOptions: function (v) {\n    tagSchemaOptions = v;\n  }\n}, 7);\nvar messengerSchema = new SimpleSchema({\n  lastSeenAt: {\n    type: Date,\n    label: 'Messenger: Last online'\n  },\n  sessionCount: {\n    type: Number,\n    label: 'Messenger: Session count'\n  },\n  isActive: {\n    type: Boolean,\n    label: 'Messenger: Is online'\n  },\n  customData: {\n    type: Object,\n    blackbox: true,\n    optional: true\n  }\n});\nvar twitterSchema = new SimpleSchema({\n  id: {\n    type: Number,\n    label: 'Twitter: ID (Number)'\n  },\n  idStr: {\n    type: String,\n    label: 'Twitter: ID (String)'\n  },\n  name: {\n    type: String,\n    label: 'Twitter: Name'\n  },\n  screenName: {\n    type: String,\n    label: 'Twitter: Screen name'\n  },\n  profileImageUrl: {\n    type: String,\n    label: 'Twitter: Profile photo'\n  }\n});\nvar facebookSchema = new SimpleSchema({\n  id: {\n    type: String,\n    label: 'Facebook: ID'\n  },\n  profilePic: {\n    type: String,\n    optional: true,\n    label: 'Facebook: Profile photo'\n  }\n});\nvar internalNoteSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  content: {\n    type: String\n  },\n  createdBy: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  createdDate: {\n    type: Date\n  }\n});\nvar schema = new SimpleSchema((0, _extends3.default)({\n  name: {\n    type: String,\n    optional: true,\n    label: 'Name'\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true,\n    label: 'Email'\n  },\n  phone: {\n    type: String,\n    optional: true,\n    label: 'Phone number'\n  },\n  isUser: {\n    type: Boolean,\n    label: 'Is user of one of our products',\n    optional: true\n  },\n  integrationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  createdAt: {\n    type: Date,\n    label: 'Member since'\n  },\n  internalNotes: {\n    type: [internalNoteSchema],\n    optional: true\n  },\n  // Integration data\n  messengerData: {\n    type: messengerSchema,\n    optional: true\n  },\n  twitterData: {\n    type: twitterSchema,\n    optional: true\n  },\n  facebookData: {\n    type: facebookSchema,\n    optional: true\n  }\n}, tagSchemaOptions()));\n\nvar CustomersCollection = function (_TagsCollection) {\n  (0, _inherits3.default)(CustomersCollection, _TagsCollection);\n\n  function CustomersCollection() {\n    (0, _classCallCheck3.default)(this, CustomersCollection);\n    return (0, _possibleConstructorReturn3.default)(this, _TagsCollection.apply(this, arguments));\n  }\n\n  CustomersCollection.prototype.insert = function () {\n    function insert(doc, callback) {\n      var customer = Object.assign({\n        createdAt: new Date()\n      }, doc);\n      return _TagsCollection.prototype.insert.call(this, customer, callback);\n    }\n\n    return insert;\n  }(); /**\n        * Public displayable fields of customer object.\n        * Only the child fields (leaf fields).\n        * They're used for construct the table columns and segment filter fields.\n        * @return {Array.String} Fields names\n        */\n\n  CustomersCollection.prototype.getPublicFields = function () {\n    function getPublicFields() {\n      var _this2 = this;\n\n      var schema = this.simpleSchema().schema();\n      var fields = Object.keys(schema).filter(function (key) {\n        // Can't accepts below types of fields\n        var unacceptedTypes = ['Object', 'Array'];\n        var isAcceptedType = unacceptedTypes.indexOf(schema[key].type.name) < 0; // Exclude the fields which is used for internal use\n\n        var _key$split = key.split('.'),\n            _key$split2 = (0, _slicedToArray3.default)(_key$split, 1),\n            parentFieldName = _key$split2[0];\n\n        var notInternalUseField = _this2.internalUseFields.indexOf(parentFieldName) < 0;\n        return isAcceptedType && notInternalUseField;\n      }).map(function (key) {\n        return {\n          key: key,\n          label: schema[key].label || key\n        };\n      });\n      return fields;\n    }\n\n    return getPublicFields;\n  }();\n\n  return CustomersCollection;\n}(TagsCollection);\n\nvar Customers = new CustomersCollection('customers');\nCustomers.attachSchema(schema); // collection helpers\n\nCustomers.helpers((0, _extends3.default)({\n  integration: function () {\n    return Integrations.findOne(this.integrationId);\n  },\n  getIntegrationData: function () {\n    return {\n      messenger: this.messengerData || {},\n      twitter: this.twitterData || {},\n      facebook: this.facebookData || {}\n    };\n  },\n  brand: function () {\n    var integration = this.integration();\n    return Brands.findOne(integration && integration.brandId);\n  },\n  getMessengerCustomData: function () {\n    var results = [];\n    var data = this.messengerData.customData || {};\n\n    _.each(_.keys(data), function (key) {\n      results.push({\n        name: key.replace(/_/g, ' '),\n        value: data[key]\n      });\n    });\n\n    return results;\n  }\n}, tagsHelper));\nCustomers.TAG_TYPE = 'customer';\nCustomers.deny({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\nCustomers.publicFields = {\n  name: 1,\n  email: 1,\n  phone: 1,\n  isUser: 1,\n  integrationId: 1,\n  createdAt: 1,\n  messengerData: 1,\n  twitterData: 1,\n  facebookData: 1,\n  tagIds: 1,\n  internalNotes: 1\n}; /**\n    * This fields list is used for not displaying\n    * internal use fields on customer segments form.\n    */\nCustomers.internalUseFields = ['tagIds', 'integrationId', 'internalNotes'];\nFactory.define('customer', Customers, {\n  email: function () {\n    return faker.internet.email();\n  },\n  integrationId: function () {\n    return Random.id();\n  }\n});","map":{"version":3,"sources":["/imports/api/customers/customers.js"],"names":["module","export","Customers","faker","importSync","v","Random","_","Factory","SimpleSchema","Integrations","Brands","TagsCollection","tagsHelper","tagSchemaOptions","messengerSchema","lastSeenAt","type","Date","label","sessionCount","Number","isActive","Boolean","customData","Object","blackbox","optional","twitterSchema","id","idStr","String","name","screenName","profileImageUrl","facebookSchema","profilePic","internalNoteSchema","_id","regEx","RegEx","Id","content","createdBy","createdDate","schema","email","Email","phone","isUser","integrationId","createdAt","internalNotes","messengerData","twitterData","facebookData","CustomersCollection","insert","doc","callback","customer","assign","getPublicFields","simpleSchema","fields","keys","filter","unacceptedTypes","isAcceptedType","indexOf","key","split","parentFieldName","notInternalUseField","internalUseFields","map","attachSchema","helpers","integration","findOne","getIntegrationData","messenger","twitter","facebook","brand","brandId","getMessengerCustomData","results","data","each","push","replace","value","TAG_TYPE","deny","update","remove","publicFields","tagIds","define","internet"],"mappings":"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","file":"/imports/api/customers/customers.js.map","sourcesContent":["import faker from 'faker';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\nimport { Factory } from 'meteor/dburles:factory';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { Brands } from '/imports/api/brands/brands';\nimport { TagsCollection, tagsHelper, tagSchemaOptions } from '/imports/api/tags/utils';\n\nconst messengerSchema = new SimpleSchema({\n  lastSeenAt: {\n    type: Date,\n    label: 'Messenger: Last online',\n  },\n  sessionCount: {\n    type: Number,\n    label: 'Messenger: Session count',\n  },\n  isActive: {\n    type: Boolean,\n    label: 'Messenger: Is online',\n  },\n  customData: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n});\n\nconst twitterSchema = new SimpleSchema({\n  id: {\n    type: Number,\n    label: 'Twitter: ID (Number)',\n  },\n  idStr: {\n    type: String,\n    label: 'Twitter: ID (String)',\n  },\n  name: {\n    type: String,\n    label: 'Twitter: Name',\n  },\n  screenName: {\n    type: String,\n    label: 'Twitter: Screen name',\n  },\n  profileImageUrl: {\n    type: String,\n    label: 'Twitter: Profile photo',\n  },\n});\n\nconst facebookSchema = new SimpleSchema({\n  id: {\n    type: String,\n    label: 'Facebook: ID',\n  },\n  profilePic: {\n    type: String,\n    optional: true,\n    label: 'Facebook: Profile photo',\n  },\n});\n\nconst internalNoteSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  content: {\n    type: String,\n  },\n  createdBy: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  createdDate: {\n    type: Date,\n  },\n});\n\nconst schema = new SimpleSchema({\n  name: {\n    type: String,\n    optional: true,\n    label: 'Name',\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true,\n    label: 'Email',\n  },\n  phone: {\n    type: String,\n    optional: true,\n    label: 'Phone number',\n  },\n  isUser: {\n    type: Boolean,\n    label: 'Is user of one of our products',\n    optional: true,\n  },\n  integrationId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  createdAt: {\n    type: Date,\n    label: 'Member since',\n  },\n  internalNotes: {\n    type: [internalNoteSchema],\n    optional: true,\n  },\n\n  // Integration data\n  messengerData: {\n    type: messengerSchema,\n    optional: true,\n  },\n  twitterData: {\n    type: twitterSchema,\n    optional: true,\n  },\n  facebookData: {\n    type: facebookSchema,\n    optional: true,\n  },\n\n  ...tagSchemaOptions(),\n});\n\nclass CustomersCollection extends TagsCollection {\n  insert(doc, callback) {\n    const customer = Object.assign({ createdAt: new Date() }, doc);\n\n    return super.insert(customer, callback);\n  }\n\n  /**\n   * Public displayable fields of customer object.\n   * Only the child fields (leaf fields).\n   * They're used for construct the table columns and segment filter fields.\n   * @return {Array.String} Fields names\n   */\n  getPublicFields() {\n    const schema = this.simpleSchema().schema();\n    const fields = Object.keys(schema)\n      .filter(key => {\n        // Can't accepts below types of fields\n        const unacceptedTypes = ['Object', 'Array'];\n        const isAcceptedType = unacceptedTypes.indexOf(schema[key].type.name) < 0;\n\n        // Exclude the fields which is used for internal use\n        const [parentFieldName] = key.split('.');\n        const notInternalUseField = this.internalUseFields.indexOf(parentFieldName) < 0;\n\n        return isAcceptedType && notInternalUseField;\n      })\n      .map(key => ({\n        key,\n        label: schema[key].label || key,\n      }));\n\n    return fields;\n  }\n}\n\nexport const Customers = new CustomersCollection('customers');\n\nCustomers.attachSchema(schema);\n\n// collection helpers\nCustomers.helpers({\n  integration() {\n    return Integrations.findOne(this.integrationId);\n  },\n  getIntegrationData() {\n    return {\n      messenger: this.messengerData || {},\n      twitter: this.twitterData || {},\n      facebook: this.facebookData || {},\n    };\n  },\n  brand() {\n    const integration = this.integration();\n    return Brands.findOne(integration && integration.brandId);\n  },\n  getMessengerCustomData() {\n    const results = [];\n    const data = this.messengerData.customData || {};\n\n    _.each(_.keys(data), key => {\n      results.push({\n        name: key.replace(/_/g, ' '),\n        value: data[key],\n      });\n    });\n\n    return results;\n  },\n  ...tagsHelper,\n});\n\nCustomers.TAG_TYPE = 'customer';\n\nCustomers.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nCustomers.publicFields = {\n  name: 1,\n  email: 1,\n  phone: 1,\n  isUser: 1,\n  integrationId: 1,\n  createdAt: 1,\n  messengerData: 1,\n  twitterData: 1,\n  facebookData: 1,\n  tagIds: 1,\n  internalNotes: 1,\n};\n\n/**\n * This fields list is used for not displaying\n * internal use fields on customer segments form.\n */\nCustomers.internalUseFields = ['tagIds', 'integrationId', 'internalNotes'];\n\nFactory.define('customer', Customers, {\n  email: () => faker.internet.email(),\n  integrationId: () => Random.id(),\n});\n"]},"hash":"0ebb07477f540925103a4f1ae4b0e8024b131e69"}
