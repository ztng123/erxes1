{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"../brands","imported":["Brands","emailConfigSchema"],"specifiers":[{"kind":"named","imported":"Brands","local":"Brands"},{"kind":"named","imported":"emailConfigSchema","local":"emailConfigSchema"}]}],"exports":{"exported":["add","edit","remove","configEmail"],"specifiers":[{"kind":"local","local":"add","exported":"add"},{"kind":"local","local":"edit","exported":"edit"},{"kind":"local","local":"remove","exported":"remove"},{"kind":"local","local":"configEmail","exported":"configEmail"}]}}},"options":{"filename":"/imports/api/brands/server/methods.js","filenameRelative":"/imports/api/brands/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/brands/server/methods.js.map","sourceFileName":"/imports/api/brands/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  add: function () {\n    return add;\n  },\n  edit: function () {\n    return edit;\n  },\n  remove: function () {\n    return remove;\n  },\n  configEmail: function () {\n    return configEmail;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 2);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 3);\nvar Brands = void 0,\n    emailConfigSchema = void 0;\nmodule.importSync(\"../brands\", {\n  Brands: function (v) {\n    Brands = v;\n  },\n  emailConfigSchema: function (v) {\n    emailConfigSchema = v;\n  }\n}, 4);\nvar add = new ValidatedMethod({\n  name: 'brands.add',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var doc = _ref.doc;\n    check(doc, Brands.schema);\n  },\n  run: function (_ref2) {\n    var doc = _ref2.doc;\n    var id = Brands.insert(Object.assign({\n      userId: this.userId\n    }, doc));\n    return id;\n  }\n});\nvar edit = new ValidatedMethod({\n  name: 'brands.edit',\n  mixins: [ErxesMixin],\n  validate: function (_ref3) {\n    var id = _ref3.id,\n        doc = _ref3.doc;\n    check(id, String);\n    check(doc, Brands.schema);\n  },\n  run: function (_ref4) {\n    var id = _ref4.id,\n        doc = _ref4.doc;\n    var brand = Brands.findOne(id, {\n      fields: {\n        userId: 1\n      }\n    });\n\n    if (!brand) {\n      throw new Meteor.Error('brands.edit.notFound', 'Brand not found');\n    }\n\n    return Brands.update(id, {\n      $set: doc\n    });\n  }\n});\nvar remove = new ValidatedMethod({\n  name: 'brands.remove',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    var brand = Brands.findOne(id, {\n      fields: {\n        userId: 1\n      }\n    });\n\n    if (!brand) {\n      throw new Meteor.Error('brands.remove.notFound', 'Brand not found');\n    }\n\n    return Brands.remove(id);\n  }\n});\nvar configEmail = new ValidatedMethod({\n  name: 'brands.configEmail',\n  mixins: [ErxesMixin],\n  validate: function (_ref5) {\n    var id = _ref5.id,\n        config = _ref5.config;\n    check(id, String);\n    check(config, emailConfigSchema);\n  },\n  run: function (_ref6) {\n    var id = _ref6.id,\n        config = _ref6.config;\n    return Brands.update(id, {\n      $set: {\n        emailConfig: config\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/imports/api/brands/server/methods.js"],"names":["module","export","add","edit","remove","configEmail","Meteor","importSync","v","check","ValidatedMethod","ErxesMixin","Brands","emailConfigSchema","name","mixins","validate","doc","schema","run","id","insert","Object","assign","userId","String","brand","findOne","fields","Error","update","$set","config","emailConfig"],"mappings":"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","file":"/imports/api/brands/server/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Brands, emailConfigSchema } from '../brands';\n\n// brand add\nexport const add = new ValidatedMethod({\n  name: 'brands.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, Brands.schema);\n  },\n\n  run({ doc }) {\n    const id = Brands.insert(Object.assign({ userId: this.userId }, doc));\n    return id;\n  },\n});\n\n// brand edit\nexport const edit = new ValidatedMethod({\n  name: 'brands.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Brands.schema);\n  },\n\n  run({ id, doc }) {\n    const brand = Brands.findOne(id, {\n      fields: {\n        userId: 1,\n      },\n    });\n\n    if (!brand) {\n      throw new Meteor.Error('brands.edit.notFound', 'Brand not found');\n    }\n\n    return Brands.update(id, { $set: doc });\n  },\n});\n\n// brand remove\nexport const remove = new ValidatedMethod({\n  name: 'brands.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    const brand = Brands.findOne(id, { fields: { userId: 1 } });\n\n    if (!brand) {\n      throw new Meteor.Error('brands.remove.notFound', 'Brand not found');\n    }\n\n    return Brands.remove(id);\n  },\n});\n\n// config email\nexport const configEmail = new ValidatedMethod({\n  name: 'brands.configEmail',\n  mixins: [ErxesMixin],\n\n  validate({ id, config }) {\n    check(id, String);\n    check(config, emailConfigSchema);\n  },\n\n  run({ id, config }) {\n    return Brands.update(id, { $set: { emailConfig: config } });\n  },\n});\n"]},"hash":"f2e6b85dd590a2b2b2d44511cd0eba306185e682"}
