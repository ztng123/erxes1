{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]}],"exports":{"exported":["Channels"],"specifiers":[{"kind":"local","local":"Channels","exported":"Channels"}]}}},"options":{"filename":"/imports/api/channels/channels.js","filenameRelative":"/imports/api/channels/channels.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/channels/channels.js.map","sourceFileName":"/imports/api/channels/channels.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"channels"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Channels: function () {\n    return Channels;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 3);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 4);\n\nvar ChannelsCollection = function (_Mongo$Collection) {\n  (0, _inherits3.default)(ChannelsCollection, _Mongo$Collection);\n\n  function ChannelsCollection() {\n    (0, _classCallCheck3.default)(this, ChannelsCollection);\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));\n  }\n\n  ChannelsCollection.prototype.insert = function () {\n    function insert(doc, callback) {\n      // extend doc with auto values\n      var modifier = Object.assign({\n        createdAt: new Date(),\n        conversationCount: 0,\n        openConversationCount: 0\n      }, doc); // add current user to members\n\n      if (modifier.memberIds.indexOf(modifier.userId) === -1) {\n        modifier.memberIds.push(modifier.userId);\n      }\n\n      return _Mongo$Collection.prototype.insert.call(this, modifier, callback);\n    }\n\n    return insert;\n  }();\n\n  return ChannelsCollection;\n}(Mongo.Collection);\n\nvar Channels = new ChannelsCollection('channels');\nChannels.deny({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\nChannels.schema = new SimpleSchema({\n  name: {\n    type: String\n  },\n  description: {\n    type: String,\n    optional: true\n  },\n  integrationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id\n  },\n  memberIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\nChannels.schemaExtra = new SimpleSchema({\n  createdAt: {\n    type: Date\n  },\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  // All conversation count\n  conversationCount: {\n    type: Number\n  },\n  // Open/unresolved conversation count\n  openConversationCount: {\n    type: Number\n  }\n});\nChannels.attachSchema(Channels.schema);\nChannels.attachSchema(Channels.schemaExtra);\nChannels.publicFields = {\n  name: 1,\n  description: 1,\n  integrationIds: 1,\n  memberIds: 1,\n  userId: 1,\n  createdAt: 1,\n  openConversationCount: 1,\n  conversationCount: 1\n};\nFactory.define('channel', Channels, {\n  name: function () {\n    return faker.random.word();\n  },\n  memberIds: function () {\n    return [Random.id()];\n  },\n  integrationIds: function () {\n    return [Random.id()];\n  },\n  userId: function () {\n    return Random.id();\n  }\n});","map":{"version":3,"sources":["/imports/api/channels/channels.js"],"names":["module","export","Channels","faker","importSync","v","Mongo","Random","SimpleSchema","Factory","ChannelsCollection","insert","doc","callback","modifier","Object","assign","createdAt","Date","conversationCount","openConversationCount","memberIds","indexOf","userId","push","Collection","deny","update","remove","schema","name","type","String","description","optional","integrationIds","regEx","RegEx","Id","schemaExtra","Number","attachSchema","publicFields","define","random","word","id"],"mappings":"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","file":"/imports/api/channels/channels.js.map","sourcesContent":["import faker from 'faker';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Factory } from 'meteor/dburles:factory';\n\nclass ChannelsCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    // extend doc with auto values\n    const modifier = Object.assign(\n      {\n        createdAt: new Date(),\n        conversationCount: 0,\n        openConversationCount: 0,\n      },\n      doc,\n    );\n\n    // add current user to members\n    if (modifier.memberIds.indexOf(modifier.userId) === -1) {\n      modifier.memberIds.push(modifier.userId);\n    }\n\n    return super.insert(modifier, callback);\n  }\n}\n\nexport const Channels = new ChannelsCollection('channels');\n\nChannels.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\nChannels.schema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  description: {\n    type: String,\n    optional: true,\n  },\n  integrationIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n  memberIds: {\n    type: [String],\n    regEx: SimpleSchema.RegEx.Id,\n  },\n});\n\nChannels.schemaExtra = new SimpleSchema({\n  createdAt: {\n    type: Date,\n  },\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n  },\n\n  // All conversation count\n  conversationCount: {\n    type: Number,\n  },\n\n  // Open/unresolved conversation count\n  openConversationCount: {\n    type: Number,\n  },\n});\n\nChannels.attachSchema(Channels.schema);\nChannels.attachSchema(Channels.schemaExtra);\n\nChannels.publicFields = {\n  name: 1,\n  description: 1,\n  integrationIds: 1,\n  memberIds: 1,\n  userId: 1,\n  createdAt: 1,\n  openConversationCount: 1,\n  conversationCount: 1,\n};\n\nFactory.define('channel', Channels, {\n  name: () => faker.random.word(),\n  memberIds: () => [Random.id()],\n  integrationIds: () => [Random.id()],\n  userId: () => Random.id(),\n});\n"]},"hash":"3703f6f96af33f596588ccda88e22d363392f80d"}
