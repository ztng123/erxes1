{"metadata":{"usedHelpers":["extends","taggedTemplateLiteralLoose","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"meteor/erxes-notifier","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]},{"source":"../components","imported":["ManageFields"],"specifiers":[{"kind":"named","imported":"ManageFields","local":"ManageFields"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/settings/forms/containers/ManageFields.js","filenameRelative":"/imports/react-ui/settings/forms/containers/ManageFields.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/settings/forms/containers/ManageFields.js.map","sourceFileName":"/imports/react-ui/settings/forms/containers/ManageFields.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ManageFields"},"ignored":false,"code":"var _taggedTemplateLiteralLoose2 = require(\"babel-runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _templateObject = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query formDetail($formId: String!) {\\n        formDetail(_id: $formId) {\\n          _id\\n          title\\n          fields {\\n            _id\\n            type\\n            validation\\n            text\\n            description\\n            options\\n            isRequired\\n            order\\n          }\\n        }\\n      }\\n    \"], [\"\\n      query formDetail($formId: String!) {\\n        formDetail(_id: $formId) {\\n          _id\\n          title\\n          fields {\\n            _id\\n            type\\n            validation\\n            text\\n            description\\n            options\\n            isRequired\\n            order\\n          }\\n        }\\n      }\\n    \"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\n\nvar _ = void 0;\n\nmodule.importSync(\"meteor/underscore\", {\n  _: function (v) {\n    _ = v;\n  }\n}, 1);\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 2);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 3);\nvar Alert = void 0;\nmodule.importSync(\"meteor/erxes-notifier\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 4);\nvar ManageFields = void 0;\nmodule.importSync(\"../components\", {\n  ManageFields: function (v) {\n    ManageFields = v;\n  }\n}, 5);\n\nvar ManageFieldsContainer = function (props) {\n  var formQuery = props.formQuery;\n\n  if (formQuery.loading) {\n    return false;\n  }\n\n  var form = formQuery.formDetail;\n  var fields = []; // cloning graphql results, because in component we need to change\n  // each field's attributes and it is immutable. so making it mutable\n\n  form.fields.forEach(function (field) {\n    fields.push((0, _extends3.default)({}, field));\n  }); // common callback\n\n  var callback = function (error) {\n    if (error) {\n      return Alert.error(error.message);\n    }\n\n    return Alert.success('Congrats');\n  }; // create field\n\n\n  var addField = function (doc, cb) {\n    Meteor.call('forms.addField', {\n      formId: props.formId,\n      doc: doc\n    }, function (err, res) {\n      if (err) {\n        return Alert.error(err.message);\n      }\n\n      cb(res);\n      return Alert.success('Congrats');\n    });\n  }; // edit field\n\n\n  var editField = function (_id, doc) {\n    Meteor.call('forms.editField', {\n      _id: _id,\n      doc: doc\n    }, callback);\n  }; // delete field\n\n\n  var deleteField = function (_id) {\n    if (confirm('Are you sure ?')) {\n      // eslint-disable-line\n      Meteor.call('forms.removeField', {\n        _id: _id\n      }, callback);\n    }\n  }; // update orders\n\n\n  var onSort = function (fields) {\n    var orderDics = [];\n\n    _.each(fields, function (field, index) {\n      orderDics.push({\n        _id: field._id,\n        order: index\n      });\n    });\n\n    Meteor.call('forms.updateFieldsOrder', {\n      orderDics: orderDics\n    }, callback);\n  };\n\n  var updatedProps = (0, _extends3.default)({}, props, {\n    addField: addField,\n    editField: editField,\n    deleteField: deleteField,\n    onSort: onSort,\n    formTitle: form.title,\n    fields: fields\n  });\n  return React.createElement(ManageFields, updatedProps);\n};\n\nManageFieldsContainer.propTypes = {\n  formQuery: PropTypes.object,\n  formFieldsQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(_templateObject), {\n  name: 'formQuery',\n  options: function (_ref) {\n    var formId = _ref.formId;\n    return {\n      variables: {\n        formId: formId\n      }\n    };\n  }\n}))(ManageFieldsContainer));","map":{"version":3,"sources":["/imports/react-ui/settings/forms/containers/ManageFields.js"],"names":["Meteor","module","importSync","v","_","React","PropTypes","compose","gql","graphql","Alert","ManageFields","ManageFieldsContainer","formQuery","props","loading","form","formDetail","fields","forEach","push","field","callback","error","message","success","addField","doc","cb","call","formId","err","res","editField","_id","deleteField","confirm","onSort","orderDics","each","index","order","updatedProps","formTitle","title","propTypes","object","formFieldsQuery","export","exports","default","name","options","variables"],"mappings":"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","file":"/imports/react-ui/settings/forms/containers/ManageFields.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\nimport React, { PropTypes } from 'react';\nimport { compose, gql, graphql } from 'react-apollo';\nimport Alert from 'meteor/erxes-notifier';\nimport { ManageFields } from '../components';\n\nconst ManageFieldsContainer = props => {\n  const { formQuery } = props;\n\n  if (formQuery.loading) {\n    return false;\n  }\n\n  const form = formQuery.formDetail;\n  const fields = [];\n\n  // cloning graphql results, because in component we need to change\n  // each field's attributes and it is immutable. so making it mutable\n  form.fields.forEach(field => {\n    fields.push({ ...field });\n  });\n\n  // common callback\n  const callback = error => {\n    if (error) {\n      return Alert.error(error.message);\n    }\n\n    return Alert.success('Congrats');\n  };\n\n  // create field\n  const addField = (doc, cb) => {\n    Meteor.call('forms.addField', { formId: props.formId, doc }, (err, res) => {\n      if (err) {\n        return Alert.error(err.message);\n      }\n\n      cb(res);\n      return Alert.success('Congrats');\n    });\n  };\n\n  // edit field\n  const editField = (_id, doc) => {\n    Meteor.call('forms.editField', { _id, doc }, callback);\n  };\n\n  // delete field\n  const deleteField = _id => {\n    if (confirm('Are you sure ?')) {\n      // eslint-disable-line\n      Meteor.call('forms.removeField', { _id }, callback);\n    }\n  };\n\n  // update orders\n  const onSort = fields => {\n    const orderDics = [];\n\n    _.each(fields, (field, index) => {\n      orderDics.push({ _id: field._id, order: index });\n    });\n\n    Meteor.call('forms.updateFieldsOrder', { orderDics }, callback);\n  };\n\n  const updatedProps = {\n    ...props,\n    addField,\n    editField,\n    deleteField,\n    onSort,\n    formTitle: form.title,\n    fields,\n  };\n\n  return <ManageFields {...updatedProps} />;\n};\n\nManageFieldsContainer.propTypes = {\n  formQuery: PropTypes.object,\n  formFieldsQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(\n    gql`\n      query formDetail($formId: String!) {\n        formDetail(_id: $formId) {\n          _id\n          title\n          fields {\n            _id\n            type\n            validation\n            text\n            description\n            options\n            isRequired\n            order\n          }\n        }\n      }\n    `,\n    {\n      name: 'formQuery',\n      options: ({ formId }) => {\n        return {\n          variables: {\n            formId,\n          },\n        };\n      },\n    },\n  ),\n)(ManageFieldsContainer);\n"]},"hash":"060c3672c8667bcbdf702fa9c0f540e31fa6db09"}
