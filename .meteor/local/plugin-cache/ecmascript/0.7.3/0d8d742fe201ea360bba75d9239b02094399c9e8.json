{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/api/users/server/hooks.js","filenameRelative":"/imports/api/users/server/hooks.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/users/server/hooks.js.map","sourceFileName":"/imports/api/users/server/hooks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"hooks"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Accounts = void 0;\nmodule.importSync(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 1);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 2);\nAccounts.onCreateUser(function (options, doc) {\n  if (Meteor.users.find().count() > 0 && !options.invite) {\n    throw new Meteor.Error(403, 'Can not register');\n  }\n\n  var user = Object.assign({\n    details: options.details || {}\n  }, doc);\n\n  if (Meteor.users.find().count() === 0) {\n    user.isOwner = true;\n  } // For various user specific configurations\n\n\n  user.configs = {}; // Save customer fields selection config\n\n  user.configs.customerFields = Customers.getPublicFields();\n  return user;\n}); /**\n     * Validate email address\n     */\nAccounts.validateNewUser(function (user) {\n  var email = user.emails[0].address;\n\n  if (/^[A-Z0-9'.1234z_%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n    return true;\n  }\n\n  throw new Meteor.Error('invalid-email', 'Please enter valid email');\n});","map":{"version":3,"sources":["/imports/api/users/server/hooks.js"],"names":["Meteor","module","importSync","v","Accounts","Customers","onCreateUser","options","doc","users","find","count","invite","Error","user","Object","assign","details","isOwner","configs","customerFields","getPublicFields","validateNewUser","email","emails","address","test"],"mappings":"AAAA,IAAIA,eAAJ;AAAWC,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACF,UAAO,UAASG,CAAT,EAAW;AAACH,aAAOG,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIC,iBAAJ;AAAaH,OAAOC,UAAP,CAAkB,sBAAlB,EAAyC;AAACE,YAAS,UAASD,CAAT,EAAW;AAACC,eAASD,CAAT;AAAW;AAAjC,CAAzC,EAA4E,CAA5E;AAA+E,IAAIE,kBAAJ;AAAcJ,OAAOC,UAAP,CAAkB,kCAAlB,EAAqD;AAACG,aAAU,UAASF,CAAT,EAAW;AAACE,gBAAUF,CAAV;AAAY;AAAnC,CAArD,EAA0F,CAA1F;AAIzLC,SAASE,YAAT,CAAsB,UAACC,OAAD,EAAUC,GAAV,EAAkB;AACtC,MAAIR,OAAOS,KAAP,CAAaC,IAAb,GAAoBC,KAApB,KAA8B,CAA9B,IAAmC,CAACJ,QAAQK,MAAhD,EAAwD;AACtD,UAAM,IAAIZ,OAAOa,KAAX,CAAiB,GAAjB,EAAsB,kBAAtB,CAAN;AACD;;AAED,MAAMC,OAAOC,OAAOC,MAAP,CAAc;AAAEC,aAASV,QAAQU,OAAR,IAAmB;AAA9B,GAAd,EAAkDT,GAAlD,CAAb;;AAEA,MAAIR,OAAOS,KAAP,CAAaC,IAAb,GAAoBC,KAApB,OAAgC,CAApC,EAAuC;AACrCG,SAAKI,OAAL,GAAe,IAAf;AACD,GATqC,CAWtC;;;AACAJ,OAAKK,OAAL,GAAe,EAAf,CAZsC,CActC;;AACAL,OAAKK,OAAL,CAAaC,cAAb,GAA8Bf,UAAUgB,eAAV,EAA9B;AAEA,SAAOP,IAAP;AACD,CAlBD,E,CAoBA;;;AAGAV,SAASkB,eAAT,CAAyB,gBAAQ;AAC/B,MAAMC,QAAQT,KAAKU,MAAL,CAAY,CAAZ,EAAeC,OAA7B;;AAEA,MAAI,kDAAkDC,IAAlD,CAAuDH,KAAvD,CAAJ,EAAmE;AACjE,WAAO,IAAP;AACD;;AAED,QAAM,IAAIvB,OAAOa,KAAX,CAAiB,eAAjB,EAAkC,0BAAlC,CAAN;AACD,CARD","file":"/imports/api/users/server/hooks.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Customers } from '/imports/api/customers/customers';\n\nAccounts.onCreateUser((options, doc) => {\n  if (Meteor.users.find().count() > 0 && !options.invite) {\n    throw new Meteor.Error(403, 'Can not register');\n  }\n\n  const user = Object.assign({ details: options.details || {} }, doc);\n\n  if (Meteor.users.find().count() === 0) {\n    user.isOwner = true;\n  }\n\n  // For various user specific configurations\n  user.configs = {};\n\n  // Save customer fields selection config\n  user.configs.customerFields = Customers.getPublicFields();\n\n  return user;\n});\n\n/**\n * Validate email address\n */\nAccounts.validateNewUser(user => {\n  const email = user.emails[0].address;\n\n  if (/^[A-Z0-9'.1234z_%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n    return true;\n  }\n\n  throw new Meteor.Error('invalid-email', 'Please enter valid email');\n});\n"]},"hash":"0d8d742fe201ea360bba75d9239b02094399c9e8"}
