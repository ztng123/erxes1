{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"/imports/react-ui/common","imported":["Bulk","pagination"],"specifiers":[{"kind":"named","imported":"Bulk","local":"Bulk"},{"kind":"named","imported":"pagination","local":"pagination"}]},{"source":"../components","imported":["List"],"specifiers":[{"kind":"named","imported":"List","local":"List"}]},{"source":"../graphql","imported":["queries","subscriptions"],"specifiers":[{"kind":"named","imported":"queries","local":"queries"},{"kind":"named","imported":"subscriptions","local":"subscriptions"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/inbox/containers/List.js","filenameRelative":"/imports/react-ui/inbox/containers/List.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/inbox/containers/List.js.map","sourceFileName":"/imports/react-ui/inbox/containers/List.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"List"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 1);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 2);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 3);\nvar Bulk = void 0,\n    pagination = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Bulk: function (v) {\n    Bulk = v;\n  },\n  pagination: function (v) {\n    pagination = v;\n  }\n}, 4);\nvar List = void 0;\nmodule.importSync(\"../components\", {\n  List: function (v) {\n    List = v;\n  }\n}, 5);\nvar queries = void 0,\n    subscriptions = void 0;\nmodule.importSync(\"../graphql\", {\n  queries: function (v) {\n    queries = v;\n  },\n  subscriptions: function (v) {\n    subscriptions = v;\n  }\n}, 6);\n\nvar ListContainer = function (_Bulk) {\n  (0, _inherits3.default)(ListContainer, _Bulk);\n\n  function ListContainer() {\n    (0, _classCallCheck3.default)(this, ListContainer);\n    return (0, _possibleConstructorReturn3.default)(this, _Bulk.apply(this, arguments));\n  }\n\n  ListContainer.prototype.componentWillMount = function () {\n    function componentWillMount() {\n      var _this2 = this;\n\n      this.props.conversationsQuery.subscribeToMore({\n        // listen for all conversation changes\n        document: gql(subscriptions.conversationsChanged),\n        updateQuery: function () {\n          _this2.props.conversationsQuery.refetch();\n        }\n      });\n    }\n\n    return componentWillMount;\n  }();\n\n  ListContainer.prototype.refetch = function () {\n    function refetch() {\n      this.props.conversationsQuery.refetch();\n    }\n\n    return refetch;\n  }();\n\n  ListContainer.prototype.render = function () {\n    function render() {\n      var _props = this.props,\n          queryParams = _props.queryParams,\n          channelId = _props.channelId,\n          conversationsQuery = _props.conversationsQuery,\n          totalCountQuery = _props.totalCountQuery;\n      var conversations = conversationsQuery.conversations || [];\n      var totalCount = totalCountQuery.totalConversationsCount;\n\n      var _pagination = pagination(queryParams, totalCount),\n          loadMore = _pagination.loadMore,\n          hasMore = _pagination.hasMore; // subscriptions ==================\n\n\n      var user = Meteor.user();\n      var starredConversationIds = user.details.starredConversationIds || []; // const conversationSort = { sort: { createdAt: -1 } };\n      // unread conversations\n\n      var unreadConversations = conversations.filter(function (conv) {\n        return !(conv.readUserIds || []).includes(user._id);\n      }); // read conversations\n\n      var readConversations = conversations.filter(function (conv) {\n        return (conv.readUserIds || []).includes(user._id);\n      });\n      var updatedProps = (0, _extends3.default)({}, this.props, {\n        bulk: this.state.bulk,\n        toggleBulk: this.toggleBulk,\n        emptyBulk: this.emptyBulk,\n        loadMore: loadMore,\n        hasMore: hasMore,\n        unreadConversations: unreadConversations,\n        readConversations: readConversations,\n        starredConversationIds: starredConversationIds,\n        channelId: channelId,\n        user: user,\n        conversationReady: conversationsQuery.loading && totalCountQuery.loading,\n        refetch: this.refetch\n      });\n      return React.createElement(List, updatedProps);\n    }\n\n    return render;\n  }();\n\n  return ListContainer;\n}(Bulk);\n\nListContainer.propTypes = {\n  channelId: PropTypes.string,\n  queryParams: PropTypes.object,\n  conversationsQuery: PropTypes.object,\n  totalCountQuery: PropTypes.object\n};\n\nvar generateOptions = function (_ref) {\n  var queryParams = _ref.queryParams;\n  return {\n    variables: {\n      params: (0, _extends3.default)({}, queryParams, {\n        limit: queryParams.limit || 20\n      })\n    },\n    fetchPolicy: 'network-only'\n  };\n};\n\nmodule.export(\"default\", exports.default = compose(graphql(gql(queries.conversationList), {\n  name: 'conversationsQuery',\n  options: generateOptions\n}), graphql(gql(queries.totalConversationsCount), {\n  name: 'totalCountQuery',\n  options: generateOptions\n}))(ListContainer));","map":{"version":3,"sources":["/imports/react-ui/inbox/containers/List.js"],"names":["Meteor","module","importSync","v","React","PropTypes","compose","gql","graphql","Bulk","pagination","List","queries","subscriptions","ListContainer","componentWillMount","props","conversationsQuery","subscribeToMore","document","conversationsChanged","updateQuery","refetch","render","queryParams","channelId","totalCountQuery","conversations","totalCount","totalConversationsCount","loadMore","hasMore","user","starredConversationIds","details","unreadConversations","filter","conv","readUserIds","includes","_id","readConversations","updatedProps","bulk","state","toggleBulk","emptyBulk","conversationReady","loading","propTypes","string","object","generateOptions","variables","params","limit","fetchPolicy","export","exports","default","conversationList","name","options"],"mappings":"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","file":"/imports/react-ui/inbox/containers/List.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { Bulk, pagination } from '/imports/react-ui/common';\nimport { List } from '../components';\nimport { queries, subscriptions } from '../graphql';\n\nclass ListContainer extends Bulk {\n  componentWillMount() {\n    this.props.conversationsQuery.subscribeToMore({\n      // listen for all conversation changes\n      document: gql(subscriptions.conversationsChanged),\n\n      updateQuery: () => {\n        this.props.conversationsQuery.refetch();\n      },\n    });\n  }\n\n  refetch() {\n    this.props.conversationsQuery.refetch();\n  }\n\n  render() {\n    const { queryParams, channelId, conversationsQuery, totalCountQuery } = this.props;\n\n    const conversations = conversationsQuery.conversations || [];\n    const totalCount = totalCountQuery.totalConversationsCount;\n\n    const { loadMore, hasMore } = pagination(queryParams, totalCount);\n\n    // subscriptions ==================\n    const user = Meteor.user();\n    const starredConversationIds = user.details.starredConversationIds || [];\n\n    // const conversationSort = { sort: { createdAt: -1 } };\n\n    // unread conversations\n    const unreadConversations = conversations.filter(\n      conv => !(conv.readUserIds || []).includes(user._id),\n    );\n\n    // read conversations\n    const readConversations = conversations.filter(conv =>\n      (conv.readUserIds || []).includes(user._id),\n    );\n\n    const updatedProps = {\n      ...this.props,\n      bulk: this.state.bulk,\n      toggleBulk: this.toggleBulk,\n      emptyBulk: this.emptyBulk,\n      loadMore,\n      hasMore,\n      unreadConversations,\n      readConversations,\n      starredConversationIds,\n      channelId,\n      user,\n      conversationReady: conversationsQuery.loading && totalCountQuery.loading,\n      refetch: this.refetch,\n    };\n\n    return <List {...updatedProps} />;\n  }\n}\n\nListContainer.propTypes = {\n  channelId: PropTypes.string,\n  queryParams: PropTypes.object,\n  conversationsQuery: PropTypes.object,\n  totalCountQuery: PropTypes.object,\n};\n\nconst generateOptions = ({ queryParams }) => ({\n  variables: {\n    params: {\n      ...queryParams,\n      limit: queryParams.limit || 20,\n    },\n  },\n\n  fetchPolicy: 'network-only',\n});\n\nexport default compose(\n  graphql(gql(queries.conversationList), {\n    name: 'conversationsQuery',\n    options: generateOptions,\n  }),\n  graphql(gql(queries.totalConversationsCount), {\n    name: 'totalCountQuery',\n    options: generateOptions,\n  }),\n)(ListContainer);\n"]},"hash":"a013c80247c5674ff387c24293419c6eb840124d"}
