{"metadata":{"usedHelpers":["extends","taggedTemplateLiteralLoose","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"meteor/kadira:flow-router","imported":["FlowRouter"],"specifiers":[{"kind":"named","imported":"FlowRouter","local":"FlowRouter"}]},{"source":"meteor/erxes-notifier","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"../components","imported":["Twitter"],"specifiers":[{"kind":"named","imported":"Twitter","local":"Twitter"}]},{"source":"/imports/react-ui/common","imported":["Spinner"],"specifiers":[{"kind":"named","imported":"Spinner","local":"Spinner"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/settings/integrations/containers/Twitter.js","filenameRelative":"/imports/react-ui/settings/integrations/containers/Twitter.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/settings/integrations/containers/Twitter.js.map","sourceFileName":"/imports/react-ui/settings/integrations/containers/Twitter.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Twitter"},"ignored":false,"code":"var _taggedTemplateLiteralLoose2 = require(\"babel-runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _templateObject = (0, _taggedTemplateLiteralLoose3.default)([\"\\n      query brands {\\n        brands {\\n          _id\\n          name\\n        }\\n      }\\n    \"], [\"\\n      query brands {\\n        brands {\\n          _id\\n          name\\n        }\\n      }\\n    \"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar FlowRouter = void 0;\nmodule.importSync(\"meteor/kadira:flow-router\", {\n  FlowRouter: function (v) {\n    FlowRouter = v;\n  }\n}, 1);\nvar Alert = void 0;\nmodule.importSync(\"meteor/erxes-notifier\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 2);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 3);\nvar Twitter = void 0;\nmodule.importSync(\"../components\", {\n  Twitter: function (v) {\n    Twitter = v;\n  }\n}, 4);\nvar Spinner = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Spinner: function (v) {\n    Spinner = v;\n  }\n}, 5);\n\nvar TwitterContainer = function (props) {\n  var brandsQuery = props.brandsQuery,\n      type = props.type;\n\n  if (brandsQuery.loading) {\n    return React.createElement(Spinner, null);\n  }\n\n  if (type === 'link') {\n    return Meteor.call('integrations.getTwitterAuthorizeUrl', function (err, url) {\n      location.href = url;\n    });\n  }\n\n  var brands = brandsQuery.brands;\n\n  var save = function (brandId) {\n    Meteor.call('integrations.addTwitter', {\n      brandId: brandId,\n      queryParams: FlowRouter.current().queryParams\n    }, function (error) {\n      if (error) {\n        return Alert.success(error.error);\n      }\n\n      Alert.success('Congrats');\n      return FlowRouter.go('/settings/integrations/list');\n    });\n  };\n\n  var updatedProps = (0, _extends3.default)({}, props, {\n    brands: brands,\n    save: save\n  });\n  return React.createElement(Twitter, updatedProps);\n};\n\nTwitterContainer.propTypes = {\n  type: PropTypes.string,\n  brandsQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(_templateObject), {\n  name: 'brandsQuery',\n  options: function () {\n    return {\n      fetchPolicy: 'network-only'\n    };\n  }\n}))(TwitterContainer));","map":{"version":3,"sources":["/imports/react-ui/settings/integrations/containers/Twitter.js"],"names":["React","PropTypes","module","importSync","v","FlowRouter","Alert","compose","gql","graphql","Twitter","Spinner","TwitterContainer","brandsQuery","props","type","loading","Meteor","call","err","url","location","href","brands","save","brandId","queryParams","current","error","success","go","updatedProps","propTypes","string","object","export","exports","default","name","options","fetchPolicy"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,cAAJ;AAAA,IAAUC,kBAAV;AAAoBC,OAAOC,UAAP,CAAkB,OAAlB,EAA0B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACJ,YAAMI,CAAN;AAAQ,GAA7B;AAA8BH,aAAU,UAASG,CAAT,EAAW;AAACH,gBAAUG,CAAV;AAAY;AAAhE,CAA1B,EAA4F,CAA5F;AAA+F,IAAIC,mBAAJ;AAAeH,OAAOC,UAAP,CAAkB,2BAAlB,EAA8C;AAACE,cAAW,UAASD,CAAT,EAAW;AAACC,iBAAWD,CAAX;AAAa;AAArC,CAA9C,EAAqF,CAArF;AAAwF,IAAIE,cAAJ;AAAUJ,OAAOC,UAAP,CAAkB,uBAAlB,EAA0C;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAA7B,CAA1C,EAAyE,CAAzE;AAA4E,IAAIG,gBAAJ;AAAA,IAAYC,YAAZ;AAAA,IAAgBC,gBAAhB;AAAwBP,OAAOC,UAAP,CAAkB,cAAlB,EAAiC;AAACI,WAAQ,UAASH,CAAT,EAAW;AAACG,cAAQH,CAAR;AAAU,GAA/B;AAAgCI,OAAI,UAASJ,CAAT,EAAW;AAACI,UAAIJ,CAAJ;AAAM,GAAtD;AAAuDK,WAAQ,UAASL,CAAT,EAAW;AAACK,cAAQL,CAAR;AAAU;AAArF,CAAjC,EAAwH,CAAxH;AAA2H,IAAIM,gBAAJ;AAAYR,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACO,WAAQ,UAASN,CAAT,EAAW;AAACM,cAAQN,CAAR;AAAU;AAA/B,CAAlC,EAAmE,CAAnE;AAAsE,IAAIO,gBAAJ;AAAYT,OAAOC,UAAP,CAAkB,0BAAlB,EAA6C;AAACQ,WAAQ,UAASP,CAAT,EAAW;AAACO,cAAQP,CAAR;AAAU;AAA/B,CAA7C,EAA8E,CAA9E;;AAOjiB,IAAMQ,mBAAmB,iBAAS;AAAA,MACxBC,WADwB,GACFC,KADE,CACxBD,WADwB;AAAA,MACXE,IADW,GACFD,KADE,CACXC,IADW;;AAGhC,MAAIF,YAAYG,OAAhB,EAAyB;AACvB,WAAO,oBAAC,OAAD,OAAP;AACD;;AAED,MAAID,SAAS,MAAb,EAAqB;AACnB,WAAOE,OAAOC,IAAP,CAAY,qCAAZ,EAAmD,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtEC,eAASC,IAAT,GAAgBF,GAAhB;AACD,KAFM,CAAP;AAGD;;AAED,MAAMG,SAASV,YAAYU,MAA3B;;AAEA,MAAMC,OAAO,mBAAW;AACtBP,WAAOC,IAAP,CACE,yBADF,EAEE;AACEO,sBADF;AAEEC,mBAAarB,WAAWsB,OAAX,GAAqBD;AAFpC,KAFF,EAME,iBAAS;AACP,UAAIE,KAAJ,EAAW;AACT,eAAOtB,MAAMuB,OAAN,CAAcD,MAAMA,KAApB,CAAP;AACD;;AAEDtB,YAAMuB,OAAN,CAAc,UAAd;AACA,aAAOxB,WAAWyB,EAAX,CAAc,6BAAd,CAAP;AACD,KAbH;AAeD,GAhBD;;AAkBA,MAAMC,0CACDjB,KADC;AAEJS,kBAFI;AAGJC;AAHI,IAAN;AAMA,SAAO,oBAAC,OAAD,EAAaO,YAAb,CAAP;AACD,CAxCD;;AA0CAnB,iBAAiBoB,SAAjB,GAA6B;AAC3BjB,QAAMd,UAAUgC,MADW;AAE3BpB,eAAaZ,UAAUiC;AAFI,CAA7B;AAjDAhC,OAAOiC,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GAsDT9B,QACbE,QACED,GADF,mBASE;AACE8B,QAAM,aADR;AAEEC,WAAS;AAAA,WAAO;AACdC,mBAAa;AADC,KAAP;AAAA;AAFX,CATF,CADa,EAiBb5B,gBAjBa,CAtDf","file":"/imports/react-ui/settings/integrations/containers/Twitter.js.map","sourcesContent":["import React, { PropTypes } from 'react';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport Alert from 'meteor/erxes-notifier';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { Twitter } from '../components';\nimport { Spinner } from '/imports/react-ui/common';\n\nconst TwitterContainer = props => {\n  const { brandsQuery, type } = props;\n\n  if (brandsQuery.loading) {\n    return <Spinner />;\n  }\n\n  if (type === 'link') {\n    return Meteor.call('integrations.getTwitterAuthorizeUrl', (err, url) => {\n      location.href = url;\n    });\n  }\n\n  const brands = brandsQuery.brands;\n\n  const save = brandId => {\n    Meteor.call(\n      'integrations.addTwitter',\n      {\n        brandId,\n        queryParams: FlowRouter.current().queryParams,\n      },\n      error => {\n        if (error) {\n          return Alert.success(error.error);\n        }\n\n        Alert.success('Congrats');\n        return FlowRouter.go('/settings/integrations/list');\n      },\n    );\n  };\n\n  const updatedProps = {\n    ...props,\n    brands,\n    save,\n  };\n\n  return <Twitter {...updatedProps} />;\n};\n\nTwitterContainer.propTypes = {\n  type: PropTypes.string,\n  brandsQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(\n    gql`\n      query brands {\n        brands {\n          _id\n          name\n        }\n      }\n    `,\n    {\n      name: 'brandsQuery',\n      options: () => ({\n        fetchPolicy: 'network-only',\n      }),\n    },\n  ),\n)(TwitterContainer);\n"]},"hash":"9ad9ed5a717143f52fab0cb643f3d2e5f74be4d2"}
