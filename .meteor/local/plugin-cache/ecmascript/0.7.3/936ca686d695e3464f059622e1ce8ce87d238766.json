{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"/imports/api/brands/brands","imported":["Brands"],"specifiers":[{"kind":"named","imported":"Brands","local":"Brands"}]},{"source":"/imports/api/channels/channels","imported":["Channels"],"specifiers":[{"kind":"named","imported":"Channels","local":"Channels"}]},{"source":"./social/social","imported":["facebookSchema","twitterSchema"],"specifiers":[{"kind":"named","imported":"facebookSchema","local":"facebookSchema"},{"kind":"named","imported":"twitterSchema","local":"twitterSchema"}]},{"source":"./constants","imported":["KIND_CHOICES","FORM_LOAD_TYPES","FORM_SUCCESS_ACTIONS"],"specifiers":[{"kind":"named","imported":"KIND_CHOICES","local":"KIND_CHOICES"},{"kind":"named","imported":"FORM_LOAD_TYPES","local":"FORM_LOAD_TYPES"},{"kind":"named","imported":"FORM_SUCCESS_ACTIONS","local":"FORM_SUCCESS_ACTIONS"}]}],"exports":{"exported":["Integrations","formSchema","messengerSchema"],"specifiers":[{"kind":"local","local":"Integrations","exported":"Integrations"},{"kind":"local","local":"formSchema","exported":"formSchema"},{"kind":"local","local":"messengerSchema","exported":"messengerSchema"}]}}},"options":{"filename":"/imports/api/integrations/integrations.js","filenameRelative":"/imports/api/integrations/integrations.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/integrations/integrations.js.map","sourceFileName":"/imports/api/integrations/integrations.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"integrations"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  Integrations: function () {\n    return Integrations;\n  },\n  formSchema: function () {\n    return formSchema;\n  },\n  messengerSchema: function () {\n    return messengerSchema;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 3);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 4);\nvar Brands = void 0;\nmodule.importSync(\"/imports/api/brands/brands\", {\n  Brands: function (v) {\n    Brands = v;\n  }\n}, 5);\nvar Channels = void 0;\nmodule.importSync(\"/imports/api/channels/channels\", {\n  Channels: function (v) {\n    Channels = v;\n  }\n}, 6);\nvar facebookSchema = void 0,\n    twitterSchema = void 0;\nmodule.importSync(\"./social/social\", {\n  facebookSchema: function (v) {\n    facebookSchema = v;\n  },\n  twitterSchema: function (v) {\n    twitterSchema = v;\n  }\n}, 7);\nvar KIND_CHOICES = void 0,\n    FORM_LOAD_TYPES = void 0,\n    FORM_SUCCESS_ACTIONS = void 0;\nmodule.importSync(\"./constants\", {\n  KIND_CHOICES: function (v) {\n    KIND_CHOICES = v;\n  },\n  FORM_LOAD_TYPES: function (v) {\n    FORM_LOAD_TYPES = v;\n  },\n  FORM_SUCCESS_ACTIONS: function (v) {\n    FORM_SUCCESS_ACTIONS = v;\n  }\n}, 8);\n\nvar IntegrationCollections = function (_Mongo$Collection) {\n  (0, _inherits3.default)(IntegrationCollections, _Mongo$Collection);\n\n  function IntegrationCollections() {\n    (0, _classCallCheck3.default)(this, IntegrationCollections);\n    return (0, _possibleConstructorReturn3.default)(this, _Mongo$Collection.apply(this, arguments));\n  }\n\n  return IntegrationCollections;\n}(Mongo.Collection);\n\nvar Integrations = new IntegrationCollections('integrations');\nIntegrations.deny({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n}); // form integration options\n\nvar formSchema = new SimpleSchema({\n  loadType: {\n    type: String,\n    allowedValues: FORM_LOAD_TYPES.ALL_LIST,\n    optional: true\n  },\n  successAction: {\n    type: String,\n    allowedValues: FORM_SUCCESS_ACTIONS.ALL_LIST,\n    optional: true\n  },\n  fromEmail: {\n    type: String,\n    optional: true\n  },\n  userEmailTitle: {\n    type: String,\n    optional: true\n  },\n  userEmailContent: {\n    type: String,\n    optional: true\n  },\n  adminEmails: {\n    type: [String],\n    optional: true\n  },\n  adminEmailTitle: {\n    type: String,\n    optional: true\n  },\n  adminEmailContent: {\n    type: String,\n    optional: true\n  },\n  thankContent: {\n    type: String,\n    optional: true\n  },\n  redirectUrl: {\n    type: String,\n    optional: true\n  }\n});\nvar onlineHoursSchema = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  day: {\n    type: String\n  },\n  from: {\n    type: String\n  },\n  to: {\n    type: String\n  }\n}); // messenger ==============\n\nvar messengerSchema = new SimpleSchema({\n  notifyCustomer: {\n    type: Boolean,\n    optional: true\n  },\n  // manual, auto\n  availabilityMethod: {\n    type: String,\n    optional: true,\n    allowedValues: ['manual', 'auto']\n  },\n  isOnline: {\n    type: Boolean,\n    optional: true\n  },\n  onlineHours: {\n    type: [onlineHoursSchema],\n    optional: true\n  },\n  timezone: {\n    type: String,\n    optional: true\n  },\n  welcomeMessage: {\n    type: String,\n    optional: true\n  },\n  awayMessage: {\n    type: String,\n    optional: true\n  },\n  thankYouMessage: {\n    type: String,\n    optional: true\n  }\n});\nIntegrations.schema = new SimpleSchema({\n  // messenger , twitter ...\n  kind: {\n    type: String,\n    allowedValues: KIND_CHOICES.ALL_LIST\n  },\n  name: {\n    type: String\n  },\n  brandId: {\n    type: String\n  },\n  formId: {\n    type: String,\n    optional: true\n  },\n  // form integration options\n  formData: {\n    type: formSchema,\n    optional: true\n  },\n  // messenger availability, text and other options\n  messengerData: {\n    type: messengerSchema,\n    optional: true\n  },\n  // twitter authentication info\n  twitterData: {\n    type: twitterSchema,\n    optional: true\n  },\n  // facebook authentication info\n  facebookData: {\n    type: facebookSchema,\n    optional: true\n  },\n  // ui options\n  uiOptions: {\n    type: Object,\n    blackbox: true,\n    optional: true\n  }\n});\nIntegrations.attachSchema(Integrations.schema);\nIntegrations.helpers({\n  brand: function () {\n    return Brands.findOne(this.brandId) || {};\n  },\n  channels: function () {\n    return Channels.find({\n      integrationIds: {\n        $in: [this._id]\n      }\n    }).fetch();\n  }\n});\nIntegrations.publicFields = {\n  name: 1,\n  kind: 1,\n  brandId: 1,\n  formId: 1,\n  uiOptions: 1,\n  formData: 1,\n  messengerData: 1\n};\nFactory.define('integration', Integrations, {\n  name: function () {\n    return faker.random.word();\n  },\n  kind: KIND_CHOICES.MESSENGER,\n  brandId: function () {\n    return Random.id();\n  }\n});","map":{"version":3,"sources":["/imports/api/integrations/integrations.js"],"names":["module","export","Integrations","formSchema","messengerSchema","faker","importSync","v","Mongo","Random","SimpleSchema","Factory","Brands","Channels","facebookSchema","twitterSchema","KIND_CHOICES","FORM_LOAD_TYPES","FORM_SUCCESS_ACTIONS","IntegrationCollections","Collection","deny","insert","update","remove","loadType","type","String","allowedValues","ALL_LIST","optional","successAction","fromEmail","userEmailTitle","userEmailContent","adminEmails","adminEmailTitle","adminEmailContent","thankContent","redirectUrl","onlineHoursSchema","_id","day","from","to","notifyCustomer","Boolean","availabilityMethod","isOnline","onlineHours","timezone","welcomeMessage","awayMessage","thankYouMessage","schema","kind","name","brandId","formId","formData","messengerData","twitterData","facebookData","uiOptions","Object","blackbox","attachSchema","helpers","brand","findOne","channels","find","integrationIds","$in","fetch","publicFields","define","random","word","MESSENGER","id"],"mappings":";;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,gBAAa;AAAA,WAAIA,YAAJ;AAAA,GAAd;AAA+BC,cAAW;AAAA,WAAIA,UAAJ;AAAA,GAA1C;AAAyDC,mBAAgB;AAAA,WAAIA,eAAJ;AAAA;AAAzE,CAAd;AAA6G,IAAIC,cAAJ;AAAUL,OAAOM,UAAP,CAAkB,OAAlB,EAA0B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACF,YAAME,CAAN;AAAQ;AAA7B,CAA1B,EAAyD,CAAzD;AAA4D,IAAIC,cAAJ;AAAUR,OAAOM,UAAP,CAAkB,cAAlB,EAAiC;AAACE,SAAM,UAASD,CAAT,EAAW;AAACC,YAAMD,CAAN;AAAQ;AAA3B,CAAjC,EAA8D,CAA9D;AAAiE,IAAIE,eAAJ;AAAWT,OAAOM,UAAP,CAAkB,eAAlB,EAAkC;AAACG,UAAO,UAASF,CAAT,EAAW;AAACE,aAAOF,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIG,qBAAJ;AAAiBV,OAAOM,UAAP,CAAkB,6BAAlB,EAAgD;AAACI,gBAAa,UAASH,CAAT,EAAW;AAACG,mBAAaH,CAAb;AAAe;AAAzC,CAAhD,EAA2F,CAA3F;AAA8F,IAAII,gBAAJ;AAAYX,OAAOM,UAAP,CAAkB,wBAAlB,EAA2C;AAACK,WAAQ,UAASJ,CAAT,EAAW;AAACI,cAAQJ,CAAR;AAAU;AAA/B,CAA3C,EAA4E,CAA5E;AAA+E,IAAIK,eAAJ;AAAWZ,OAAOM,UAAP,CAAkB,4BAAlB,EAA+C;AAACM,UAAO,UAASL,CAAT,EAAW;AAACK,aAAOL,CAAP;AAAS;AAA7B,CAA/C,EAA8E,CAA9E;AAAiF,IAAIM,iBAAJ;AAAab,OAAOM,UAAP,CAAkB,gCAAlB,EAAmD;AAACO,YAAS,UAASN,CAAT,EAAW;AAACM,eAASN,CAAT;AAAW;AAAjC,CAAnD,EAAsF,CAAtF;AAAyF,IAAIO,uBAAJ;AAAA,IAAmBC,sBAAnB;AAAiCf,OAAOM,UAAP,CAAkB,iBAAlB,EAAoC;AAACQ,kBAAe,UAASP,CAAT,EAAW;AAACO,qBAAeP,CAAf;AAAiB,GAA7C;AAA8CQ,iBAAc,UAASR,CAAT,EAAW;AAACQ,oBAAcR,CAAd;AAAgB;AAAxF,CAApC,EAA8H,CAA9H;AAAiI,IAAIS,qBAAJ;AAAA,IAAiBC,wBAAjB;AAAA,IAAiCC,6BAAjC;AAAsDlB,OAAOM,UAAP,CAAkB,aAAlB,EAAgC;AAACU,gBAAa,UAAST,CAAT,EAAW;AAACS,mBAAaT,CAAb;AAAe,GAAzC;AAA0CU,mBAAgB,UAASV,CAAT,EAAW;AAACU,sBAAgBV,CAAhB;AAAkB,GAAxF;AAAyFW,wBAAqB,UAASX,CAAT,EAAW;AAACW,2BAAqBX,CAArB;AAAuB;AAAjJ,CAAhC,EAAmL,CAAnL;;IAU36BY,sB;;;;;;;;;EAA+BX,MAAMY,U;;AAEpC,IAAMlB,eAAe,IAAIiB,sBAAJ,CAA2B,cAA3B,CAArB;AAEPjB,aAAamB,IAAb,CAAkB;AAChBC,QADgB,cACP;AACP,WAAO,IAAP;AACD,GAHe;AAIhBC,QAJgB,cAIP;AACP,WAAO,IAAP;AACD,GANe;AAOhBC,QAPgB,cAOP;AACP,WAAO,IAAP;AACD;AATe,CAAlB,E,CAYA;;AACO,IAAMrB,aAAa,IAAIO,YAAJ,CAAiB;AACzCe,YAAU;AACRC,UAAMC,MADE;AAERC,mBAAeX,gBAAgBY,QAFvB;AAGRC,cAAU;AAHF,GAD+B;AAOzCC,iBAAe;AACbL,UAAMC,MADO;AAEbC,mBAAeV,qBAAqBW,QAFvB;AAGbC,cAAU;AAHG,GAP0B;AAazCE,aAAW;AACTN,UAAMC,MADG;AAETG,cAAU;AAFD,GAb8B;AAkBzCG,kBAAgB;AACdP,UAAMC,MADQ;AAEdG,cAAU;AAFI,GAlByB;AAuBzCI,oBAAkB;AAChBR,UAAMC,MADU;AAEhBG,cAAU;AAFM,GAvBuB;AA4BzCK,eAAa;AACXT,UAAM,CAACC,MAAD,CADK;AAEXG,cAAU;AAFC,GA5B4B;AAiCzCM,mBAAiB;AACfV,UAAMC,MADS;AAEfG,cAAU;AAFK,GAjCwB;AAsCzCO,qBAAmB;AACjBX,UAAMC,MADW;AAEjBG,cAAU;AAFO,GAtCsB;AA2CzCQ,gBAAc;AACZZ,UAAMC,MADM;AAEZG,cAAU;AAFE,GA3C2B;AAgDzCS,eAAa;AACXb,UAAMC,MADK;AAEXG,cAAU;AAFC;AAhD4B,CAAjB,CAAnB;AAsDP,IAAMU,oBAAoB,IAAI9B,YAAJ,CAAiB;AACzC+B,OAAK;AACHf,UAAMC;AADH,GADoC;AAIzCe,OAAK;AACHhB,UAAMC;AADH,GAJoC;AAOzCgB,QAAM;AACJjB,UAAMC;AADF,GAPmC;AAUzCiB,MAAI;AACFlB,UAAMC;AADJ;AAVqC,CAAjB,CAA1B,C,CAeA;;AACO,IAAMvB,kBAAkB,IAAIM,YAAJ,CAAiB;AAC9CmC,kBAAgB;AACdnB,UAAMoB,OADQ;AAEdhB,cAAU;AAFI,GAD8B;AAM9C;AACAiB,sBAAoB;AAClBrB,UAAMC,MADY;AAElBG,cAAU,IAFQ;AAGlBF,mBAAe,CAAC,QAAD,EAAW,MAAX;AAHG,GAP0B;AAY9CoB,YAAU;AACRtB,UAAMoB,OADE;AAERhB,cAAU;AAFF,GAZoC;AAgB9CmB,eAAa;AACXvB,UAAM,CAACc,iBAAD,CADK;AAEXV,cAAU;AAFC,GAhBiC;AAoB9CoB,YAAU;AACRxB,UAAMC,MADE;AAERG,cAAU;AAFF,GApBoC;AAwB9CqB,kBAAgB;AACdzB,UAAMC,MADQ;AAEdG,cAAU;AAFI,GAxB8B;AA4B9CsB,eAAa;AACX1B,UAAMC,MADK;AAEXG,cAAU;AAFC,GA5BiC;AAgC9CuB,mBAAiB;AACf3B,UAAMC,MADS;AAEfG,cAAU;AAFK;AAhC6B,CAAjB,CAAxB;AAsCP5B,aAAaoD,MAAb,GAAsB,IAAI5C,YAAJ,CAAiB;AACrC;AACA6C,QAAM;AACJ7B,UAAMC,MADF;AAEJC,mBAAeZ,aAAaa;AAFxB,GAF+B;AAOrC2B,QAAM;AACJ9B,UAAMC;AADF,GAP+B;AAUrC8B,WAAS;AACP/B,UAAMC;AADC,GAV4B;AAarC+B,UAAQ;AACNhC,UAAMC,MADA;AAENG,cAAU;AAFJ,GAb6B;AAkBrC;AACA6B,YAAU;AACRjC,UAAMvB,UADE;AAER2B,cAAU;AAFF,GAnB2B;AAwBrC;AACA8B,iBAAe;AACblC,UAAMtB,eADO;AAEb0B,cAAU;AAFG,GAzBsB;AA8BrC;AACA+B,eAAa;AACXnC,UAAMX,aADK;AAEXe,cAAU;AAFC,GA/BwB;AAoCrC;AACAgC,gBAAc;AACZpC,UAAMZ,cADM;AAEZgB,cAAU;AAFE,GArCuB;AA0CrC;AACAiC,aAAW;AACTrC,UAAMsC,MADG;AAETC,cAAU,IAFD;AAGTnC,cAAU;AAHD;AA3C0B,CAAjB,CAAtB;AAkDA5B,aAAagE,YAAb,CAA0BhE,aAAaoD,MAAvC;AAEApD,aAAaiE,OAAb,CAAqB;AACnBC,OADmB,cACX;AACN,WAAOxD,OAAOyD,OAAP,CAAe,KAAKZ,OAApB,KAAgC,EAAvC;AACD,GAHkB;AAInBa,UAJmB,cAIR;AACT,WAAOzD,SAAS0D,IAAT,CAAc;AAAEC,sBAAgB;AAAEC,aAAK,CAAC,KAAKhC,GAAN;AAAP;AAAlB,KAAd,EAAuDiC,KAAvD,EAAP;AACD;AANkB,CAArB;AASAxE,aAAayE,YAAb,GAA4B;AAC1BnB,QAAM,CADoB;AAE1BD,QAAM,CAFoB;AAG1BE,WAAS,CAHiB;AAI1BC,UAAQ,CAJkB;AAK1BK,aAAW,CALe;AAM1BJ,YAAU,CANgB;AAO1BC,iBAAe;AAPW,CAA5B;AAUAjD,QAAQiE,MAAR,CAAe,aAAf,EAA8B1E,YAA9B,EAA4C;AAC1CsD,QAAM;AAAA,WAAMnD,MAAMwE,MAAN,CAAaC,IAAb,EAAN;AAAA,GADoC;AAE1CvB,QAAMvC,aAAa+D,SAFuB;AAG1CtB,WAAS;AAAA,WAAMhD,OAAOuE,EAAP,EAAN;AAAA;AAHiC,CAA5C","file":"/imports/api/integrations/integrations.js.map","sourcesContent":["import faker from 'faker';\nimport { Mongo } from 'meteor/mongo';\nimport { Random } from 'meteor/random';\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { Factory } from 'meteor/dburles:factory';\nimport { Brands } from '/imports/api/brands/brands';\nimport { Channels } from '/imports/api/channels/channels';\nimport { facebookSchema, twitterSchema } from './social/social';\nimport { KIND_CHOICES, FORM_LOAD_TYPES, FORM_SUCCESS_ACTIONS } from './constants';\n\nclass IntegrationCollections extends Mongo.Collection {}\n\nexport const Integrations = new IntegrationCollections('integrations');\n\nIntegrations.deny({\n  insert() {\n    return true;\n  },\n  update() {\n    return true;\n  },\n  remove() {\n    return true;\n  },\n});\n\n// form integration options\nexport const formSchema = new SimpleSchema({\n  loadType: {\n    type: String,\n    allowedValues: FORM_LOAD_TYPES.ALL_LIST,\n    optional: true,\n  },\n\n  successAction: {\n    type: String,\n    allowedValues: FORM_SUCCESS_ACTIONS.ALL_LIST,\n    optional: true,\n  },\n\n  fromEmail: {\n    type: String,\n    optional: true,\n  },\n\n  userEmailTitle: {\n    type: String,\n    optional: true,\n  },\n\n  userEmailContent: {\n    type: String,\n    optional: true,\n  },\n\n  adminEmails: {\n    type: [String],\n    optional: true,\n  },\n\n  adminEmailTitle: {\n    type: String,\n    optional: true,\n  },\n\n  adminEmailContent: {\n    type: String,\n    optional: true,\n  },\n\n  thankContent: {\n    type: String,\n    optional: true,\n  },\n\n  redirectUrl: {\n    type: String,\n    optional: true,\n  },\n});\n\nconst onlineHoursSchema = new SimpleSchema({\n  _id: {\n    type: String,\n  },\n  day: {\n    type: String,\n  },\n  from: {\n    type: String,\n  },\n  to: {\n    type: String,\n  },\n});\n\n// messenger ==============\nexport const messengerSchema = new SimpleSchema({\n  notifyCustomer: {\n    type: Boolean,\n    optional: true,\n  },\n\n  // manual, auto\n  availabilityMethod: {\n    type: String,\n    optional: true,\n    allowedValues: ['manual', 'auto'],\n  },\n  isOnline: {\n    type: Boolean,\n    optional: true,\n  },\n  onlineHours: {\n    type: [onlineHoursSchema],\n    optional: true,\n  },\n  timezone: {\n    type: String,\n    optional: true,\n  },\n  welcomeMessage: {\n    type: String,\n    optional: true,\n  },\n  awayMessage: {\n    type: String,\n    optional: true,\n  },\n  thankYouMessage: {\n    type: String,\n    optional: true,\n  },\n});\n\nIntegrations.schema = new SimpleSchema({\n  // messenger , twitter ...\n  kind: {\n    type: String,\n    allowedValues: KIND_CHOICES.ALL_LIST,\n  },\n\n  name: {\n    type: String,\n  },\n  brandId: {\n    type: String,\n  },\n  formId: {\n    type: String,\n    optional: true,\n  },\n\n  // form integration options\n  formData: {\n    type: formSchema,\n    optional: true,\n  },\n\n  // messenger availability, text and other options\n  messengerData: {\n    type: messengerSchema,\n    optional: true,\n  },\n\n  // twitter authentication info\n  twitterData: {\n    type: twitterSchema,\n    optional: true,\n  },\n\n  // facebook authentication info\n  facebookData: {\n    type: facebookSchema,\n    optional: true,\n  },\n\n  // ui options\n  uiOptions: {\n    type: Object,\n    blackbox: true,\n    optional: true,\n  },\n});\n\nIntegrations.attachSchema(Integrations.schema);\n\nIntegrations.helpers({\n  brand() {\n    return Brands.findOne(this.brandId) || {};\n  },\n  channels() {\n    return Channels.find({ integrationIds: { $in: [this._id] } }).fetch();\n  },\n});\n\nIntegrations.publicFields = {\n  name: 1,\n  kind: 1,\n  brandId: 1,\n  formId: 1,\n  uiOptions: 1,\n  formData: 1,\n  messengerData: 1,\n};\n\nFactory.define('integration', Integrations, {\n  name: () => faker.random.word(),\n  kind: KIND_CHOICES.MESSENGER,\n  brandId: () => Random.id(),\n});\n"]},"hash":"936ca686d695e3464f059622e1ce8ce87d238766"}
