{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/dburles:factory/factory.js","filenameRelative":"/packages/dburles:factory/factory.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/dburles:factory/factory.js.map","sourceFileName":"/packages/dburles:factory/factory.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"factory"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/* global LocalCollection */ /* global Factory:true */var factories = {};\n\nFactory = function () {\n  function Factory(name, collection, attributes) {\n    (0, _classCallCheck3.default)(this, Factory);\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  Factory.prototype.after = function () {\n    function after(fn) {\n      this.afterHooks.push(fn);\n      return this;\n    }\n\n    return after;\n  }();\n\n  return Factory;\n}();\n\nFactory.define = function (name, collection, attributes) {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = function (name) {\n  var factory = factories[name];\n\n  if (!factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n\n  return factory;\n};\n\nFactory._build = function (name) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var factory = Factory.get(name);\n  var result = {}; // \"raw\" attributes without functions evaluated, or dotted properties resolved\n\n  var extendedAttributes = _.extend({}, factory.attributes, attributes); // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n\n\n  var makeRelation = function (relName) {\n    if (options.insert) {\n      return Factory.create(relName, {}, userOptions)._id;\n    }\n\n    if (options.tree) {\n      return Factory._build(relName, {}, userOptions, {\n        tree: true\n      });\n    } // fake an id on build\n\n\n    return Random.id();\n  };\n\n  var getValue = function (value) {\n    return value instanceof Factory ? makeRelation(value.name) : value;\n  };\n\n  var getValueFromFunction = function (func) {\n    var api = {\n      sequence: function (fn) {\n        return fn(factory.sequence);\n      }\n    };\n    var fnRes = func.call(result, api, userOptions);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  var walk = function (record, object) {\n    _.each(object, function (value, key) {\n      var newValue = value; // is this a Factory instance?\n\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(function (element) {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value); // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      var modifier = {\n        $set: {}\n      };\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (!options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n\n  return result;\n};\n\nFactory.build = function (name) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return Factory._build(name, attributes, userOptions);\n};\n\nFactory.tree = function (name, attributes) {\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return Factory._build(name, attributes, userOptions, {\n    tree: true\n  });\n};\n\nFactory._create = function (name, doc) {\n  var collection = Factory.get(name).collection;\n  var insertId = collection.insert(doc);\n  var record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = function (name) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var doc = Factory._build(name, attributes, userOptions, {\n    insert: true\n  });\n\n  var record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(function (cb) {\n    return cb(record);\n  });\n  return record;\n};\n\nFactory.extend = function (name) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};","map":{"version":3,"sources":["/packages/dburles:factory/factory.js"],"names":["factories","Factory","name","collection","attributes","afterHooks","sequence","after","fn","push","define","get","factory","Error","_build","userOptions","options","result","extendedAttributes","_","extend","makeRelation","insert","create","relName","_id","tree","Random","id","getValue","value","getValueFromFunction","api","fnRes","func","call","walk","record","object","each","key","newValue","isArray","map","isFunction","element","Object","prototype","toString","modifier","$set","LocalCollection","_modify","build","_create","doc","insertId","findOne","forEach","cb","clone"],"mappings":"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","file":"/packages/dburles:factory/factory.js.map","sourcesContent":["/* global LocalCollection */\n/* global Factory:true */\n\nconst factories = {};\n\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n  if (! factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n  return factory;\n};\n\nFactory._build = (name, attributes = {}, userOptions = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {};\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName, {}, userOptions)._id;\n    }\n    if (options.tree) {\n      return Factory._build(relName, {}, userOptions, {tree: true});\n    }\n    // fake an id on build\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = { sequence: fn => fn(factory.sequence) };\n    const fnRes = func.call(result, api, userOptions);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value;\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value);\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {$set: {}};\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (! options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n  return result;\n};\n\nFactory.build = (name, attributes = {}, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions);\n};\n\nFactory.tree = (name, attributes, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions, {tree: true});\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}, userOptions = {}) => {\n  const doc = Factory._build(name, attributes, userOptions, {insert: true});\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n"]},"hash":"64b313acf3b064e3a4ef18068de603d017da857e"}
