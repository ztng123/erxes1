{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"../constants","imported":["TAG_TYPES"],"specifiers":[{"kind":"named","imported":"TAG_TYPES","local":"TAG_TYPES"}]},{"source":"../tags","imported":["Tags"],"specifiers":[{"kind":"named","imported":"Tags","local":"Tags"}]}],"exports":{"exported":["tagObject","tagIds","objectIds","collection"],"specifiers":[{"kind":"local","local":"tagObject","exported":"tagObject"},{"kind":"local","local":"tagIds","exported":"tagIds"},{"kind":"local","local":"objectIds","exported":"objectIds"},{"kind":"local","local":"collection","exported":"collection"}]}}},"options":{"filename":"/imports/api/tags/server/api.js","filenameRelative":"/imports/api/tags/server/api.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/tags/server/api.js.map","sourceFileName":"/imports/api/tags/server/api.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"api"},"ignored":false,"code":"module.export({\n  tagObject: function () {\n    return tagObject;\n  }\n});\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 2);\n\nvar _ = void 0;\n\nmodule.importSync(\"meteor/underscore\", {\n  _: function (v) {\n    _ = v;\n  }\n}, 3);\nvar TAG_TYPES = void 0;\nmodule.importSync(\"../constants\", {\n  TAG_TYPES: function (v) {\n    TAG_TYPES = v;\n  }\n}, 4);\nvar Tags = void 0;\nmodule.importSync(\"../tags\", {\n  Tags: function (v) {\n    Tags = v;\n  }\n}, 5);\n\nfunction tagObject(_ref) {\n  var tagIds = _ref.tagIds,\n      objectIds = _ref.objectIds,\n      collection = _ref.collection;\n  check(collection, Mongo.Collection);\n  check(collection.TAG_TYPE, Match.Where(function (t) {\n    check(t, String);\n    return TAG_TYPES.ALL_LIST.indexOf(t) > -1;\n  }));\n  check(tagIds, [String]);\n  check(objectIds, [String]);\n  var type = collection.TAG_TYPE;\n\n  if (Tags.find({\n    _id: {\n      $in: tagIds\n    },\n    type: type\n  }).count() !== tagIds.length) {\n    throw new Meteor.Error('tags.tagObject.notFound', 'Tag not found.');\n  }\n\n  var objects = collection.find({\n    _id: {\n      $in: objectIds\n    }\n  }, {\n    fields: {\n      tagIds: 1\n    }\n  });\n  var removeIds = [];\n  objects.forEach(function (obj) {\n    removeIds.push(obj.tagIds || []);\n  });\n  removeIds = _.uniq(_.flatten(removeIds));\n  Tags.update({\n    _id: {\n      $in: removeIds\n    }\n  }, {\n    $inc: {\n      objectCount: -1\n    }\n  }, {\n    multi: true\n  });\n  collection.update({\n    _id: {\n      $in: objectIds\n    }\n  }, {\n    $set: {\n      tagIds: tagIds\n    }\n  }, {\n    multi: true\n  });\n  Tags.update({\n    _id: {\n      $in: tagIds\n    }\n  }, {\n    $inc: {\n      objectCount: 1\n    }\n  }, {\n    multi: true\n  });\n}","map":{"version":3,"sources":["/imports/api/tags/server/api.js"],"names":["module","export","tagObject","check","Match","importSync","v","Meteor","Mongo","_","TAG_TYPES","Tags","tagIds","objectIds","collection","Collection","TAG_TYPE","Where","t","String","ALL_LIST","indexOf","type","find","_id","$in","count","length","Error","objects","fields","removeIds","forEach","push","obj","uniq","flatten","update","$inc","objectCount","multi","$set"],"mappings":"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","file":"/imports/api/tags/server/api.js.map","sourcesContent":["import { check, Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { _ } from 'meteor/underscore';\nimport { TAG_TYPES } from '../constants';\nimport { Tags } from '../tags';\n\nexport function tagObject({ tagIds, objectIds, collection }) {\n  check(collection, Mongo.Collection);\n  check(\n    collection.TAG_TYPE,\n    Match.Where(t => {\n      check(t, String);\n      return TAG_TYPES.ALL_LIST.indexOf(t) > -1;\n    }),\n  );\n\n  check(tagIds, [String]);\n  check(objectIds, [String]);\n\n  const type = collection.TAG_TYPE;\n\n  if (Tags.find({ _id: { $in: tagIds }, type }).count() !== tagIds.length) {\n    throw new Meteor.Error('tags.tagObject.notFound', 'Tag not found.');\n  }\n\n  const objects = collection.find({ _id: { $in: objectIds } }, { fields: { tagIds: 1 } });\n\n  let removeIds = [];\n\n  objects.forEach(obj => {\n    removeIds.push(obj.tagIds || []);\n  });\n\n  removeIds = _.uniq(_.flatten(removeIds));\n\n  Tags.update({ _id: { $in: removeIds } }, { $inc: { objectCount: -1 } }, { multi: true });\n\n  collection.update({ _id: { $in: objectIds } }, { $set: { tagIds } }, { multi: true });\n\n  Tags.update({ _id: { $in: tagIds } }, { $inc: { objectCount: 1 } }, { multi: true });\n}\n"]},"hash":"8e08c51aaacac06f2e982cc46798666096c61059"}
