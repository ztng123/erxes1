{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-bootstrap","imported":["FormGroup","ControlLabel","FormControl","ButtonToolbar","Modal","Button"],"specifiers":[{"kind":"named","imported":"FormGroup","local":"FormGroup"},{"kind":"named","imported":"ControlLabel","local":"ControlLabel"},{"kind":"named","imported":"FormControl","local":"FormControl"},{"kind":"named","imported":"ButtonToolbar","local":"ButtonToolbar"},{"kind":"named","imported":"Modal","local":"Modal"},{"kind":"named","imported":"Button","local":"Button"}]},{"source":"/imports/api/engage/constants","imported":["METHODS"],"specifiers":[{"kind":"named","imported":"METHODS","local":"METHODS"}]},{"source":"./Editor","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Editor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/engage/components/WidgetForm.js","filenameRelative":"/imports/react-ui/engage/components/WidgetForm.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/engage/components/WidgetForm.js.map","sourceFileName":"/imports/react-ui/engage/components/WidgetForm.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"WidgetForm"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar FormGroup = void 0,\n    ControlLabel = void 0,\n    FormControl = void 0,\n    ButtonToolbar = void 0,\n    Modal = void 0,\n    Button = void 0;\nmodule.importSync(\"react-bootstrap\", {\n  FormGroup: function (v) {\n    FormGroup = v;\n  },\n  ControlLabel: function (v) {\n    ControlLabel = v;\n  },\n  FormControl: function (v) {\n    FormControl = v;\n  },\n  ButtonToolbar: function (v) {\n    ButtonToolbar = v;\n  },\n  Modal: function (v) {\n    Modal = v;\n  },\n  Button: function (v) {\n    Button = v;\n  }\n}, 2);\nvar METHODS = void 0;\nmodule.importSync(\"/imports/api/engage/constants\", {\n  METHODS: function (v) {\n    METHODS = v;\n  }\n}, 3);\nvar Editor = void 0;\nmodule.importSync(\"./Editor\", {\n  \"default\": function (v) {\n    Editor = v;\n  }\n}, 4);\n\nvar WidgetForm = function (_Component) {\n  (0, _inherits3.default)(WidgetForm, _Component);\n\n  function WidgetForm(props) {\n    (0, _classCallCheck3.default)(this, WidgetForm);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.state = {\n      content: '',\n      channel: 'email'\n    };\n    _this.onContentChange = _this.onContentChange.bind(_this);\n    _this.onChannelChange = _this.onChannelChange.bind(_this);\n    _this.save = _this.save.bind(_this);\n    return _this;\n  }\n\n  WidgetForm.prototype.save = function () {\n    function save(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var _props = this.props,\n          save = _props.save,\n          customers = _props.customers;\n      var doc = {\n        title: document.getElementById('title').value,\n        customerIds: customers.map(function (customer) {\n          return customer._id.toString();\n        }),\n        fromUserId: Meteor.userId()\n      };\n\n      if (this.state.channel === 'email') {\n        doc.method = METHODS.EMAIL;\n        doc.email = {\n          templateId: document.getElementById('emailTemplateId').value,\n          subject: document.getElementById('emailSubject').value,\n          content: this.state.content\n        };\n      }\n\n      if (this.state.channel === 'messenger') {\n        doc.method = METHODS.MESSENGER;\n        doc.messenger = {\n          brandId: document.getElementById('brandId').value,\n          kind: document.getElementById('messengerKind').value,\n          sentAs: document.getElementById('sentAs').value,\n          content: this.state.content\n        };\n      }\n\n      return save(doc, function () {\n        _this2.context.closeModal();\n      });\n    }\n\n    return save;\n  }();\n\n  WidgetForm.prototype.onContentChange = function () {\n    function onContentChange(content) {\n      this.setState({\n        content: content\n      });\n    }\n\n    return onContentChange;\n  }();\n\n  WidgetForm.prototype.onChannelChange = function () {\n    function onChannelChange(e) {\n      this.setState({\n        channel: e.target.value\n      });\n    }\n\n    return onChannelChange;\n  }();\n\n  WidgetForm.prototype.renderCustomers = function () {\n    function renderCustomers() {\n      return React.createElement(\n        FormGroup,\n        null,\n        React.createElement(\n          ControlLabel,\n          null,\n          \"To:\"\n        ),\n        React.createElement(\n          \"div\",\n          {\n            className: \"recipients\"\n          },\n          this.props.customers.map(function (customer) {\n            return React.createElement(\n              \"div\",\n              {\n                className: \"recipient\",\n                key: customer._id.toString()\n              },\n              React.createElement(\n                \"strong\",\n                null,\n                customer.name\n              ),\n              \" \",\n              customer.email\n            );\n          })\n        )\n      );\n    }\n\n    return renderCustomers;\n  }();\n\n  WidgetForm.prototype.renderEmailContent = function () {\n    function renderEmailContent() {\n      if (this.state.channel === 'email') {\n        return React.createElement(\n          \"div\",\n          null,\n          React.createElement(\n            FormGroup,\n            null,\n            React.createElement(\n              ControlLabel,\n              null,\n              \"Email subject:\"\n            ),\n            React.createElement(FormControl, {\n              id: \"emailSubject\",\n              type: \"text\",\n              required: true\n            })\n          ),\n          React.createElement(\n            FormGroup,\n            null,\n            React.createElement(\n              ControlLabel,\n              null,\n              \"Email templates:\"\n            ),\n            React.createElement(\n              FormControl,\n              {\n                id: \"emailTemplateId\",\n                componentClass: \"select\"\n              },\n              React.createElement(\"option\", null),\n              this.props.emailTemplates.map(function (t) {\n                return React.createElement(\n                  \"option\",\n                  {\n                    key: t._id,\n                    value: t._id\n                  },\n                  t.name\n                );\n              })\n            )\n          )\n        );\n      }\n    }\n\n    return renderEmailContent;\n  }();\n\n  WidgetForm.prototype.renderMessengerContent = function () {\n    function renderMessengerContent() {\n      if (this.state.channel === 'messenger') {\n        return React.createElement(\n          \"div\",\n          null,\n          React.createElement(\n            FormGroup,\n            null,\n            React.createElement(\n              ControlLabel,\n              null,\n              \"Brand:\"\n            ),\n            React.createElement(\n              FormControl,\n              {\n                id: \"brandId\",\n                componentClass: \"select\"\n              },\n              React.createElement(\"option\", null),\n              this.props.brands.map(function (b, index) {\n                return React.createElement(\n                  \"option\",\n                  {\n                    key: \"brand-\" + index,\n                    value: b._id\n                  },\n                  b.name\n                );\n              })\n            )\n          ),\n          React.createElement(\n            FormGroup,\n            null,\n            React.createElement(\n              ControlLabel,\n              null,\n              \"Messenger kind:\"\n            ),\n            React.createElement(\n              FormControl,\n              {\n                id: \"messengerKind\",\n                componentClass: \"select\"\n              },\n              React.createElement(\"option\", null),\n              this.props.messengerKinds.map(function (t, index) {\n                return React.createElement(\n                  \"option\",\n                  {\n                    key: \"messengerKind-\" + index,\n                    value: t.value\n                  },\n                  t.text\n                );\n              })\n            )\n          ),\n          React.createElement(\n            FormGroup,\n            null,\n            React.createElement(\n              ControlLabel,\n              null,\n              \"Sent as:\"\n            ),\n            React.createElement(\n              FormControl,\n              {\n                id: \"sentAs\",\n                componentClass: \"select\"\n              },\n              React.createElement(\"option\", null),\n              this.props.sentAsChoices.map(function (t, index) {\n                return React.createElement(\n                  \"option\",\n                  {\n                    key: \"sentAs-\" + index,\n                    value: t.value\n                  },\n                  t.text\n                );\n              })\n            )\n          )\n        );\n      }\n    }\n\n    return renderMessengerContent;\n  }();\n\n  WidgetForm.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        \"form\",\n        {\n          onSubmit: this.save\n        },\n        this.renderCustomers(),\n        React.createElement(\n          FormGroup,\n          null,\n          React.createElement(\n            ControlLabel,\n            null,\n            \"Channel:\"\n          ),\n          React.createElement(\n            FormControl,\n            {\n              componentClass: \"select\",\n              onChange: this.onChannelChange\n            },\n            React.createElement(\n              \"option\",\n              {\n                value: \"email\"\n              },\n              \"Email\"\n            ),\n            React.createElement(\n              \"option\",\n              {\n                value: \"messenger\"\n              },\n              \"Messenger\"\n            )\n          )\n        ),\n        React.createElement(\n          FormGroup,\n          null,\n          React.createElement(\n            ControlLabel,\n            null,\n            \"Title:\"\n          ),\n          React.createElement(FormControl, {\n            id: \"title\",\n            type: \"text\",\n            required: true\n          })\n        ),\n        this.renderEmailContent(),\n        this.renderMessengerContent(),\n        React.createElement(\n          FormGroup,\n          null,\n          React.createElement(\n            ControlLabel,\n            null,\n            \"Content:\"\n          ),\n          React.createElement(\n            \"div\",\n            {\n              className: \"editor-bordered\"\n            },\n            React.createElement(Editor, {\n              onChange: this.onContentChange\n            })\n          )\n        ),\n        React.createElement(\n          Modal.Footer,\n          null,\n          React.createElement(\n            ButtonToolbar,\n            {\n              className: \"pull-right\"\n            },\n            React.createElement(\n              Button,\n              {\n                type: \"submit\",\n                bsStyle: \"primary\"\n              },\n              \"Send\"\n            )\n          )\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return WidgetForm;\n}(Component);\n\nWidgetForm.propTypes = {\n  customers: PropTypes.array.isRequired,\n  emailTemplates: PropTypes.array.isRequired,\n  brands: PropTypes.array.isRequired,\n  messengerKinds: PropTypes.array.isRequired,\n  sentAsChoices: PropTypes.array.isRequired,\n  save: PropTypes.func.isRequired\n};\nWidgetForm.contextTypes = {\n  closeModal: PropTypes.func.isRequired\n};\nmodule.export(\"default\", exports.default = WidgetForm);","map":{"version":3,"sources":["/imports/react-ui/engage/components/WidgetForm.js"],"names":["React","Component","module","importSync","v","PropTypes","FormGroup","ControlLabel","FormControl","ButtonToolbar","Modal","Button","METHODS","Editor","WidgetForm","props","state","content","channel","onContentChange","bind","onChannelChange","save","e","preventDefault","customers","doc","title","document","getElementById","value","customerIds","map","customer","_id","toString","fromUserId","Meteor","userId","method","EMAIL","email","templateId","subject","MESSENGER","messenger","brandId","kind","sentAs","context","closeModal","setState","target","renderCustomers","name","renderEmailContent","emailTemplates","t","renderMessengerContent","brands","b","index","messengerKinds","text","sentAsChoices","render","propTypes","array","isRequired","func","contextTypes","export","exports","default"],"mappings":"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","file":"/imports/react-ui/engage/components/WidgetForm.js.map","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FormGroup,\n  ControlLabel,\n  FormControl,\n  ButtonToolbar,\n  Modal,\n  Button,\n} from 'react-bootstrap';\n\nimport { METHODS } from '/imports/api/engage/constants';\nimport Editor from './Editor';\n\nclass WidgetForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { content: '', channel: 'email' };\n\n    this.onContentChange = this.onContentChange.bind(this);\n    this.onChannelChange = this.onChannelChange.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  save(e) {\n    e.preventDefault();\n\n    const { save, customers } = this.props;\n\n    const doc = {\n      title: document.getElementById('title').value,\n      customerIds: customers.map(customer => customer._id.toString()),\n      fromUserId: Meteor.userId(),\n    };\n\n    if (this.state.channel === 'email') {\n      doc.method = METHODS.EMAIL;\n      doc.email = {\n        templateId: document.getElementById('emailTemplateId').value,\n        subject: document.getElementById('emailSubject').value,\n        content: this.state.content,\n      };\n    }\n\n    if (this.state.channel === 'messenger') {\n      doc.method = METHODS.MESSENGER;\n      doc.messenger = {\n        brandId: document.getElementById('brandId').value,\n        kind: document.getElementById('messengerKind').value,\n        sentAs: document.getElementById('sentAs').value,\n        content: this.state.content,\n      };\n    }\n\n    return save(doc, () => {\n      this.context.closeModal();\n    });\n  }\n\n  onContentChange(content) {\n    this.setState({ content });\n  }\n\n  onChannelChange(e) {\n    this.setState({ channel: e.target.value });\n  }\n\n  renderCustomers() {\n    return (\n      <FormGroup>\n        <ControlLabel>To:</ControlLabel>\n        <div className=\"recipients\">\n          {this.props.customers.map(customer => (\n            <div className=\"recipient\" key={customer._id.toString()}>\n              <strong>{customer.name}</strong> {customer.email}\n            </div>\n          ))}\n        </div>\n      </FormGroup>\n    );\n  }\n\n  renderEmailContent() {\n    if (this.state.channel === 'email') {\n      return (\n        <div>\n          <FormGroup>\n            <ControlLabel>Email subject:</ControlLabel>\n            <FormControl id=\"emailSubject\" type=\"text\" required />\n          </FormGroup>\n\n          <FormGroup>\n            <ControlLabel>Email templates:</ControlLabel>\n\n            <FormControl id=\"emailTemplateId\" componentClass=\"select\">\n              <option />\n              {this.props.emailTemplates.map(t => (\n                <option key={t._id} value={t._id}>\n                  {t.name}\n                </option>\n              ))}\n            </FormControl>\n          </FormGroup>\n        </div>\n      );\n    }\n  }\n\n  renderMessengerContent() {\n    if (this.state.channel === 'messenger') {\n      return (\n        <div>\n          <FormGroup>\n            <ControlLabel>Brand:</ControlLabel>\n\n            <FormControl id=\"brandId\" componentClass=\"select\">\n              <option />\n              {this.props.brands.map((b, index) => (\n                <option key={`brand-${index}`} value={b._id}>\n                  {b.name}\n                </option>\n              ))}\n            </FormControl>\n          </FormGroup>\n\n          <FormGroup>\n            <ControlLabel>Messenger kind:</ControlLabel>\n\n            <FormControl id=\"messengerKind\" componentClass=\"select\">\n              <option />\n              {this.props.messengerKinds.map((t, index) => (\n                <option key={`messengerKind-${index}`} value={t.value}>\n                  {t.text}\n                </option>\n              ))}\n            </FormControl>\n          </FormGroup>\n\n          <FormGroup>\n            <ControlLabel>Sent as:</ControlLabel>\n\n            <FormControl id=\"sentAs\" componentClass=\"select\">\n              <option />\n              {this.props.sentAsChoices.map((t, index) => (\n                <option key={`sentAs-${index}`} value={t.value}>\n                  {t.text}\n                </option>\n              ))}\n            </FormControl>\n          </FormGroup>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.save}>\n        {this.renderCustomers()}\n\n        <FormGroup>\n          <ControlLabel>Channel:</ControlLabel>\n\n          <FormControl componentClass=\"select\" onChange={this.onChannelChange}>\n            <option value=\"email\">Email</option>\n            <option value=\"messenger\">Messenger</option>\n          </FormControl>\n        </FormGroup>\n\n        <FormGroup>\n          <ControlLabel>Title:</ControlLabel>\n          <FormControl id=\"title\" type=\"text\" required />\n        </FormGroup>\n\n        {this.renderEmailContent()}\n        {this.renderMessengerContent()}\n\n        <FormGroup>\n          <ControlLabel>Content:</ControlLabel>\n          <div className=\"editor-bordered\">\n            <Editor onChange={this.onContentChange} />\n          </div>\n        </FormGroup>\n\n        <Modal.Footer>\n          <ButtonToolbar className=\"pull-right\">\n            <Button type=\"submit\" bsStyle=\"primary\">\n              Send\n            </Button>\n          </ButtonToolbar>\n        </Modal.Footer>\n      </form>\n    );\n  }\n}\n\nWidgetForm.propTypes = {\n  customers: PropTypes.array.isRequired,\n  emailTemplates: PropTypes.array.isRequired,\n  brands: PropTypes.array.isRequired,\n  messengerKinds: PropTypes.array.isRequired,\n  sentAsChoices: PropTypes.array.isRequired,\n  save: PropTypes.func.isRequired,\n};\n\nWidgetForm.contextTypes = {\n  closeModal: PropTypes.func.isRequired,\n};\n\nexport default WidgetForm;\n"]},"hash":"89536e227c0c3b178b1caedd145adab6f7255986"}
