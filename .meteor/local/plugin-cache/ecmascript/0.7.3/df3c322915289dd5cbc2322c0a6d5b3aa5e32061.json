{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./constants","imported":["ROLES"],"specifiers":[{"kind":"named","imported":"ROLES","local":"ROLES"}]}],"exports":{"exported":["CreateInvitationSchema","UpdateInvitationSchema","ProfileSchema","EmailSignaturesSchema"],"specifiers":[{"kind":"local","local":"CreateInvitationSchema","exported":"CreateInvitationSchema"},{"kind":"local","local":"UpdateInvitationSchema","exported":"UpdateInvitationSchema"},{"kind":"local","local":"ProfileSchema","exported":"ProfileSchema"},{"kind":"local","local":"EmailSignaturesSchema","exported":"EmailSignaturesSchema"}]}}},"options":{"filename":"/imports/api/users/schemas.js","filenameRelative":"/imports/api/users/schemas.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/users/schemas.js.map","sourceFileName":"/imports/api/users/schemas.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"schemas"},"ignored":false,"code":"module.export({\n  CreateInvitationSchema: function () {\n    return CreateInvitationSchema;\n  },\n  UpdateInvitationSchema: function () {\n    return UpdateInvitationSchema;\n  },\n  ProfileSchema: function () {\n    return ProfileSchema;\n  },\n  EmailSignaturesSchema: function () {\n    return EmailSignaturesSchema;\n  }\n});\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar ROLES = void 0;\nmodule.importSync(\"./constants\", {\n  ROLES: function (v) {\n    ROLES = v;\n  }\n}, 1);\n// user common infos schema\nvar CommonInfo = {\n  avatar: {\n    type: String,\n    optional: true\n  },\n  fullName: {\n    type: String\n  },\n  position: {\n    type: String,\n    optional: true\n  },\n  username: {\n    type: String\n  },\n  twitterUsername: {\n    type: String\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  }\n}; // ************* invitation  ***************** //\n\nvar InvitationCommon = Object.assign({}, CommonInfo, {\n  // owner, admin, contributor\n  role: {\n    type: String,\n    allowedValues: [ROLES.ADMIN, ROLES.CONTRIBUTOR]\n  },\n  // channels to invite\n  channelIds: {\n    type: [String],\n    optional: true\n  }\n});\nvar CreateInvitationSchema = new SimpleSchema([InvitationCommon, {\n  password: {\n    type: String\n  },\n  passwordConfirmation: {\n    type: String\n  }\n}]);\nvar UpdateInvitationSchema = new SimpleSchema([InvitationCommon, {\n  password: {\n    type: String,\n    optional: true\n  },\n  passwordConfirmation: {\n    type: String,\n    optional: true\n  }\n}]);\nvar ProfileSchema = new SimpleSchema([CommonInfo, {\n  currentPassword: {\n    type: String,\n    optional: true\n  }\n}]);\nvar EmailSignaturesSchema = new SimpleSchema({\n  signatures: {\n    type: [new SimpleSchema({\n      brandId: {\n        type: String,\n        regEx: SimpleSchema.RegEx.Id\n      },\n      signature: {\n        type: String\n      }\n    })]\n  }\n});","map":{"version":3,"sources":["/imports/api/users/schemas.js"],"names":["module","export","CreateInvitationSchema","UpdateInvitationSchema","ProfileSchema","EmailSignaturesSchema","SimpleSchema","importSync","v","ROLES","CommonInfo","avatar","type","String","optional","fullName","position","username","twitterUsername","email","regEx","RegEx","Email","InvitationCommon","Object","assign","role","allowedValues","ADMIN","CONTRIBUTOR","channelIds","password","passwordConfirmation","currentPassword","signatures","brandId","Id","signature"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,0BAAuB;AAAA,WAAIA,sBAAJ;AAAA,GAAxB;AAAmDC,0BAAuB;AAAA,WAAIA,sBAAJ;AAAA,GAA1E;AAAqGC,iBAAc;AAAA,WAAIA,aAAJ;AAAA,GAAnH;AAAqIC,yBAAsB;AAAA,WAAIA,qBAAJ;AAAA;AAA3J,CAAd;AAAqM,IAAIC,qBAAJ;AAAiBN,OAAOO,UAAP,CAAkB,6BAAlB,EAAgD;AAACD,gBAAa,UAASE,CAAT,EAAW;AAACF,mBAAaE,CAAb;AAAe;AAAzC,CAAhD,EAA2F,CAA3F;AAA8F,IAAIC,cAAJ;AAAUT,OAAOO,UAAP,CAAkB,aAAlB,EAAgC;AAACE,SAAM,UAASD,CAAT,EAAW;AAACC,YAAMD,CAAN;AAAQ;AAA3B,CAAhC,EAA6D,CAA7D;AAG9T;AACA,IAAME,aAAa;AACjBC,UAAQ;AACNC,UAAMC,MADA;AAENC,cAAU;AAFJ,GADS;AAKjBC,YAAU;AACRH,UAAMC;AADE,GALO;AAQjBG,YAAU;AACRJ,UAAMC,MADE;AAERC,cAAU;AAFF,GARO;AAYjBG,YAAU;AACRL,UAAMC;AADE,GAZO;AAejBK,mBAAiB;AACfN,UAAMC;AADS,GAfA;AAkBjBM,SAAO;AACLP,UAAMC,MADD;AAELO,WAAOd,aAAae,KAAb,CAAmBC;AAFrB;AAlBU,CAAnB,C,CAwBA;;AACA,IAAMC,mBAAmBC,OAAOC,MAAP,CAAc,EAAd,EAAkBf,UAAlB,EAA8B;AACrD;AACAgB,QAAM;AACJd,UAAMC,MADF;AAEJc,mBAAe,CAAClB,MAAMmB,KAAP,EAAcnB,MAAMoB,WAApB;AAFX,GAF+C;AAOrD;AACAC,cAAY;AACVlB,UAAM,CAACC,MAAD,CADI;AAEVC,cAAU;AAFA;AARyC,CAA9B,CAAzB;AAcO,IAAMZ,yBAAyB,IAAII,YAAJ,CAAiB,CACrDiB,gBADqD,EAErD;AACEQ,YAAU;AACRnB,UAAMC;AADE,GADZ;AAIEmB,wBAAsB;AACpBpB,UAAMC;AADc;AAJxB,CAFqD,CAAjB,CAA/B;AAYA,IAAMV,yBAAyB,IAAIG,YAAJ,CAAiB,CACrDiB,gBADqD,EAErD;AACEQ,YAAU;AACRnB,UAAMC,MADE;AAERC,cAAU;AAFF,GADZ;AAKEkB,wBAAsB;AACpBpB,UAAMC,MADc;AAEpBC,cAAU;AAFU;AALxB,CAFqD,CAAjB,CAA/B;AAeA,IAAMV,gBAAgB,IAAIE,YAAJ,CAAiB,CAC5CI,UAD4C,EAE5C;AACEuB,mBAAiB;AACfrB,UAAMC,MADS;AAEfC,cAAU;AAFK;AADnB,CAF4C,CAAjB,CAAtB;AAWA,IAAMT,wBAAwB,IAAIC,YAAJ,CAAiB;AACpD4B,cAAY;AACVtB,UAAM,CACJ,IAAIN,YAAJ,CAAiB;AACf6B,eAAS;AACPvB,cAAMC,MADC;AAEPO,eAAOd,aAAae,KAAb,CAAmBe;AAFnB,OADM;AAKfC,iBAAW;AACTzB,cAAMC;AADG;AALI,KAAjB,CADI;AADI;AADwC,CAAjB,CAA9B","file":"/imports/api/users/schemas.js.map","sourcesContent":["import { SimpleSchema } from 'meteor/aldeed:simple-schema';\nimport { ROLES } from './constants';\n\n// user common infos schema\nconst CommonInfo = {\n  avatar: {\n    type: String,\n    optional: true,\n  },\n  fullName: {\n    type: String,\n  },\n  position: {\n    type: String,\n    optional: true,\n  },\n  username: {\n    type: String,\n  },\n  twitterUsername: {\n    type: String,\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n  },\n};\n\n// ************* invitation  ***************** //\nconst InvitationCommon = Object.assign({}, CommonInfo, {\n  // owner, admin, contributor\n  role: {\n    type: String,\n    allowedValues: [ROLES.ADMIN, ROLES.CONTRIBUTOR],\n  },\n\n  // channels to invite\n  channelIds: {\n    type: [String],\n    optional: true,\n  },\n});\n\nexport const CreateInvitationSchema = new SimpleSchema([\n  InvitationCommon,\n  {\n    password: {\n      type: String,\n    },\n    passwordConfirmation: {\n      type: String,\n    },\n  },\n]);\n\nexport const UpdateInvitationSchema = new SimpleSchema([\n  InvitationCommon,\n  {\n    password: {\n      type: String,\n      optional: true,\n    },\n    passwordConfirmation: {\n      type: String,\n      optional: true,\n    },\n  },\n]);\n\n// profile\nexport const ProfileSchema = new SimpleSchema([\n  CommonInfo,\n  {\n    currentPassword: {\n      type: String,\n      optional: true,\n    },\n  },\n]);\n\n// email signatures\nexport const EmailSignaturesSchema = new SimpleSchema({\n  signatures: {\n    type: [\n      new SimpleSchema({\n        brandId: {\n          type: String,\n          regEx: SimpleSchema.RegEx.Id,\n        },\n        signature: {\n          type: String,\n        },\n      }),\n    ],\n  },\n});\n"]},"hash":"df3c322915289dd5cbc2322c0a6d5b3aa5e32061"}
