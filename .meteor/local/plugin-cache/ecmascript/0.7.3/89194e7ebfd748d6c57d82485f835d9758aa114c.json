{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"/imports/react-ui/common","imported":["Loading"],"specifiers":[{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"/imports/api/integrations/constants","imported":["KIND_CHOICES"],"specifiers":[{"kind":"named","imported":"KIND_CHOICES","local":"KIND_CHOICES"}]},{"source":"/imports/api/tags/constants","imported":["TAG_TYPES"],"specifiers":[{"kind":"named","imported":"TAG_TYPES","local":"TAG_TYPES"}]},{"source":"/imports/react-ui/common","imported":["Bulk","pagination"],"specifiers":[{"kind":"named","imported":"Bulk","local":"Bulk"},{"kind":"named","imported":"pagination","local":"pagination"}]},{"source":"../graphql","imported":["queries"],"specifiers":[{"kind":"named","imported":"queries","local":"queries"}]},{"source":"../components","imported":["CustomersList"],"specifiers":[{"kind":"named","imported":"CustomersList","local":"CustomersList"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/customers/containers/CustomersList.js","filenameRelative":"/imports/react-ui/customers/containers/CustomersList.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/customers/containers/CustomersList.js.map","sourceFileName":"/imports/react-ui/customers/containers/CustomersList.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"CustomersList"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 2);\nvar Loading = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 3);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 4);\nvar KIND_CHOICES = void 0;\nmodule.importSync(\"/imports/api/integrations/constants\", {\n  KIND_CHOICES: function (v) {\n    KIND_CHOICES = v;\n  }\n}, 5);\nvar TAG_TYPES = void 0;\nmodule.importSync(\"/imports/api/tags/constants\", {\n  TAG_TYPES: function (v) {\n    TAG_TYPES = v;\n  }\n}, 6);\nvar Bulk = void 0,\n    pagination = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Bulk: function (v) {\n    Bulk = v;\n  },\n  pagination: function (v) {\n    pagination = v;\n  }\n}, 7);\nvar queries = void 0;\nmodule.importSync(\"../graphql\", {\n  queries: function (v) {\n    queries = v;\n  }\n}, 8);\nvar CustomersList = void 0;\nmodule.importSync(\"../components\", {\n  CustomersList: function (v) {\n    CustomersList = v;\n  }\n}, 9);\n\nvar CustomerListContainer = function (_Bulk) {\n  (0, _inherits3.default)(CustomerListContainer, _Bulk);\n\n  function CustomerListContainer() {\n    (0, _classCallCheck3.default)(this, CustomerListContainer);\n    return (0, _possibleConstructorReturn3.default)(this, _Bulk.apply(this, arguments));\n  }\n\n  CustomerListContainer.prototype.render = function () {\n    function render() {\n      var _props = this.props,\n          queryParams = _props.queryParams,\n          customersQuery = _props.customersQuery,\n          totalCountQuery = _props.totalCountQuery,\n          segmentsQuery = _props.segmentsQuery,\n          brandsQuery = _props.brandsQuery,\n          tagsQuery = _props.tagsQuery,\n          customerCountsQuery = _props.customerCountsQuery;\n\n      if (customersQuery.loading || totalCountQuery.loading || segmentsQuery.loading || brandsQuery.loading || customerCountsQuery.loading || tagsQuery.loading) {\n        return React.createElement(Loading, {\n          title: \"Customers\"\n        });\n      }\n\n      var totalCustomersCount = totalCountQuery.totalCustomersCount;\n\n      var _pagination = pagination(queryParams, totalCustomersCount),\n          loadMore = _pagination.loadMore,\n          hasMore = _pagination.hasMore;\n\n      var updatedProps = (0, _extends3.default)({}, this.props, {\n        // If there's no customer fields config, all fields will be selected\n        customerFields: Meteor.user() && Meteor.user().configs && Meteor.user().configs.customerFields || Customers.getPublicFields(),\n        customers: customersQuery.customers,\n        counts: customerCountsQuery.customerCounts,\n        segments: segmentsQuery.segments,\n        brands: brandsQuery.brands,\n        integrations: KIND_CHOICES.ALL_LIST,\n        tags: tagsQuery.tags,\n        loadMore: loadMore,\n        hasMore: hasMore,\n        bulk: this.state.bulk,\n        toggleBulk: this.toggleBulk\n      });\n      return React.createElement(CustomersList, updatedProps);\n    }\n\n    return render;\n  }();\n\n  return CustomerListContainer;\n}(Bulk);\n\nCustomerListContainer.propTypes = {\n  customersQuery: PropTypes.object,\n  segmentsQuery: PropTypes.object,\n  tagsQuery: PropTypes.object,\n  brandsQuery: PropTypes.object,\n  totalCountQuery: PropTypes.object,\n  customerCountsQuery: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(queries.customers), {\n  name: 'customersQuery',\n  options: function (_ref) {\n    var queryParams = _ref.queryParams;\n    return {\n      variables: {\n        params: (0, _extends3.default)({}, queryParams, {\n          limit: queryParams.limit || 20\n        })\n      }\n    };\n  }\n}), graphql(gql(queries.customerCounts), {\n  name: 'customerCountsQuery',\n  options: function (_ref2) {\n    var queryParams = _ref2.queryParams;\n    return {\n      variables: {\n        params: (0, _extends3.default)({}, queryParams, {\n          limit: queryParams.limit || 20\n        })\n      }\n    };\n  }\n}), graphql(gql(queries.segments), {\n  name: 'segmentsQuery'\n}), graphql(gql(queries.tags), {\n  name: 'tagsQuery',\n  options: function () {\n    return {\n      variables: {\n        type: TAG_TYPES.CUSTOMER\n      }\n    };\n  }\n}), graphql(gql(queries.brands), {\n  name: 'brandsQuery'\n}), graphql(gql(queries.totalCustomersCount), {\n  name: 'totalCountQuery'\n}))(CustomerListContainer));","map":{"version":3,"sources":["/imports/react-ui/customers/containers/CustomersList.js"],"names":["Meteor","module","importSync","v","React","PropTypes","compose","gql","graphql","Loading","Customers","KIND_CHOICES","TAG_TYPES","Bulk","pagination","queries","CustomersList","CustomerListContainer","render","props","queryParams","customersQuery","totalCountQuery","segmentsQuery","brandsQuery","tagsQuery","customerCountsQuery","loading","totalCustomersCount","loadMore","hasMore","updatedProps","customerFields","user","configs","getPublicFields","customers","counts","customerCounts","segments","brands","integrations","ALL_LIST","tags","bulk","state","toggleBulk","propTypes","object","export","exports","default","name","options","variables","params","limit","type","CUSTOMER"],"mappings":"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","file":"/imports/react-ui/customers/containers/CustomersList.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React, { PropTypes } from 'react';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { Loading } from '/imports/react-ui/common';\nimport { Customers } from '/imports/api/customers/customers';\nimport { KIND_CHOICES } from '/imports/api/integrations/constants';\nimport { TAG_TYPES } from '/imports/api/tags/constants';\nimport { Bulk, pagination } from '/imports/react-ui/common';\nimport { queries } from '../graphql';\nimport { CustomersList } from '../components';\n\nclass CustomerListContainer extends Bulk {\n  render() {\n    const {\n      queryParams,\n      customersQuery,\n      totalCountQuery,\n      segmentsQuery,\n      brandsQuery,\n      tagsQuery,\n      customerCountsQuery,\n    } = this.props;\n\n    if (\n      customersQuery.loading ||\n      totalCountQuery.loading ||\n      segmentsQuery.loading ||\n      brandsQuery.loading ||\n      customerCountsQuery.loading ||\n      tagsQuery.loading\n    ) {\n      return <Loading title=\"Customers\" />;\n    }\n\n    const { totalCustomersCount } = totalCountQuery;\n    const { loadMore, hasMore } = pagination(queryParams, totalCustomersCount);\n\n    const updatedProps = {\n      ...this.props,\n      // If there's no customer fields config, all fields will be selected\n      customerFields: (Meteor.user() &&\n        Meteor.user().configs &&\n        Meteor.user().configs.customerFields) ||\n        Customers.getPublicFields(),\n\n      customers: customersQuery.customers,\n      counts: customerCountsQuery.customerCounts,\n      segments: segmentsQuery.segments,\n      brands: brandsQuery.brands,\n      integrations: KIND_CHOICES.ALL_LIST,\n      tags: tagsQuery.tags,\n      loadMore,\n      hasMore,\n      bulk: this.state.bulk,\n      toggleBulk: this.toggleBulk,\n    };\n\n    return <CustomersList {...updatedProps} />;\n  }\n}\n\nCustomerListContainer.propTypes = {\n  customersQuery: PropTypes.object,\n  segmentsQuery: PropTypes.object,\n  tagsQuery: PropTypes.object,\n  brandsQuery: PropTypes.object,\n  totalCountQuery: PropTypes.object,\n  customerCountsQuery: PropTypes.object,\n};\n\nexport default compose(\n  graphql(gql(queries.customers), {\n    name: 'customersQuery',\n    options: ({ queryParams }) => ({\n      variables: {\n        params: {\n          ...queryParams,\n          limit: queryParams.limit || 20,\n        },\n      },\n    }),\n  }),\n  graphql(gql(queries.customerCounts), {\n    name: 'customerCountsQuery',\n    options: ({ queryParams }) => ({\n      variables: {\n        params: {\n          ...queryParams,\n          limit: queryParams.limit || 20,\n        },\n      },\n    }),\n  }),\n  graphql(gql(queries.segments), { name: 'segmentsQuery' }),\n  graphql(gql(queries.tags), {\n    name: 'tagsQuery',\n    options: () => ({\n      variables: {\n        type: TAG_TYPES.CUSTOMER,\n      },\n    }),\n  }),\n  graphql(gql(queries.brands), { name: 'brandsQuery' }),\n  graphql(gql(queries.totalCustomersCount), { name: 'totalCountQuery' }),\n)(CustomerListContainer);\n"]},"hash":"89194e7ebfd748d6c57d82485f835d9758aa114c"}
