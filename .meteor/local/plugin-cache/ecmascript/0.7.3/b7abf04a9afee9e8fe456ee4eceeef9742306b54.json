{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react","imported":["default","PropTypes","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"react-apollo","imported":["compose","gql","graphql"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"},{"kind":"named","imported":"gql","local":"gql"},{"kind":"named","imported":"graphql","local":"graphql"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"../components","imported":["Details"],"specifiers":[{"kind":"named","imported":"Details","local":"Details"}]},{"source":"/imports/react-ui/common","imported":["Loading"],"specifiers":[{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"../graphql","imported":["queries","subscriptions"],"specifiers":[{"kind":"named","imported":"queries","local":"queries"},{"kind":"named","imported":"subscriptions","local":"subscriptions"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/inbox/containers/Details.js","filenameRelative":"/imports/react-ui/inbox/containers/Details.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/inbox/containers/Details.js.map","sourceFileName":"/imports/react-ui/inbox/containers/Details.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Details"},"ignored":false,"code":"var _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar React = void 0,\n    PropTypes = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 1);\nvar compose = void 0,\n    gql = void 0,\n    graphql = void 0;\nmodule.importSync(\"react-apollo\", {\n  compose: function (v) {\n    compose = v;\n  },\n  gql: function (v) {\n    gql = v;\n  },\n  graphql: function (v) {\n    graphql = v;\n  }\n}, 2);\nvar ReactiveVar = void 0;\nmodule.importSync(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 3);\nvar Details = void 0;\nmodule.importSync(\"../components\", {\n  Details: function (v) {\n    Details = v;\n  }\n}, 4);\nvar Loading = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 5);\nvar queries = void 0,\n    subscriptions = void 0;\nmodule.importSync(\"../graphql\", {\n  queries: function (v) {\n    queries = v;\n  },\n  subscriptions: function (v) {\n    subscriptions = v;\n  }\n}, 6);\nvar attachmentPreview = new ReactiveVar({});\n\nvar DetailsContainer = function (_Component) {\n  (0, _inherits3.default)(DetailsContainer, _Component);\n\n  function DetailsContainer() {\n    (0, _classCallCheck3.default)(this, DetailsContainer);\n    return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));\n  }\n\n  DetailsContainer.prototype.componentWillMount = function () {\n    function componentWillMount() {\n      var _this2 = this;\n\n      var _props = this.props,\n          id = _props.id,\n          conversationDetailQuery = _props.conversationDetailQuery; // lister for new message insertion\n\n      conversationDetailQuery.subscribeToMore({\n        document: gql(subscriptions.conversationMessageInserted),\n        variables: {\n          _id: id\n        },\n        updateQuery: function (prev, _ref) {\n          var subscriptionData = _ref.subscriptionData;\n          var message = subscriptionData.data.conversationMessageInserted;\n          var conversationDetail = prev.conversationDetail;\n          var messages = conversationDetail.messages; // add new message to messages list\n\n          var next = Object.assign({}, prev, {\n            conversationDetail: Object.assign((0, _extends3.default)({}, conversationDetail, {\n              messages: [].concat((0, _toConsumableArray3.default)(messages), [message])\n            }))\n          });\n          return next;\n        }\n      }); // lister for conversation changes like status, assignee\n\n      conversationDetailQuery.subscribeToMore({\n        document: gql(subscriptions.conversationChanged),\n        variables: {\n          _id: id\n        },\n        updateQuery: function () {\n          _this2.props.conversationDetailQuery.refetch();\n        }\n      });\n    }\n\n    return componentWillMount;\n  }();\n\n  DetailsContainer.prototype.render = function () {\n    function render() {\n      var _props2 = this.props,\n          channelId = _props2.channelId,\n          queryParams = _props2.queryParams,\n          conversationDetailQuery = _props2.conversationDetailQuery;\n\n      if (conversationDetailQuery.loading) {\n        return React.createElement(Loading, {\n          title: \"Conversation\",\n          spin: true,\n          hasRightSidebar: true\n        });\n      }\n\n      var conversation = conversationDetailQuery.conversationDetail;\n      var messages = conversation.messages; // =============== actions\n\n      var changeStatus = function (conversationId, status, callback) {\n        Meteor.call('conversations.changeStatus', {\n          conversationIds: [conversationId],\n          status: status\n        }, callback);\n      };\n\n      var setAttachmentPreview = function (previewObject) {\n        attachmentPreview.set(previewObject);\n      }; // mark as read\n\n\n      var readUserIds = conversation.readUserIds || [];\n\n      if (!readUserIds.includes(Meteor.userId())) {\n        Meteor.call('conversations.markAsRead', {\n          conversationId: conversation._id\n        });\n      }\n\n      var updatedProps = (0, _extends3.default)({}, this.props, {\n        conversation: conversation,\n        messages: messages,\n        channelId: channelId,\n        changeStatus: changeStatus,\n        setAttachmentPreview: setAttachmentPreview,\n        queryParams: queryParams,\n        attachmentPreview: attachmentPreview.get(),\n        refetch: conversationDetailQuery.refetch\n      });\n      return React.createElement(Details, updatedProps);\n    }\n\n    return render;\n  }();\n\n  return DetailsContainer;\n}(Component);\n\nDetailsContainer.propTypes = {\n  id: PropTypes.string,\n  channelId: PropTypes.string,\n  queryParams: PropTypes.object,\n  conversationDetailQuery: PropTypes.object,\n  subscribeToNewMessages: PropTypes.func,\n  data: PropTypes.object\n};\nmodule.export(\"default\", exports.default = compose(graphql(gql(queries.conversationDetail), {\n  name: 'conversationDetailQuery',\n  options: function (_ref2) {\n    var id = _ref2.id;\n    return {\n      variables: {\n        _id: id\n      }\n    };\n  }\n}))(DetailsContainer));","map":{"version":3,"sources":["/imports/react-ui/inbox/containers/Details.js"],"names":["Meteor","module","importSync","v","React","PropTypes","Component","compose","gql","graphql","ReactiveVar","Details","Loading","queries","subscriptions","attachmentPreview","DetailsContainer","componentWillMount","props","id","conversationDetailQuery","subscribeToMore","document","conversationMessageInserted","variables","_id","updateQuery","prev","subscriptionData","message","data","conversationDetail","messages","next","Object","assign","conversationChanged","refetch","render","channelId","queryParams","loading","conversation","changeStatus","conversationId","status","callback","call","conversationIds","setAttachmentPreview","set","previewObject","readUserIds","includes","userId","updatedProps","get","propTypes","string","object","subscribeToNewMessages","func","export","exports","default","name","options"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,eAAJ;AAAWC,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACF,UAAO,UAASG,CAAT,EAAW;AAACH,aAAOG,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIC,cAAJ;AAAA,IAAUC,kBAAV;AAAA,IAAoBC,kBAApB;AAA8BL,OAAOC,UAAP,CAAkB,OAAlB,EAA0B;AAAC,aAAQ,UAASC,CAAT,EAAW;AAACC,YAAMD,CAAN;AAAQ,GAA7B;AAA8BE,aAAU,UAASF,CAAT,EAAW;AAACE,gBAAUF,CAAV;AAAY,GAAhE;AAAiEG,aAAU,UAASH,CAAT,EAAW;AAACG,gBAAUH,CAAV;AAAY;AAAnG,CAA1B,EAA+H,CAA/H;AAAkI,IAAII,gBAAJ;AAAA,IAAYC,YAAZ;AAAA,IAAgBC,gBAAhB;AAAwBR,OAAOC,UAAP,CAAkB,cAAlB,EAAiC;AAACK,WAAQ,UAASJ,CAAT,EAAW;AAACI,cAAQJ,CAAR;AAAU,GAA/B;AAAgCK,OAAI,UAASL,CAAT,EAAW;AAACK,UAAIL,CAAJ;AAAM,GAAtD;AAAuDM,WAAQ,UAASN,CAAT,EAAW;AAACM,cAAQN,CAAR;AAAU;AAArF,CAAjC,EAAwH,CAAxH;AAA2H,IAAIO,oBAAJ;AAAgBT,OAAOC,UAAP,CAAkB,qBAAlB,EAAwC;AAACQ,eAAY,UAASP,CAAT,EAAW;AAACO,kBAAYP,CAAZ;AAAc;AAAvC,CAAxC,EAAiF,CAAjF;AAAoF,IAAIQ,gBAAJ;AAAYV,OAAOC,UAAP,CAAkB,eAAlB,EAAkC;AAACS,WAAQ,UAASR,CAAT,EAAW;AAACQ,cAAQR,CAAR;AAAU;AAA/B,CAAlC,EAAmE,CAAnE;AAAsE,IAAIS,gBAAJ;AAAYX,OAAOC,UAAP,CAAkB,0BAAlB,EAA6C;AAACU,WAAQ,UAAST,CAAT,EAAW;AAACS,cAAQT,CAAR;AAAU;AAA/B,CAA7C,EAA8E,CAA9E;AAAiF,IAAIU,gBAAJ;AAAA,IAAYC,sBAAZ;AAA0Bb,OAAOC,UAAP,CAAkB,YAAlB,EAA+B;AAACW,WAAQ,UAASV,CAAT,EAAW;AAACU,cAAQV,CAAR;AAAU,GAA/B;AAAgCW,iBAAc,UAASX,CAAT,EAAW;AAACW,oBAAcX,CAAd;AAAgB;AAA1E,CAA/B,EAA2G,CAA3G;AAQ/qB,IAAMY,oBAAoB,IAAIL,WAAJ,CAAgB,EAAhB,CAA1B;;IAEMM,gB;;;;;;;;6BACJC,kB;kCAAqB;AAAA;;AAAA,mBACqB,KAAKC,KAD1B;AAAA,UACXC,EADW,UACXA,EADW;AAAA,UACPC,uBADO,UACPA,uBADO,EAGnB;;AACAA,8BAAwBC,eAAxB,CAAwC;AACtCC,kBAAUd,IAAIM,cAAcS,2BAAlB,CAD4B;AAEtCC,mBAAW;AAAEC,eAAKN;AAAP,SAF2B;AAGtCO,qBAAa,UAACC,IAAD,QAAgC;AAAA,cAAvBC,gBAAuB,QAAvBA,gBAAuB;AAC3C,cAAMC,UAAUD,iBAAiBE,IAAjB,CAAsBP,2BAAtC;AACA,cAAMQ,qBAAqBJ,KAAKI,kBAAhC;AACA,cAAMC,WAAWD,mBAAmBC,QAApC,CAH2C,CAK3C;;AACA,cAAMC,OAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,IAAlB,EAAwB;AACnCI,gCAAoBG,OAAOC,MAAP,4BACfJ,kBADe;AAElBC,mEAAcA,QAAd,IAAwBH,OAAxB;AAFkB;AADe,WAAxB,CAAb;AAOA,iBAAOI,IAAP;AACD;AAjBqC,OAAxC,EAJmB,CAwBnB;;AACAb,8BAAwBC,eAAxB,CAAwC;AACtCC,kBAAUd,IAAIM,cAAcsB,mBAAlB,CAD4B;AAEtCZ,mBAAW;AAAEC,eAAKN;AAAP,SAF2B;AAGtCO,qBAAa,YAAM;AACjB,iBAAKR,KAAL,CAAWE,uBAAX,CAAmCiB,OAAnC;AACD;AALqC,OAAxC;AAOD;;;;;6BAEDC,M;sBAAS;AAAA,oBACqD,KAAKpB,KAD1D;AAAA,UACCqB,SADD,WACCA,SADD;AAAA,UACYC,WADZ,WACYA,WADZ;AAAA,UACyBpB,uBADzB,WACyBA,uBADzB;;AAGP,UAAIA,wBAAwBqB,OAA5B,EAAqC;AACnC,eAAO,oBAAC,OAAD;AAAS,iBAAM,cAAf;AAA8B,oBAA9B;AAAmC;AAAnC,UAAP;AACD;;AAED,UAAMC,eAAetB,wBAAwBW,kBAA7C;AACA,UAAMC,WAAWU,aAAaV,QAA9B,CARO,CAUP;;AACA,UAAMW,eAAe,UAACC,cAAD,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAsC;AACzD9C,eAAO+C,IAAP,CACE,4BADF,EAEE;AAAEC,2BAAiB,CAACJ,cAAD,CAAnB;AAAqCC;AAArC,SAFF,EAGEC,QAHF;AAKD,OAND;;AAQA,UAAMG,uBAAuB,yBAAiB;AAC5ClC,0BAAkBmC,GAAlB,CAAsBC,aAAtB;AACD,OAFD,CAnBO,CAuBP;;;AACA,UAAMC,cAAcV,aAAaU,WAAb,IAA4B,EAAhD;;AAEA,UAAI,CAACA,YAAYC,QAAZ,CAAqBrD,OAAOsD,MAAP,EAArB,CAAL,EAA4C;AAC1CtD,eAAO+C,IAAP,CAAY,0BAAZ,EAAwC;AAAEH,0BAAgBF,aAAajB;AAA/B,SAAxC;AACD;;AAED,UAAM8B,0CACD,KAAKrC,KADJ;AAEJwB,kCAFI;AAGJV,0BAHI;AAIJO,4BAJI;AAKJI,kCALI;AAMJM,kDANI;AAOJT,gCAPI;AAQJzB,2BAAmBA,kBAAkByC,GAAlB,EARf;AASJnB,iBAASjB,wBAAwBiB;AAT7B,QAAN;AAYA,aAAO,oBAAC,OAAD,EAAakB,YAAb,CAAP;AACD;;;;;;EA9E4BjD,S;;AAiF/BU,iBAAiByC,SAAjB,GAA6B;AAC3BtC,MAAId,UAAUqD,MADa;AAE3BnB,aAAWlC,UAAUqD,MAFM;AAG3BlB,eAAanC,UAAUsD,MAHI;AAI3BvC,2BAAyBf,UAAUsD,MAJR;AAK3BC,0BAAwBvD,UAAUwD,IALP;AAM3B/B,QAAMzB,UAAUsD;AANW,CAA7B;AA3FA1D,OAAO6D,MAAP,CAAc,SAAd,EAAwBC,QAAQC,OAAR,GAoGTzD,QACbE,QAAQD,IAAIK,QAAQkB,kBAAZ,CAAR,EAAyC;AACvCkC,QAAM,yBADiC;AAEvCC,WAAS;AAAA,QAAG/C,EAAH,SAAGA,EAAH;AAAA,WAAa;AACpBK,iBAAW;AACTC,aAAKN;AADI;AADS,KAAb;AAAA;AAF8B,CAAzC,CADa,EASbH,gBATa,CApGf","file":"/imports/react-ui/inbox/containers/Details.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport React, { PropTypes, Component } from 'react';\nimport { compose, gql, graphql } from 'react-apollo';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Details } from '../components';\nimport { Loading } from '/imports/react-ui/common';\nimport { queries, subscriptions } from '../graphql';\n\nconst attachmentPreview = new ReactiveVar({});\n\nclass DetailsContainer extends Component {\n  componentWillMount() {\n    const { id, conversationDetailQuery } = this.props;\n\n    // lister for new message insertion\n    conversationDetailQuery.subscribeToMore({\n      document: gql(subscriptions.conversationMessageInserted),\n      variables: { _id: id },\n      updateQuery: (prev, { subscriptionData }) => {\n        const message = subscriptionData.data.conversationMessageInserted;\n        const conversationDetail = prev.conversationDetail;\n        const messages = conversationDetail.messages;\n\n        // add new message to messages list\n        const next = Object.assign({}, prev, {\n          conversationDetail: Object.assign({\n            ...conversationDetail,\n            messages: [...messages, message],\n          }),\n        });\n\n        return next;\n      },\n    });\n\n    // lister for conversation changes like status, assignee\n    conversationDetailQuery.subscribeToMore({\n      document: gql(subscriptions.conversationChanged),\n      variables: { _id: id },\n      updateQuery: () => {\n        this.props.conversationDetailQuery.refetch();\n      },\n    });\n  }\n\n  render() {\n    const { channelId, queryParams, conversationDetailQuery } = this.props;\n\n    if (conversationDetailQuery.loading) {\n      return <Loading title=\"Conversation\" spin hasRightSidebar />;\n    }\n\n    const conversation = conversationDetailQuery.conversationDetail;\n    const messages = conversation.messages;\n\n    // =============== actions\n    const changeStatus = (conversationId, status, callback) => {\n      Meteor.call(\n        'conversations.changeStatus',\n        { conversationIds: [conversationId], status },\n        callback,\n      );\n    };\n\n    const setAttachmentPreview = previewObject => {\n      attachmentPreview.set(previewObject);\n    };\n\n    // mark as read\n    const readUserIds = conversation.readUserIds || [];\n\n    if (!readUserIds.includes(Meteor.userId())) {\n      Meteor.call('conversations.markAsRead', { conversationId: conversation._id });\n    }\n\n    const updatedProps = {\n      ...this.props,\n      conversation,\n      messages,\n      channelId,\n      changeStatus,\n      setAttachmentPreview,\n      queryParams,\n      attachmentPreview: attachmentPreview.get(),\n      refetch: conversationDetailQuery.refetch,\n    };\n\n    return <Details {...updatedProps} />;\n  }\n}\n\nDetailsContainer.propTypes = {\n  id: PropTypes.string,\n  channelId: PropTypes.string,\n  queryParams: PropTypes.object,\n  conversationDetailQuery: PropTypes.object,\n  subscribeToNewMessages: PropTypes.func,\n  data: PropTypes.object,\n};\n\nexport default compose(\n  graphql(gql(queries.conversationDetail), {\n    name: 'conversationDetailQuery',\n    options: ({ id }) => ({\n      variables: {\n        _id: id,\n      },\n    }),\n  }),\n)(DetailsContainer);\n"]},"hash":"b7abf04a9afee9e8fe456ee4eceeef9742306b54"}
