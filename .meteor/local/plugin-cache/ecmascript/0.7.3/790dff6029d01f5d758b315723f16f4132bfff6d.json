{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"/imports/api/server/utils","imported":["sendEmail"],"specifiers":[{"kind":"named","imported":"sendEmail","local":"sendEmail"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"/imports/api/channels/channels","imported":["Channels"],"specifiers":[{"kind":"named","imported":"Channels","local":"Channels"}]},{"source":"/imports/api/customers/customers","imported":["Customers"],"specifiers":[{"kind":"named","imported":"Customers","local":"Customers"}]},{"source":"../schemas","imported":["CreateInvitationSchema","UpdateInvitationSchema","ProfileSchema","EmailSignaturesSchema"],"specifiers":[{"kind":"named","imported":"CreateInvitationSchema","local":"CreateInvitationSchema"},{"kind":"named","imported":"UpdateInvitationSchema","local":"UpdateInvitationSchema"},{"kind":"named","imported":"ProfileSchema","local":"ProfileSchema"},{"kind":"named","imported":"EmailSignaturesSchema","local":"EmailSignaturesSchema"}]}],"exports":{"exported":["invite","edit","editProfile","remove","configEmailSignature","configGetNotificationByEmail","configCustomerFields"],"specifiers":[{"kind":"local","local":"invite","exported":"invite"},{"kind":"local","local":"edit","exported":"edit"},{"kind":"local","local":"editProfile","exported":"editProfile"},{"kind":"local","local":"remove","exported":"remove"},{"kind":"local","local":"configEmailSignature","exported":"configEmailSignature"},{"kind":"local","local":"configGetNotificationByEmail","exported":"configGetNotificationByEmail"},{"kind":"local","local":"configCustomerFields","exported":"configCustomerFields"}]}}},"options":{"filename":"/imports/api/users/server/methods.js","filenameRelative":"/imports/api/users/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/users/server/methods.js.map","sourceFileName":"/imports/api/users/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  invite: function () {\n    return invite;\n  },\n  edit: function () {\n    return edit;\n  },\n  editProfile: function () {\n    return editProfile;\n  },\n  remove: function () {\n    return remove;\n  },\n  configEmailSignature: function () {\n    return configEmailSignature;\n  },\n  configGetNotificationByEmail: function () {\n    return configGetNotificationByEmail;\n  },\n  configCustomerFields: function () {\n    return configCustomerFields;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 1);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 2);\nvar Accounts = void 0;\nmodule.importSync(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 3);\nvar sendEmail = void 0;\nmodule.importSync(\"/imports/api/server/utils\", {\n  sendEmail: function (v) {\n    sendEmail = v;\n  }\n}, 4);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 5);\nvar Channels = void 0;\nmodule.importSync(\"/imports/api/channels/channels\", {\n  Channels: function (v) {\n    Channels = v;\n  }\n}, 6);\nvar Customers = void 0;\nmodule.importSync(\"/imports/api/customers/customers\", {\n  Customers: function (v) {\n    Customers = v;\n  }\n}, 7);\nvar CreateInvitationSchema = void 0,\n    UpdateInvitationSchema = void 0,\n    ProfileSchema = void 0,\n    EmailSignaturesSchema = void 0;\nmodule.importSync(\"../schemas\", {\n  CreateInvitationSchema: function (v) {\n    CreateInvitationSchema = v;\n  },\n  UpdateInvitationSchema: function (v) {\n    UpdateInvitationSchema = v;\n  },\n  ProfileSchema: function (v) {\n    ProfileSchema = v;\n  },\n  EmailSignaturesSchema: function (v) {\n    EmailSignaturesSchema = v;\n  }\n}, 8);\n\n// ***************** helpers ******************* //\n// update user's channels\nvar updateUserChannels = function (channelIds, userId) {\n  // remove from previous channels\n  Channels.update({\n    memberIds: {\n      $in: [userId]\n    }\n  }, {\n    $pull: {\n      memberIds: userId\n    }\n  }, {\n    multi: true\n  }); // add to given channels\n\n  Channels.update({\n    _id: {\n      $in: channelIds\n    }\n  }, {\n    $push: {\n      memberIds: userId\n    }\n  }, {\n    multi: true\n  });\n}; // update user's common infos\n\n\nvar updateUserCommonInfos = function (userId, doc) {\n  var user = Meteor.users.findOne({\n    _id: {\n      $ne: userId\n    },\n    'details.twitterUsername': doc.twitterUsername\n  }); // check twitterUsername duplication\n\n  if (doc.twitterUsername && user) {\n    throw new Meteor.Error('users.updateInfo.wrongTwitterUsername', 'Duplicated twitter username');\n  }\n\n  Meteor.users.update(userId, {\n    $set: {\n      username: doc.username,\n      'details.twitterUsername': doc.twitterUsername,\n      'details.avatar': doc.avatar,\n      'details.fullName': doc.fullName,\n      'details.position': doc.position,\n      'emails.0.address': doc.email\n    }\n  });\n};\n\nvar checkPasswordConfirmation = function (password, passwordConfirmation) {\n  if (password !== passwordConfirmation) {\n    throw new Meteor.Error('users.updateInfo.WrongPasswordConfirmation', 'Wrong password confirmation');\n  }\n}; // ***************** methods ******************* //\n// create user and invite to given channels\n\n\nvar invite = new ValidatedMethod({\n  name: 'users.add',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var doc = _ref.doc;\n    check(doc, CreateInvitationSchema);\n  },\n  run: function (_ref2) {\n    var doc = _ref2.doc;\n    var username = doc.username,\n        twitterUsername = doc.twitterUsername,\n        avatar = doc.avatar,\n        position = doc.position,\n        fullName = doc.fullName,\n        email = doc.email,\n        role = doc.role,\n        channelIds = doc.channelIds,\n        password = doc.password,\n        passwordConfirmation = doc.passwordConfirmation;\n    checkPasswordConfirmation(password, passwordConfirmation); // create user with given email and role\n\n    var userId = Accounts.createUser({\n      email: email,\n      invite: true,\n      details: {\n        role: role\n      }\n    }); // set new password\n\n    Accounts.setPassword(userId, password); // set profile infos\n\n    updateUserCommonInfos(userId, {\n      twitterUsername: twitterUsername,\n      username: username,\n      avatar: avatar,\n      fullName: fullName,\n      position: position,\n      email: email\n    }); // add new user to channels\n\n    updateUserChannels(channelIds, userId); // send email\n\n    sendEmail({\n      to: email,\n      subject: 'Invitation info',\n      template: {\n        name: 'invitation',\n        data: {\n          username: username,\n          password: password\n        }\n      }\n    });\n  }\n});\nvar edit = new ValidatedMethod({\n  name: 'users.edit',\n  mixins: [ErxesMixin],\n  validate: function (_ref3) {\n    var id = _ref3.id,\n        doc = _ref3.doc;\n    check(id, String); // check doc\n\n    check(doc, UpdateInvitationSchema);\n  },\n  run: function (_ref4) {\n    var id = _ref4.id,\n        doc = _ref4.doc;\n    var twitterUsername = doc.twitterUsername,\n        position = doc.position,\n        username = doc.username,\n        avatar = doc.avatar,\n        fullName = doc.fullName,\n        email = doc.email,\n        role = doc.role,\n        channelIds = doc.channelIds,\n        password = doc.password,\n        passwordConfirmation = doc.passwordConfirmation; // update user channels channels\n\n    updateUserChannels(channelIds, id);\n    var user = Meteor.users.findOne(id); // change password\n\n    if (doc.password) {\n      checkPasswordConfirmation(password, passwordConfirmation); // set new password\n\n      Accounts.setPassword(id, password);\n    } // if user is not owner then update profile infos\n\n\n    if (!user.isOwner) {\n      updateUserCommonInfos(id, {\n        username: username,\n        twitterUsername: twitterUsername,\n        avatar: avatar,\n        position: position,\n        fullName: fullName,\n        email: email\n      }); // update role\n\n      Meteor.users.update(id, {\n        $set: {\n          'details.role': role\n        }\n      });\n    }\n  }\n});\nvar editProfile = new ValidatedMethod({\n  name: 'users.editProfile',\n  mixins: [ErxesMixin],\n  validate: ProfileSchema.validator(),\n  run: function (doc) {\n    // check password\n    var result = Accounts._checkPassword(Meteor.user(), doc.currentPassword);\n\n    if (result.error) {\n      throw new Meteor.Error('users.editProfile.invalidPassword', result.error.reason);\n    }\n\n    return updateUserCommonInfos(this.userId, doc);\n  }\n});\nvar remove = new ValidatedMethod({\n  name: 'users.remove',\n  mixins: [ErxesMixin],\n  validate: function (userId) {\n    check(userId, String);\n  },\n  run: function (userId) {\n    var user = Meteor.users.findOne(userId); // can not delete owner\n\n    if (user.isOwner) {\n      throw new Meteor.Error('users.remove.canNotDeleteOwner', 'You cannot delete the owner.');\n    } // if the user involved in any channel then can not delete this user\n\n\n    if (Channels.find({\n      userId: userId\n    }).count() > 0) {\n      throw new Meteor.Error('users.remove.involvedInChannel', 'You cannot delete this user. This user belongs other channel.');\n    }\n\n    if (Channels.find({\n      memberIds: {\n        $in: [userId]\n      }\n    }).count() > 0) {\n      throw new Meteor.Error('users.remove.involvedInChannel', 'You cannot delete this user. This user belongs other channel.');\n    } // if there is no problem then delete it\n\n\n    Meteor.users.remove({\n      _id: userId\n    });\n  }\n});\nvar configEmailSignature = new ValidatedMethod({\n  name: 'users.configEmailSignature',\n  mixins: [ErxesMixin],\n  validate: EmailSignaturesSchema.validator(),\n  run: function (_ref5) {\n    var signatures = _ref5.signatures;\n    Meteor.users.update(this.userId, {\n      $set: {\n        emailSignatures: signatures\n      }\n    });\n  }\n});\nvar configGetNotificationByEmail = new ValidatedMethod({\n  name: 'users.configGetNotificationByEmail',\n  mixins: [ErxesMixin],\n  validate: function (_ref6) {\n    var isAllowed = _ref6.isAllowed;\n    check(isAllowed, Boolean);\n  },\n  run: function (_ref7) {\n    var isAllowed = _ref7.isAllowed;\n    Meteor.users.update(this.userId, {\n      $set: {\n        'details.getNotificationByEmail': isAllowed\n      }\n    });\n  }\n});\nvar configCustomerFields = new ValidatedMethod({\n  name: 'users.configCustomerFields',\n  mixins: [ErxesMixin],\n  validate: function (_ref8) {\n    var fields = _ref8.fields;\n    check(fields, Array); // Check if the fields are correctly named\n\n    var schemaFields = Customers.getPublicFields();\n    fields.forEach(function (_ref9) {\n      var key = _ref9.key;\n      var isCorrectField = schemaFields.find(function (f) {\n        return f.key === key;\n      });\n\n      if (!isCorrectField) {\n        throw new Meteor.Error('users.configs.wrongCsutomerField', 'Wrong customer field declaration.');\n      }\n    });\n  },\n  run: function (_ref10) {\n    var fields = _ref10.fields;\n    Meteor.users.update(this.userId, {\n      $set: {\n        'configs.customerFields': fields\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/imports/api/users/server/methods.js"],"names":["module","export","invite","edit","editProfile","remove","configEmailSignature","configGetNotificationByEmail","configCustomerFields","Meteor","importSync","v","ValidatedMethod","check","Accounts","sendEmail","ErxesMixin","Channels","Customers","CreateInvitationSchema","UpdateInvitationSchema","ProfileSchema","EmailSignaturesSchema","updateUserChannels","channelIds","userId","update","memberIds","$in","$pull","multi","_id","$push","updateUserCommonInfos","doc","user","users","findOne","$ne","twitterUsername","Error","$set","username","avatar","fullName","position","email","checkPasswordConfirmation","password","passwordConfirmation","name","mixins","validate","run","role","createUser","details","setPassword","to","subject","template","data","id","String","isOwner","validator","result","_checkPassword","currentPassword","error","reason","find","count","signatures","emailSignatures","isAllowed","Boolean","fields","Array","schemaFields","getPublicFields","forEach","key","isCorrectField","f"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,UAAO;AAAA,WAAIA,MAAJ;AAAA,GAAR;AAAmBC,QAAK;AAAA,WAAIA,IAAJ;AAAA,GAAxB;AAAiCC,eAAY;AAAA,WAAIA,WAAJ;AAAA,GAA7C;AAA6DC,UAAO;AAAA,WAAIA,MAAJ;AAAA,GAApE;AAA+EC,wBAAqB;AAAA,WAAIA,oBAAJ;AAAA,GAApG;AAA6HC,gCAA6B;AAAA,WAAIA,4BAAJ;AAAA,GAA1J;AAA2LC,wBAAqB;AAAA,WAAIA,oBAAJ;AAAA;AAAhN,CAAd;AAAyP,IAAIC,eAAJ;AAAWT,OAAOU,UAAP,CAAkB,eAAlB,EAAkC;AAACD,UAAO,UAASE,CAAT,EAAW;AAACF,aAAOE,CAAP;AAAS;AAA7B,CAAlC,EAAiE,CAAjE;AAAoE,IAAIC,wBAAJ;AAAoBZ,OAAOU,UAAP,CAAkB,6BAAlB,EAAgD;AAACE,mBAAgB,UAASD,CAAT,EAAW;AAACC,sBAAgBD,CAAhB;AAAkB;AAA/C,CAAhD,EAAiG,CAAjG;AAAoG,IAAIE,cAAJ;AAAUb,OAAOU,UAAP,CAAkB,cAAlB,EAAiC;AAACG,SAAM,UAASF,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAA3B,CAAjC,EAA8D,CAA9D;AAAiE,IAAIG,iBAAJ;AAAad,OAAOU,UAAP,CAAkB,sBAAlB,EAAyC;AAACI,YAAS,UAASH,CAAT,EAAW;AAACG,eAASH,CAAT;AAAW;AAAjC,CAAzC,EAA4E,CAA5E;AAA+E,IAAII,kBAAJ;AAAcf,OAAOU,UAAP,CAAkB,2BAAlB,EAA8C;AAACK,aAAU,UAASJ,CAAT,EAAW;AAACI,gBAAUJ,CAAV;AAAY;AAAnC,CAA9C,EAAmF,CAAnF;AAAsF,IAAIK,mBAAJ;AAAehB,OAAOU,UAAP,CAAkB,oBAAlB,EAAuC;AAACM,cAAW,UAASL,CAAT,EAAW;AAACK,iBAAWL,CAAX;AAAa;AAArC,CAAvC,EAA8E,CAA9E;AAAiF,IAAIM,iBAAJ;AAAajB,OAAOU,UAAP,CAAkB,gCAAlB,EAAmD;AAACO,YAAS,UAASN,CAAT,EAAW;AAACM,eAASN,CAAT;AAAW;AAAjC,CAAnD,EAAsF,CAAtF;AAAyF,IAAIO,kBAAJ;AAAclB,OAAOU,UAAP,CAAkB,kCAAlB,EAAqD;AAACQ,aAAU,UAASP,CAAT,EAAW;AAACO,gBAAUP,CAAV;AAAY;AAAnC,CAArD,EAA0F,CAA1F;AAA6F,IAAIQ,+BAAJ;AAAA,IAA2BC,+BAA3B;AAAA,IAAkDC,sBAAlD;AAAA,IAAgEC,8BAAhE;AAAsFtB,OAAOU,UAAP,CAAkB,YAAlB,EAA+B;AAACS,0BAAuB,UAASR,CAAT,EAAW;AAACQ,6BAAuBR,CAAvB;AAAyB,GAA7D;AAA8DS,0BAAuB,UAAST,CAAT,EAAW;AAACS,6BAAuBT,CAAvB;AAAyB,GAA1H;AAA2HU,iBAAc,UAASV,CAAT,EAAW;AAACU,oBAAcV,CAAd;AAAgB,GAArK;AAAsKW,yBAAsB,UAASX,CAAT,EAAW;AAACW,4BAAsBX,CAAtB;AAAwB;AAAhO,CAA/B,EAAiQ,CAAjQ;;AAellC;AAEA;AACA,IAAMY,qBAAqB,UAACC,UAAD,EAAaC,MAAb,EAAwB;AACjD;AACAR,WAASS,MAAT,CACE;AAAEC,eAAW;AAAEC,WAAK,CAACH,MAAD;AAAP;AAAb,GADF,EAEE;AAAEI,WAAO;AAAEF,iBAAWF;AAAb;AAAT,GAFF,EAGE;AAAEK,WAAO;AAAT,GAHF,EAFiD,CAQjD;;AACAb,WAASS,MAAT,CAAgB;AAAEK,SAAK;AAAEH,WAAKJ;AAAP;AAAP,GAAhB,EAA8C;AAAEQ,WAAO;AAAEL,iBAAWF;AAAb;AAAT,GAA9C,EAAgF;AAAEK,WAAO;AAAT,GAAhF;AACD,CAVD,C,CAYA;;;AACA,IAAMG,wBAAwB,UAACR,MAAD,EAASS,GAAT,EAAiB;AAC7C,MAAMC,OAAO1B,OAAO2B,KAAP,CAAaC,OAAb,CAAqB;AAChCN,SAAK;AAAEO,WAAKb;AAAP,KAD2B;AAEhC,+BAA2BS,IAAIK;AAFC,GAArB,CAAb,CAD6C,CAM7C;;AACA,MAAIL,IAAIK,eAAJ,IAAuBJ,IAA3B,EAAiC;AAC/B,UAAM,IAAI1B,OAAO+B,KAAX,CAAiB,uCAAjB,EAA0D,6BAA1D,CAAN;AACD;;AAED/B,SAAO2B,KAAP,CAAaV,MAAb,CAAoBD,MAApB,EAA4B;AAC1BgB,UAAM;AACJC,gBAAUR,IAAIQ,QADV;AAEJ,iCAA2BR,IAAIK,eAF3B;AAGJ,wBAAkBL,IAAIS,MAHlB;AAIJ,0BAAoBT,IAAIU,QAJpB;AAKJ,0BAAoBV,IAAIW,QALpB;AAMJ,0BAAoBX,IAAIY;AANpB;AADoB,GAA5B;AAUD,CArBD;;AAuBA,IAAMC,4BAA4B,UAACC,QAAD,EAAWC,oBAAX,EAAoC;AACpE,MAAID,aAAaC,oBAAjB,EAAuC;AACrC,UAAM,IAAIxC,OAAO+B,KAAX,CACJ,4CADI,EAEJ,6BAFI,CAAN;AAID;AACF,CAPD,C,CASA;AAEA;;;AACO,IAAMtC,SAAS,IAAIU,eAAJ,CAAoB;AACxCsC,QAAM,WADkC;AAGxCC,UAAQ,CAACnC,UAAD,CAHgC;AAKxCoC,UALwC,kBAKtB;AAAA,QAAPlB,GAAO,QAAPA,GAAO;AAChBrB,UAAMqB,GAAN,EAAWf,sBAAX;AACD,GAPuC;AASxCkC,KATwC,mBAS3B;AAAA,QAAPnB,GAAO,SAAPA,GAAO;AAAA,QAETQ,QAFS,GAYPR,GAZO,CAETQ,QAFS;AAAA,QAGTH,eAHS,GAYPL,GAZO,CAGTK,eAHS;AAAA,QAITI,MAJS,GAYPT,GAZO,CAITS,MAJS;AAAA,QAKTE,QALS,GAYPX,GAZO,CAKTW,QALS;AAAA,QAMTD,QANS,GAYPV,GAZO,CAMTU,QANS;AAAA,QAOTE,KAPS,GAYPZ,GAZO,CAOTY,KAPS;AAAA,QAQTQ,IARS,GAYPpB,GAZO,CAQToB,IARS;AAAA,QAST9B,UATS,GAYPU,GAZO,CASTV,UATS;AAAA,QAUTwB,QAVS,GAYPd,GAZO,CAUTc,QAVS;AAAA,QAWTC,oBAXS,GAYPf,GAZO,CAWTe,oBAXS;AAcXF,8BAA0BC,QAA1B,EAAoCC,oBAApC,EAdW,CAgBX;;AACA,QAAMxB,SAASX,SAASyC,UAAT,CAAoB;AACjCT,kBADiC;AAEjC5C,cAAQ,IAFyB;AAGjCsD,eAAS;AAAEF;AAAF;AAHwB,KAApB,CAAf,CAjBW,CAuBX;;AACAxC,aAAS2C,WAAT,CAAqBhC,MAArB,EAA6BuB,QAA7B,EAxBW,CA0BX;;AACAf,0BAAsBR,MAAtB,EAA8B;AAC5Bc,sCAD4B;AAE5BG,wBAF4B;AAG5BC,oBAH4B;AAI5BC,wBAJ4B;AAK5BC,wBAL4B;AAM5BC;AAN4B,KAA9B,EA3BW,CAoCX;;AACAvB,uBAAmBC,UAAnB,EAA+BC,MAA/B,EArCW,CAuCX;;AACAV,cAAU;AACR2C,UAAIZ,KADI;AAERa,eAAS,iBAFD;AAGRC,gBAAU;AACRV,cAAM,YADE;AAERW,cAAM;AACJnB,4BADI;AAEJM;AAFI;AAFE;AAHF,KAAV;AAWD;AA5DuC,CAApB,CAAf;AAgEA,IAAM7C,OAAO,IAAIS,eAAJ,CAAoB;AACtCsC,QAAM,YADgC;AAGtCC,UAAQ,CAACnC,UAAD,CAH8B;AAKtCoC,UALsC,mBAKhB;AAAA,QAAXU,EAAW,SAAXA,EAAW;AAAA,QAAP5B,GAAO,SAAPA,GAAO;AACpBrB,UAAMiD,EAAN,EAAUC,MAAV,EADoB,CAGpB;;AACAlD,UAAMqB,GAAN,EAAWd,sBAAX;AACD,GAVqC;AAYtCiC,KAZsC,mBAYrB;AAAA,QAAXS,EAAW,SAAXA,EAAW;AAAA,QAAP5B,GAAO,SAAPA,GAAO;AAAA,QAEbK,eAFa,GAYXL,GAZW,CAEbK,eAFa;AAAA,QAGbM,QAHa,GAYXX,GAZW,CAGbW,QAHa;AAAA,QAIbH,QAJa,GAYXR,GAZW,CAIbQ,QAJa;AAAA,QAKbC,MALa,GAYXT,GAZW,CAKbS,MALa;AAAA,QAMbC,QANa,GAYXV,GAZW,CAMbU,QANa;AAAA,QAObE,KAPa,GAYXZ,GAZW,CAObY,KAPa;AAAA,QAQbQ,IARa,GAYXpB,GAZW,CAQboB,IARa;AAAA,QASb9B,UATa,GAYXU,GAZW,CASbV,UATa;AAAA,QAUbwB,QAVa,GAYXd,GAZW,CAUbc,QAVa;AAAA,QAWbC,oBAXa,GAYXf,GAZW,CAWbe,oBAXa,EAcf;;AACA1B,uBAAmBC,UAAnB,EAA+BsC,EAA/B;AAEA,QAAM3B,OAAO1B,OAAO2B,KAAP,CAAaC,OAAb,CAAqByB,EAArB,CAAb,CAjBe,CAmBf;;AACA,QAAI5B,IAAIc,QAAR,EAAkB;AAChBD,gCAA0BC,QAA1B,EAAoCC,oBAApC,EADgB,CAGhB;;AACAnC,eAAS2C,WAAT,CAAqBK,EAArB,EAAyBd,QAAzB;AACD,KAzBc,CA2Bf;;;AACA,QAAI,CAACb,KAAK6B,OAAV,EAAmB;AACjB/B,4BAAsB6B,EAAtB,EAA0B;AACxBpB,0BADwB;AAExBH,wCAFwB;AAGxBI,sBAHwB;AAIxBE,0BAJwB;AAKxBD,0BALwB;AAMxBE;AANwB,OAA1B,EADiB,CAUjB;;AACArC,aAAO2B,KAAP,CAAaV,MAAb,CAAoBoC,EAApB,EAAwB;AAAErB,cAAM;AAAE,0BAAgBa;AAAlB;AAAR,OAAxB;AACD;AACF;AArDqC,CAApB,CAAb;AAyDA,IAAMlD,cAAc,IAAIQ,eAAJ,CAAoB;AAC7CsC,QAAM,mBADuC;AAE7CC,UAAQ,CAACnC,UAAD,CAFqC;AAG7CoC,YAAU/B,cAAc4C,SAAd,EAHmC;AAK7CZ,KAL6C,YAKzCnB,GALyC,EAKpC;AACP;AACA,QAAMgC,SAASpD,SAASqD,cAAT,CAAwB1D,OAAO0B,IAAP,EAAxB,EAAuCD,IAAIkC,eAA3C,CAAf;;AAEA,QAAIF,OAAOG,KAAX,EAAkB;AAChB,YAAM,IAAI5D,OAAO+B,KAAX,CAAiB,mCAAjB,EAAsD0B,OAAOG,KAAP,CAAaC,MAAnE,CAAN;AACD;;AAED,WAAOrC,sBAAsB,KAAKR,MAA3B,EAAmCS,GAAnC,CAAP;AACD;AAd4C,CAApB,CAApB;AAkBA,IAAM7B,SAAS,IAAIO,eAAJ,CAAoB;AACxCsC,QAAM,cADkC;AAExCC,UAAQ,CAACnC,UAAD,CAFgC;AAIxCoC,UAJwC,YAI/B3B,MAJ+B,EAIvB;AACfZ,UAAMY,MAAN,EAAcsC,MAAd;AACD,GANuC;AAQxCV,KARwC,YAQpC5B,MARoC,EAQ5B;AACV,QAAMU,OAAO1B,OAAO2B,KAAP,CAAaC,OAAb,CAAqBZ,MAArB,CAAb,CADU,CAGV;;AACA,QAAIU,KAAK6B,OAAT,EAAkB;AAChB,YAAM,IAAIvD,OAAO+B,KAAX,CAAiB,gCAAjB,EAAmD,8BAAnD,CAAN;AACD,KANS,CAQV;;;AACA,QAAIvB,SAASsD,IAAT,CAAc;AAAE9C;AAAF,KAAd,EAA0B+C,KAA1B,KAAoC,CAAxC,EAA2C;AACzC,YAAM,IAAI/D,OAAO+B,KAAX,CACJ,gCADI,EAEJ,+DAFI,CAAN;AAID;;AAED,QAAIvB,SAASsD,IAAT,CAAc;AAAE5C,iBAAW;AAAEC,aAAK,CAACH,MAAD;AAAP;AAAb,KAAd,EAAgD+C,KAAhD,KAA0D,CAA9D,EAAiE;AAC/D,YAAM,IAAI/D,OAAO+B,KAAX,CACJ,gCADI,EAEJ,+DAFI,CAAN;AAID,KArBS,CAuBV;;;AACA/B,WAAO2B,KAAP,CAAa/B,MAAb,CAAoB;AAAE0B,WAAKN;AAAP,KAApB;AACD;AAjCuC,CAApB,CAAf;AAoCA,IAAMnB,uBAAuB,IAAIM,eAAJ,CAAoB;AACtDsC,QAAM,4BADgD;AAEtDC,UAAQ,CAACnC,UAAD,CAF8C;AAGtDoC,YAAU9B,sBAAsB2C,SAAtB,EAH4C;AAKtDZ,KALsD,mBAKlC;AAAA,QAAdoB,UAAc,SAAdA,UAAc;AAClBhE,WAAO2B,KAAP,CAAaV,MAAb,CAAoB,KAAKD,MAAzB,EAAiC;AAAEgB,YAAM;AAAEiC,yBAAiBD;AAAnB;AAAR,KAAjC;AACD;AAPqD,CAApB,CAA7B;AAWA,IAAMlE,+BAA+B,IAAIK,eAAJ,CAAoB;AAC9DsC,QAAM,oCADwD;AAE9DC,UAAQ,CAACnC,UAAD,CAFsD;AAI9DoC,UAJ8D,mBAItC;AAAA,QAAbuB,SAAa,SAAbA,SAAa;AACtB9D,UAAM8D,SAAN,EAAiBC,OAAjB;AACD,GAN6D;AAQ9DvB,KAR8D,mBAQ3C;AAAA,QAAbsB,SAAa,SAAbA,SAAa;AACjBlE,WAAO2B,KAAP,CAAaV,MAAb,CAAoB,KAAKD,MAAzB,EAAiC;AAC/BgB,YAAM;AAAE,0CAAkCkC;AAApC;AADyB,KAAjC;AAGD;AAZ6D,CAApB,CAArC;AAmBA,IAAMnE,uBAAuB,IAAII,eAAJ,CAAoB;AACtDsC,QAAM,4BADgD;AAEtDC,UAAQ,CAACnC,UAAD,CAF8C;AAItDoC,UAJsD,mBAIjC;AAAA,QAAVyB,MAAU,SAAVA,MAAU;AACnBhE,UAAMgE,MAAN,EAAcC,KAAd,EADmB,CAGnB;;AACA,QAAMC,eAAe7D,UAAU8D,eAAV,EAArB;AACAH,WAAOI,OAAP,CAAe,iBAAa;AAAA,UAAVC,GAAU,SAAVA,GAAU;AAC1B,UAAMC,iBAAiBJ,aAAaR,IAAb,CAAkB;AAAA,eAAKa,EAAEF,GAAF,KAAUA,GAAf;AAAA,OAAlB,CAAvB;;AACA,UAAI,CAACC,cAAL,EAAqB;AACnB,cAAM,IAAI1E,OAAO+B,KAAX,CACJ,kCADI,EAEJ,mCAFI,CAAN;AAID;AACF,KARD;AASD,GAlBqD;AAoBtDa,KApBsD,oBAoBtC;AAAA,QAAVwB,MAAU,UAAVA,MAAU;AACdpE,WAAO2B,KAAP,CAAaV,MAAb,CAAoB,KAAKD,MAAzB,EAAiC;AAC/BgB,YAAM;AAAE,kCAA0BoC;AAA5B;AADyB,KAAjC;AAGD;AAxBqD,CAApB,CAA7B","file":"/imports/api/users/server/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { check } from 'meteor/check';\nimport { Accounts } from 'meteor/accounts-base';\nimport { sendEmail } from '/imports/api/server/utils';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Channels } from '/imports/api/channels/channels';\nimport { Customers } from '/imports/api/customers/customers';\nimport {\n  CreateInvitationSchema,\n  UpdateInvitationSchema,\n  ProfileSchema,\n  EmailSignaturesSchema,\n} from '../schemas';\n\n// ***************** helpers ******************* //\n\n// update user's channels\nconst updateUserChannels = (channelIds, userId) => {\n  // remove from previous channels\n  Channels.update(\n    { memberIds: { $in: [userId] } },\n    { $pull: { memberIds: userId } },\n    { multi: true },\n  );\n\n  // add to given channels\n  Channels.update({ _id: { $in: channelIds } }, { $push: { memberIds: userId } }, { multi: true });\n};\n\n// update user's common infos\nconst updateUserCommonInfos = (userId, doc) => {\n  const user = Meteor.users.findOne({\n    _id: { $ne: userId },\n    'details.twitterUsername': doc.twitterUsername,\n  });\n\n  // check twitterUsername duplication\n  if (doc.twitterUsername && user) {\n    throw new Meteor.Error('users.updateInfo.wrongTwitterUsername', 'Duplicated twitter username');\n  }\n\n  Meteor.users.update(userId, {\n    $set: {\n      username: doc.username,\n      'details.twitterUsername': doc.twitterUsername,\n      'details.avatar': doc.avatar,\n      'details.fullName': doc.fullName,\n      'details.position': doc.position,\n      'emails.0.address': doc.email,\n    },\n  });\n};\n\nconst checkPasswordConfirmation = (password, passwordConfirmation) => {\n  if (password !== passwordConfirmation) {\n    throw new Meteor.Error(\n      'users.updateInfo.WrongPasswordConfirmation',\n      'Wrong password confirmation',\n    );\n  }\n};\n\n// ***************** methods ******************* //\n\n// create user and invite to given channels\nexport const invite = new ValidatedMethod({\n  name: 'users.add',\n\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, CreateInvitationSchema);\n  },\n\n  run({ doc }) {\n    const {\n      username,\n      twitterUsername,\n      avatar,\n      position,\n      fullName,\n      email,\n      role,\n      channelIds,\n      password,\n      passwordConfirmation,\n    } = doc;\n\n    checkPasswordConfirmation(password, passwordConfirmation);\n\n    // create user with given email and role\n    const userId = Accounts.createUser({\n      email,\n      invite: true,\n      details: { role },\n    });\n\n    // set new password\n    Accounts.setPassword(userId, password);\n\n    // set profile infos\n    updateUserCommonInfos(userId, {\n      twitterUsername,\n      username,\n      avatar,\n      fullName,\n      position,\n      email,\n    });\n\n    // add new user to channels\n    updateUserChannels(channelIds, userId);\n\n    // send email\n    sendEmail({\n      to: email,\n      subject: 'Invitation info',\n      template: {\n        name: 'invitation',\n        data: {\n          username,\n          password,\n        },\n      },\n    });\n  },\n});\n\n// update invitation info\nexport const edit = new ValidatedMethod({\n  name: 'users.edit',\n\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n\n    // check doc\n    check(doc, UpdateInvitationSchema);\n  },\n\n  run({ id, doc }) {\n    const {\n      twitterUsername,\n      position,\n      username,\n      avatar,\n      fullName,\n      email,\n      role,\n      channelIds,\n      password,\n      passwordConfirmation,\n    } = doc;\n\n    // update user channels channels\n    updateUserChannels(channelIds, id);\n\n    const user = Meteor.users.findOne(id);\n\n    // change password\n    if (doc.password) {\n      checkPasswordConfirmation(password, passwordConfirmation);\n\n      // set new password\n      Accounts.setPassword(id, password);\n    }\n\n    // if user is not owner then update profile infos\n    if (!user.isOwner) {\n      updateUserCommonInfos(id, {\n        username,\n        twitterUsername,\n        avatar,\n        position,\n        fullName,\n        email,\n      });\n\n      // update role\n      Meteor.users.update(id, { $set: { 'details.role': role } });\n    }\n  },\n});\n\n// edit profile\nexport const editProfile = new ValidatedMethod({\n  name: 'users.editProfile',\n  mixins: [ErxesMixin],\n  validate: ProfileSchema.validator(),\n\n  run(doc) {\n    // check password\n    const result = Accounts._checkPassword(Meteor.user(), doc.currentPassword);\n\n    if (result.error) {\n      throw new Meteor.Error('users.editProfile.invalidPassword', result.error.reason);\n    }\n\n    return updateUserCommonInfos(this.userId, doc);\n  },\n});\n\n// remove user\nexport const remove = new ValidatedMethod({\n  name: 'users.remove',\n  mixins: [ErxesMixin],\n\n  validate(userId) {\n    check(userId, String);\n  },\n\n  run(userId) {\n    const user = Meteor.users.findOne(userId);\n\n    // can not delete owner\n    if (user.isOwner) {\n      throw new Meteor.Error('users.remove.canNotDeleteOwner', 'You cannot delete the owner.');\n    }\n\n    // if the user involved in any channel then can not delete this user\n    if (Channels.find({ userId }).count() > 0) {\n      throw new Meteor.Error(\n        'users.remove.involvedInChannel',\n        'You cannot delete this user. This user belongs other channel.',\n      );\n    }\n\n    if (Channels.find({ memberIds: { $in: [userId] } }).count() > 0) {\n      throw new Meteor.Error(\n        'users.remove.involvedInChannel',\n        'You cannot delete this user. This user belongs other channel.',\n      );\n    }\n\n    // if there is no problem then delete it\n    Meteor.users.remove({ _id: userId });\n  },\n});\n\nexport const configEmailSignature = new ValidatedMethod({\n  name: 'users.configEmailSignature',\n  mixins: [ErxesMixin],\n  validate: EmailSignaturesSchema.validator(),\n\n  run({ signatures }) {\n    Meteor.users.update(this.userId, { $set: { emailSignatures: signatures } });\n  },\n});\n\n// get notification by email config\nexport const configGetNotificationByEmail = new ValidatedMethod({\n  name: 'users.configGetNotificationByEmail',\n  mixins: [ErxesMixin],\n\n  validate({ isAllowed }) {\n    check(isAllowed, Boolean);\n  },\n\n  run({ isAllowed }) {\n    Meteor.users.update(this.userId, {\n      $set: { 'details.getNotificationByEmail': isAllowed },\n    });\n  },\n});\n\n/**\n * Saves column selection config of customers list table\n * to the user's object\n */\nexport const configCustomerFields = new ValidatedMethod({\n  name: 'users.configCustomerFields',\n  mixins: [ErxesMixin],\n\n  validate({ fields }) {\n    check(fields, Array);\n\n    // Check if the fields are correctly named\n    const schemaFields = Customers.getPublicFields();\n    fields.forEach(({ key }) => {\n      const isCorrectField = schemaFields.find(f => f.key === key);\n      if (!isCorrectField) {\n        throw new Meteor.Error(\n          'users.configs.wrongCsutomerField',\n          'Wrong customer field declaration.',\n        );\n      }\n    });\n  },\n\n  run({ fields }) {\n    Meteor.users.update(this.userId, {\n      $set: { 'configs.customerFields': fields },\n    });\n  },\n});\n"]},"hash":"790dff6029d01f5d758b315723f16f4132bfff6d"}
