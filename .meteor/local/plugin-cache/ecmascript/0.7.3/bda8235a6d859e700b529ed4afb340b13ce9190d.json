{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"draft-js","imported":["default","EditorState","ContentState","RichUtils"],"specifiers":[{"kind":"named","imported":"default","local":"Draft"},{"kind":"named","imported":"EditorState","local":"EditorState"},{"kind":"named","imported":"ContentState","local":"ContentState"},{"kind":"named","imported":"RichUtils","local":"RichUtils"}]},{"source":"draft-js-plugins-editor","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Editor"}]},{"source":"draft-js-export-html","imported":["stateToHTML"],"specifiers":[{"kind":"named","imported":"stateToHTML","local":"stateToHTML"}]}],"exports":{"exported":["ErxesEditor","toHTML","createStateFromHTML","clearContent"],"specifiers":[{"kind":"local","local":"ErxesEditor","exported":"ErxesEditor"},{"kind":"local","local":"toHTML","exported":"toHTML"},{"kind":"local","local":"createStateFromHTML","exported":"createStateFromHTML"},{"kind":"local","local":"clearContent","exported":"clearContent"}]}}},"options":{"filename":"/imports/react-ui/common/Editor.js","filenameRelative":"/imports/react-ui/common/Editor.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/common/Editor.js.map","sourceFileName":"/imports/react-ui/common/Editor.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Editor"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  ErxesEditor: function () {\n    return ErxesEditor;\n  },\n  toHTML: function () {\n    return toHTML;\n  },\n  createStateFromHTML: function () {\n    return createStateFromHTML;\n  },\n  clearContent: function () {\n    return clearContent;\n  }\n});\nvar React = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar Draft = void 0,\n    EditorState = void 0,\n    ContentState = void 0,\n    RichUtils = void 0;\nmodule.importSync(\"draft-js\", {\n  \"default\": function (v) {\n    Draft = v;\n  },\n  EditorState: function (v) {\n    EditorState = v;\n  },\n  ContentState: function (v) {\n    ContentState = v;\n  },\n  RichUtils: function (v) {\n    RichUtils = v;\n  }\n}, 2);\nvar Editor = void 0;\nmodule.importSync(\"draft-js-plugins-editor\", {\n  \"default\": function (v) {\n    Editor = v;\n  }\n}, 3);\nvar stateToHTML = void 0;\nmodule.importSync(\"draft-js-export-html\", {\n  stateToHTML: function (v) {\n    stateToHTML = v;\n  }\n}, 4);\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n} // Custom overrides for \"code\" style.\n\n\nvar styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nvar StyleButton = function (_Component) {\n  (0, _inherits3.default)(StyleButton, _Component);\n\n  function StyleButton(props) {\n    (0, _classCallCheck3.default)(this, StyleButton);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    var style = props.style,\n        onToggle = props.onToggle;\n\n    _this.onToggle = function (e) {\n      e.preventDefault();\n      onToggle(style);\n    };\n\n    return _this;\n  }\n\n  StyleButton.prototype.render = function () {\n    function render() {\n      var _props = this.props,\n          active = _props.active,\n          label = _props.label,\n          title = _props.title;\n      var className = 'RichEditor-styleButton';\n\n      if (active) {\n        className += ' RichEditor-activeButton';\n      }\n\n      return React.createElement(\n        \"span\",\n        {\n          className: className,\n          title: title,\n          onMouseDown: this.onToggle\n        },\n        label\n      );\n    }\n\n    return render;\n  }();\n\n  return StyleButton;\n}(Component);\n\nStyleButton.propTypes = {\n  active: PropTypes.bool,\n  label: PropTypes.object,\n  style: PropTypes.string,\n  title: PropTypes.string,\n  onToggle: PropTypes.func\n};\nvar BLOCK_TYPES = [{\n  label: React.createElement(\n    \"b\",\n    null,\n    \"H\"\n  ),\n  style: 'header-three',\n  title: 'Heading'\n}, {\n  label: React.createElement(\"i\", {\n    className: \"ion-quote\"\n  }),\n  style: 'blockquote',\n  title: 'Blockquote'\n}, {\n  label: React.createElement(\"i\", {\n    className: \"ion-ios-circle-filled\"\n  }),\n  style: 'unordered-list-item',\n  title: 'Unordered list'\n}, {\n  label: React.createElement(\"i\", {\n    className: \"ion-pound\"\n  }),\n  style: 'ordered-list-item',\n  title: 'Ordered list'\n}, {\n  label: React.createElement(\"i\", {\n    className: \"ion-code\"\n  }),\n  style: 'code-block',\n  title: 'Code Block'\n}];\n\nvar BlockStyleControls = function (props) {\n  var editorState = props.editorState,\n      onToggle = props.onToggle;\n  var selection = editorState.getSelection();\n  var blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return React.createElement(\n    \"div\",\n    {\n      className: \"RichEditor-controls\"\n    },\n    BLOCK_TYPES.map(function (type) {\n      return React.createElement(StyleButton, {\n        key: type.title,\n        active: type.style === blockType,\n        label: type.label,\n        onToggle: onToggle,\n        style: type.style,\n        title: type.title\n      });\n    })\n  );\n};\n\nBlockStyleControls.propTypes = {\n  onToggle: PropTypes.func,\n  editorState: PropTypes.object\n};\nvar INLINE_STYLES = [{\n  label: React.createElement(\n    \"b\",\n    null,\n    \"B\"\n  ),\n  style: 'BOLD',\n  title: 'Bold'\n}, {\n  label: React.createElement(\n    \"i\",\n    null,\n    \"I\"\n  ),\n  style: 'ITALIC',\n  title: 'Italic'\n}, {\n  label: React.createElement(\n    \"u\",\n    null,\n    \"U\"\n  ),\n  style: 'UNDERLINE',\n  title: 'Underline'\n}];\n\nvar InlineStyleControls = function (_ref) {\n  var onToggle = _ref.onToggle,\n      editorState = _ref.editorState;\n  var currentStyle = editorState.getCurrentInlineStyle();\n  return React.createElement(\n    \"div\",\n    {\n      className: \"RichEditor-controls\"\n    },\n    INLINE_STYLES.map(function (type) {\n      return React.createElement(StyleButton, {\n        key: type.title,\n        active: currentStyle.has(type.style),\n        label: type.label,\n        onToggle: onToggle,\n        style: type.style,\n        title: type.title\n      });\n    })\n  );\n};\n\nInlineStyleControls.propTypes = {\n  onToggle: PropTypes.func,\n  editorState: PropTypes.object\n};\n\nvar ErxesEditor = function (_Component2) {\n  (0, _inherits3.default)(ErxesEditor, _Component2);\n\n  function ErxesEditor(props) {\n    (0, _classCallCheck3.default)(this, ErxesEditor);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Component2.call(this, props));\n\n    _this2.focus = function () {\n      return _this2.refs.editor.focus();\n    };\n\n    _this2.handleKeyCommand = _this2.handleKeyCommand.bind(_this2);\n    _this2.onTab = _this2.onTab.bind(_this2);\n    _this2.toggleBlockType = _this2.toggleBlockType.bind(_this2);\n    _this2.toggleInlineStyle = _this2.toggleInlineStyle.bind(_this2);\n    return _this2;\n  }\n\n  ErxesEditor.prototype.onTab = function () {\n    function onTab(e) {\n      var _props2 = this.props,\n          onChange = _props2.onChange,\n          editorState = _props2.editorState;\n      var maxDepth = 4;\n      onChange(RichUtils.onTab(e, editorState, maxDepth));\n    }\n\n    return onTab;\n  }();\n\n  ErxesEditor.prototype.handleKeyCommand = function () {\n    function handleKeyCommand(command) {\n      var _props3 = this.props,\n          onChange = _props3.onChange,\n          editorState = _props3.editorState;\n      var newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n\n    return handleKeyCommand;\n  }();\n\n  ErxesEditor.prototype.toggleBlockType = function () {\n    function toggleBlockType(blockType) {\n      var _props4 = this.props,\n          onChange = _props4.onChange,\n          editorState = _props4.editorState;\n      onChange(RichUtils.toggleBlockType(editorState, blockType));\n    }\n\n    return toggleBlockType;\n  }();\n\n  ErxesEditor.prototype.toggleInlineStyle = function () {\n    function toggleInlineStyle(inlineStyle) {\n      var _props5 = this.props,\n          onChange = _props5.onChange,\n          editorState = _props5.editorState;\n      onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n    }\n\n    return toggleInlineStyle;\n  }();\n\n  ErxesEditor.prototype.render = function () {\n    function render() {\n      var _props6 = this.props,\n          editorState = _props6.editorState,\n          controls = _props6.controls; // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n\n      var className = 'RichEditor-editor';\n      var contentState = editorState.getCurrentContent();\n\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n          className += ' RichEditor-hidePlaceholder';\n        }\n      }\n\n      return React.createElement(\n        \"div\",\n        {\n          className: \"RichEditor-root\"\n        },\n        React.createElement(\n          \"div\",\n          {\n            className: \"RichEditor-controls-root\"\n          },\n          React.createElement(BlockStyleControls, {\n            editorState: editorState,\n            onToggle: this.toggleBlockType\n          }),\n          React.createElement(InlineStyleControls, {\n            editorState: editorState,\n            onToggle: this.toggleInlineStyle\n          }),\n          controls ? controls : null\n        ),\n        React.createElement(\n          \"div\",\n          {\n            className: className,\n            onClick: this.focus\n          },\n          React.createElement(Editor, {\n            blockStyleFn: getBlockStyle,\n            customStyleMap: styleMap,\n            editorState: editorState,\n            handleKeyCommand: this.handleKeyCommand,\n            onTab: this.onTab,\n            onChange: this.props.onChange,\n            placeholder: this.props.placeholder,\n            keyBindingFn: this.props.keyBindingFn,\n            ref: \"editor\",\n            plugins: this.props.plugins,\n            spellCheck: true\n          })\n        ),\n        this.props.pluginContent\n      );\n    }\n\n    return render;\n  }();\n\n  return ErxesEditor;\n}(Component);\n\nErxesEditor.propTypes = {\n  editorState: PropTypes.object,\n  onChange: PropTypes.func,\n  // extra control rows\n  controls: PropTypes.array,\n  pluginContent: PropTypes.object,\n  plugins: PropTypes.array,\n  keyBindingFn: PropTypes.func,\n  placeholder: PropTypes.string\n};\n\nvar toHTML = function (state) {\n  return stateToHTML(state.getCurrentContent());\n};\n\nvar createStateFromHTML = function (editorState, html) {\n  var blocksFromHTML = Draft.convertFromHTML(html);\n  var content = ContentState.createFromBlockArray(blocksFromHTML);\n  return EditorState.push(editorState, content);\n};\n\nvar clearContent = function (editorState) {\n  return EditorState.push(editorState, ContentState.createFromText(''));\n};","map":{"version":3,"sources":["/imports/react-ui/common/Editor.js"],"names":["module","export","ErxesEditor","toHTML","createStateFromHTML","clearContent","React","Component","importSync","v","PropTypes","Draft","EditorState","ContentState","RichUtils","Editor","stateToHTML","getBlockStyle","block","getType","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","StyleButton","props","style","onToggle","e","preventDefault","render","active","label","title","className","propTypes","bool","object","string","func","BLOCK_TYPES","BlockStyleControls","editorState","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","map","type","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","focus","refs","editor","handleKeyCommand","bind","onTab","toggleBlockType","toggleInlineStyle","onChange","maxDepth","command","newState","inlineStyle","controls","contentState","hasText","getBlockMap","first","placeholder","keyBindingFn","plugins","pluginContent","array","state","html","blocksFromHTML","convertFromHTML","content","createFromBlockArray","push","createFromText"],"mappings":"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","file":"/imports/react-ui/common/Editor.js.map","sourcesContent":["/* eslint-disable no-underscore-dangle, react/no-string-refs,\n  jsx-a11y/no-static-element-interactions, react/no-multi-comp,\n  react/forbid-prop-types */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Draft, { EditorState, ContentState, RichUtils } from 'draft-js';\nimport Editor from 'draft-js-plugins-editor';\nimport { stateToHTML } from 'draft-js-export-html';\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n    default:\n      return null;\n  }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n};\n\nclass StyleButton extends Component {\n  constructor(props) {\n    super(props);\n\n    const { style, onToggle } = props;\n\n    this.onToggle = e => {\n      e.preventDefault();\n      onToggle(style);\n    };\n  }\n\n  render() {\n    const { active, label, title } = this.props;\n\n    let className = 'RichEditor-styleButton';\n\n    if (active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return (\n      <span className={className} title={title} onMouseDown={this.onToggle}>\n        {label}\n      </span>\n    );\n  }\n}\n\nStyleButton.propTypes = {\n  active: PropTypes.bool,\n  label: PropTypes.object,\n  style: PropTypes.string,\n  title: PropTypes.string,\n  onToggle: PropTypes.func,\n};\n\nconst BLOCK_TYPES = [\n  { label: <b>H</b>, style: 'header-three', title: 'Heading' },\n  {\n    label: <i className=\"ion-quote\" />,\n    style: 'blockquote',\n    title: 'Blockquote',\n  },\n  {\n    label: <i className=\"ion-ios-circle-filled\" />,\n    style: 'unordered-list-item',\n    title: 'Unordered list',\n  },\n  {\n    label: <i className=\"ion-pound\" />,\n    style: 'ordered-list-item',\n    title: 'Ordered list',\n  },\n  {\n    label: <i className=\"ion-code\" />,\n    style: 'code-block',\n    title: 'Code Block',\n  },\n];\n\nconst BlockStyleControls = props => {\n  const { editorState, onToggle } = props;\n\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {BLOCK_TYPES.map(type => (\n        <StyleButton\n          key={type.title}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n          title={type.title}\n        />\n      ))}\n    </div>\n  );\n};\n\nBlockStyleControls.propTypes = {\n  onToggle: PropTypes.func,\n  editorState: PropTypes.object,\n};\n\nconst INLINE_STYLES = [\n  { label: <b>B</b>, style: 'BOLD', title: 'Bold' },\n  { label: <i>I</i>, style: 'ITALIC', title: 'Italic' },\n  { label: <u>U</u>, style: 'UNDERLINE', title: 'Underline' },\n];\n\nconst InlineStyleControls = ({ onToggle, editorState }) => {\n  const currentStyle = editorState.getCurrentInlineStyle();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map(type => (\n        <StyleButton\n          key={type.title}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n          title={type.title}\n        />\n      ))}\n    </div>\n  );\n};\n\nInlineStyleControls.propTypes = {\n  onToggle: PropTypes.func,\n  editorState: PropTypes.object,\n};\n\nexport class ErxesEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.focus = () => this.refs.editor.focus();\n\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.onTab = this.onTab.bind(this);\n    this.toggleBlockType = this.toggleBlockType.bind(this);\n    this.toggleInlineStyle = this.toggleInlineStyle.bind(this);\n  }\n\n  onTab(e) {\n    const { onChange, editorState } = this.props;\n    const maxDepth = 4;\n\n    onChange(RichUtils.onTab(e, editorState, maxDepth));\n  }\n\n  handleKeyCommand(command) {\n    const { onChange, editorState } = this.props;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      onChange(newState);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  toggleBlockType(blockType) {\n    const { onChange, editorState } = this.props;\n\n    onChange(RichUtils.toggleBlockType(editorState, blockType));\n  }\n\n  toggleInlineStyle(inlineStyle) {\n    const { onChange, editorState } = this.props;\n\n    onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  }\n\n  render() {\n    const { editorState, controls } = this.props;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    const contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return (\n      <div className=\"RichEditor-root\">\n        <div className=\"RichEditor-controls-root\">\n          <BlockStyleControls editorState={editorState} onToggle={this.toggleBlockType} />\n\n          <InlineStyleControls editorState={editorState} onToggle={this.toggleInlineStyle} />\n\n          {controls ? controls : null}\n        </div>\n\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            customStyleMap={styleMap}\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onTab={this.onTab}\n            onChange={this.props.onChange}\n            placeholder={this.props.placeholder}\n            keyBindingFn={this.props.keyBindingFn}\n            ref=\"editor\"\n            plugins={this.props.plugins}\n            spellCheck\n          />\n        </div>\n        {this.props.pluginContent}\n      </div>\n    );\n  }\n}\n\nErxesEditor.propTypes = {\n  editorState: PropTypes.object,\n  onChange: PropTypes.func,\n  // extra control rows\n  controls: PropTypes.array,\n  pluginContent: PropTypes.object,\n  plugins: PropTypes.array,\n  keyBindingFn: PropTypes.func,\n  placeholder: PropTypes.string,\n};\n\nexport const toHTML = state => stateToHTML(state.getCurrentContent());\n\nexport const createStateFromHTML = (editorState, html) => {\n  const blocksFromHTML = Draft.convertFromHTML(html);\n  const content = ContentState.createFromBlockArray(blocksFromHTML);\n\n  return EditorState.push(editorState, content);\n};\n\nexport const clearContent = editorState =>\n  EditorState.push(editorState, ContentState.createFromText(''));\n"]},"hash":"bda8235a6d859e700b529ed4afb340b13ce9190d"}
