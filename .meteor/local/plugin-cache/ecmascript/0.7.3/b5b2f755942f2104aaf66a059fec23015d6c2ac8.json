{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"lodash","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]},{"source":"react-bootstrap","imported":["Button"],"specifiers":[{"kind":"named","imported":"Button","local":"Button"}]},{"source":"meteor/erxes-notifier","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/inbox/components/resolver/Resolver.js","filenameRelative":"/imports/react-ui/inbox/components/resolver/Resolver.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/inbox/components/resolver/Resolver.js.map","sourceFileName":"/imports/react-ui/inbox/components/resolver/Resolver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Resolver"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\n\nvar _ = void 0;\n\nmodule.importSync(\"lodash\", {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 2);\nvar Button = void 0;\nmodule.importSync(\"react-bootstrap\", {\n  Button: function (v) {\n    Button = v;\n  }\n}, 3);\nvar Alert = void 0;\nmodule.importSync(\"meteor/erxes-notifier\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 4);\nvar propTypes = {\n  conversations: PropTypes.array.isRequired,\n  single: PropTypes.bool,\n  resolveText: PropTypes.string,\n  openText: PropTypes.string,\n  bsStyle: PropTypes.string,\n  changeStatus: PropTypes.func.isRequired,\n  CONVERSATION_STATUSES: PropTypes.object.isRequired\n};\n\nvar Resolver = function (_Component) {\n  (0, _inherits3.default)(Resolver, _Component);\n\n  function Resolver(props) {\n    (0, _classCallCheck3.default)(this, Resolver);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.resolve = _this.resolve.bind(_this);\n    _this.open = _this.open.bind(_this);\n    _this.changeStatus = _this.changeStatus.bind(_this);\n    return _this;\n  }\n\n  Resolver.prototype.resolve = function () {\n    function resolve() {\n      this.changeStatus(this.props.CONVERSATION_STATUSES.CLOSED);\n    }\n\n    return resolve;\n  }();\n\n  Resolver.prototype.open = function () {\n    function open() {\n      this.changeStatus(this.props.CONVERSATION_STATUSES.OPEN);\n    }\n\n    return open;\n  }();\n\n  Resolver.prototype.changeStatus = function () {\n    function changeStatus(status) {\n      var args = {\n        conversationIds: _.map(this.props.conversations, '_id'),\n        status: status\n      };\n      this.props.changeStatus(args, function (error) {\n        if (error) {\n          Alert.error('Error', error.reason);\n        }\n\n        if (status === 'closed') {\n          Alert.success('The conversation has been resolved! ');\n        } else {\n          Alert.info('The conversation has been reopened and restored to Inbox.');\n        }\n      });\n    }\n\n    return changeStatus;\n  }();\n\n  Resolver.prototype.render = function () {\n    function render() {\n      var _props = this.props,\n          conversations = _props.conversations,\n          CONVERSATION_STATUSES = _props.CONVERSATION_STATUSES,\n          resolveText = _props.resolveText,\n          openText = _props.openText,\n          bsStyle = _props.bsStyle;\n      var style = bsStyle || 'link';\n\n      var allNotClosed = _.reduce(conversations, function (memo, conversation) {\n        return conversation.status !== CONVERSATION_STATUSES.CLOSED;\n      }, true);\n\n      return allNotClosed ? React.createElement(\n        Button,\n        {\n          className: \"action-btn\",\n          bsStyle: style,\n          onClick: this.resolve\n        },\n        React.createElement(\"i\", {\n          className: \"ion-checkmark-circled\"\n        }),\n        \" \",\n        resolveText ? resolveText : 'Resolve'\n      ) : React.createElement(\n        Button,\n        {\n          className: \"action-btn\",\n          bsStyle: style,\n          onClick: this.open\n        },\n        React.createElement(\"i\", {\n          className: \"ion-refresh\"\n        }),\n        \" \",\n        openText ? openText : 'Open'\n      );\n    }\n\n    return render;\n  }();\n\n  return Resolver;\n}(Component);\n\nResolver.propTypes = propTypes;\nmodule.export(\"default\", exports.default = Resolver);","map":{"version":3,"sources":["/imports/react-ui/inbox/components/resolver/Resolver.js"],"names":["React","Component","module","importSync","v","PropTypes","_","Button","Alert","propTypes","conversations","array","isRequired","single","bool","resolveText","string","openText","bsStyle","changeStatus","func","CONVERSATION_STATUSES","object","Resolver","props","resolve","bind","open","CLOSED","OPEN","status","args","conversationIds","map","error","reason","success","info","render","style","allNotClosed","reduce","memo","conversation","export","exports","default"],"mappings":"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","file":"/imports/react-ui/inbox/components/resolver/Resolver.js.map","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Button } from 'react-bootstrap';\nimport Alert from 'meteor/erxes-notifier';\n\nconst propTypes = {\n  conversations: PropTypes.array.isRequired,\n  single: PropTypes.bool,\n  resolveText: PropTypes.string,\n  openText: PropTypes.string,\n  bsStyle: PropTypes.string,\n  changeStatus: PropTypes.func.isRequired,\n  CONVERSATION_STATUSES: PropTypes.object.isRequired,\n};\n\nclass Resolver extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resolve = this.resolve.bind(this);\n    this.open = this.open.bind(this);\n    this.changeStatus = this.changeStatus.bind(this);\n  }\n\n  resolve() {\n    this.changeStatus(this.props.CONVERSATION_STATUSES.CLOSED);\n  }\n\n  open() {\n    this.changeStatus(this.props.CONVERSATION_STATUSES.OPEN);\n  }\n\n  changeStatus(status) {\n    const args = {\n      conversationIds: _.map(this.props.conversations, '_id'),\n      status,\n    };\n\n    this.props.changeStatus(args, error => {\n      if (error) {\n        Alert.error('Error', error.reason);\n      }\n\n      if (status === 'closed') {\n        Alert.success('The conversation has been resolved! ');\n      } else {\n        Alert.info('The conversation has been reopened and restored to Inbox.');\n      }\n    });\n  }\n\n  render() {\n    const { conversations, CONVERSATION_STATUSES, resolveText, openText, bsStyle } = this.props;\n    const style = bsStyle || 'link';\n    const allNotClosed = _.reduce(\n      conversations,\n      (memo, conversation) => conversation.status !== CONVERSATION_STATUSES.CLOSED,\n      true,\n    );\n\n    return allNotClosed\n      ? <Button className=\"action-btn\" bsStyle={style} onClick={this.resolve}>\n          <i className=\"ion-checkmark-circled\" /> {resolveText ? resolveText : 'Resolve'}\n        </Button>\n      : <Button className=\"action-btn\" bsStyle={style} onClick={this.open}>\n          <i className=\"ion-refresh\" /> {openText ? openText : 'Open'}\n        </Button>;\n  }\n}\n\nResolver.propTypes = propTypes;\n\nexport default Resolver;\n"]},"hash":"b5b2f755942f2104aaf66a059fec23015d6c2ac8"}
