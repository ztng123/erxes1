{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]},{"source":"react-bootstrap","imported":["Button"],"specifiers":[{"kind":"named","imported":"Button","local":"Button"}]},{"source":"/imports/react-ui/common","imported":["Pagination","TaggerPopover","EmptyState","ConversationsList","LoadingContent"],"specifiers":[{"kind":"named","imported":"Pagination","local":"Pagination"},{"kind":"named","imported":"TaggerPopover","local":"TaggerPopover"},{"kind":"named","imported":"EmptyState","local":"EmptyState"},{"kind":"named","imported":"ConversationsList","local":"ConversationsList"},{"kind":"named","imported":"LoadingContent","local":"LoadingContent"}]},{"source":"/imports/react-ui/layout/components","imported":["Wrapper"],"specifiers":[{"kind":"named","imported":"Wrapper","local":"Wrapper"}]},{"source":"../","imported":["AssignBoxPopover"],"specifiers":[{"kind":"named","imported":"AssignBoxPopover","local":"AssignBoxPopover"}]},{"source":"../../containers","imported":["Resolver","Sidebar"],"specifiers":[{"kind":"named","imported":"Resolver","local":"Resolver"},{"kind":"named","imported":"Sidebar","local":"Sidebar"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/react-ui/inbox/components/list/List.js","filenameRelative":"/imports/react-ui/inbox/components/list/List.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/react-ui/inbox/components/list/List.js.map","sourceFileName":"/imports/react-ui/inbox/components/list/List.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"List"},"ignored":false,"code":"var React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar Button = void 0;\nmodule.importSync(\"react-bootstrap\", {\n  Button: function (v) {\n    Button = v;\n  }\n}, 2);\nvar Pagination = void 0,\n    TaggerPopover = void 0,\n    EmptyState = void 0,\n    ConversationsList = void 0,\n    LoadingContent = void 0;\nmodule.importSync(\"/imports/react-ui/common\", {\n  Pagination: function (v) {\n    Pagination = v;\n  },\n  TaggerPopover: function (v) {\n    TaggerPopover = v;\n  },\n  EmptyState: function (v) {\n    EmptyState = v;\n  },\n  ConversationsList: function (v) {\n    ConversationsList = v;\n  },\n  LoadingContent: function (v) {\n    LoadingContent = v;\n  }\n}, 3);\nvar Wrapper = void 0;\nmodule.importSync(\"/imports/react-ui/layout/components\", {\n  Wrapper: function (v) {\n    Wrapper = v;\n  }\n}, 4);\nvar AssignBoxPopover = void 0;\nmodule.importSync(\"../\", {\n  AssignBoxPopover: function (v) {\n    AssignBoxPopover = v;\n  }\n}, 5);\nvar Resolver = void 0,\n    Sidebar = void 0;\nmodule.importSync(\"../../containers\", {\n  Resolver: function (v) {\n    Resolver = v;\n  },\n  Sidebar: function (v) {\n    Sidebar = v;\n  }\n}, 6);\nvar propTypes = {\n  readConversations: PropTypes.array.isRequired,\n  unreadConversations: PropTypes.array.isRequired,\n  loadMore: PropTypes.func.isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  channelId: PropTypes.string,\n  user: PropTypes.object,\n  bulk: PropTypes.array.isRequired,\n  toggleBulk: PropTypes.func.isRequired,\n  emptyBulk: PropTypes.func.isRequired,\n  conversationReady: PropTypes.bool,\n  refetch: PropTypes.func.isRequired\n};\n\nfunction List(props) {\n  var readConversations = props.readConversations,\n      unreadConversations = props.unreadConversations,\n      hasMore = props.hasMore,\n      loadMore = props.loadMore,\n      channelId = props.channelId,\n      user = props.user,\n      bulk = props.bulk,\n      toggleBulk = props.toggleBulk,\n      emptyBulk = props.emptyBulk,\n      conversationReady = props.conversationReady,\n      refetch = props.refetch; /**\n                                * There must be only conversation ids in the 'bulk'\n                                * because we can't update its content when conversations are reactively changed.\n                                *\n                                * TODO: Pass this targets array to the 'Resolver' component and\n                                * find conversations by those ids on component\n                                */\n  var targets = bulk.map(function (b) {\n    return b._id;\n  });\n  var actionBarLeft = React.createElement(\n    \"div\",\n    null,\n    React.createElement(Resolver, {\n      conversations: bulk\n    }),\n    React.createElement(TaggerPopover, {\n      type: \"conversation\",\n      targets: targets,\n      trigger: React.createElement(\n        Button,\n        {\n          bsStyle: \"link\"\n        },\n        React.createElement(\"i\", {\n          className: \"ion-pricetags\"\n        }),\n        \" Tag \",\n        React.createElement(\"span\", {\n          className: \"caret\"\n        })\n      ),\n      afterSave: function () {\n        emptyBulk();\n        refetch();\n      }\n    }),\n    React.createElement(AssignBoxPopover, {\n      targets: targets,\n      trigger: React.createElement(\n        Button,\n        {\n          bsStyle: \"link\"\n        },\n        React.createElement(\"i\", {\n          className: \"ion-person\"\n        }),\n        \" Assign \",\n        React.createElement(\"span\", {\n          className: \"caret\"\n        })\n      )\n    })\n  );\n  var actionBar = React.createElement(Wrapper.ActionBar, {\n    left: actionBarLeft\n  });\n  var renderUnreadConversations = React.createElement(ConversationsList, {\n    conversations: unreadConversations,\n    user: user,\n    channelId: channelId,\n    toggleBulk: toggleBulk\n  });\n  var renderReadConversations = React.createElement(ConversationsList, {\n    conversations: readConversations,\n    user: user,\n    channelId: channelId,\n    toggleBulk: toggleBulk\n  });\n  var content = React.createElement(\n    Pagination,\n    {\n      hasMore: hasMore,\n      loadMore: loadMore\n    },\n    renderUnreadConversations,\n    renderReadConversations\n  );\n  var empty = React.createElement(EmptyState, {\n    text: \"There aren\\u2019t any conversations at the moment.\",\n    size: \"full\",\n    icon: React.createElement(\"i\", {\n      className: \"ion-email\"\n    })\n  });\n\n  var mainContent = function () {\n    if (unreadConversations.length === 0 && readConversations.length === 0 && !conversationReady) {\n      return empty;\n    } else if (conversationReady) {\n      return React.createElement(LoadingContent, {\n        items: 6\n      });\n    }\n\n    return content;\n  };\n\n  return React.createElement(\n    \"div\",\n    null,\n    React.createElement(Wrapper, {\n      header: React.createElement(Wrapper.Header, {\n        breadcrumb: [{\n          title: 'Inbox'\n        }]\n      }),\n      leftSidebar: React.createElement(Sidebar, null),\n      actionBar: bulk.length ? actionBar : false,\n      content: mainContent()\n    })\n  );\n}\n\nList.propTypes = propTypes;\nmodule.export(\"default\", exports.default = List);","map":{"version":3,"sources":["/imports/react-ui/inbox/components/list/List.js"],"names":["React","module","importSync","v","PropTypes","Button","Pagination","TaggerPopover","EmptyState","ConversationsList","LoadingContent","Wrapper","AssignBoxPopover","Resolver","Sidebar","propTypes","readConversations","array","isRequired","unreadConversations","loadMore","func","hasMore","bool","channelId","string","user","object","bulk","toggleBulk","emptyBulk","conversationReady","refetch","List","props","targets","map","b","_id","actionBarLeft","actionBar","renderUnreadConversations","renderReadConversations","content","empty","mainContent","length","title","export","exports","default"],"mappings":"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","file":"/imports/react-ui/inbox/components/list/List.js.map","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport {\n  Pagination,\n  TaggerPopover,\n  EmptyState,\n  ConversationsList,\n  LoadingContent,\n} from '/imports/react-ui/common';\nimport { Wrapper } from '/imports/react-ui/layout/components';\nimport { AssignBoxPopover } from '../';\nimport { Resolver, Sidebar } from '../../containers';\n\nconst propTypes = {\n  readConversations: PropTypes.array.isRequired,\n  unreadConversations: PropTypes.array.isRequired,\n  loadMore: PropTypes.func.isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  channelId: PropTypes.string,\n  user: PropTypes.object,\n  bulk: PropTypes.array.isRequired,\n  toggleBulk: PropTypes.func.isRequired,\n  emptyBulk: PropTypes.func.isRequired,\n  conversationReady: PropTypes.bool,\n  refetch: PropTypes.func.isRequired,\n};\n\nfunction List(props) {\n  const {\n    readConversations,\n    unreadConversations,\n    hasMore,\n    loadMore,\n    channelId,\n    user,\n    bulk,\n    toggleBulk,\n    emptyBulk,\n    conversationReady,\n    refetch,\n  } = props;\n\n  /**\n   * There must be only conversation ids in the 'bulk'\n   * because we can't update its content when conversations are reactively changed.\n   *\n   * TODO: Pass this targets array to the 'Resolver' component and\n   * find conversations by those ids on component\n   */\n  const targets = bulk.map(b => b._id);\n\n  const actionBarLeft = (\n    <div>\n      <Resolver conversations={bulk} />\n\n      <TaggerPopover\n        type=\"conversation\"\n        targets={targets}\n        trigger={\n          <Button bsStyle=\"link\">\n            <i className=\"ion-pricetags\" /> Tag <span className=\"caret\" />\n          </Button>\n        }\n        afterSave={() => {\n          emptyBulk();\n          refetch();\n        }}\n      />\n\n      <AssignBoxPopover\n        targets={targets}\n        trigger={\n          <Button bsStyle=\"link\">\n            <i className=\"ion-person\" /> Assign <span className=\"caret\" />\n          </Button>\n        }\n      />\n    </div>\n  );\n\n  const actionBar = <Wrapper.ActionBar left={actionBarLeft} />;\n\n  const renderUnreadConversations = (\n    <ConversationsList\n      conversations={unreadConversations}\n      user={user}\n      channelId={channelId}\n      toggleBulk={toggleBulk}\n    />\n  );\n\n  const renderReadConversations = (\n    <ConversationsList\n      conversations={readConversations}\n      user={user}\n      channelId={channelId}\n      toggleBulk={toggleBulk}\n    />\n  );\n\n  const content = (\n    <Pagination hasMore={hasMore} loadMore={loadMore}>\n      {renderUnreadConversations}\n      {renderReadConversations}\n    </Pagination>\n  );\n\n  const empty = (\n    <EmptyState\n      text=\"There aren’t any conversations at the moment.\"\n      size=\"full\"\n      icon={<i className=\"ion-email\" />}\n    />\n  );\n\n  const mainContent = () => {\n    if (unreadConversations.length === 0 && readConversations.length === 0 && !conversationReady) {\n      return empty;\n    } else if (conversationReady) {\n      return <LoadingContent items={6} />;\n    }\n\n    return content;\n  };\n\n  return (\n    <div>\n      <Wrapper\n        header={<Wrapper.Header breadcrumb={[{ title: 'Inbox' }]} />}\n        leftSidebar={<Sidebar />}\n        actionBar={bulk.length ? actionBar : false}\n        content={mainContent()}\n      />\n    </div>\n  );\n}\n\nList.propTypes = propTypes;\n\nexport default List;\n"]},"hash":"990a0e3ea62987fdb5034925de8f872f360475ec"}
