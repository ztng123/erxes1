{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/mdg:validated-method","imported":["ValidatedMethod"],"specifiers":[{"kind":"named","imported":"ValidatedMethod","local":"ValidatedMethod"}]},{"source":"/imports/api/integrations/integrations","imported":["Integrations"],"specifiers":[{"kind":"named","imported":"Integrations","local":"Integrations"}]},{"source":"/imports/api/utils","imported":["ErxesMixin"],"specifiers":[{"kind":"named","imported":"ErxesMixin","local":"ErxesMixin"}]},{"source":"../forms","imported":["Forms","Fields"],"specifiers":[{"kind":"named","imported":"Forms","local":"Forms"},{"kind":"named","imported":"Fields","local":"Fields"}]}],"exports":{"exported":["add","edit","remove","addField","editField","removeField","updateFieldsOrder","duplicate"],"specifiers":[{"kind":"local","local":"add","exported":"add"},{"kind":"local","local":"edit","exported":"edit"},{"kind":"local","local":"remove","exported":"remove"},{"kind":"local","local":"addField","exported":"addField"},{"kind":"local","local":"editField","exported":"editField"},{"kind":"local","local":"removeField","exported":"removeField"},{"kind":"local","local":"updateFieldsOrder","exported":"updateFieldsOrder"},{"kind":"local","local":"duplicate","exported":"duplicate"}]}}},"options":{"filename":"/imports/api/forms/server/methods.js","filenameRelative":"/imports/api/forms/server/methods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/forms/server/methods.js.map","sourceFileName":"/imports/api/forms/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  add: function () {\n    return add;\n  },\n  edit: function () {\n    return edit;\n  },\n  remove: function () {\n    return remove;\n  },\n  addField: function () {\n    return addField;\n  },\n  editField: function () {\n    return editField;\n  },\n  removeField: function () {\n    return removeField;\n  },\n  updateFieldsOrder: function () {\n    return updateFieldsOrder;\n  },\n  duplicate: function () {\n    return duplicate;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 1);\n\nvar _ = void 0;\n\nmodule.importSync(\"meteor/underscore\", {\n  _: function (v) {\n    _ = v;\n  }\n}, 2);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 3);\nvar ValidatedMethod = void 0;\nmodule.importSync(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 4);\nvar Integrations = void 0;\nmodule.importSync(\"/imports/api/integrations/integrations\", {\n  Integrations: function (v) {\n    Integrations = v;\n  }\n}, 5);\nvar ErxesMixin = void 0;\nmodule.importSync(\"/imports/api/utils\", {\n  ErxesMixin: function (v) {\n    ErxesMixin = v;\n  }\n}, 6);\nvar Forms = void 0,\n    Fields = void 0;\nmodule.importSync(\"../forms\", {\n  Forms: function (v) {\n    Forms = v;\n  },\n  Fields: function (v) {\n    Fields = v;\n  }\n}, 7);\n\nvar generateCode = function () {\n  // generate code automatically\n  var code = Random.id().substr(0, 6);\n\n  while (Forms.findOne({\n    code: code\n  })) {\n    code = Random.id().substr(0, 6);\n  }\n\n  return code;\n};\n\nvar add = new ValidatedMethod({\n  name: 'forms.add',\n  mixins: [ErxesMixin],\n  validate: function (_ref) {\n    var doc = _ref.doc;\n    check(doc, Forms.schema);\n  },\n  run: function (_ref2) {\n    var doc = _ref2.doc;\n    doc.code = generateCode();\n    doc.createdUserId = this.userId;\n    doc.createdDate = new Date(); // create\n\n    return Forms.insert(doc);\n  }\n});\nvar edit = new ValidatedMethod({\n  name: 'forms.edit',\n  mixins: [ErxesMixin],\n  validate: function (_ref3) {\n    var id = _ref3.id,\n        doc = _ref3.doc;\n    check(id, String);\n    check(doc, Forms.schema);\n  },\n  run: function (_ref4) {\n    var id = _ref4.id,\n        doc = _ref4.doc;\n    return Forms.update(id, {\n      $set: doc\n    });\n  }\n});\nvar remove = new ValidatedMethod({\n  name: 'forms.remove',\n  mixins: [ErxesMixin],\n  validate: function (id) {\n    check(id, String);\n  },\n  run: function (id) {\n    // check whether has any field\n    if (Fields.find({\n      formId: id\n    }).count() > 0) {\n      throw new Meteor.Error('forms.cannotDelete.hasFields', 'You cannot delete this form. This form has some fields.');\n    } // check whether used in integration\n\n\n    if (Integrations.find({\n      formId: id\n    }).count() > 0) {\n      throw new Meteor.Error('forms.cannotDelete.usedInIntegration', 'You cannot delete this form. This form used in integration.');\n    }\n\n    return Forms.remove(id);\n  }\n});\nvar addField = new ValidatedMethod({\n  name: 'forms.addField',\n  mixins: [ErxesMixin],\n  validate: function (_ref5) {\n    var formId = _ref5.formId,\n        doc = _ref5.doc;\n    check(formId, String);\n    check(doc, Fields.schema);\n  },\n  run: function (_ref6) {\n    var formId = _ref6.formId,\n        doc = _ref6.doc;\n    // set form id\n    doc.formId = formId; // find last field by order\n\n    var lastField = Fields.findOne({}, {\n      fields: {\n        order: 1\n      },\n      sort: {\n        order: -1\n      }\n    }); // if there is no field then start with 0\n\n    var order = 0;\n\n    if (lastField) {\n      order = lastField.order + 1;\n    }\n\n    doc.order = order; // insert field\n\n    return Fields.insert(doc);\n  }\n});\nvar editField = new ValidatedMethod({\n  name: 'forms.editField',\n  mixins: [ErxesMixin],\n  validate: function (_ref7) {\n    var _id = _ref7._id,\n        doc = _ref7.doc;\n    check(_id, String);\n    check(doc, Fields.schema);\n  },\n  run: function (_ref8) {\n    var _id = _ref8._id,\n        doc = _ref8.doc;\n    // update field\n    return Fields.update({\n      _id: _id\n    }, {\n      $set: doc\n    });\n  }\n});\nvar removeField = new ValidatedMethod({\n  name: 'forms.removeField',\n  mixins: [ErxesMixin],\n  validate: function (_ref9) {\n    var _id = _ref9._id;\n    check(_id, String);\n  },\n  run: function (_ref10) {\n    var _id = _ref10._id;\n    Fields.remove(_id);\n  }\n});\nvar updateFieldsOrder = new ValidatedMethod({\n  name: 'forms.updateFieldsOrder',\n  mixins: [ErxesMixin],\n  validate: function (_ref11) {\n    var orderDics = _ref11.orderDics;\n    check(orderDics, Array);\n  },\n  run: function (_ref12) {\n    var orderDics = _ref12.orderDics;\n    // update each field's order\n    orderDics.forEach(function (_ref13) {\n      var _id = _ref13._id,\n          order = _ref13.order;\n      Fields.update({\n        _id: _id\n      }, {\n        $set: {\n          order: order\n        }\n      });\n    });\n  }\n});\nvar duplicate = new ValidatedMethod({\n  name: 'forms.duplicate',\n  mixins: [ErxesMixin],\n  validate: function (_ref14) {\n    var id = _ref14.id;\n    check(id, String);\n  },\n  run: function (_ref15) {\n    var id = _ref15.id;\n    var form = Forms.findOne(id);\n    form.title = form.title + \" duplicated\";\n    form.code = generateCode();\n    delete form._id; // duplicate form\n\n    var newFormId = Forms.insert(form); // duplicate fields\n\n    Fields.find({\n      formId: id\n    }).forEach(function (field) {\n      var fieldParams = _.omit(field, '_id');\n\n      fieldParams.formId = newFormId;\n      Fields.insert(fieldParams);\n    });\n  }\n});","map":{"version":3,"sources":["/imports/api/forms/server/methods.js"],"names":["module","export","add","edit","remove","addField","editField","removeField","updateFieldsOrder","duplicate","Meteor","importSync","v","Random","_","check","ValidatedMethod","Integrations","ErxesMixin","Forms","Fields","generateCode","code","id","substr","findOne","name","mixins","validate","doc","schema","run","createdUserId","userId","createdDate","Date","insert","String","update","$set","find","formId","count","Error","lastField","fields","order","sort","_id","orderDics","Array","forEach","form","title","newFormId","fieldParams","omit","field"],"mappings":"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","file":"/imports/api/forms/server/methods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\nimport { check } from 'meteor/check';\nimport { ValidatedMethod } from 'meteor/mdg:validated-method';\nimport { Integrations } from '/imports/api/integrations/integrations';\nimport { ErxesMixin } from '/imports/api/utils';\nimport { Forms, Fields } from '../forms';\n\nconst generateCode = () => {\n  // generate code automatically\n  let code = Random.id().substr(0, 6);\n\n  while (Forms.findOne({ code })) {\n    code = Random.id().substr(0, 6);\n  }\n\n  return code;\n};\n\nexport const add = new ValidatedMethod({\n  name: 'forms.add',\n  mixins: [ErxesMixin],\n\n  validate({ doc }) {\n    check(doc, Forms.schema);\n  },\n\n  run({ doc }) {\n    doc.code = generateCode();\n    doc.createdUserId = this.userId;\n    doc.createdDate = new Date();\n\n    // create\n    return Forms.insert(doc);\n  },\n});\n\n// form edit\nexport const edit = new ValidatedMethod({\n  name: 'forms.edit',\n  mixins: [ErxesMixin],\n\n  validate({ id, doc }) {\n    check(id, String);\n    check(doc, Forms.schema);\n  },\n\n  run({ id, doc }) {\n    return Forms.update(id, { $set: doc });\n  },\n});\n\n// form remove\nexport const remove = new ValidatedMethod({\n  name: 'forms.remove',\n  mixins: [ErxesMixin],\n\n  validate(id) {\n    check(id, String);\n  },\n\n  run(id) {\n    // check whether has any field\n    if (Fields.find({ formId: id }).count() > 0) {\n      throw new Meteor.Error(\n        'forms.cannotDelete.hasFields',\n        'You cannot delete this form. This form has some fields.',\n      );\n    }\n\n    // check whether used in integration\n    if (Integrations.find({ formId: id }).count() > 0) {\n      throw new Meteor.Error(\n        'forms.cannotDelete.usedInIntegration',\n        'You cannot delete this form. This form used in integration.',\n      );\n    }\n\n    return Forms.remove(id);\n  },\n});\n\n/* ----------------------- fields ----------------------- */\n\n// add field\nexport const addField = new ValidatedMethod({\n  name: 'forms.addField',\n  mixins: [ErxesMixin],\n\n  validate({ formId, doc }) {\n    check(formId, String);\n    check(doc, Fields.schema);\n  },\n\n  run({ formId, doc }) {\n    // set form id\n    doc.formId = formId;\n\n    // find last field by order\n    const lastField = Fields.findOne({}, { fields: { order: 1 }, sort: { order: -1 } });\n\n    // if there is no field then start with 0\n    let order = 0;\n\n    if (lastField) {\n      order = lastField.order + 1;\n    }\n\n    doc.order = order;\n\n    // insert field\n    return Fields.insert(doc);\n  },\n});\n\n// edit field\nexport const editField = new ValidatedMethod({\n  name: 'forms.editField',\n  mixins: [ErxesMixin],\n\n  validate({ _id, doc }) {\n    check(_id, String);\n    check(doc, Fields.schema);\n  },\n\n  run({ _id, doc }) {\n    // update field\n    return Fields.update({ _id }, { $set: doc });\n  },\n});\n\n// remove field\nexport const removeField = new ValidatedMethod({\n  name: 'forms.removeField',\n  mixins: [ErxesMixin],\n\n  validate({ _id }) {\n    check(_id, String);\n  },\n\n  run({ _id }) {\n    Fields.remove(_id);\n  },\n});\n\n// update field's orders\nexport const updateFieldsOrder = new ValidatedMethod({\n  name: 'forms.updateFieldsOrder',\n  mixins: [ErxesMixin],\n\n  validate({ orderDics }) {\n    check(orderDics, Array);\n  },\n\n  run({ orderDics }) {\n    // update each field's order\n    orderDics.forEach(({ _id, order }) => {\n      Fields.update({ _id }, { $set: { order } });\n    });\n  },\n});\n\n// duplicate form\nexport const duplicate = new ValidatedMethod({\n  name: 'forms.duplicate',\n  mixins: [ErxesMixin],\n\n  validate({ id }) {\n    check(id, String);\n  },\n\n  run({ id }) {\n    const form = Forms.findOne(id);\n\n    form.title = `${form.title} duplicated`;\n    form.code = generateCode();\n\n    delete form._id;\n\n    // duplicate form\n    const newFormId = Forms.insert(form);\n\n    // duplicate fields\n    Fields.find({ formId: id }).forEach(field => {\n      const fieldParams = _.omit(field, '_id');\n      fieldParams.formId = newFormId;\n\n      Fields.insert(fieldParams);\n    });\n  },\n});\n"]},"hash":"30e1e57b5e0b37965018c826fc9091192b4bcffb"}
